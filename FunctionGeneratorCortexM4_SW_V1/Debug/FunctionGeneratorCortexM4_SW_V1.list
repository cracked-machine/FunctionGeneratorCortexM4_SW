
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001543c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001460  08015620  08015620  00025620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a80  08016a80  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08016a80  08016a80  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016a80  08016a80  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a80  08016a80  00026a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a84  08016a84  00026a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08016a88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c00  20001e0c  08018894  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a0c  08018894  00032a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049e76  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007f39  00000000  00000000  0007bcb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000023f0  00000000  00000000  00083bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f80  00000000  00000000  00085fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c0c  00000000  00000000  00087f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003053e  00000000  00000000  000bdb6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126ec9  00000000  00000000  000ee0aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00214f73  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009e58  00000000  00000000  00214ff0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015604 	.word	0x08015604

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	08015604 	.word	0x08015604

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00f fd16 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00f fd09 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00f fcfe 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00f fcf3 	bl	8010740 <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08015620 	.word	0x08015620
 8000d64:	0801562c 	.word	0x0801562c
 8000d68:	08015630 	.word	0x08015630
 8000d6c:	08015634 	.word	0x08015634

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00f fd25 	bl	80107c2 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f010 f97b 	bl	8011074 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f00f ff5d 	bl	8010c40 <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00f fccc 	bl	8010740 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f008 fa34 	bl	8009218 <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fd56 	bl	8001860 <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08015638 	.word	0x08015638

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000dc6:	f004 fbc3 	bl	8005550 <ToplevelMenu_getStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000dd0:	f004 fbbe 	bl	8005550 <ToplevelMenu_getStatus>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d008      	beq.n	8000dec <DM_UpdateDisplay+0x2c>
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d00a      	beq.n	8000df4 <DM_UpdateDisplay+0x34>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000de2:	e083      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f003 f8cf 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000dea:	e07f      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f003 f8cb 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000df2:	e07b      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f003 f8c7 	bl	8003f88 <ToplevelMenu_DrawMenu>
				break;
 8000dfa:	e077      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dfc:	f004 fa0c 	bl	8005218 <FuncMenu_getStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000e06:	f004 fa07 	bl	8005218 <FuncMenu_getStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d008      	beq.n	8000e22 <DM_UpdateDisplay+0x62>
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d00a      	beq.n	8000e2a <DM_UpdateDisplay+0x6a>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d000      	beq.n	8000e1a <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_AUX_MENU);

				break;

			default:
				break;
 8000e18:	e068      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f002 fb06 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e20:	e064      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f002 fb02 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e28:	e060      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_AUX_MENU);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f002 fafe 	bl	800342c <FuncMenu_DrawMenu>
				break;
 8000e30:	e05c      	b.n	8000eec <DM_UpdateDisplay+0x12c>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000e32:	f004 fb0f 	bl	8005454 <GainMenu_getStatus>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d015      	beq.n	8000e68 <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000e3c:	f004 fb0a 	bl	8005454 <GainMenu_getStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d008      	beq.n	8000e58 <DM_UpdateDisplay+0x98>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d00a      	beq.n	8000e60 <DM_UpdateDisplay+0xa0>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e4e:	e04d      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f002 ffbf 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e56:	e049      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f002 ffbb 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e5e:	e045      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f002 ffb7 	bl	8003dd4 <GainMenu_DrawMenu>
				break;
 8000e66:	e041      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e68:	f004 f8da 	bl	8005020 <FreqMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <DM_UpdateDisplay+0x100>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e72:	f004 f8d5 	bl	8005020 <FreqMenu_getStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d835      	bhi.n	8000eea <DM_UpdateDisplay+0x12a>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <DM_UpdateDisplay+0xc4>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000ea9 	.word	0x08000ea9
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08000eb9 	.word	0x08000eb9
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fd45 	bl	8001928 <FreqMenu_DrawMenu>

				break;
 8000e9e:	e025      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fd41 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000ea6:	e021      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fd3d 	bl	8001928 <FreqMenu_DrawMenu>

				break;
 8000eae:	e01d      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fd39 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000eb6:	e019      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESCALER_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESCALER_MENU);
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f000 fd35 	bl	8001928 <FreqMenu_DrawMenu>
				break;
 8000ebe:	e015      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000ec0:	f003 fb4c 	bl	800455c <BiasMenu_getStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <DM_UpdateDisplay+0x112>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff04 	bl	8000cd8 <BiasMenu_DrawMenu>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000ed0:	e00c      	b.n	8000eec <DM_UpdateDisplay+0x12c>
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ed2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <DM_UpdateDisplay+0x134>)
 8000ee4:	f00f fc2c 	bl	8010740 <ILI9341_Draw_Text>
}
 8000ee8:	e000      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				break;
 8000eea:	bf00      	nop
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08015648 	.word	0x08015648

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0

	_DisplayOutputSignalHertz(140, 45);
 8000efc:	212d      	movs	r1, #45	; 0x2d
 8000efe:	208c      	movs	r0, #140	; 0x8c
 8000f00:	f000 f99e 	bl	8001240 <_DisplayOutputSignalHertz>
	_DisplayOutputSignalVpp(175, 70);
 8000f04:	2146      	movs	r1, #70	; 0x46
 8000f06:	20af      	movs	r0, #175	; 0xaf
 8000f08:	f000 f9ea 	bl	80012e0 <_DisplayOutputSignalVpp>
	_DisplayOutputSignalDecibels(138, 95);
 8000f0c:	215f      	movs	r1, #95	; 0x5f
 8000f0e:	208a      	movs	r0, #138	; 0x8a
 8000f10:	f000 fa44 	bl	800139c <_DisplayOutputSignalDecibels>
	_DisplayOutputSignalOffset(161, 120);
 8000f14:	2178      	movs	r1, #120	; 0x78
 8000f16:	20a1      	movs	r0, #161	; 0xa1
 8000f18:	f000 fab4 	bl	8001484 <_DisplayOutputSignalOffset>
	_DisplayOutputWaveformIcons(80, 160, 245, 160);
 8000f1c:	23a0      	movs	r3, #160	; 0xa0
 8000f1e:	22f5      	movs	r2, #245	; 0xf5
 8000f20:	21a0      	movs	r1, #160	; 0xa0
 8000f22:	2050      	movs	r0, #80	; 0x50
 8000f24:	f000 fb4e 	bl	80015c4 <_DisplayOutputWaveformIcons>

	DM_DisplayInputTriggerStatus();
 8000f28:	f000 f806 	bl	8000f38 <DM_DisplayInputTriggerStatus>
	DM_DisplayInputTriggerTimerHertz(200, 17);
 8000f2c:	2111      	movs	r1, #17
 8000f2e:	20c8      	movs	r0, #200	; 0xc8
 8000f30:	f000 f888 	bl	8001044 <DM_DisplayInputTriggerTimerHertz>

}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <DM_DisplayInputTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerStatus()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af02      	add	r7, sp, #8

	uint16_t text_x_pos = 240;
 8000f3e:	23f0      	movs	r3, #240	; 0xf0
 8000f40:	80fb      	strh	r3, [r7, #6]
	uint16_t text_y_pos = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 8000f46:	f005 fbf5 	bl	8006734 <IT_GetActiveTriggerMode>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d027      	beq.n	8000fa0 <DM_DisplayInputTriggerStatus+0x68>
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d048      	beq.n	8000fe6 <DM_DisplayInputTriggerStatus+0xae>
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d000      	beq.n	8000f5a <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 8000f58:	e068      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000f5a:	f005 fc07 	bl	800676c <IT_GetTriggerStatus>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00e      	beq.n	8000f82 <DM_DisplayInputTriggerStatus+0x4a>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000f64:	4b33      	ldr	r3, [pc, #204]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	88b8      	ldrh	r0, [r7, #4]
 8000f6c:	88f9      	ldrh	r1, [r7, #6]
 8000f6e:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000f72:	9201      	str	r2, [sp, #4]
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2300      	movs	r3, #0
 8000f78:	4602      	mov	r2, r0
 8000f7a:	482f      	ldr	r0, [pc, #188]	; (8001038 <DM_DisplayInputTriggerStatus+0x100>)
 8000f7c:	f00f fbe0 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8000f80:	e054      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:TIM ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	88b8      	ldrh	r0, [r7, #4]
 8000f8a:	88f9      	ldrh	r1, [r7, #6]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	9201      	str	r2, [sp, #4]
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000f96:	4602      	mov	r2, r0
 8000f98:	4827      	ldr	r0, [pc, #156]	; (8001038 <DM_DisplayInputTriggerStatus+0x100>)
 8000f9a:	f00f fbd1 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8000f9e:	e045      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000fa0:	f005 fbe4 	bl	800676c <IT_GetTriggerStatus>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d00e      	beq.n	8000fc8 <DM_DisplayInputTriggerStatus+0x90>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000faa:	4b22      	ldr	r3, [pc, #136]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	88b8      	ldrh	r0, [r7, #4]
 8000fb2:	88f9      	ldrh	r1, [r7, #6]
 8000fb4:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000fb8:	9201      	str	r2, [sp, #4]
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	481e      	ldr	r0, [pc, #120]	; (800103c <DM_DisplayInputTriggerStatus+0x104>)
 8000fc2:	f00f fbbd 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8000fc6:	e031      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
				ILI9341_Draw_Text("T:COMP", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	88b8      	ldrh	r0, [r7, #4]
 8000fd0:	88f9      	ldrh	r1, [r7, #6]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4817      	ldr	r0, [pc, #92]	; (800103c <DM_DisplayInputTriggerStatus+0x104>)
 8000fe0:	f00f fbae 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8000fe4:	e022      	b.n	800102c <DM_DisplayInputTriggerStatus+0xf4>
			if(IT_GetTriggerStatus())
 8000fe6:	f005 fbc1 	bl	800676c <IT_GetTriggerStatus>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d00e      	beq.n	800100e <DM_DisplayInputTriggerStatus+0xd6>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8000ff0:	4b10      	ldr	r3, [pc, #64]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	88b8      	ldrh	r0, [r7, #4]
 8000ff8:	88f9      	ldrh	r1, [r7, #6]
 8000ffa:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 8000ffe:	9201      	str	r2, [sp, #4]
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	4602      	mov	r2, r0
 8001006:	480e      	ldr	r0, [pc, #56]	; (8001040 <DM_DisplayInputTriggerStatus+0x108>)
 8001008:	f00f fb9a 	bl	8010740 <ILI9341_Draw_Text>
			break;
 800100c:	e00d      	b.n	800102a <DM_DisplayInputTriggerStatus+0xf2>
				ILI9341_Draw_Text("T:ADC ", text_x_pos, text_y_pos, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <DM_DisplayInputTriggerStatus+0xfc>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	b29b      	uxth	r3, r3
 8001014:	88b8      	ldrh	r0, [r7, #4]
 8001016:	88f9      	ldrh	r1, [r7, #6]
 8001018:	2200      	movs	r2, #0
 800101a:	9201      	str	r2, [sp, #4]
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001022:	4602      	mov	r2, r0
 8001024:	4806      	ldr	r0, [pc, #24]	; (8001040 <DM_DisplayInputTriggerStatus+0x108>)
 8001026:	f00f fb8b 	bl	8010740 <ILI9341_Draw_Text>
			break;
 800102a:	bf00      	nop
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	0801566c 	.word	0x0801566c
 800103c:	08015674 	.word	0x08015674
 8001040:	0801567c 	.word	0x0801567c

08001044 <DM_DisplayInputTriggerTimerHertz>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayInputTriggerTimerHertz(uint16_t xpos, uint16_t ypos)
{
 8001044:	b590      	push	{r4, r7, lr}
 8001046:	b095      	sub	sp, #84	; 0x54
 8001048:	af02      	add	r7, sp, #8
 800104a:	4603      	mov	r3, r0
 800104c:	460a      	mov	r2, r1
 800104e:	80fb      	strh	r3, [r7, #6]
 8001050:	4613      	mov	r3, r2
 8001052:	80bb      	strh	r3, [r7, #4]
	if(IT_GetTriggerStatus())
 8001054:	f005 fb8a 	bl	800676c <IT_GetTriggerStatus>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	f000 80d0 	beq.w	8001200 <DM_DisplayInputTriggerTimerHertz+0x1bc>
	{
		if(IT_GetAverageFreqCountHertz() < 1000)
 8001060:	f005 fc1e 	bl	80068a0 <IT_GetAverageFreqCountHertz>
 8001064:	eeb0 7a40 	vmov.f32	s14, s0
 8001068:	eddf 7a6e 	vldr	s15, [pc, #440]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 800106c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001074:	d527      	bpl.n	80010c6 <DM_DisplayInputTriggerTimerHertz+0x82>
		{
			char avg_freq_count_hertz[13] = {};
 8001076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%7.1f Hz", IT_GetAverageFreqCountHertz());
 8001084:	f005 fc0c 	bl	80068a0 <IT_GetAverageFreqCountHertz>
 8001088:	ee10 3a10 	vmov	r3, s0
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa83 	bl	8000598 <__aeabi_f2d>
 8001092:	4603      	mov	r3, r0
 8001094:	460c      	mov	r4, r1
 8001096:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800109a:	e9cd 3400 	strd	r3, r4, [sp]
 800109e:	4a62      	ldr	r2, [pc, #392]	; (8001228 <DM_DisplayInputTriggerTimerHertz+0x1e4>)
 80010a0:	210d      	movs	r1, #13
 80010a2:	f010 ff09 	bl	8011eb8 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80010a6:	4b61      	ldr	r3, [pc, #388]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	88bc      	ldrh	r4, [r7, #4]
 80010ae:	88f9      	ldrh	r1, [r7, #6]
 80010b0:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80010b4:	2200      	movs	r2, #0
 80010b6:	9201      	str	r2, [sp, #4]
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010be:	4622      	mov	r2, r4
 80010c0:	f00f fb3e 	bl	8010740 <ILI9341_Draw_Text>
	}
	else
	{
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
	}
}
 80010c4:	e0aa      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		else if(IT_GetAverageFreqCountHertz() < 10000)
 80010c6:	f005 fbeb 	bl	80068a0 <IT_GetAverageFreqCountHertz>
 80010ca:	eeb0 7a40 	vmov.f32	s14, s0
 80010ce:	eddf 7a58 	vldr	s15, [pc, #352]	; 8001230 <DM_DisplayInputTriggerTimerHertz+0x1ec>
 80010d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010da:	d52c      	bpl.n	8001136 <DM_DisplayInputTriggerTimerHertz+0xf2>
			char avg_freq_count_hertz[13] = {};
 80010dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz() / 1000);
 80010ea:	f005 fbd9 	bl	80068a0 <IT_GetAverageFreqCountHertz>
 80010ee:	eeb0 7a40 	vmov.f32	s14, s0
 80010f2:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 80010f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010fa:	ee16 0a90 	vmov	r0, s13
 80010fe:	f7ff fa4b 	bl	8000598 <__aeabi_f2d>
 8001102:	4603      	mov	r3, r0
 8001104:	460c      	mov	r4, r1
 8001106:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800110a:	e9cd 3400 	strd	r3, r4, [sp]
 800110e:	4a49      	ldr	r2, [pc, #292]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 8001110:	210d      	movs	r1, #13
 8001112:	f010 fed1 	bl	8011eb8 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b29b      	uxth	r3, r3
 800111c:	88bc      	ldrh	r4, [r7, #4]
 800111e:	88f9      	ldrh	r1, [r7, #6]
 8001120:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001124:	2200      	movs	r2, #0
 8001126:	9201      	str	r2, [sp, #4]
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800112e:	4622      	mov	r2, r4
 8001130:	f00f fb06 	bl	8010740 <ILI9341_Draw_Text>
}
 8001134:	e072      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		else if(IT_GetAverageFreqCountHertz() < 100000)
 8001136:	f005 fbb3 	bl	80068a0 <IT_GetAverageFreqCountHertz>
 800113a:	eeb0 7a40 	vmov.f32	s14, s0
 800113e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001238 <DM_DisplayInputTriggerTimerHertz+0x1f4>
 8001142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114a:	d52c      	bpl.n	80011a6 <DM_DisplayInputTriggerTimerHertz+0x162>
			char avg_freq_count_hertz[13] = {};
 800114c:	f107 0318 	add.w	r3, r7, #24
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 800115a:	f005 fba1 	bl	80068a0 <IT_GetAverageFreqCountHertz>
 800115e:	eeb0 7a40 	vmov.f32	s14, s0
 8001162:	eddf 7a30 	vldr	s15, [pc, #192]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 8001166:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800116a:	ee16 0a90 	vmov	r0, s13
 800116e:	f7ff fa13 	bl	8000598 <__aeabi_f2d>
 8001172:	4603      	mov	r3, r0
 8001174:	460c      	mov	r4, r1
 8001176:	f107 0018 	add.w	r0, r7, #24
 800117a:	e9cd 3400 	strd	r3, r4, [sp]
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 8001180:	210d      	movs	r1, #13
 8001182:	f010 fe99 	bl	8011eb8 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001186:	4b29      	ldr	r3, [pc, #164]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b29b      	uxth	r3, r3
 800118c:	88bc      	ldrh	r4, [r7, #4]
 800118e:	88f9      	ldrh	r1, [r7, #6]
 8001190:	f107 0018 	add.w	r0, r7, #24
 8001194:	2200      	movs	r2, #0
 8001196:	9201      	str	r2, [sp, #4]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800119e:	4622      	mov	r2, r4
 80011a0:	f00f face 	bl	8010740 <ILI9341_Draw_Text>
}
 80011a4:	e03a      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
			char avg_freq_count_hertz[13] = {};
 80011a6:	f107 0308 	add.w	r3, r7, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	731a      	strb	r2, [r3, #12]
			snprintf(avg_freq_count_hertz, sizeof(avg_freq_count_hertz), "%6.1f KHz", IT_GetAverageFreqCountHertz()  / 1000);
 80011b4:	f005 fb74 	bl	80068a0 <IT_GetAverageFreqCountHertz>
 80011b8:	eeb0 7a40 	vmov.f32	s14, s0
 80011bc:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001224 <DM_DisplayInputTriggerTimerHertz+0x1e0>
 80011c0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80011c4:	ee16 0a90 	vmov	r0, s13
 80011c8:	f7ff f9e6 	bl	8000598 <__aeabi_f2d>
 80011cc:	4603      	mov	r3, r0
 80011ce:	460c      	mov	r4, r1
 80011d0:	f107 0008 	add.w	r0, r7, #8
 80011d4:	e9cd 3400 	strd	r3, r4, [sp]
 80011d8:	4a16      	ldr	r2, [pc, #88]	; (8001234 <DM_DisplayInputTriggerTimerHertz+0x1f0>)
 80011da:	210d      	movs	r1, #13
 80011dc:	f010 fe6c 	bl	8011eb8 <sniprintf>
			ILI9341_Draw_Text(avg_freq_count_hertz, xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	4b12      	ldr	r3, [pc, #72]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	88bc      	ldrh	r4, [r7, #4]
 80011e8:	88f9      	ldrh	r1, [r7, #6]
 80011ea:	f107 0008 	add.w	r0, r7, #8
 80011ee:	2200      	movs	r2, #0
 80011f0:	9201      	str	r2, [sp, #4]
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f8:	4622      	mov	r2, r4
 80011fa:	f00f faa1 	bl	8010740 <ILI9341_Draw_Text>
}
 80011fe:	e00d      	b.n	800121c <DM_DisplayInputTriggerTimerHertz+0x1d8>
		ILI9341_Draw_Text("                   ", xpos, ypos, NORMAL_TEXT_FGCOLOUR , text_size, NORMAL_TEXT_BGCOLOUR);
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <DM_DisplayInputTriggerTimerHertz+0x1e8>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	b29b      	uxth	r3, r3
 8001206:	88b8      	ldrh	r0, [r7, #4]
 8001208:	88f9      	ldrh	r1, [r7, #6]
 800120a:	2200      	movs	r2, #0
 800120c:	9201      	str	r2, [sp, #4]
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001214:	4602      	mov	r2, r0
 8001216:	4809      	ldr	r0, [pc, #36]	; (800123c <DM_DisplayInputTriggerTimerHertz+0x1f8>)
 8001218:	f00f fa92 	bl	8010740 <ILI9341_Draw_Text>
}
 800121c:	bf00      	nop
 800121e:	374c      	adds	r7, #76	; 0x4c
 8001220:	46bd      	mov	sp, r7
 8001222:	bd90      	pop	{r4, r7, pc}
 8001224:	447a0000 	.word	0x447a0000
 8001228:	08015684 	.word	0x08015684
 800122c:	20000000 	.word	0x20000000
 8001230:	461c4000 	.word	0x461c4000
 8001234:	08015690 	.word	0x08015690
 8001238:	47c35000 	.word	0x47c35000
 800123c:	0801569c 	.word	0x0801569c

08001240 <_DisplayOutputSignalHertz>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalHertz(uint16_t xpos, uint16_t ypos)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b08b      	sub	sp, #44	; 0x2c
 8001244:	af02      	add	r7, sp, #8
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	80fb      	strh	r3, [r7, #6]
 800124c:	4613      	mov	r3, r2
 800124e:	80bb      	strh	r3, [r7, #4]
	char out_hertz[15] = "";
 8001250:	2300      	movs	r3, #0
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = xpos;
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	77fb      	strb	r3, [r7, #31]
	uint8_t out_hertz_y = ypos;
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	77bb      	strb	r3, [r7, #30]

	// draw row header
	ILI9341_Draw_Text("FREQ   ....", 2, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800126a:	7fbb      	ldrb	r3, [r7, #30]
 800126c:	b299      	uxth	r1, r3
 800126e:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <_DisplayOutputSignalHertz+0x94>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	b29b      	uxth	r3, r3
 8001274:	2200      	movs	r2, #0
 8001276:	9201      	str	r2, [sp, #4]
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800127e:	460a      	mov	r2, r1
 8001280:	2102      	movs	r1, #2
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <_DisplayOutputSignalHertz+0x98>)
 8001284:	f00f fa5c 	bl	8010740 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8001288:	f005 fec4 	bl	8007014 <SM_GetOutputInHertz>
 800128c:	ee10 3a10 	vmov	r3, s0
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f981 	bl	8000598 <__aeabi_f2d>
 8001296:	4603      	mov	r3, r0
 8001298:	460c      	mov	r4, r1
 800129a:	f107 000c 	add.w	r0, r7, #12
 800129e:	e9cd 3400 	strd	r3, r4, [sp]
 80012a2:	4a0e      	ldr	r2, [pc, #56]	; (80012dc <_DisplayOutputSignalHertz+0x9c>)
 80012a4:	210f      	movs	r1, #15
 80012a6:	f010 fe07 	bl	8011eb8 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80012aa:	7ffb      	ldrb	r3, [r7, #31]
 80012ac:	b299      	uxth	r1, r3
 80012ae:	7fbb      	ldrb	r3, [r7, #30]
 80012b0:	b29c      	uxth	r4, r3
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <_DisplayOutputSignalHertz+0x94>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	f107 000c 	add.w	r0, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	9201      	str	r2, [sp, #4]
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80012c6:	4622      	mov	r2, r4
 80012c8:	f00f fa3a 	bl	8010740 <ILI9341_Draw_Text>
}
 80012cc:	bf00      	nop
 80012ce:	3724      	adds	r7, #36	; 0x24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd90      	pop	{r4, r7, pc}
 80012d4:	20000000 	.word	0x20000000
 80012d8:	080156b0 	.word	0x080156b0
 80012dc:	080156bc 	.word	0x080156bc

080012e0 <_DisplayOutputSignalVpp>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalVpp(uint16_t xpos, uint16_t ypos)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b08d      	sub	sp, #52	; 0x34
 80012e4:	af02      	add	r7, sp, #8
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	4613      	mov	r3, r2
 80012ee:	80bb      	strh	r3, [r7, #4]
	char out_vpp[18] = "";
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = xpos;
 8001302:	88fb      	ldrh	r3, [r7, #6]
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_vpp_y = ypos;
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800130e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001312:	b299      	uxth	r1, r3
 8001314:	4b1e      	ldr	r3, [pc, #120]	; (8001390 <_DisplayOutputSignalVpp+0xb0>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	b29b      	uxth	r3, r3
 800131a:	2200      	movs	r2, #0
 800131c:	9201      	str	r2, [sp, #4]
 800131e:	9300      	str	r3, [sp, #0]
 8001320:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001324:	460a      	mov	r2, r1
 8001326:	2102      	movs	r1, #2
 8001328:	481a      	ldr	r0, [pc, #104]	; (8001394 <_DisplayOutputSignalVpp+0xb4>)
 800132a:	f00f fa09 	bl	8010740 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800132e:	2000      	movs	r0, #0
 8001330:	f005 fbd8 	bl	8006ae4 <SM_GetOutputChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800133a:	623b      	str	r3, [r7, #32]

	if(pTmpVppPreset)
 800133c:	6a3b      	ldr	r3, [r7, #32]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00e      	beq.n	8001360 <_DisplayOutputSignalVpp+0x80>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001342:	6a3b      	ldr	r3, [r7, #32]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f926 	bl	8000598 <__aeabi_f2d>
 800134c:	4603      	mov	r3, r0
 800134e:	460c      	mov	r4, r1
 8001350:	f107 000c 	add.w	r0, r7, #12
 8001354:	e9cd 3400 	strd	r3, r4, [sp]
 8001358:	4a0f      	ldr	r2, [pc, #60]	; (8001398 <_DisplayOutputSignalVpp+0xb8>)
 800135a:	2112      	movs	r1, #18
 800135c:	f010 fdac 	bl	8011eb8 <sniprintf>
	}

	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001364:	b299      	uxth	r1, r3
 8001366:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800136a:	b29c      	uxth	r4, r3
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <_DisplayOutputSignalVpp+0xb0>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b29b      	uxth	r3, r3
 8001372:	f107 000c 	add.w	r0, r7, #12
 8001376:	2200      	movs	r2, #0
 8001378:	9201      	str	r2, [sp, #4]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001380:	4622      	mov	r2, r4
 8001382:	f00f f9dd 	bl	8010740 <ILI9341_Draw_Text>
}
 8001386:	bf00      	nop
 8001388:	372c      	adds	r7, #44	; 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000
 8001394:	080156cc 	.word	0x080156cc
 8001398:	080156d8 	.word	0x080156d8

0800139c <_DisplayOutputSignalDecibels>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalDecibels(uint16_t xpos, uint16_t ypos)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b08d      	sub	sp, #52	; 0x34
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	4603      	mov	r3, r0
 80013a4:	460a      	mov	r2, r1
 80013a6:	80fb      	strh	r3, [r7, #6]
 80013a8:	4613      	mov	r3, r2
 80013aa:	80bb      	strh	r3, [r7, #4]
	char out_decibels[20] = "";
 80013ac:	2300      	movs	r3, #0
 80013ae:	60fb      	str	r3, [r7, #12]
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = xpos;
 80013be:	88fb      	ldrh	r3, [r7, #6]
 80013c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t out_decibels_y = ypos;
 80013c4:	88bb      	ldrh	r3, [r7, #4]
 80013c6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	// draw row header
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80013ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013ce:	b299      	uxth	r1, r3
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	2200      	movs	r2, #0
 80013d8:	9201      	str	r2, [sp, #4]
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80013e0:	460a      	mov	r2, r1
 80013e2:	2102      	movs	r1, #2
 80013e4:	4824      	ldr	r0, [pc, #144]	; (8001478 <_DisplayOutputSignalDecibels+0xdc>)
 80013e6:	f00f f9ab 	bl	8010740 <ILI9341_Draw_Text>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80013ea:	2000      	movs	r0, #0
 80013ec:	f005 fb7a 	bl	8006ae4 <SM_GetOutputChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80013f6:	623b      	str	r3, [r7, #32]
	if(pTmpVppPreset)
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00e      	beq.n	800141c <_DisplayOutputSignalDecibels+0x80>
	{
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	68db      	ldr	r3, [r3, #12]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8c8 	bl	8000598 <__aeabi_f2d>
 8001408:	4603      	mov	r3, r0
 800140a:	460c      	mov	r4, r1
 800140c:	f107 000c 	add.w	r0, r7, #12
 8001410:	e9cd 3400 	strd	r3, r4, [sp]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <_DisplayOutputSignalDecibels+0xe0>)
 8001416:	2114      	movs	r1, #20
 8001418:	f010 fd4e 	bl	8011eb8 <sniprintf>
	}

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800141c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001420:	b299      	uxth	r1, r3
 8001422:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001426:	b29c      	uxth	r4, r3
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	f107 000c 	add.w	r0, r7, #12
 8001432:	2200      	movs	r2, #0
 8001434:	9201      	str	r2, [sp, #4]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800143c:	4622      	mov	r2, r4
 800143e:	f00f f97f 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001442:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001446:	b29b      	uxth	r3, r3
 8001448:	3380      	adds	r3, #128	; 0x80
 800144a:	b299      	uxth	r1, r3
 800144c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001450:	b298      	uxth	r0, r3
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_DisplayOutputSignalDecibels+0xd8>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	2200      	movs	r2, #0
 800145a:	9201      	str	r2, [sp, #4]
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001462:	4602      	mov	r2, r0
 8001464:	4806      	ldr	r0, [pc, #24]	; (8001480 <_DisplayOutputSignalDecibels+0xe4>)
 8001466:	f00f f96b 	bl	8010740 <ILI9341_Draw_Text>

}
 800146a:	bf00      	nop
 800146c:	372c      	adds	r7, #44	; 0x2c
 800146e:	46bd      	mov	sp, r7
 8001470:	bd90      	pop	{r4, r7, pc}
 8001472:	bf00      	nop
 8001474:	20000000 	.word	0x20000000
 8001478:	080156e4 	.word	0x080156e4
 800147c:	080156f0 	.word	0x080156f0
 8001480:	080156fc 	.word	0x080156fc

08001484 <_DisplayOutputSignalOffset>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputSignalOffset(uint16_t xpos, uint16_t ypos)
{
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b08d      	sub	sp, #52	; 0x34
 8001488:	af02      	add	r7, sp, #8
 800148a:	4603      	mov	r3, r0
 800148c:	460a      	mov	r2, r1
 800148e:	80fb      	strh	r3, [r7, #6]
 8001490:	4613      	mov	r3, r2
 8001492:	80bb      	strh	r3, [r7, #4]
	float volts_per_thou = 0.00075;
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <_DisplayOutputSignalOffset+0x128>)
 8001496:	623b      	str	r3, [r7, #32]
	char out_dcvolts[12] = "";
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = xpos;
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	77fb      	strb	r3, [r7, #31]
	uint8_t out_dcvolts_y = ypos;
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	77bb      	strb	r3, [r7, #30]

	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80014ae:	7fbb      	ldrb	r3, [r7, #30]
 80014b0:	b299      	uxth	r1, r3
 80014b2:	4b3f      	ldr	r3, [pc, #252]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	2200      	movs	r2, #0
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014c2:	460a      	mov	r2, r1
 80014c4:	2102      	movs	r1, #2
 80014c6:	483b      	ldr	r0, [pc, #236]	; (80015b4 <_DisplayOutputSignalOffset+0x130>)
 80014c8:	f00f f93a 	bl	8010740 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 80014cc:	f004 fa2a 	bl	8005924 <BO_GetOutputBias>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d103      	bne.n	80014de <_DisplayOutputSignalOffset+0x5a>
 80014d6:	f04f 0300 	mov.w	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
 80014dc:	e00b      	b.n	80014f6 <_DisplayOutputSignalOffset+0x72>
 80014de:	f004 fa21 	bl	8005924 <BO_GetOutputBias>
 80014e2:	ee07 0a90 	vmov	s15, r0
 80014e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 80014f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014f8:	f7ff f84e 	bl	8000598 <__aeabi_f2d>
 80014fc:	4603      	mov	r3, r0
 80014fe:	460c      	mov	r4, r1
 8001500:	f107 0010 	add.w	r0, r7, #16
 8001504:	e9cd 3400 	strd	r3, r4, [sp]
 8001508:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <_DisplayOutputSignalOffset+0x134>)
 800150a:	210c      	movs	r1, #12
 800150c:	f010 fcd4 	bl	8011eb8 <sniprintf>
	if(BO_GetBiasPolarity())
 8001510:	f004 f9a8 	bl	8005864 <BO_GetBiasPolarity>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d022      	beq.n	8001560 <_DisplayOutputSignalOffset+0xdc>
	{
		char symbol[3] = "+\0";
 800151a:	4a28      	ldr	r2, [pc, #160]	; (80015bc <_DisplayOutputSignalOffset+0x138>)
 800151c:	f107 030c 	add.w	r3, r7, #12
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	4611      	mov	r1, r2
 8001524:	8019      	strh	r1, [r3, #0]
 8001526:	3302      	adds	r3, #2
 8001528:	0c12      	lsrs	r2, r2, #16
 800152a:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800152c:	f107 0210 	add.w	r2, r7, #16
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4611      	mov	r1, r2
 8001536:	4618      	mov	r0, r3
 8001538:	f010 fcf2 	bl	8011f20 <strcat>
 800153c:	4604      	mov	r4, r0
 800153e:	7ffb      	ldrb	r3, [r7, #31]
 8001540:	b299      	uxth	r1, r3
 8001542:	7fbb      	ldrb	r3, [r7, #30]
 8001544:	b298      	uxth	r0, r3
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	b29b      	uxth	r3, r3
 800154c:	2200      	movs	r2, #0
 800154e:	9201      	str	r2, [sp, #4]
 8001550:	9300      	str	r3, [sp, #0]
 8001552:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001556:	4602      	mov	r2, r0
 8001558:	4620      	mov	r0, r4
 800155a:	f00f f8f1 	bl	8010740 <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 800155e:	e021      	b.n	80015a4 <_DisplayOutputSignalOffset+0x120>
		char symbol[3] = "-\0";
 8001560:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <_DisplayOutputSignalOffset+0x13c>)
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	6812      	ldr	r2, [r2, #0]
 8001568:	4611      	mov	r1, r2
 800156a:	8019      	strh	r1, [r3, #0]
 800156c:	3302      	adds	r3, #2
 800156e:	0c12      	lsrs	r2, r2, #16
 8001570:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001572:	f107 0210 	add.w	r2, r7, #16
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	4611      	mov	r1, r2
 800157c:	4618      	mov	r0, r3
 800157e:	f010 fccf 	bl	8011f20 <strcat>
 8001582:	4604      	mov	r4, r0
 8001584:	7ffb      	ldrb	r3, [r7, #31]
 8001586:	b299      	uxth	r1, r3
 8001588:	7fbb      	ldrb	r3, [r7, #30]
 800158a:	b298      	uxth	r0, r3
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_DisplayOutputSignalOffset+0x12c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	b29b      	uxth	r3, r3
 8001592:	2200      	movs	r2, #0
 8001594:	9201      	str	r2, [sp, #4]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800159c:	4602      	mov	r2, r0
 800159e:	4620      	mov	r0, r4
 80015a0:	f00f f8ce 	bl	8010740 <ILI9341_Draw_Text>
}
 80015a4:	bf00      	nop
 80015a6:	372c      	adds	r7, #44	; 0x2c
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd90      	pop	{r4, r7, pc}
 80015ac:	3a449ba6 	.word	0x3a449ba6
 80015b0:	20000000 	.word	0x20000000
 80015b4:	08015704 	.word	0x08015704
 80015b8:	08015710 	.word	0x08015710
 80015bc:	0801571c 	.word	0x0801571c
 80015c0:	08015720 	.word	0x08015720

080015c4 <_DisplayOutputWaveformIcons>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayOutputWaveformIcons(uint16_t main_xpos, uint16_t main_ypos, uint16_t aux_xpos, uint16_t aux_ypos)
{
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af04      	add	r7, sp, #16
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	4603      	mov	r3, r0
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	803b      	strh	r3, [r7, #0]

	ILI9341_Draw_Text(" OUT:", 1, main_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	330a      	adds	r3, #10
 80015e6:	b299      	uxth	r1, r3
 80015e8:	4b94      	ldr	r3, [pc, #592]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	9201      	str	r2, [sp, #4]
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015f8:	460a      	mov	r2, r1
 80015fa:	2101      	movs	r1, #1
 80015fc:	4890      	ldr	r0, [pc, #576]	; (8001840 <_DisplayOutputWaveformIcons+0x27c>)
 80015fe:	f00f f89f 	bl	8010740 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8001602:	2000      	movs	r0, #0
 8001604:	f005 fa6e 	bl	8006ae4 <SM_GetOutputChannel>
 8001608:	4603      	mov	r3, r0
 800160a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	73fb      	strb	r3, [r7, #15]
	switch(signal_output_func)
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	2b06      	cmp	r3, #6
 8001616:	d878      	bhi.n	800170a <_DisplayOutputWaveformIcons+0x146>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <_DisplayOutputWaveformIcons+0x5c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	0800163d 	.word	0x0800163d
 8001624:	0800165d 	.word	0x0800165d
 8001628:	08001679 	.word	0x08001679
 800162c:	08001695 	.word	0x08001695
 8001630:	080016b1 	.word	0x080016b1
 8001634:	080016cd 	.word	0x080016cd
 8001638:	080016e9 	.word	0x080016e9
	{
		case SINE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos-20, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 800163c:	88bb      	ldrh	r3, [r7, #4]
 800163e:	3b14      	subs	r3, #20
 8001640:	b299      	uxth	r1, r3
 8001642:	88f8      	ldrh	r0, [r7, #6]
 8001644:	233c      	movs	r3, #60	; 0x3c
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	4b7e      	ldr	r3, [pc, #504]	; (8001844 <_DisplayOutputWaveformIcons+0x280>)
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2364      	movs	r3, #100	; 0x64
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001654:	2203      	movs	r2, #3
 8001656:	f00e fecf 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 800165a:	e056      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 800165c:	88b9      	ldrh	r1, [r7, #4]
 800165e:	88f8      	ldrh	r0, [r7, #6]
 8001660:	233c      	movs	r3, #60	; 0x3c
 8001662:	9302      	str	r3, [sp, #8]
 8001664:	4b78      	ldr	r3, [pc, #480]	; (8001848 <_DisplayOutputWaveformIcons+0x284>)
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	23c8      	movs	r3, #200	; 0xc8
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001670:	2203      	movs	r2, #3
 8001672:	f00e fec1 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 8001676:	e048      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 8001678:	88b9      	ldrh	r1, [r7, #4]
 800167a:	88f8      	ldrh	r0, [r7, #6]
 800167c:	233c      	movs	r3, #60	; 0x3c
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	4b72      	ldr	r3, [pc, #456]	; (800184c <_DisplayOutputWaveformIcons+0x288>)
 8001682:	9301      	str	r3, [sp, #4]
 8001684:	23c8      	movs	r3, #200	; 0xc8
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	f240 23fd 	movw	r3, #765	; 0x2fd
 800168c:	2203      	movs	r2, #3
 800168e:	f00e feb3 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 8001692:	e03a      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 8001694:	88b9      	ldrh	r1, [r7, #4]
 8001696:	88f8      	ldrh	r0, [r7, #6]
 8001698:	233c      	movs	r3, #60	; 0x3c
 800169a:	9302      	str	r3, [sp, #8]
 800169c:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <_DisplayOutputWaveformIcons+0x28c>)
 800169e:	9301      	str	r3, [sp, #4]
 80016a0:	23c8      	movs	r3, #200	; 0xc8
 80016a2:	9300      	str	r3, [sp, #0]
 80016a4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016a8:	2203      	movs	r2, #3
 80016aa:	f00e fea5 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 80016ae:	e02c      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80016b0:	88b9      	ldrh	r1, [r7, #4]
 80016b2:	88f8      	ldrh	r0, [r7, #6]
 80016b4:	233c      	movs	r3, #60	; 0x3c
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	4b66      	ldr	r3, [pc, #408]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	23c8      	movs	r3, #200	; 0xc8
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016c4:	2203      	movs	r2, #3
 80016c6:	f00e fe97 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 80016ca:	e01e      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(main_xpos, main_ypos, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80016cc:	88b9      	ldrh	r1, [r7, #4]
 80016ce:	88f8      	ldrh	r0, [r7, #6]
 80016d0:	233c      	movs	r3, #60	; 0x3c
 80016d2:	9302      	str	r3, [sp, #8]
 80016d4:	4b5f      	ldr	r3, [pc, #380]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80016d6:	9301      	str	r3, [sp, #4]
 80016d8:	23c8      	movs	r3, #200	; 0xc8
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016e0:	2203      	movs	r2, #3
 80016e2:	f00e fe89 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 80016e6:	e010      	b.n	800170a <_DisplayOutputWaveformIcons+0x146>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", main_xpos, main_ypos+10, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 80016e8:	88bb      	ldrh	r3, [r7, #4]
 80016ea:	330a      	adds	r3, #10
 80016ec:	b298      	uxth	r0, r3
 80016ee:	4b53      	ldr	r3, [pc, #332]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	88f9      	ldrh	r1, [r7, #6]
 80016f6:	2200      	movs	r2, #0
 80016f8:	9201      	str	r2, [sp, #4]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001700:	4602      	mov	r2, r0
 8001702:	4855      	ldr	r0, [pc, #340]	; (8001858 <_DisplayOutputWaveformIcons+0x294>)
 8001704:	f00f f81c 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8001708:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 170, aux_ypos+10, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800170a:	883b      	ldrh	r3, [r7, #0]
 800170c:	330a      	adds	r3, #10
 800170e:	b299      	uxth	r1, r3
 8001710:	4b4a      	ldr	r3, [pc, #296]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b29b      	uxth	r3, r3
 8001716:	2200      	movs	r2, #0
 8001718:	9201      	str	r2, [sp, #4]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001720:	460a      	mov	r2, r1
 8001722:	21aa      	movs	r1, #170	; 0xaa
 8001724:	484d      	ldr	r0, [pc, #308]	; (800185c <_DisplayOutputWaveformIcons+0x298>)
 8001726:	f00f f80b 	bl	8010740 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800172a:	2001      	movs	r0, #1
 800172c:	f005 f9da 	bl	8006ae4 <SM_GetOutputChannel>
 8001730:	4603      	mov	r3, r0
 8001732:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	73bb      	strb	r3, [r7, #14]
	switch(Aux_output_func)
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	2b06      	cmp	r3, #6
 800173e:	d878      	bhi.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
 8001740:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <_DisplayOutputWaveformIcons+0x184>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	08001765 	.word	0x08001765
 800174c:	08001785 	.word	0x08001785
 8001750:	080017a1 	.word	0x080017a1
 8001754:	080017bd 	.word	0x080017bd
 8001758:	080017d9 	.word	0x080017d9
 800175c:	080017f5 	.word	0x080017f5
 8001760:	08001811 	.word	0x08001811
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(aux_xpos, aux_ypos-20, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001764:	883b      	ldrh	r3, [r7, #0]
 8001766:	3b14      	subs	r3, #20
 8001768:	b299      	uxth	r1, r3
 800176a:	8878      	ldrh	r0, [r7, #2]
 800176c:	233c      	movs	r3, #60	; 0x3c
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	4b34      	ldr	r3, [pc, #208]	; (8001844 <_DisplayOutputWaveformIcons+0x280>)
 8001772:	9301      	str	r3, [sp, #4]
 8001774:	2364      	movs	r3, #100	; 0x64
 8001776:	9300      	str	r3, [sp, #0]
 8001778:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800177c:	2203      	movs	r2, #3
 800177e:	f00e fe3b 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 8001782:	e056      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001784:	8839      	ldrh	r1, [r7, #0]
 8001786:	8878      	ldrh	r0, [r7, #2]
 8001788:	233c      	movs	r3, #60	; 0x3c
 800178a:	9302      	str	r3, [sp, #8]
 800178c:	4b2e      	ldr	r3, [pc, #184]	; (8001848 <_DisplayOutputWaveformIcons+0x284>)
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	23c8      	movs	r3, #200	; 0xc8
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001798:	2203      	movs	r2, #3
 800179a:	f00e fe2d 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 800179e:	e048      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80017a0:	8839      	ldrh	r1, [r7, #0]
 80017a2:	8878      	ldrh	r0, [r7, #2]
 80017a4:	233c      	movs	r3, #60	; 0x3c
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	4b28      	ldr	r3, [pc, #160]	; (800184c <_DisplayOutputWaveformIcons+0x288>)
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	23c8      	movs	r3, #200	; 0xc8
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017b4:	2203      	movs	r2, #3
 80017b6:	f00e fe1f 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 80017ba:	e03a      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80017bc:	8839      	ldrh	r1, [r7, #0]
 80017be:	8878      	ldrh	r0, [r7, #2]
 80017c0:	233c      	movs	r3, #60	; 0x3c
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	4b22      	ldr	r3, [pc, #136]	; (8001850 <_DisplayOutputWaveformIcons+0x28c>)
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	23c8      	movs	r3, #200	; 0xc8
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017d0:	2203      	movs	r2, #3
 80017d2:	f00e fe11 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 80017d6:	e02c      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80017d8:	8839      	ldrh	r1, [r7, #0]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	233c      	movs	r3, #60	; 0x3c
 80017de:	9302      	str	r3, [sp, #8]
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80017e2:	9301      	str	r3, [sp, #4]
 80017e4:	23c8      	movs	r3, #200	; 0xc8
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80017ec:	2203      	movs	r2, #3
 80017ee:	f00e fe03 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 80017f2:	e01e      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(aux_xpos, aux_ypos, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80017f4:	8839      	ldrh	r1, [r7, #0]
 80017f6:	8878      	ldrh	r0, [r7, #2]
 80017f8:	233c      	movs	r3, #60	; 0x3c
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_DisplayOutputWaveformIcons+0x290>)
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	23c8      	movs	r3, #200	; 0xc8
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001808:	2203      	movs	r2, #3
 800180a:	f00e fdf5 	bl	80103f8 <ILI9341_Draw_Wave>
			break;
 800180e:	e010      	b.n	8001832 <_DisplayOutputWaveformIcons+0x26e>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", aux_xpos, aux_ypos+10, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001810:	883b      	ldrh	r3, [r7, #0]
 8001812:	330a      	adds	r3, #10
 8001814:	b298      	uxth	r0, r3
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <_DisplayOutputWaveformIcons+0x278>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	8879      	ldrh	r1, [r7, #2]
 800181e:	2200      	movs	r2, #0
 8001820:	9201      	str	r2, [sp, #4]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001828:	4602      	mov	r2, r0
 800182a:	480b      	ldr	r0, [pc, #44]	; (8001858 <_DisplayOutputWaveformIcons+0x294>)
 800182c:	f00e ff88 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8001830:	bf00      	nop
	}
}
 8001832:	bf00      	nop
 8001834:	3714      	adds	r7, #20
 8001836:	46bd      	mov	sp, r7
 8001838:	bd90      	pop	{r4, r7, pc}
 800183a:	bf00      	nop
 800183c:	20000000 	.word	0x20000000
 8001840:	08015724 	.word	0x08015724
 8001844:	20000e28 	.word	0x20000e28
 8001848:	20000f18 	.word	0x20000f18
 800184c:	20000c48 	.word	0x20000c48
 8001850:	20000d38 	.word	0x20000d38
 8001854:	20001008 	.word	0x20001008
 8001858:	0801572c 	.word	0x0801572c
 800185c:	08015730 	.word	0x08015730

08001860 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 8001866:	4820      	ldr	r0, [pc, #128]	; (80018e8 <DM_RefreshScreen+0x88>)
 8001868:	f00b ff50 	bl	800d70c <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 800186c:	2000      	movs	r0, #0
 800186e:	f00f f9e7 	bl	8010c40 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001872:	2300      	movs	r3, #0
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	2302      	movs	r3, #2
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	2328      	movs	r3, #40	; 0x28
 8001882:	2250      	movs	r2, #80	; 0x50
 8001884:	21c8      	movs	r1, #200	; 0xc8
 8001886:	2000      	movs	r0, #0
 8001888:	f00e fdf7 	bl	801047a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 800188c:	2300      	movs	r3, #0
 800188e:	9302      	str	r3, [sp, #8]
 8001890:	2302      	movs	r3, #2
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	2328      	movs	r3, #40	; 0x28
 800189c:	2250      	movs	r2, #80	; 0x50
 800189e:	21c8      	movs	r1, #200	; 0xc8
 80018a0:	2050      	movs	r0, #80	; 0x50
 80018a2:	f00e fdea 	bl	801047a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80018a6:	2300      	movs	r3, #0
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2302      	movs	r3, #2
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80018b2:	9300      	str	r3, [sp, #0]
 80018b4:	2328      	movs	r3, #40	; 0x28
 80018b6:	2250      	movs	r2, #80	; 0x50
 80018b8:	21c8      	movs	r1, #200	; 0xc8
 80018ba:	20a0      	movs	r0, #160	; 0xa0
 80018bc:	f00e fddd 	bl	801047a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80018c0:	2300      	movs	r3, #0
 80018c2:	9302      	str	r3, [sp, #8]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9301      	str	r3, [sp, #4]
 80018c8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80018cc:	9300      	str	r3, [sp, #0]
 80018ce:	2328      	movs	r3, #40	; 0x28
 80018d0:	2250      	movs	r2, #80	; 0x50
 80018d2:	21c8      	movs	r1, #200	; 0xc8
 80018d4:	20f0      	movs	r0, #240	; 0xf0
 80018d6:	f00e fdd0 	bl	801047a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80018da:	4803      	ldr	r0, [pc, #12]	; (80018e8 <DM_RefreshScreen+0x88>)
 80018dc:	f00b fee0 	bl	800d6a0 <HAL_TIM_Base_Start_IT>


}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000283c 	.word	0x2000283c

080018ec <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <DM_SetErrorDebugMsg+0x34>)
 80018f8:	212d      	movs	r1, #45	; 0x2d
 80018fa:	480a      	ldr	r0, [pc, #40]	; (8001924 <DM_SetErrorDebugMsg+0x38>)
 80018fc:	f010 fadc 	bl	8011eb8 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8001900:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2301      	movs	r3, #1
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	2300      	movs	r3, #0
 800190c:	22be      	movs	r2, #190	; 0xbe
 800190e:	210a      	movs	r1, #10
 8001910:	4804      	ldr	r0, [pc, #16]	; (8001924 <DM_SetErrorDebugMsg+0x38>)
 8001912:	f00e ff15 	bl	8010740 <ILI9341_Draw_Text>
}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	080157b4 	.word	0x080157b4
 8001924:	20001e28 	.word	0x20001e28

08001928 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	3b01      	subs	r3, #1
 8001936:	2b04      	cmp	r3, #4
 8001938:	d81b      	bhi.n	8001972 <FreqMenu_DrawMenu+0x4a>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <FreqMenu_DrawMenu+0x18>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	08001955 	.word	0x08001955
 8001944:	0800195b 	.word	0x0800195b
 8001948:	08001961 	.word	0x08001961
 800194c:	08001967 	.word	0x08001967
 8001950:	0800196d 	.word	0x0800196d
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001954:	f000 f812 	bl	800197c <FreqMenu_DrawMainMenu>
			break;
 8001958:	e00c      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 800195a:	f000 f859 	bl	8001a10 <FreqMenu_DrawPresetMenu>
			break;
 800195e:	e009      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 8001960:	f001 fb06 	bl	8002f70 <FreqMenu_DrawAdjustMenu>
			break;
 8001964:	e006      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001966:	f001 fb19 	bl	8002f9c <FreqMenu_DrawSweepMenu>
			break;
 800196a:	e003      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESCALER_MENU:
			FreqMenu_DrawPrescalerMenu();
 800196c:	f001 fd48 	bl	8003400 <FreqMenu_DrawPrescalerMenu>
			break;
 8001970:	e000      	b.n	8001974 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 8001972:	bf00      	nop

	}
}
 8001974:	bf00      	nop
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001982:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001986:	9301      	str	r3, [sp, #4]
 8001988:	2302      	movs	r3, #2
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2300      	movs	r3, #0
 800198e:	220a      	movs	r2, #10
 8001990:	2105      	movs	r1, #5
 8001992:	481a      	ldr	r0, [pc, #104]	; (80019fc <FreqMenu_DrawMainMenu+0x80>)
 8001994:	f00e fed4 	bl	8010740 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 8001998:	f7ff faae 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800199c:	f240 23fd 	movw	r3, #765	; 0x2fd
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2302      	movs	r3, #2
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	22d2      	movs	r2, #210	; 0xd2
 80019aa:	2105      	movs	r1, #5
 80019ac:	4814      	ldr	r0, [pc, #80]	; (8001a00 <FreqMenu_DrawMainMenu+0x84>)
 80019ae:	f00e fec7 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80019b2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80019b6:	9301      	str	r3, [sp, #4]
 80019b8:	2302      	movs	r3, #2
 80019ba:	9300      	str	r3, [sp, #0]
 80019bc:	2300      	movs	r3, #0
 80019be:	22d2      	movs	r2, #210	; 0xd2
 80019c0:	2161      	movs	r1, #97	; 0x61
 80019c2:	4810      	ldr	r0, [pc, #64]	; (8001a04 <FreqMenu_DrawMainMenu+0x88>)
 80019c4:	f00e febc 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80019c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80019cc:	9301      	str	r3, [sp, #4]
 80019ce:	2302      	movs	r3, #2
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2300      	movs	r3, #0
 80019d4:	22d2      	movs	r2, #210	; 0xd2
 80019d6:	21ac      	movs	r1, #172	; 0xac
 80019d8:	480b      	ldr	r0, [pc, #44]	; (8001a08 <FreqMenu_DrawMainMenu+0x8c>)
 80019da:	f00e feb1 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80019de:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	2300      	movs	r3, #0
 80019ea:	22d2      	movs	r2, #210	; 0xd2
 80019ec:	f44f 7182 	mov.w	r1, #260	; 0x104
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <FreqMenu_DrawMainMenu+0x90>)
 80019f2:	f00e fea5 	bl	8010740 <ILI9341_Draw_Text>
}
 80019f6:	bf00      	nop
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	080157b8 	.word	0x080157b8
 8001a00:	080157c4 	.word	0x080157c4
 8001a04:	080157cc 	.word	0x080157cc
 8001a08:	080157d4 	.word	0x080157d4
 8001a0c:	080157dc 	.word	0x080157dc

08001a10 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001a16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2300      	movs	r3, #0
 8001a22:	220a      	movs	r2, #10
 8001a24:	2105      	movs	r1, #5
 8001a26:	4887      	ldr	r0, [pc, #540]	; (8001c44 <FreqMenu_DrawPresetMenu+0x234>)
 8001a28:	f00e fe8a 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 8001a2c:	f7ff fa84 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 8001a30:	2328      	movs	r3, #40	; 0x28
 8001a32:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001a34:	233c      	movs	r3, #60	; 0x3c
 8001a36:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001a38:	2350      	movs	r3, #80	; 0x50
 8001a3a:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001a3c:	2364      	movs	r3, #100	; 0x64
 8001a3e:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001a40:	2378      	movs	r3, #120	; 0x78
 8001a42:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001a44:	238c      	movs	r3, #140	; 0x8c
 8001a46:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001a48:	23a0      	movs	r3, #160	; 0xa0
 8001a4a:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001a4c:	f004 f91a 	bl	8005c84 <FreqO_GetFPresetObject>
 8001a50:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f001 825d 	beq.w	8002f14 <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a62:	4293      	cmp	r3, r2
 8001a64:	f000 849a 	beq.w	800239c <FreqMenu_DrawPresetMenu+0x98c>
 8001a68:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d817      	bhi.n	8001aa0 <FreqMenu_DrawPresetMenu+0x90>
 8001a70:	2b32      	cmp	r3, #50	; 0x32
 8001a72:	f000 81b3 	beq.w	8001ddc <FreqMenu_DrawPresetMenu+0x3cc>
 8001a76:	2b32      	cmp	r3, #50	; 0x32
 8001a78:	d806      	bhi.n	8001a88 <FreqMenu_DrawPresetMenu+0x78>
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d038      	beq.n	8001af0 <FreqMenu_DrawPresetMenu+0xe0>
 8001a7e:	2b0a      	cmp	r3, #10
 8001a80:	f000 8102 	beq.w	8001c88 <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001a84:	f001 ba52 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001a88:	2bfa      	cmp	r3, #250	; 0xfa
 8001a8a:	f000 8317 	beq.w	80020bc <FreqMenu_DrawPresetMenu+0x6ac>
 8001a8e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a92:	f000 83d9 	beq.w	8002248 <FreqMenu_DrawPresetMenu+0x838>
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	f000 8266 	beq.w	8001f68 <FreqMenu_DrawPresetMenu+0x558>
}
 8001a9c:	f001 ba46 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001aa0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	f000 8758 	beq.w	800295a <FreqMenu_DrawPresetMenu+0xf4a>
 8001aaa:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d80f      	bhi.n	8001ad2 <FreqMenu_DrawPresetMenu+0xc2>
 8001ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	f000 85e0 	beq.w	800267c <FreqMenu_DrawPresetMenu+0xc6c>
 8001abc:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	f000 86a1 	beq.w	8002808 <FreqMenu_DrawPresetMenu+0xdf8>
 8001ac6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aca:	f000 852d 	beq.w	8002528 <FreqMenu_DrawPresetMenu+0xb18>
}
 8001ace:	f001 ba2d 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001ad2:	4a5d      	ldr	r2, [pc, #372]	; (8001c48 <FreqMenu_DrawPresetMenu+0x238>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	f001 80ae 	beq.w	8002c36 <FreqMenu_DrawPresetMenu+0x1226>
 8001ada:	4a5c      	ldr	r2, [pc, #368]	; (8001c4c <FreqMenu_DrawPresetMenu+0x23c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	f001 816f 	beq.w	8002dc0 <FreqMenu_DrawPresetMenu+0x13b0>
 8001ae2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	f000 87fc 	beq.w	8002ae4 <FreqMenu_DrawPresetMenu+0x10d4>
}
 8001aec:	f001 ba1e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001af0:	7bfb      	ldrb	r3, [r7, #15]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	2105      	movs	r1, #5
 8001b02:	4853      	ldr	r0, [pc, #332]	; (8001c50 <FreqMenu_DrawPresetMenu+0x240>)
 8001b04:	f00e fe1c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2302      	movs	r3, #2
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b18:	2105      	movs	r1, #5
 8001b1a:	484e      	ldr	r0, [pc, #312]	; (8001c54 <FreqMenu_DrawPresetMenu+0x244>)
 8001b1c:	f00e fe10 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b20:	7b7b      	ldrb	r3, [r7, #13]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	2300      	movs	r3, #0
 8001b26:	9301      	str	r3, [sp, #4]
 8001b28:	2302      	movs	r3, #2
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b30:	2105      	movs	r1, #5
 8001b32:	4849      	ldr	r0, [pc, #292]	; (8001c58 <FreqMenu_DrawPresetMenu+0x248>)
 8001b34:	f00e fe04 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b38:	7b3b      	ldrb	r3, [r7, #12]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2302      	movs	r3, #2
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	4844      	ldr	r0, [pc, #272]	; (8001c5c <FreqMenu_DrawPresetMenu+0x24c>)
 8001b4c:	f00e fdf8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b50:	7afb      	ldrb	r3, [r7, #11]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	2300      	movs	r3, #0
 8001b56:	9301      	str	r3, [sp, #4]
 8001b58:	2302      	movs	r3, #2
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b60:	2105      	movs	r1, #5
 8001b62:	483f      	ldr	r0, [pc, #252]	; (8001c60 <FreqMenu_DrawPresetMenu+0x250>)
 8001b64:	f00e fdec 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b68:	7abb      	ldrb	r3, [r7, #10]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	9301      	str	r3, [sp, #4]
 8001b70:	2302      	movs	r3, #2
 8001b72:	9300      	str	r3, [sp, #0]
 8001b74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b78:	2105      	movs	r1, #5
 8001b7a:	483a      	ldr	r0, [pc, #232]	; (8001c64 <FreqMenu_DrawPresetMenu+0x254>)
 8001b7c:	f00e fde0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b80:	7a7b      	ldrb	r3, [r7, #9]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	2300      	movs	r3, #0
 8001b86:	9301      	str	r3, [sp, #4]
 8001b88:	2302      	movs	r3, #2
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b90:	2105      	movs	r1, #5
 8001b92:	4835      	ldr	r0, [pc, #212]	; (8001c68 <FreqMenu_DrawPresetMenu+0x258>)
 8001b94:	f00e fdd4 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b98:	7bfb      	ldrb	r3, [r7, #15]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba8:	2178      	movs	r1, #120	; 0x78
 8001baa:	4830      	ldr	r0, [pc, #192]	; (8001c6c <FreqMenu_DrawPresetMenu+0x25c>)
 8001bac:	f00e fdc8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb0:	7bbb      	ldrb	r3, [r7, #14]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2302      	movs	r3, #2
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc0:	2178      	movs	r1, #120	; 0x78
 8001bc2:	482b      	ldr	r0, [pc, #172]	; (8001c70 <FreqMenu_DrawPresetMenu+0x260>)
 8001bc4:	f00e fdbc 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bc8:	7b7b      	ldrb	r3, [r7, #13]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bd8:	2178      	movs	r1, #120	; 0x78
 8001bda:	4826      	ldr	r0, [pc, #152]	; (8001c74 <FreqMenu_DrawPresetMenu+0x264>)
 8001bdc:	f00e fdb0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be0:	7b3b      	ldrb	r3, [r7, #12]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	2302      	movs	r3, #2
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf0:	2178      	movs	r1, #120	; 0x78
 8001bf2:	4821      	ldr	r0, [pc, #132]	; (8001c78 <FreqMenu_DrawPresetMenu+0x268>)
 8001bf4:	f00e fda4 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	2302      	movs	r3, #2
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c08:	2178      	movs	r1, #120	; 0x78
 8001c0a:	481c      	ldr	r0, [pc, #112]	; (8001c7c <FreqMenu_DrawPresetMenu+0x26c>)
 8001c0c:	f00e fd98 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c10:	7abb      	ldrb	r3, [r7, #10]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	2300      	movs	r3, #0
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2302      	movs	r3, #2
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c20:	2178      	movs	r1, #120	; 0x78
 8001c22:	4817      	ldr	r0, [pc, #92]	; (8001c80 <FreqMenu_DrawPresetMenu+0x270>)
 8001c24:	f00e fd8c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c28:	7a7b      	ldrb	r3, [r7, #9]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9301      	str	r3, [sp, #4]
 8001c30:	2302      	movs	r3, #2
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c38:	2178      	movs	r1, #120	; 0x78
 8001c3a:	4812      	ldr	r0, [pc, #72]	; (8001c84 <FreqMenu_DrawPresetMenu+0x274>)
 8001c3c:	f00e fd80 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8001c40:	f001 b974 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8001c44:	080157e0 	.word	0x080157e0
 8001c48:	000124f8 	.word	0x000124f8
 8001c4c:	000186a0 	.word	0x000186a0
 8001c50:	080157f4 	.word	0x080157f4
 8001c54:	080157fc 	.word	0x080157fc
 8001c58:	08015804 	.word	0x08015804
 8001c5c:	0801580c 	.word	0x0801580c
 8001c60:	08015814 	.word	0x08015814
 8001c64:	0801581c 	.word	0x0801581c
 8001c68:	08015824 	.word	0x08015824
 8001c6c:	0801582c 	.word	0x0801582c
 8001c70:	08015834 	.word	0x08015834
 8001c74:	0801583c 	.word	0x0801583c
 8001c78:	08015844 	.word	0x08015844
 8001c7c:	0801584c 	.word	0x0801584c
 8001c80:	08015854 	.word	0x08015854
 8001c84:	0801585c 	.word	0x0801585c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	b29a      	uxth	r2, r3
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	2302      	movs	r3, #2
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c98:	2105      	movs	r1, #5
 8001c9a:	48a5      	ldr	r0, [pc, #660]	; (8001f30 <FreqMenu_DrawPresetMenu+0x520>)
 8001c9c:	f00e fd50 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	b29a      	uxth	r2, r3
 8001ca4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2302      	movs	r3, #2
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	2300      	movs	r3, #0
 8001cb0:	2105      	movs	r1, #5
 8001cb2:	48a0      	ldr	r0, [pc, #640]	; (8001f34 <FreqMenu_DrawPresetMenu+0x524>)
 8001cb4:	f00e fd44 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cb8:	7b7b      	ldrb	r3, [r7, #13]
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9301      	str	r3, [sp, #4]
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cc8:	2105      	movs	r1, #5
 8001cca:	489b      	ldr	r0, [pc, #620]	; (8001f38 <FreqMenu_DrawPresetMenu+0x528>)
 8001ccc:	f00e fd38 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd0:	7b3b      	ldrb	r3, [r7, #12]
 8001cd2:	b29a      	uxth	r2, r3
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	2302      	movs	r3, #2
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce0:	2105      	movs	r1, #5
 8001ce2:	4896      	ldr	r0, [pc, #600]	; (8001f3c <FreqMenu_DrawPresetMenu+0x52c>)
 8001ce4:	f00e fd2c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ce8:	7afb      	ldrb	r3, [r7, #11]
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cf8:	2105      	movs	r1, #5
 8001cfa:	4891      	ldr	r0, [pc, #580]	; (8001f40 <FreqMenu_DrawPresetMenu+0x530>)
 8001cfc:	f00e fd20 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d00:	7abb      	ldrb	r3, [r7, #10]
 8001d02:	b29a      	uxth	r2, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	2302      	movs	r3, #2
 8001d0a:	9300      	str	r3, [sp, #0]
 8001d0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d10:	2105      	movs	r1, #5
 8001d12:	488c      	ldr	r0, [pc, #560]	; (8001f44 <FreqMenu_DrawPresetMenu+0x534>)
 8001d14:	f00e fd14 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d18:	7a7b      	ldrb	r3, [r7, #9]
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2302      	movs	r3, #2
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d28:	2105      	movs	r1, #5
 8001d2a:	4887      	ldr	r0, [pc, #540]	; (8001f48 <FreqMenu_DrawPresetMenu+0x538>)
 8001d2c:	f00e fd08 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	2300      	movs	r3, #0
 8001d36:	9301      	str	r3, [sp, #4]
 8001d38:	2302      	movs	r3, #2
 8001d3a:	9300      	str	r3, [sp, #0]
 8001d3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d40:	2178      	movs	r1, #120	; 0x78
 8001d42:	4882      	ldr	r0, [pc, #520]	; (8001f4c <FreqMenu_DrawPresetMenu+0x53c>)
 8001d44:	f00e fcfc 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	2302      	movs	r3, #2
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d58:	2178      	movs	r1, #120	; 0x78
 8001d5a:	487d      	ldr	r0, [pc, #500]	; (8001f50 <FreqMenu_DrawPresetMenu+0x540>)
 8001d5c:	f00e fcf0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d60:	7b7b      	ldrb	r3, [r7, #13]
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	2300      	movs	r3, #0
 8001d66:	9301      	str	r3, [sp, #4]
 8001d68:	2302      	movs	r3, #2
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d70:	2178      	movs	r1, #120	; 0x78
 8001d72:	4878      	ldr	r0, [pc, #480]	; (8001f54 <FreqMenu_DrawPresetMenu+0x544>)
 8001d74:	f00e fce4 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d78:	7b3b      	ldrb	r3, [r7, #12]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	9301      	str	r3, [sp, #4]
 8001d80:	2302      	movs	r3, #2
 8001d82:	9300      	str	r3, [sp, #0]
 8001d84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d88:	2178      	movs	r1, #120	; 0x78
 8001d8a:	4873      	ldr	r0, [pc, #460]	; (8001f58 <FreqMenu_DrawPresetMenu+0x548>)
 8001d8c:	f00e fcd8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d90:	7afb      	ldrb	r3, [r7, #11]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	2300      	movs	r3, #0
 8001d96:	9301      	str	r3, [sp, #4]
 8001d98:	2302      	movs	r3, #2
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da0:	2178      	movs	r1, #120	; 0x78
 8001da2:	486e      	ldr	r0, [pc, #440]	; (8001f5c <FreqMenu_DrawPresetMenu+0x54c>)
 8001da4:	f00e fccc 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001da8:	7abb      	ldrb	r3, [r7, #10]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	2300      	movs	r3, #0
 8001dae:	9301      	str	r3, [sp, #4]
 8001db0:	2302      	movs	r3, #2
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001db8:	2178      	movs	r1, #120	; 0x78
 8001dba:	4869      	ldr	r0, [pc, #420]	; (8001f60 <FreqMenu_DrawPresetMenu+0x550>)
 8001dbc:	f00e fcc0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc0:	7a7b      	ldrb	r3, [r7, #9]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9301      	str	r3, [sp, #4]
 8001dc8:	2302      	movs	r3, #2
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd0:	2178      	movs	r1, #120	; 0x78
 8001dd2:	4864      	ldr	r0, [pc, #400]	; (8001f64 <FreqMenu_DrawPresetMenu+0x554>)
 8001dd4:	f00e fcb4 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8001dd8:	f001 b8a8 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	2300      	movs	r3, #0
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	2302      	movs	r3, #2
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dec:	2105      	movs	r1, #5
 8001dee:	4850      	ldr	r0, [pc, #320]	; (8001f30 <FreqMenu_DrawPresetMenu+0x520>)
 8001df0:	f00e fca6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df4:	7bbb      	ldrb	r3, [r7, #14]
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	2300      	movs	r3, #0
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e04:	2105      	movs	r1, #5
 8001e06:	484b      	ldr	r0, [pc, #300]	; (8001f34 <FreqMenu_DrawPresetMenu+0x524>)
 8001e08:	f00e fc9a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	b29a      	uxth	r2, r3
 8001e10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e14:	9301      	str	r3, [sp, #4]
 8001e16:	2302      	movs	r3, #2
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2105      	movs	r1, #5
 8001e1e:	4846      	ldr	r0, [pc, #280]	; (8001f38 <FreqMenu_DrawPresetMenu+0x528>)
 8001e20:	f00e fc8e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e24:	7b3b      	ldrb	r3, [r7, #12]
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e34:	2105      	movs	r1, #5
 8001e36:	4841      	ldr	r0, [pc, #260]	; (8001f3c <FreqMenu_DrawPresetMenu+0x52c>)
 8001e38:	f00e fc82 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e3c:	7afb      	ldrb	r3, [r7, #11]
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	2300      	movs	r3, #0
 8001e42:	9301      	str	r3, [sp, #4]
 8001e44:	2302      	movs	r3, #2
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e4c:	2105      	movs	r1, #5
 8001e4e:	483c      	ldr	r0, [pc, #240]	; (8001f40 <FreqMenu_DrawPresetMenu+0x530>)
 8001e50:	f00e fc76 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e54:	7abb      	ldrb	r3, [r7, #10]
 8001e56:	b29a      	uxth	r2, r3
 8001e58:	2300      	movs	r3, #0
 8001e5a:	9301      	str	r3, [sp, #4]
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e64:	2105      	movs	r1, #5
 8001e66:	4837      	ldr	r0, [pc, #220]	; (8001f44 <FreqMenu_DrawPresetMenu+0x534>)
 8001e68:	f00e fc6a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e6c:	7a7b      	ldrb	r3, [r7, #9]
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	2300      	movs	r3, #0
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	2302      	movs	r3, #2
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e7c:	2105      	movs	r1, #5
 8001e7e:	4832      	ldr	r0, [pc, #200]	; (8001f48 <FreqMenu_DrawPresetMenu+0x538>)
 8001e80:	f00e fc5e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e94:	2178      	movs	r1, #120	; 0x78
 8001e96:	482d      	ldr	r0, [pc, #180]	; (8001f4c <FreqMenu_DrawPresetMenu+0x53c>)
 8001e98:	f00e fc52 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e9c:	7bbb      	ldrb	r3, [r7, #14]
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eac:	2178      	movs	r1, #120	; 0x78
 8001eae:	4828      	ldr	r0, [pc, #160]	; (8001f50 <FreqMenu_DrawPresetMenu+0x540>)
 8001eb0:	f00e fc46 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb4:	7b7b      	ldrb	r3, [r7, #13]
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	2300      	movs	r3, #0
 8001eba:	9301      	str	r3, [sp, #4]
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	9300      	str	r3, [sp, #0]
 8001ec0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec4:	2178      	movs	r1, #120	; 0x78
 8001ec6:	4823      	ldr	r0, [pc, #140]	; (8001f54 <FreqMenu_DrawPresetMenu+0x544>)
 8001ec8:	f00e fc3a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ecc:	7b3b      	ldrb	r3, [r7, #12]
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	9301      	str	r3, [sp, #4]
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001edc:	2178      	movs	r1, #120	; 0x78
 8001ede:	481e      	ldr	r0, [pc, #120]	; (8001f58 <FreqMenu_DrawPresetMenu+0x548>)
 8001ee0:	f00e fc2e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee4:	7afb      	ldrb	r3, [r7, #11]
 8001ee6:	b29a      	uxth	r2, r3
 8001ee8:	2300      	movs	r3, #0
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	2302      	movs	r3, #2
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef4:	2178      	movs	r1, #120	; 0x78
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <FreqMenu_DrawPresetMenu+0x54c>)
 8001ef8:	f00e fc22 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001efc:	7abb      	ldrb	r3, [r7, #10]
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	2300      	movs	r3, #0
 8001f02:	9301      	str	r3, [sp, #4]
 8001f04:	2302      	movs	r3, #2
 8001f06:	9300      	str	r3, [sp, #0]
 8001f08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f0c:	2178      	movs	r1, #120	; 0x78
 8001f0e:	4814      	ldr	r0, [pc, #80]	; (8001f60 <FreqMenu_DrawPresetMenu+0x550>)
 8001f10:	f00e fc16 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f14:	7a7b      	ldrb	r3, [r7, #9]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f24:	2178      	movs	r1, #120	; 0x78
 8001f26:	480f      	ldr	r0, [pc, #60]	; (8001f64 <FreqMenu_DrawPresetMenu+0x554>)
 8001f28:	f00e fc0a 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8001f2c:	f000 bffe 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8001f30:	080157f4 	.word	0x080157f4
 8001f34:	080157fc 	.word	0x080157fc
 8001f38:	08015804 	.word	0x08015804
 8001f3c:	0801580c 	.word	0x0801580c
 8001f40:	08015814 	.word	0x08015814
 8001f44:	0801581c 	.word	0x0801581c
 8001f48:	08015824 	.word	0x08015824
 8001f4c:	0801582c 	.word	0x0801582c
 8001f50:	08015834 	.word	0x08015834
 8001f54:	0801583c 	.word	0x0801583c
 8001f58:	08015844 	.word	0x08015844
 8001f5c:	0801584c 	.word	0x0801584c
 8001f60:	08015854 	.word	0x08015854
 8001f64:	0801585c 	.word	0x0801585c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	9301      	str	r3, [sp, #4]
 8001f70:	2302      	movs	r3, #2
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f78:	2105      	movs	r1, #5
 8001f7a:	48a5      	ldr	r0, [pc, #660]	; (8002210 <FreqMenu_DrawPresetMenu+0x800>)
 8001f7c:	f00e fbe0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f80:	7bbb      	ldrb	r3, [r7, #14]
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	2300      	movs	r3, #0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	2302      	movs	r3, #2
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f90:	2105      	movs	r1, #5
 8001f92:	48a0      	ldr	r0, [pc, #640]	; (8002214 <FreqMenu_DrawPresetMenu+0x804>)
 8001f94:	f00e fbd4 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f98:	7b7b      	ldrb	r3, [r7, #13]
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	9301      	str	r3, [sp, #4]
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	9300      	str	r3, [sp, #0]
 8001fa4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fa8:	2105      	movs	r1, #5
 8001faa:	489b      	ldr	r0, [pc, #620]	; (8002218 <FreqMenu_DrawPresetMenu+0x808>)
 8001fac:	f00e fbc8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fb0:	7b3b      	ldrb	r3, [r7, #12]
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	2302      	movs	r3, #2
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	2105      	movs	r1, #5
 8001fc2:	4896      	ldr	r0, [pc, #600]	; (800221c <FreqMenu_DrawPresetMenu+0x80c>)
 8001fc4:	f00e fbbc 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fc8:	7afb      	ldrb	r3, [r7, #11]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	2300      	movs	r3, #0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fd8:	2105      	movs	r1, #5
 8001fda:	4891      	ldr	r0, [pc, #580]	; (8002220 <FreqMenu_DrawPresetMenu+0x810>)
 8001fdc:	f00e fbb0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe0:	7abb      	ldrb	r3, [r7, #10]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	2302      	movs	r3, #2
 8001fea:	9300      	str	r3, [sp, #0]
 8001fec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff0:	2105      	movs	r1, #5
 8001ff2:	488c      	ldr	r0, [pc, #560]	; (8002224 <FreqMenu_DrawPresetMenu+0x814>)
 8001ff4:	f00e fba4 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ff8:	7a7b      	ldrb	r3, [r7, #9]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	9301      	str	r3, [sp, #4]
 8002000:	2302      	movs	r3, #2
 8002002:	9300      	str	r3, [sp, #0]
 8002004:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002008:	2105      	movs	r1, #5
 800200a:	4887      	ldr	r0, [pc, #540]	; (8002228 <FreqMenu_DrawPresetMenu+0x818>)
 800200c:	f00e fb98 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	b29a      	uxth	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	2302      	movs	r3, #2
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002020:	2178      	movs	r1, #120	; 0x78
 8002022:	4882      	ldr	r0, [pc, #520]	; (800222c <FreqMenu_DrawPresetMenu+0x81c>)
 8002024:	f00e fb8c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002028:	7bbb      	ldrb	r3, [r7, #14]
 800202a:	b29a      	uxth	r2, r3
 800202c:	2300      	movs	r3, #0
 800202e:	9301      	str	r3, [sp, #4]
 8002030:	2302      	movs	r3, #2
 8002032:	9300      	str	r3, [sp, #0]
 8002034:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002038:	2178      	movs	r1, #120	; 0x78
 800203a:	487d      	ldr	r0, [pc, #500]	; (8002230 <FreqMenu_DrawPresetMenu+0x820>)
 800203c:	f00e fb80 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002040:	7b7b      	ldrb	r3, [r7, #13]
 8002042:	b29a      	uxth	r2, r3
 8002044:	2300      	movs	r3, #0
 8002046:	9301      	str	r3, [sp, #4]
 8002048:	2302      	movs	r3, #2
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002050:	2178      	movs	r1, #120	; 0x78
 8002052:	4878      	ldr	r0, [pc, #480]	; (8002234 <FreqMenu_DrawPresetMenu+0x824>)
 8002054:	f00e fb74 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002058:	7b3b      	ldrb	r3, [r7, #12]
 800205a:	b29a      	uxth	r2, r3
 800205c:	2300      	movs	r3, #0
 800205e:	9301      	str	r3, [sp, #4]
 8002060:	2302      	movs	r3, #2
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002068:	2178      	movs	r1, #120	; 0x78
 800206a:	4873      	ldr	r0, [pc, #460]	; (8002238 <FreqMenu_DrawPresetMenu+0x828>)
 800206c:	f00e fb68 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002070:	7afb      	ldrb	r3, [r7, #11]
 8002072:	b29a      	uxth	r2, r3
 8002074:	2300      	movs	r3, #0
 8002076:	9301      	str	r3, [sp, #4]
 8002078:	2302      	movs	r3, #2
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002080:	2178      	movs	r1, #120	; 0x78
 8002082:	486e      	ldr	r0, [pc, #440]	; (800223c <FreqMenu_DrawPresetMenu+0x82c>)
 8002084:	f00e fb5c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002088:	7abb      	ldrb	r3, [r7, #10]
 800208a:	b29a      	uxth	r2, r3
 800208c:	2300      	movs	r3, #0
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2302      	movs	r3, #2
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002098:	2178      	movs	r1, #120	; 0x78
 800209a:	4869      	ldr	r0, [pc, #420]	; (8002240 <FreqMenu_DrawPresetMenu+0x830>)
 800209c:	f00e fb50 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a0:	7a7b      	ldrb	r3, [r7, #9]
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	2300      	movs	r3, #0
 80020a6:	9301      	str	r3, [sp, #4]
 80020a8:	2302      	movs	r3, #2
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b0:	2178      	movs	r1, #120	; 0x78
 80020b2:	4864      	ldr	r0, [pc, #400]	; (8002244 <FreqMenu_DrawPresetMenu+0x834>)
 80020b4:	f00e fb44 	bl	8010740 <ILI9341_Draw_Text>
				break;
 80020b8:	f000 bf38 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	b29a      	uxth	r2, r3
 80020c0:	2300      	movs	r3, #0
 80020c2:	9301      	str	r3, [sp, #4]
 80020c4:	2302      	movs	r3, #2
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020cc:	2105      	movs	r1, #5
 80020ce:	4850      	ldr	r0, [pc, #320]	; (8002210 <FreqMenu_DrawPresetMenu+0x800>)
 80020d0:	f00e fb36 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d4:	7bbb      	ldrb	r3, [r7, #14]
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	2300      	movs	r3, #0
 80020da:	9301      	str	r3, [sp, #4]
 80020dc:	2302      	movs	r3, #2
 80020de:	9300      	str	r3, [sp, #0]
 80020e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e4:	2105      	movs	r1, #5
 80020e6:	484b      	ldr	r0, [pc, #300]	; (8002214 <FreqMenu_DrawPresetMenu+0x804>)
 80020e8:	f00e fb2a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020ec:	7b7b      	ldrb	r3, [r7, #13]
 80020ee:	b29a      	uxth	r2, r3
 80020f0:	2300      	movs	r3, #0
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2302      	movs	r3, #2
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020fc:	2105      	movs	r1, #5
 80020fe:	4846      	ldr	r0, [pc, #280]	; (8002218 <FreqMenu_DrawPresetMenu+0x808>)
 8002100:	f00e fb1e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002104:	7b3b      	ldrb	r3, [r7, #12]
 8002106:	b29a      	uxth	r2, r3
 8002108:	2300      	movs	r3, #0
 800210a:	9301      	str	r3, [sp, #4]
 800210c:	2302      	movs	r3, #2
 800210e:	9300      	str	r3, [sp, #0]
 8002110:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002114:	2105      	movs	r1, #5
 8002116:	4841      	ldr	r0, [pc, #260]	; (800221c <FreqMenu_DrawPresetMenu+0x80c>)
 8002118:	f00e fb12 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800211c:	7afb      	ldrb	r3, [r7, #11]
 800211e:	b29a      	uxth	r2, r3
 8002120:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2302      	movs	r3, #2
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	2105      	movs	r1, #5
 800212e:	483c      	ldr	r0, [pc, #240]	; (8002220 <FreqMenu_DrawPresetMenu+0x810>)
 8002130:	f00e fb06 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002134:	7abb      	ldrb	r3, [r7, #10]
 8002136:	b29a      	uxth	r2, r3
 8002138:	2300      	movs	r3, #0
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2302      	movs	r3, #2
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002144:	2105      	movs	r1, #5
 8002146:	4837      	ldr	r0, [pc, #220]	; (8002224 <FreqMenu_DrawPresetMenu+0x814>)
 8002148:	f00e fafa 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800214c:	7a7b      	ldrb	r3, [r7, #9]
 800214e:	b29a      	uxth	r2, r3
 8002150:	2300      	movs	r3, #0
 8002152:	9301      	str	r3, [sp, #4]
 8002154:	2302      	movs	r3, #2
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800215c:	2105      	movs	r1, #5
 800215e:	4832      	ldr	r0, [pc, #200]	; (8002228 <FreqMenu_DrawPresetMenu+0x818>)
 8002160:	f00e faee 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	b29a      	uxth	r2, r3
 8002168:	2300      	movs	r3, #0
 800216a:	9301      	str	r3, [sp, #4]
 800216c:	2302      	movs	r3, #2
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002174:	2178      	movs	r1, #120	; 0x78
 8002176:	482d      	ldr	r0, [pc, #180]	; (800222c <FreqMenu_DrawPresetMenu+0x81c>)
 8002178:	f00e fae2 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800217c:	7bbb      	ldrb	r3, [r7, #14]
 800217e:	b29a      	uxth	r2, r3
 8002180:	2300      	movs	r3, #0
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	2302      	movs	r3, #2
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800218c:	2178      	movs	r1, #120	; 0x78
 800218e:	4828      	ldr	r0, [pc, #160]	; (8002230 <FreqMenu_DrawPresetMenu+0x820>)
 8002190:	f00e fad6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002194:	7b7b      	ldrb	r3, [r7, #13]
 8002196:	b29a      	uxth	r2, r3
 8002198:	2300      	movs	r3, #0
 800219a:	9301      	str	r3, [sp, #4]
 800219c:	2302      	movs	r3, #2
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a4:	2178      	movs	r1, #120	; 0x78
 80021a6:	4823      	ldr	r0, [pc, #140]	; (8002234 <FreqMenu_DrawPresetMenu+0x824>)
 80021a8:	f00e faca 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ac:	7b3b      	ldrb	r3, [r7, #12]
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	2300      	movs	r3, #0
 80021b2:	9301      	str	r3, [sp, #4]
 80021b4:	2302      	movs	r3, #2
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021bc:	2178      	movs	r1, #120	; 0x78
 80021be:	481e      	ldr	r0, [pc, #120]	; (8002238 <FreqMenu_DrawPresetMenu+0x828>)
 80021c0:	f00e fabe 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	2300      	movs	r3, #0
 80021ca:	9301      	str	r3, [sp, #4]
 80021cc:	2302      	movs	r3, #2
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d4:	2178      	movs	r1, #120	; 0x78
 80021d6:	4819      	ldr	r0, [pc, #100]	; (800223c <FreqMenu_DrawPresetMenu+0x82c>)
 80021d8:	f00e fab2 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021dc:	7abb      	ldrb	r3, [r7, #10]
 80021de:	b29a      	uxth	r2, r3
 80021e0:	2300      	movs	r3, #0
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	2302      	movs	r3, #2
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021ec:	2178      	movs	r1, #120	; 0x78
 80021ee:	4814      	ldr	r0, [pc, #80]	; (8002240 <FreqMenu_DrawPresetMenu+0x830>)
 80021f0:	f00e faa6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021f4:	7a7b      	ldrb	r3, [r7, #9]
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	2300      	movs	r3, #0
 80021fa:	9301      	str	r3, [sp, #4]
 80021fc:	2302      	movs	r3, #2
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002204:	2178      	movs	r1, #120	; 0x78
 8002206:	480f      	ldr	r0, [pc, #60]	; (8002244 <FreqMenu_DrawPresetMenu+0x834>)
 8002208:	f00e fa9a 	bl	8010740 <ILI9341_Draw_Text>
				break;
 800220c:	f000 be8e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002210:	080157f4 	.word	0x080157f4
 8002214:	080157fc 	.word	0x080157fc
 8002218:	08015804 	.word	0x08015804
 800221c:	0801580c 	.word	0x0801580c
 8002220:	08015814 	.word	0x08015814
 8002224:	0801581c 	.word	0x0801581c
 8002228:	08015824 	.word	0x08015824
 800222c:	0801582c 	.word	0x0801582c
 8002230:	08015834 	.word	0x08015834
 8002234:	0801583c 	.word	0x0801583c
 8002238:	08015844 	.word	0x08015844
 800223c:	0801584c 	.word	0x0801584c
 8002240:	08015854 	.word	0x08015854
 8002244:	0801585c 	.word	0x0801585c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	b29a      	uxth	r2, r3
 800224c:	2300      	movs	r3, #0
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	2302      	movs	r3, #2
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002258:	2105      	movs	r1, #5
 800225a:	48a5      	ldr	r0, [pc, #660]	; (80024f0 <FreqMenu_DrawPresetMenu+0xae0>)
 800225c:	f00e fa70 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002260:	7bbb      	ldrb	r3, [r7, #14]
 8002262:	b29a      	uxth	r2, r3
 8002264:	2300      	movs	r3, #0
 8002266:	9301      	str	r3, [sp, #4]
 8002268:	2302      	movs	r3, #2
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002270:	2105      	movs	r1, #5
 8002272:	48a0      	ldr	r0, [pc, #640]	; (80024f4 <FreqMenu_DrawPresetMenu+0xae4>)
 8002274:	f00e fa64 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002278:	7b7b      	ldrb	r3, [r7, #13]
 800227a:	b29a      	uxth	r2, r3
 800227c:	2300      	movs	r3, #0
 800227e:	9301      	str	r3, [sp, #4]
 8002280:	2302      	movs	r3, #2
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002288:	2105      	movs	r1, #5
 800228a:	489b      	ldr	r0, [pc, #620]	; (80024f8 <FreqMenu_DrawPresetMenu+0xae8>)
 800228c:	f00e fa58 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002290:	7b3b      	ldrb	r3, [r7, #12]
 8002292:	b29a      	uxth	r2, r3
 8002294:	2300      	movs	r3, #0
 8002296:	9301      	str	r3, [sp, #4]
 8002298:	2302      	movs	r3, #2
 800229a:	9300      	str	r3, [sp, #0]
 800229c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a0:	2105      	movs	r1, #5
 80022a2:	4896      	ldr	r0, [pc, #600]	; (80024fc <FreqMenu_DrawPresetMenu+0xaec>)
 80022a4:	f00e fa4c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022a8:	7afb      	ldrb	r3, [r7, #11]
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	2300      	movs	r3, #0
 80022ae:	9301      	str	r3, [sp, #4]
 80022b0:	2302      	movs	r3, #2
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022b8:	2105      	movs	r1, #5
 80022ba:	4891      	ldr	r0, [pc, #580]	; (8002500 <FreqMenu_DrawPresetMenu+0xaf0>)
 80022bc:	f00e fa40 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022c0:	7abb      	ldrb	r3, [r7, #10]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	2302      	movs	r3, #2
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	2105      	movs	r1, #5
 80022d2:	488c      	ldr	r0, [pc, #560]	; (8002504 <FreqMenu_DrawPresetMenu+0xaf4>)
 80022d4:	f00e fa34 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022d8:	7a7b      	ldrb	r3, [r7, #9]
 80022da:	b29a      	uxth	r2, r3
 80022dc:	2300      	movs	r3, #0
 80022de:	9301      	str	r3, [sp, #4]
 80022e0:	2302      	movs	r3, #2
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022e8:	2105      	movs	r1, #5
 80022ea:	4887      	ldr	r0, [pc, #540]	; (8002508 <FreqMenu_DrawPresetMenu+0xaf8>)
 80022ec:	f00e fa28 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	2300      	movs	r3, #0
 80022f6:	9301      	str	r3, [sp, #4]
 80022f8:	2302      	movs	r3, #2
 80022fa:	9300      	str	r3, [sp, #0]
 80022fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002300:	2178      	movs	r1, #120	; 0x78
 8002302:	4882      	ldr	r0, [pc, #520]	; (800250c <FreqMenu_DrawPresetMenu+0xafc>)
 8002304:	f00e fa1c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002308:	7bbb      	ldrb	r3, [r7, #14]
 800230a:	b29a      	uxth	r2, r3
 800230c:	2300      	movs	r3, #0
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2302      	movs	r3, #2
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002318:	2178      	movs	r1, #120	; 0x78
 800231a:	487d      	ldr	r0, [pc, #500]	; (8002510 <FreqMenu_DrawPresetMenu+0xb00>)
 800231c:	f00e fa10 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002320:	7b7b      	ldrb	r3, [r7, #13]
 8002322:	b29a      	uxth	r2, r3
 8002324:	2300      	movs	r3, #0
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	2302      	movs	r3, #2
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002330:	2178      	movs	r1, #120	; 0x78
 8002332:	4878      	ldr	r0, [pc, #480]	; (8002514 <FreqMenu_DrawPresetMenu+0xb04>)
 8002334:	f00e fa04 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002338:	7b3b      	ldrb	r3, [r7, #12]
 800233a:	b29a      	uxth	r2, r3
 800233c:	2300      	movs	r3, #0
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	2302      	movs	r3, #2
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002348:	2178      	movs	r1, #120	; 0x78
 800234a:	4873      	ldr	r0, [pc, #460]	; (8002518 <FreqMenu_DrawPresetMenu+0xb08>)
 800234c:	f00e f9f8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002350:	7afb      	ldrb	r3, [r7, #11]
 8002352:	b29a      	uxth	r2, r3
 8002354:	2300      	movs	r3, #0
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	2302      	movs	r3, #2
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002360:	2178      	movs	r1, #120	; 0x78
 8002362:	486e      	ldr	r0, [pc, #440]	; (800251c <FreqMenu_DrawPresetMenu+0xb0c>)
 8002364:	f00e f9ec 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002368:	7abb      	ldrb	r3, [r7, #10]
 800236a:	b29a      	uxth	r2, r3
 800236c:	2300      	movs	r3, #0
 800236e:	9301      	str	r3, [sp, #4]
 8002370:	2302      	movs	r3, #2
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002378:	2178      	movs	r1, #120	; 0x78
 800237a:	4869      	ldr	r0, [pc, #420]	; (8002520 <FreqMenu_DrawPresetMenu+0xb10>)
 800237c:	f00e f9e0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002380:	7a7b      	ldrb	r3, [r7, #9]
 8002382:	b29a      	uxth	r2, r3
 8002384:	2300      	movs	r3, #0
 8002386:	9301      	str	r3, [sp, #4]
 8002388:	2302      	movs	r3, #2
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002390:	2178      	movs	r1, #120	; 0x78
 8002392:	4864      	ldr	r0, [pc, #400]	; (8002524 <FreqMenu_DrawPresetMenu+0xb14>)
 8002394:	f00e f9d4 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8002398:	f000 bdc8 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	b29a      	uxth	r2, r3
 80023a0:	2300      	movs	r3, #0
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	2302      	movs	r3, #2
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023ac:	2105      	movs	r1, #5
 80023ae:	4850      	ldr	r0, [pc, #320]	; (80024f0 <FreqMenu_DrawPresetMenu+0xae0>)
 80023b0:	f00e f9c6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b4:	7bbb      	ldrb	r3, [r7, #14]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	2300      	movs	r3, #0
 80023ba:	9301      	str	r3, [sp, #4]
 80023bc:	2302      	movs	r3, #2
 80023be:	9300      	str	r3, [sp, #0]
 80023c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c4:	2105      	movs	r1, #5
 80023c6:	484b      	ldr	r0, [pc, #300]	; (80024f4 <FreqMenu_DrawPresetMenu+0xae4>)
 80023c8:	f00e f9ba 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023cc:	7b7b      	ldrb	r3, [r7, #13]
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	9301      	str	r3, [sp, #4]
 80023d4:	2302      	movs	r3, #2
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023dc:	2105      	movs	r1, #5
 80023de:	4846      	ldr	r0, [pc, #280]	; (80024f8 <FreqMenu_DrawPresetMenu+0xae8>)
 80023e0:	f00e f9ae 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e4:	7b3b      	ldrb	r3, [r7, #12]
 80023e6:	b29a      	uxth	r2, r3
 80023e8:	2300      	movs	r3, #0
 80023ea:	9301      	str	r3, [sp, #4]
 80023ec:	2302      	movs	r3, #2
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f4:	2105      	movs	r1, #5
 80023f6:	4841      	ldr	r0, [pc, #260]	; (80024fc <FreqMenu_DrawPresetMenu+0xaec>)
 80023f8:	f00e f9a2 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023fc:	7afb      	ldrb	r3, [r7, #11]
 80023fe:	b29a      	uxth	r2, r3
 8002400:	2300      	movs	r3, #0
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2302      	movs	r3, #2
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800240c:	2105      	movs	r1, #5
 800240e:	483c      	ldr	r0, [pc, #240]	; (8002500 <FreqMenu_DrawPresetMenu+0xaf0>)
 8002410:	f00e f996 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002414:	7abb      	ldrb	r3, [r7, #10]
 8002416:	b29a      	uxth	r2, r3
 8002418:	2300      	movs	r3, #0
 800241a:	9301      	str	r3, [sp, #4]
 800241c:	2302      	movs	r3, #2
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002424:	2105      	movs	r1, #5
 8002426:	4837      	ldr	r0, [pc, #220]	; (8002504 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002428:	f00e f98a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800242c:	7a7b      	ldrb	r3, [r7, #9]
 800242e:	b29a      	uxth	r2, r3
 8002430:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002434:	9301      	str	r3, [sp, #4]
 8002436:	2302      	movs	r3, #2
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2300      	movs	r3, #0
 800243c:	2105      	movs	r1, #5
 800243e:	4832      	ldr	r0, [pc, #200]	; (8002508 <FreqMenu_DrawPresetMenu+0xaf8>)
 8002440:	f00e f97e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	b29a      	uxth	r2, r3
 8002448:	2300      	movs	r3, #0
 800244a:	9301      	str	r3, [sp, #4]
 800244c:	2302      	movs	r3, #2
 800244e:	9300      	str	r3, [sp, #0]
 8002450:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002454:	2178      	movs	r1, #120	; 0x78
 8002456:	482d      	ldr	r0, [pc, #180]	; (800250c <FreqMenu_DrawPresetMenu+0xafc>)
 8002458:	f00e f972 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800245c:	7bbb      	ldrb	r3, [r7, #14]
 800245e:	b29a      	uxth	r2, r3
 8002460:	2300      	movs	r3, #0
 8002462:	9301      	str	r3, [sp, #4]
 8002464:	2302      	movs	r3, #2
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800246c:	2178      	movs	r1, #120	; 0x78
 800246e:	4828      	ldr	r0, [pc, #160]	; (8002510 <FreqMenu_DrawPresetMenu+0xb00>)
 8002470:	f00e f966 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002474:	7b7b      	ldrb	r3, [r7, #13]
 8002476:	b29a      	uxth	r2, r3
 8002478:	2300      	movs	r3, #0
 800247a:	9301      	str	r3, [sp, #4]
 800247c:	2302      	movs	r3, #2
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002484:	2178      	movs	r1, #120	; 0x78
 8002486:	4823      	ldr	r0, [pc, #140]	; (8002514 <FreqMenu_DrawPresetMenu+0xb04>)
 8002488:	f00e f95a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800248c:	7b3b      	ldrb	r3, [r7, #12]
 800248e:	b29a      	uxth	r2, r3
 8002490:	2300      	movs	r3, #0
 8002492:	9301      	str	r3, [sp, #4]
 8002494:	2302      	movs	r3, #2
 8002496:	9300      	str	r3, [sp, #0]
 8002498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800249c:	2178      	movs	r1, #120	; 0x78
 800249e:	481e      	ldr	r0, [pc, #120]	; (8002518 <FreqMenu_DrawPresetMenu+0xb08>)
 80024a0:	f00e f94e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a4:	7afb      	ldrb	r3, [r7, #11]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	2300      	movs	r3, #0
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	2302      	movs	r3, #2
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b4:	2178      	movs	r1, #120	; 0x78
 80024b6:	4819      	ldr	r0, [pc, #100]	; (800251c <FreqMenu_DrawPresetMenu+0xb0c>)
 80024b8:	f00e f942 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024bc:	7abb      	ldrb	r3, [r7, #10]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	2300      	movs	r3, #0
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2302      	movs	r3, #2
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024cc:	2178      	movs	r1, #120	; 0x78
 80024ce:	4814      	ldr	r0, [pc, #80]	; (8002520 <FreqMenu_DrawPresetMenu+0xb10>)
 80024d0:	f00e f936 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024d4:	7a7b      	ldrb	r3, [r7, #9]
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	2300      	movs	r3, #0
 80024da:	9301      	str	r3, [sp, #4]
 80024dc:	2302      	movs	r3, #2
 80024de:	9300      	str	r3, [sp, #0]
 80024e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024e4:	2178      	movs	r1, #120	; 0x78
 80024e6:	480f      	ldr	r0, [pc, #60]	; (8002524 <FreqMenu_DrawPresetMenu+0xb14>)
 80024e8:	f00e f92a 	bl	8010740 <ILI9341_Draw_Text>
				break;
 80024ec:	f000 bd1e 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 80024f0:	080157f4 	.word	0x080157f4
 80024f4:	080157fc 	.word	0x080157fc
 80024f8:	08015804 	.word	0x08015804
 80024fc:	0801580c 	.word	0x0801580c
 8002500:	08015814 	.word	0x08015814
 8002504:	0801581c 	.word	0x0801581c
 8002508:	08015824 	.word	0x08015824
 800250c:	0801582c 	.word	0x0801582c
 8002510:	08015834 	.word	0x08015834
 8002514:	0801583c 	.word	0x0801583c
 8002518:	08015844 	.word	0x08015844
 800251c:	0801584c 	.word	0x0801584c
 8002520:	08015854 	.word	0x08015854
 8002524:	0801585c 	.word	0x0801585c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002538:	2105      	movs	r1, #5
 800253a:	48a5      	ldr	r0, [pc, #660]	; (80027d0 <FreqMenu_DrawPresetMenu+0xdc0>)
 800253c:	f00e f900 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002540:	7bbb      	ldrb	r3, [r7, #14]
 8002542:	b29a      	uxth	r2, r3
 8002544:	2300      	movs	r3, #0
 8002546:	9301      	str	r3, [sp, #4]
 8002548:	2302      	movs	r3, #2
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002550:	2105      	movs	r1, #5
 8002552:	48a0      	ldr	r0, [pc, #640]	; (80027d4 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002554:	f00e f8f4 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002558:	7b7b      	ldrb	r3, [r7, #13]
 800255a:	b29a      	uxth	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002568:	2105      	movs	r1, #5
 800256a:	489b      	ldr	r0, [pc, #620]	; (80027d8 <FreqMenu_DrawPresetMenu+0xdc8>)
 800256c:	f00e f8e8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002570:	7b3b      	ldrb	r3, [r7, #12]
 8002572:	b29a      	uxth	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002580:	2105      	movs	r1, #5
 8002582:	4896      	ldr	r0, [pc, #600]	; (80027dc <FreqMenu_DrawPresetMenu+0xdcc>)
 8002584:	f00e f8dc 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002588:	7afb      	ldrb	r3, [r7, #11]
 800258a:	b29a      	uxth	r2, r3
 800258c:	2300      	movs	r3, #0
 800258e:	9301      	str	r3, [sp, #4]
 8002590:	2302      	movs	r3, #2
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002598:	2105      	movs	r1, #5
 800259a:	4891      	ldr	r0, [pc, #580]	; (80027e0 <FreqMenu_DrawPresetMenu+0xdd0>)
 800259c:	f00e f8d0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a0:	7abb      	ldrb	r3, [r7, #10]
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	2300      	movs	r3, #0
 80025a6:	9301      	str	r3, [sp, #4]
 80025a8:	2302      	movs	r3, #2
 80025aa:	9300      	str	r3, [sp, #0]
 80025ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b0:	2105      	movs	r1, #5
 80025b2:	488c      	ldr	r0, [pc, #560]	; (80027e4 <FreqMenu_DrawPresetMenu+0xdd4>)
 80025b4:	f00e f8c4 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025b8:	7a7b      	ldrb	r3, [r7, #9]
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	2300      	movs	r3, #0
 80025be:	9301      	str	r3, [sp, #4]
 80025c0:	2302      	movs	r3, #2
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025c8:	2105      	movs	r1, #5
 80025ca:	4887      	ldr	r0, [pc, #540]	; (80027e8 <FreqMenu_DrawPresetMenu+0xdd8>)
 80025cc:	f00e f8b8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	b29a      	uxth	r2, r3
 80025d4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2302      	movs	r3, #2
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	2300      	movs	r3, #0
 80025e0:	2178      	movs	r1, #120	; 0x78
 80025e2:	4882      	ldr	r0, [pc, #520]	; (80027ec <FreqMenu_DrawPresetMenu+0xddc>)
 80025e4:	f00e f8ac 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025e8:	7bbb      	ldrb	r3, [r7, #14]
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	2300      	movs	r3, #0
 80025ee:	9301      	str	r3, [sp, #4]
 80025f0:	2302      	movs	r3, #2
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025f8:	2178      	movs	r1, #120	; 0x78
 80025fa:	487d      	ldr	r0, [pc, #500]	; (80027f0 <FreqMenu_DrawPresetMenu+0xde0>)
 80025fc:	f00e f8a0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002600:	7b7b      	ldrb	r3, [r7, #13]
 8002602:	b29a      	uxth	r2, r3
 8002604:	2300      	movs	r3, #0
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	2302      	movs	r3, #2
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002610:	2178      	movs	r1, #120	; 0x78
 8002612:	4878      	ldr	r0, [pc, #480]	; (80027f4 <FreqMenu_DrawPresetMenu+0xde4>)
 8002614:	f00e f894 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002618:	7b3b      	ldrb	r3, [r7, #12]
 800261a:	b29a      	uxth	r2, r3
 800261c:	2300      	movs	r3, #0
 800261e:	9301      	str	r3, [sp, #4]
 8002620:	2302      	movs	r3, #2
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002628:	2178      	movs	r1, #120	; 0x78
 800262a:	4873      	ldr	r0, [pc, #460]	; (80027f8 <FreqMenu_DrawPresetMenu+0xde8>)
 800262c:	f00e f888 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002630:	7afb      	ldrb	r3, [r7, #11]
 8002632:	b29a      	uxth	r2, r3
 8002634:	2300      	movs	r3, #0
 8002636:	9301      	str	r3, [sp, #4]
 8002638:	2302      	movs	r3, #2
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002640:	2178      	movs	r1, #120	; 0x78
 8002642:	486e      	ldr	r0, [pc, #440]	; (80027fc <FreqMenu_DrawPresetMenu+0xdec>)
 8002644:	f00e f87c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002648:	7abb      	ldrb	r3, [r7, #10]
 800264a:	b29a      	uxth	r2, r3
 800264c:	2300      	movs	r3, #0
 800264e:	9301      	str	r3, [sp, #4]
 8002650:	2302      	movs	r3, #2
 8002652:	9300      	str	r3, [sp, #0]
 8002654:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002658:	2178      	movs	r1, #120	; 0x78
 800265a:	4869      	ldr	r0, [pc, #420]	; (8002800 <FreqMenu_DrawPresetMenu+0xdf0>)
 800265c:	f00e f870 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002660:	7a7b      	ldrb	r3, [r7, #9]
 8002662:	b29a      	uxth	r2, r3
 8002664:	2300      	movs	r3, #0
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2302      	movs	r3, #2
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002670:	2178      	movs	r1, #120	; 0x78
 8002672:	4864      	ldr	r0, [pc, #400]	; (8002804 <FreqMenu_DrawPresetMenu+0xdf4>)
 8002674:	f00e f864 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8002678:	f000 bc58 	b.w	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	b29a      	uxth	r2, r3
 8002680:	2300      	movs	r3, #0
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2302      	movs	r3, #2
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268c:	2105      	movs	r1, #5
 800268e:	4850      	ldr	r0, [pc, #320]	; (80027d0 <FreqMenu_DrawPresetMenu+0xdc0>)
 8002690:	f00e f856 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002694:	7bbb      	ldrb	r3, [r7, #14]
 8002696:	b29a      	uxth	r2, r3
 8002698:	2300      	movs	r3, #0
 800269a:	9301      	str	r3, [sp, #4]
 800269c:	2302      	movs	r3, #2
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a4:	2105      	movs	r1, #5
 80026a6:	484b      	ldr	r0, [pc, #300]	; (80027d4 <FreqMenu_DrawPresetMenu+0xdc4>)
 80026a8:	f00e f84a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ac:	7b7b      	ldrb	r3, [r7, #13]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	2300      	movs	r3, #0
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2302      	movs	r3, #2
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026bc:	2105      	movs	r1, #5
 80026be:	4846      	ldr	r0, [pc, #280]	; (80027d8 <FreqMenu_DrawPresetMenu+0xdc8>)
 80026c0:	f00e f83e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c4:	7b3b      	ldrb	r3, [r7, #12]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	2300      	movs	r3, #0
 80026ca:	9301      	str	r3, [sp, #4]
 80026cc:	2302      	movs	r3, #2
 80026ce:	9300      	str	r3, [sp, #0]
 80026d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d4:	2105      	movs	r1, #5
 80026d6:	4841      	ldr	r0, [pc, #260]	; (80027dc <FreqMenu_DrawPresetMenu+0xdcc>)
 80026d8:	f00e f832 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026dc:	7afb      	ldrb	r3, [r7, #11]
 80026de:	b29a      	uxth	r2, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	9301      	str	r3, [sp, #4]
 80026e4:	2302      	movs	r3, #2
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ec:	2105      	movs	r1, #5
 80026ee:	483c      	ldr	r0, [pc, #240]	; (80027e0 <FreqMenu_DrawPresetMenu+0xdd0>)
 80026f0:	f00e f826 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f4:	7abb      	ldrb	r3, [r7, #10]
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	2300      	movs	r3, #0
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	2302      	movs	r3, #2
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002704:	2105      	movs	r1, #5
 8002706:	4837      	ldr	r0, [pc, #220]	; (80027e4 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002708:	f00e f81a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800270c:	7a7b      	ldrb	r3, [r7, #9]
 800270e:	b29a      	uxth	r2, r3
 8002710:	2300      	movs	r3, #0
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	2302      	movs	r3, #2
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800271c:	2105      	movs	r1, #5
 800271e:	4832      	ldr	r0, [pc, #200]	; (80027e8 <FreqMenu_DrawPresetMenu+0xdd8>)
 8002720:	f00e f80e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002724:	7bfb      	ldrb	r3, [r7, #15]
 8002726:	b29a      	uxth	r2, r3
 8002728:	2300      	movs	r3, #0
 800272a:	9301      	str	r3, [sp, #4]
 800272c:	2302      	movs	r3, #2
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002734:	2178      	movs	r1, #120	; 0x78
 8002736:	482d      	ldr	r0, [pc, #180]	; (80027ec <FreqMenu_DrawPresetMenu+0xddc>)
 8002738:	f00e f802 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800273c:	7bbb      	ldrb	r3, [r7, #14]
 800273e:	b29a      	uxth	r2, r3
 8002740:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2302      	movs	r3, #2
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	2300      	movs	r3, #0
 800274c:	2178      	movs	r1, #120	; 0x78
 800274e:	4828      	ldr	r0, [pc, #160]	; (80027f0 <FreqMenu_DrawPresetMenu+0xde0>)
 8002750:	f00d fff6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002754:	7b7b      	ldrb	r3, [r7, #13]
 8002756:	b29a      	uxth	r2, r3
 8002758:	2300      	movs	r3, #0
 800275a:	9301      	str	r3, [sp, #4]
 800275c:	2302      	movs	r3, #2
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002764:	2178      	movs	r1, #120	; 0x78
 8002766:	4823      	ldr	r0, [pc, #140]	; (80027f4 <FreqMenu_DrawPresetMenu+0xde4>)
 8002768:	f00d ffea 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800276c:	7b3b      	ldrb	r3, [r7, #12]
 800276e:	b29a      	uxth	r2, r3
 8002770:	2300      	movs	r3, #0
 8002772:	9301      	str	r3, [sp, #4]
 8002774:	2302      	movs	r3, #2
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800277c:	2178      	movs	r1, #120	; 0x78
 800277e:	481e      	ldr	r0, [pc, #120]	; (80027f8 <FreqMenu_DrawPresetMenu+0xde8>)
 8002780:	f00d ffde 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002784:	7afb      	ldrb	r3, [r7, #11]
 8002786:	b29a      	uxth	r2, r3
 8002788:	2300      	movs	r3, #0
 800278a:	9301      	str	r3, [sp, #4]
 800278c:	2302      	movs	r3, #2
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002794:	2178      	movs	r1, #120	; 0x78
 8002796:	4819      	ldr	r0, [pc, #100]	; (80027fc <FreqMenu_DrawPresetMenu+0xdec>)
 8002798:	f00d ffd2 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800279c:	7abb      	ldrb	r3, [r7, #10]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	2300      	movs	r3, #0
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	2302      	movs	r3, #2
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ac:	2178      	movs	r1, #120	; 0x78
 80027ae:	4814      	ldr	r0, [pc, #80]	; (8002800 <FreqMenu_DrawPresetMenu+0xdf0>)
 80027b0:	f00d ffc6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027b4:	7a7b      	ldrb	r3, [r7, #9]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	2300      	movs	r3, #0
 80027ba:	9301      	str	r3, [sp, #4]
 80027bc:	2302      	movs	r3, #2
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027c4:	2178      	movs	r1, #120	; 0x78
 80027c6:	480f      	ldr	r0, [pc, #60]	; (8002804 <FreqMenu_DrawPresetMenu+0xdf4>)
 80027c8:	f00d ffba 	bl	8010740 <ILI9341_Draw_Text>
				break;
 80027cc:	e3ae      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 80027ce:	bf00      	nop
 80027d0:	080157f4 	.word	0x080157f4
 80027d4:	080157fc 	.word	0x080157fc
 80027d8:	08015804 	.word	0x08015804
 80027dc:	0801580c 	.word	0x0801580c
 80027e0:	08015814 	.word	0x08015814
 80027e4:	0801581c 	.word	0x0801581c
 80027e8:	08015824 	.word	0x08015824
 80027ec:	0801582c 	.word	0x0801582c
 80027f0:	08015834 	.word	0x08015834
 80027f4:	0801583c 	.word	0x0801583c
 80027f8:	08015844 	.word	0x08015844
 80027fc:	0801584c 	.word	0x0801584c
 8002800:	08015854 	.word	0x08015854
 8002804:	0801585c 	.word	0x0801585c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	b29a      	uxth	r2, r3
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002818:	2105      	movs	r1, #5
 800281a:	48a4      	ldr	r0, [pc, #656]	; (8002aac <FreqMenu_DrawPresetMenu+0x109c>)
 800281c:	f00d ff90 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002820:	7bbb      	ldrb	r3, [r7, #14]
 8002822:	b29a      	uxth	r2, r3
 8002824:	2300      	movs	r3, #0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2302      	movs	r3, #2
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002830:	2105      	movs	r1, #5
 8002832:	489f      	ldr	r0, [pc, #636]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002834:	f00d ff84 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002838:	7b7b      	ldrb	r3, [r7, #13]
 800283a:	b29a      	uxth	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2302      	movs	r3, #2
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002848:	2105      	movs	r1, #5
 800284a:	489a      	ldr	r0, [pc, #616]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x10a4>)
 800284c:	f00d ff78 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002850:	7b3b      	ldrb	r3, [r7, #12]
 8002852:	b29a      	uxth	r2, r3
 8002854:	2300      	movs	r3, #0
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2302      	movs	r3, #2
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002860:	2105      	movs	r1, #5
 8002862:	4895      	ldr	r0, [pc, #596]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002864:	f00d ff6c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002868:	7afb      	ldrb	r3, [r7, #11]
 800286a:	b29a      	uxth	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2302      	movs	r3, #2
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002878:	2105      	movs	r1, #5
 800287a:	4890      	ldr	r0, [pc, #576]	; (8002abc <FreqMenu_DrawPresetMenu+0x10ac>)
 800287c:	f00d ff60 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002880:	7abb      	ldrb	r3, [r7, #10]
 8002882:	b29a      	uxth	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2302      	movs	r3, #2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002890:	2105      	movs	r1, #5
 8002892:	488b      	ldr	r0, [pc, #556]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002894:	f00d ff54 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002898:	7a7b      	ldrb	r3, [r7, #9]
 800289a:	b29a      	uxth	r2, r3
 800289c:	2300      	movs	r3, #0
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2302      	movs	r3, #2
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a8:	2105      	movs	r1, #5
 80028aa:	4886      	ldr	r0, [pc, #536]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x10b4>)
 80028ac:	f00d ff48 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c0:	2178      	movs	r1, #120	; 0x78
 80028c2:	4881      	ldr	r0, [pc, #516]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x10b8>)
 80028c4:	f00d ff3c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c8:	7bbb      	ldrb	r3, [r7, #14]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2302      	movs	r3, #2
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d8:	2178      	movs	r1, #120	; 0x78
 80028da:	487c      	ldr	r0, [pc, #496]	; (8002acc <FreqMenu_DrawPresetMenu+0x10bc>)
 80028dc:	f00d ff30 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028e0:	7b7b      	ldrb	r3, [r7, #13]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2302      	movs	r3, #2
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	2178      	movs	r1, #120	; 0x78
 80028f2:	4877      	ldr	r0, [pc, #476]	; (8002ad0 <FreqMenu_DrawPresetMenu+0x10c0>)
 80028f4:	f00d ff24 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028f8:	7b3b      	ldrb	r3, [r7, #12]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	2300      	movs	r3, #0
 80028fe:	9301      	str	r3, [sp, #4]
 8002900:	2302      	movs	r3, #2
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002908:	2178      	movs	r1, #120	; 0x78
 800290a:	4872      	ldr	r0, [pc, #456]	; (8002ad4 <FreqMenu_DrawPresetMenu+0x10c4>)
 800290c:	f00d ff18 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002910:	7afb      	ldrb	r3, [r7, #11]
 8002912:	b29a      	uxth	r2, r3
 8002914:	2300      	movs	r3, #0
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2302      	movs	r3, #2
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002920:	2178      	movs	r1, #120	; 0x78
 8002922:	486d      	ldr	r0, [pc, #436]	; (8002ad8 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002924:	f00d ff0c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002928:	7abb      	ldrb	r3, [r7, #10]
 800292a:	b29a      	uxth	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2302      	movs	r3, #2
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002938:	2178      	movs	r1, #120	; 0x78
 800293a:	4868      	ldr	r0, [pc, #416]	; (8002adc <FreqMenu_DrawPresetMenu+0x10cc>)
 800293c:	f00d ff00 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002940:	7a7b      	ldrb	r3, [r7, #9]
 8002942:	b29a      	uxth	r2, r3
 8002944:	2300      	movs	r3, #0
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	2302      	movs	r3, #2
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002950:	2178      	movs	r1, #120	; 0x78
 8002952:	4863      	ldr	r0, [pc, #396]	; (8002ae0 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002954:	f00d fef4 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8002958:	e2e8      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	b29a      	uxth	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2302      	movs	r3, #2
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800296a:	2105      	movs	r1, #5
 800296c:	484f      	ldr	r0, [pc, #316]	; (8002aac <FreqMenu_DrawPresetMenu+0x109c>)
 800296e:	f00d fee7 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002972:	7bbb      	ldrb	r3, [r7, #14]
 8002974:	b29a      	uxth	r2, r3
 8002976:	2300      	movs	r3, #0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002982:	2105      	movs	r1, #5
 8002984:	484a      	ldr	r0, [pc, #296]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x10a0>)
 8002986:	f00d fedb 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800298a:	7b7b      	ldrb	r3, [r7, #13]
 800298c:	b29a      	uxth	r2, r3
 800298e:	2300      	movs	r3, #0
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2302      	movs	r3, #2
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800299a:	2105      	movs	r1, #5
 800299c:	4845      	ldr	r0, [pc, #276]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x10a4>)
 800299e:	f00d fecf 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029a2:	7b3b      	ldrb	r3, [r7, #12]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2302      	movs	r3, #2
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029b2:	2105      	movs	r1, #5
 80029b4:	4840      	ldr	r0, [pc, #256]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x10a8>)
 80029b6:	f00d fec3 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	2302      	movs	r3, #2
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ca:	2105      	movs	r1, #5
 80029cc:	483b      	ldr	r0, [pc, #236]	; (8002abc <FreqMenu_DrawPresetMenu+0x10ac>)
 80029ce:	f00d feb7 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d2:	7abb      	ldrb	r3, [r7, #10]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	2300      	movs	r3, #0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2302      	movs	r3, #2
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e2:	2105      	movs	r1, #5
 80029e4:	4836      	ldr	r0, [pc, #216]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x10b0>)
 80029e6:	f00d feab 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ea:	7a7b      	ldrb	r3, [r7, #9]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	2300      	movs	r3, #0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2302      	movs	r3, #2
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fa:	2105      	movs	r1, #5
 80029fc:	4831      	ldr	r0, [pc, #196]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x10b4>)
 80029fe:	f00d fe9f 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a12:	2178      	movs	r1, #120	; 0x78
 8002a14:	482c      	ldr	r0, [pc, #176]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002a16:	f00d fe93 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1a:	7bbb      	ldrb	r3, [r7, #14]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2302      	movs	r3, #2
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2a:	2178      	movs	r1, #120	; 0x78
 8002a2c:	4827      	ldr	r0, [pc, #156]	; (8002acc <FreqMenu_DrawPresetMenu+0x10bc>)
 8002a2e:	f00d fe87 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a32:	7b7b      	ldrb	r3, [r7, #13]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a42:	2178      	movs	r1, #120	; 0x78
 8002a44:	4822      	ldr	r0, [pc, #136]	; (8002ad0 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002a46:	f00d fe7b 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a4a:	7b3b      	ldrb	r3, [r7, #12]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	2178      	movs	r1, #120	; 0x78
 8002a5c:	481d      	ldr	r0, [pc, #116]	; (8002ad4 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002a5e:	f00d fe6f 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a62:	7afb      	ldrb	r3, [r7, #11]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	2300      	movs	r3, #0
 8002a68:	9301      	str	r3, [sp, #4]
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a72:	2178      	movs	r1, #120	; 0x78
 8002a74:	4818      	ldr	r0, [pc, #96]	; (8002ad8 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002a76:	f00d fe63 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7a:	7abb      	ldrb	r3, [r7, #10]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2302      	movs	r3, #2
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8a:	2178      	movs	r1, #120	; 0x78
 8002a8c:	4813      	ldr	r0, [pc, #76]	; (8002adc <FreqMenu_DrawPresetMenu+0x10cc>)
 8002a8e:	f00d fe57 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a92:	7a7b      	ldrb	r3, [r7, #9]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	2300      	movs	r3, #0
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	2302      	movs	r3, #2
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aa2:	2178      	movs	r1, #120	; 0x78
 8002aa4:	480e      	ldr	r0, [pc, #56]	; (8002ae0 <FreqMenu_DrawPresetMenu+0x10d0>)
 8002aa6:	f00d fe4b 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8002aaa:	e23f      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002aac:	080157f4 	.word	0x080157f4
 8002ab0:	080157fc 	.word	0x080157fc
 8002ab4:	08015804 	.word	0x08015804
 8002ab8:	0801580c 	.word	0x0801580c
 8002abc:	08015814 	.word	0x08015814
 8002ac0:	0801581c 	.word	0x0801581c
 8002ac4:	08015824 	.word	0x08015824
 8002ac8:	0801582c 	.word	0x0801582c
 8002acc:	08015834 	.word	0x08015834
 8002ad0:	0801583c 	.word	0x0801583c
 8002ad4:	08015844 	.word	0x08015844
 8002ad8:	0801584c 	.word	0x0801584c
 8002adc:	08015854 	.word	0x08015854
 8002ae0:	0801585c 	.word	0x0801585c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002af4:	2105      	movs	r1, #5
 8002af6:	48a4      	ldr	r0, [pc, #656]	; (8002d88 <FreqMenu_DrawPresetMenu+0x1378>)
 8002af8:	f00d fe22 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2302      	movs	r3, #2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	489f      	ldr	r0, [pc, #636]	; (8002d8c <FreqMenu_DrawPresetMenu+0x137c>)
 8002b10:	f00d fe16 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b14:	7b7b      	ldrb	r3, [r7, #13]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b24:	2105      	movs	r1, #5
 8002b26:	489a      	ldr	r0, [pc, #616]	; (8002d90 <FreqMenu_DrawPresetMenu+0x1380>)
 8002b28:	f00d fe0a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b2c:	7b3b      	ldrb	r3, [r7, #12]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2302      	movs	r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b3c:	2105      	movs	r1, #5
 8002b3e:	4895      	ldr	r0, [pc, #596]	; (8002d94 <FreqMenu_DrawPresetMenu+0x1384>)
 8002b40:	f00d fdfe 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b44:	7afb      	ldrb	r3, [r7, #11]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b54:	2105      	movs	r1, #5
 8002b56:	4890      	ldr	r0, [pc, #576]	; (8002d98 <FreqMenu_DrawPresetMenu+0x1388>)
 8002b58:	f00d fdf2 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b5c:	7abb      	ldrb	r3, [r7, #10]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	488b      	ldr	r0, [pc, #556]	; (8002d9c <FreqMenu_DrawPresetMenu+0x138c>)
 8002b70:	f00d fde6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b74:	7a7b      	ldrb	r3, [r7, #9]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b84:	2105      	movs	r1, #5
 8002b86:	4886      	ldr	r0, [pc, #536]	; (8002da0 <FreqMenu_DrawPresetMenu+0x1390>)
 8002b88:	f00d fdda 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2302      	movs	r3, #2
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b9c:	2178      	movs	r1, #120	; 0x78
 8002b9e:	4881      	ldr	r0, [pc, #516]	; (8002da4 <FreqMenu_DrawPresetMenu+0x1394>)
 8002ba0:	f00d fdce 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ba4:	7bbb      	ldrb	r3, [r7, #14]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2302      	movs	r3, #2
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bb4:	2178      	movs	r1, #120	; 0x78
 8002bb6:	487c      	ldr	r0, [pc, #496]	; (8002da8 <FreqMenu_DrawPresetMenu+0x1398>)
 8002bb8:	f00d fdc2 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bbc:	7b7b      	ldrb	r3, [r7, #13]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bcc:	2178      	movs	r1, #120	; 0x78
 8002bce:	4877      	ldr	r0, [pc, #476]	; (8002dac <FreqMenu_DrawPresetMenu+0x139c>)
 8002bd0:	f00d fdb6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	7b3b      	ldrb	r3, [r7, #12]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2178      	movs	r1, #120	; 0x78
 8002be6:	4872      	ldr	r0, [pc, #456]	; (8002db0 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002be8:	f00d fdaa 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002bec:	7afb      	ldrb	r3, [r7, #11]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002bf4:	9301      	str	r3, [sp, #4]
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2178      	movs	r1, #120	; 0x78
 8002bfe:	486d      	ldr	r0, [pc, #436]	; (8002db4 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002c00:	f00d fd9e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c04:	7abb      	ldrb	r3, [r7, #10]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	2300      	movs	r3, #0
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c14:	2178      	movs	r1, #120	; 0x78
 8002c16:	4868      	ldr	r0, [pc, #416]	; (8002db8 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002c18:	f00d fd92 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c1c:	7a7b      	ldrb	r3, [r7, #9]
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	2300      	movs	r3, #0
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2302      	movs	r3, #2
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c2c:	2178      	movs	r1, #120	; 0x78
 8002c2e:	4863      	ldr	r0, [pc, #396]	; (8002dbc <FreqMenu_DrawPresetMenu+0x13ac>)
 8002c30:	f00d fd86 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8002c34:	e17a      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	2302      	movs	r3, #2
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c46:	2105      	movs	r1, #5
 8002c48:	484f      	ldr	r0, [pc, #316]	; (8002d88 <FreqMenu_DrawPresetMenu+0x1378>)
 8002c4a:	f00d fd79 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	2300      	movs	r3, #0
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	2302      	movs	r3, #2
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c5e:	2105      	movs	r1, #5
 8002c60:	484a      	ldr	r0, [pc, #296]	; (8002d8c <FreqMenu_DrawPresetMenu+0x137c>)
 8002c62:	f00d fd6d 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	9301      	str	r3, [sp, #4]
 8002c6e:	2302      	movs	r3, #2
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c76:	2105      	movs	r1, #5
 8002c78:	4845      	ldr	r0, [pc, #276]	; (8002d90 <FreqMenu_DrawPresetMenu+0x1380>)
 8002c7a:	f00d fd61 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c7e:	7b3b      	ldrb	r3, [r7, #12]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	2300      	movs	r3, #0
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	2302      	movs	r3, #2
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c8e:	2105      	movs	r1, #5
 8002c90:	4840      	ldr	r0, [pc, #256]	; (8002d94 <FreqMenu_DrawPresetMenu+0x1384>)
 8002c92:	f00d fd55 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c96:	7afb      	ldrb	r3, [r7, #11]
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	9301      	str	r3, [sp, #4]
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ca6:	2105      	movs	r1, #5
 8002ca8:	483b      	ldr	r0, [pc, #236]	; (8002d98 <FreqMenu_DrawPresetMenu+0x1388>)
 8002caa:	f00d fd49 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cae:	7abb      	ldrb	r3, [r7, #10]
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	9301      	str	r3, [sp, #4]
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cbe:	2105      	movs	r1, #5
 8002cc0:	4836      	ldr	r0, [pc, #216]	; (8002d9c <FreqMenu_DrawPresetMenu+0x138c>)
 8002cc2:	f00d fd3d 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cc6:	7a7b      	ldrb	r3, [r7, #9]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	2300      	movs	r3, #0
 8002ccc:	9301      	str	r3, [sp, #4]
 8002cce:	2302      	movs	r3, #2
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cd6:	2105      	movs	r1, #5
 8002cd8:	4831      	ldr	r0, [pc, #196]	; (8002da0 <FreqMenu_DrawPresetMenu+0x1390>)
 8002cda:	f00d fd31 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	2302      	movs	r3, #2
 8002ce8:	9300      	str	r3, [sp, #0]
 8002cea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002cee:	2178      	movs	r1, #120	; 0x78
 8002cf0:	482c      	ldr	r0, [pc, #176]	; (8002da4 <FreqMenu_DrawPresetMenu+0x1394>)
 8002cf2:	f00d fd25 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002cf6:	7bbb      	ldrb	r3, [r7, #14]
 8002cf8:	b29a      	uxth	r2, r3
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	9301      	str	r3, [sp, #4]
 8002cfe:	2302      	movs	r3, #2
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d06:	2178      	movs	r1, #120	; 0x78
 8002d08:	4827      	ldr	r0, [pc, #156]	; (8002da8 <FreqMenu_DrawPresetMenu+0x1398>)
 8002d0a:	f00d fd19 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0e:	7b7b      	ldrb	r3, [r7, #13]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	2300      	movs	r3, #0
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	2302      	movs	r3, #2
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d1e:	2178      	movs	r1, #120	; 0x78
 8002d20:	4822      	ldr	r0, [pc, #136]	; (8002dac <FreqMenu_DrawPresetMenu+0x139c>)
 8002d22:	f00d fd0d 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d26:	7b3b      	ldrb	r3, [r7, #12]
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	9301      	str	r3, [sp, #4]
 8002d2e:	2302      	movs	r3, #2
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d36:	2178      	movs	r1, #120	; 0x78
 8002d38:	481d      	ldr	r0, [pc, #116]	; (8002db0 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002d3a:	f00d fd01 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d3e:	7afb      	ldrb	r3, [r7, #11]
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	2300      	movs	r3, #0
 8002d44:	9301      	str	r3, [sp, #4]
 8002d46:	2302      	movs	r3, #2
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d4e:	2178      	movs	r1, #120	; 0x78
 8002d50:	4818      	ldr	r0, [pc, #96]	; (8002db4 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002d52:	f00d fcf5 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002d56:	7abb      	ldrb	r3, [r7, #10]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002d5e:	9301      	str	r3, [sp, #4]
 8002d60:	2302      	movs	r3, #2
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	2300      	movs	r3, #0
 8002d66:	2178      	movs	r1, #120	; 0x78
 8002d68:	4813      	ldr	r0, [pc, #76]	; (8002db8 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002d6a:	f00d fce9 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d6e:	7a7b      	ldrb	r3, [r7, #9]
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	2300      	movs	r3, #0
 8002d74:	9301      	str	r3, [sp, #4]
 8002d76:	2302      	movs	r3, #2
 8002d78:	9300      	str	r3, [sp, #0]
 8002d7a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d7e:	2178      	movs	r1, #120	; 0x78
 8002d80:	480e      	ldr	r0, [pc, #56]	; (8002dbc <FreqMenu_DrawPresetMenu+0x13ac>)
 8002d82:	f00d fcdd 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8002d86:	e0d1      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002d88:	080157f4 	.word	0x080157f4
 8002d8c:	080157fc 	.word	0x080157fc
 8002d90:	08015804 	.word	0x08015804
 8002d94:	0801580c 	.word	0x0801580c
 8002d98:	08015814 	.word	0x08015814
 8002d9c:	0801581c 	.word	0x0801581c
 8002da0:	08015824 	.word	0x08015824
 8002da4:	0801582c 	.word	0x0801582c
 8002da8:	08015834 	.word	0x08015834
 8002dac:	0801583c 	.word	0x0801583c
 8002db0:	08015844 	.word	0x08015844
 8002db4:	0801584c 	.word	0x0801584c
 8002db8:	08015854 	.word	0x08015854
 8002dbc:	0801585c 	.word	0x0801585c
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	2302      	movs	r3, #2
 8002dca:	9300      	str	r3, [sp, #0]
 8002dcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	4858      	ldr	r0, [pc, #352]	; (8002f34 <FreqMenu_DrawPresetMenu+0x1524>)
 8002dd4:	f00d fcb4 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dd8:	7bbb      	ldrb	r3, [r7, #14]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	2300      	movs	r3, #0
 8002dde:	9301      	str	r3, [sp, #4]
 8002de0:	2302      	movs	r3, #2
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002de8:	2105      	movs	r1, #5
 8002dea:	4853      	ldr	r0, [pc, #332]	; (8002f38 <FreqMenu_DrawPresetMenu+0x1528>)
 8002dec:	f00d fca8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002df0:	7b7b      	ldrb	r3, [r7, #13]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	2300      	movs	r3, #0
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	2302      	movs	r3, #2
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e00:	2105      	movs	r1, #5
 8002e02:	484e      	ldr	r0, [pc, #312]	; (8002f3c <FreqMenu_DrawPresetMenu+0x152c>)
 8002e04:	f00d fc9c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e08:	7b3b      	ldrb	r3, [r7, #12]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2302      	movs	r3, #2
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e18:	2105      	movs	r1, #5
 8002e1a:	4849      	ldr	r0, [pc, #292]	; (8002f40 <FreqMenu_DrawPresetMenu+0x1530>)
 8002e1c:	f00d fc90 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e20:	7afb      	ldrb	r3, [r7, #11]
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	2302      	movs	r3, #2
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e30:	2105      	movs	r1, #5
 8002e32:	4844      	ldr	r0, [pc, #272]	; (8002f44 <FreqMenu_DrawPresetMenu+0x1534>)
 8002e34:	f00d fc84 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e38:	7abb      	ldrb	r3, [r7, #10]
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	9301      	str	r3, [sp, #4]
 8002e40:	2302      	movs	r3, #2
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e48:	2105      	movs	r1, #5
 8002e4a:	483f      	ldr	r0, [pc, #252]	; (8002f48 <FreqMenu_DrawPresetMenu+0x1538>)
 8002e4c:	f00d fc78 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e50:	7a7b      	ldrb	r3, [r7, #9]
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	2300      	movs	r3, #0
 8002e56:	9301      	str	r3, [sp, #4]
 8002e58:	2302      	movs	r3, #2
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e60:	2105      	movs	r1, #5
 8002e62:	483a      	ldr	r0, [pc, #232]	; (8002f4c <FreqMenu_DrawPresetMenu+0x153c>)
 8002e64:	f00d fc6c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e68:	7bfb      	ldrb	r3, [r7, #15]
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	9301      	str	r3, [sp, #4]
 8002e70:	2302      	movs	r3, #2
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e78:	2178      	movs	r1, #120	; 0x78
 8002e7a:	4835      	ldr	r0, [pc, #212]	; (8002f50 <FreqMenu_DrawPresetMenu+0x1540>)
 8002e7c:	f00d fc60 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e80:	7bbb      	ldrb	r3, [r7, #14]
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	2300      	movs	r3, #0
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	2302      	movs	r3, #2
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e90:	2178      	movs	r1, #120	; 0x78
 8002e92:	4830      	ldr	r0, [pc, #192]	; (8002f54 <FreqMenu_DrawPresetMenu+0x1544>)
 8002e94:	f00d fc54 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e98:	7b7b      	ldrb	r3, [r7, #13]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	9301      	str	r3, [sp, #4]
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ea8:	2178      	movs	r1, #120	; 0x78
 8002eaa:	482b      	ldr	r0, [pc, #172]	; (8002f58 <FreqMenu_DrawPresetMenu+0x1548>)
 8002eac:	f00d fc48 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002eb0:	7b3b      	ldrb	r3, [r7, #12]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	2302      	movs	r3, #2
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ec0:	2178      	movs	r1, #120	; 0x78
 8002ec2:	4826      	ldr	r0, [pc, #152]	; (8002f5c <FreqMenu_DrawPresetMenu+0x154c>)
 8002ec4:	f00d fc3c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed8:	2178      	movs	r1, #120	; 0x78
 8002eda:	4821      	ldr	r0, [pc, #132]	; (8002f60 <FreqMenu_DrawPresetMenu+0x1550>)
 8002edc:	f00d fc30 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ee0:	7abb      	ldrb	r3, [r7, #10]
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ef0:	2178      	movs	r1, #120	; 0x78
 8002ef2:	481c      	ldr	r0, [pc, #112]	; (8002f64 <FreqMenu_DrawPresetMenu+0x1554>)
 8002ef4:	f00d fc24 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002ef8:	7a7b      	ldrb	r3, [r7, #9]
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2302      	movs	r3, #2
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2178      	movs	r1, #120	; 0x78
 8002f0a:	4817      	ldr	r0, [pc, #92]	; (8002f68 <FreqMenu_DrawPresetMenu+0x1558>)
 8002f0c:	f00d fc18 	bl	8010740 <ILI9341_Draw_Text>
			break;
 8002f10:	bf00      	nop
 8002f12:	e00b      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002f14:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	22b4      	movs	r2, #180	; 0xb4
 8002f22:	2105      	movs	r1, #5
 8002f24:	4811      	ldr	r0, [pc, #68]	; (8002f6c <FreqMenu_DrawPresetMenu+0x155c>)
 8002f26:	f00d fc0b 	bl	8010740 <ILI9341_Draw_Text>
}
 8002f2a:	e7ff      	b.n	8002f2c <FreqMenu_DrawPresetMenu+0x151c>
 8002f2c:	bf00      	nop
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	080157f4 	.word	0x080157f4
 8002f38:	080157fc 	.word	0x080157fc
 8002f3c:	08015804 	.word	0x08015804
 8002f40:	0801580c 	.word	0x0801580c
 8002f44:	08015814 	.word	0x08015814
 8002f48:	0801581c 	.word	0x0801581c
 8002f4c:	08015824 	.word	0x08015824
 8002f50:	0801582c 	.word	0x0801582c
 8002f54:	08015834 	.word	0x08015834
 8002f58:	0801583c 	.word	0x0801583c
 8002f5c:	08015844 	.word	0x08015844
 8002f60:	0801584c 	.word	0x0801584c
 8002f64:	08015854 	.word	0x08015854
 8002f68:	0801585c 	.word	0x0801585c
 8002f6c:	08015868 	.word	0x08015868

08002f70 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b082      	sub	sp, #8
 8002f74:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	2300      	movs	r3, #0
 8002f82:	220a      	movs	r2, #10
 8002f84:	2105      	movs	r1, #5
 8002f86:	4804      	ldr	r0, [pc, #16]	; (8002f98 <FreqMenu_DrawAdjustMenu+0x28>)
 8002f88:	f00d fbda 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002f8c:	f7fd ffb4 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	08015898 	.word	0x08015898

08002f9c <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002f9c:	b5b0      	push	{r4, r5, r7, lr}
 8002f9e:	b0a0      	sub	sp, #128	; 0x80
 8002fa0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa6:	9301      	str	r3, [sp, #4]
 8002fa8:	2302      	movs	r3, #2
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	2300      	movs	r3, #0
 8002fae:	220a      	movs	r2, #10
 8002fb0:	2105      	movs	r1, #5
 8002fb2:	48a2      	ldr	r0, [pc, #648]	; (800323c <FreqMenu_DrawSweepMenu+0x2a0>)
 8002fb4:	f00d fbc4 	bl	8010740 <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002fb8:	f7fd ffbe 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	667b      	str	r3, [r7, #100]	; 0x64
 8002fc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002fce:	4b9c      	ldr	r3, [pc, #624]	; (8003240 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d109      	bne.n	8002fee <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002fda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002fde:	4a99      	ldr	r2, [pc, #612]	; (8003244 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002fe0:	461c      	mov	r4, r3
 8002fe2:	4615      	mov	r5, r2
 8002fe4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fe6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fe8:	682b      	ldr	r3, [r5, #0]
 8002fea:	7023      	strb	r3, [r4, #0]
 8002fec:	e008      	b.n	8003000 <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002fee:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002ff2:	4a95      	ldr	r2, [pc, #596]	; (8003248 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002ff4:	461c      	mov	r4, r3
 8002ff6:	4615      	mov	r5, r2
 8002ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ffc:	682b      	ldr	r3, [r5, #0]
 8002ffe:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003000:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8003004:	2300      	movs	r3, #0
 8003006:	9301      	str	r3, [sp, #4]
 8003008:	2302      	movs	r3, #2
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003010:	2228      	movs	r2, #40	; 0x28
 8003012:	2105      	movs	r1, #5
 8003014:	f00d fb94 	bl	8010740 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8003018:	2300      	movs	r3, #0
 800301a:	64bb      	str	r3, [r7, #72]	; 0x48
 800301c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003020:	2200      	movs	r2, #0
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	605a      	str	r2, [r3, #4]
 8003026:	609a      	str	r2, [r3, #8]
 8003028:	60da      	str	r2, [r3, #12]
 800302a:	611a      	str	r2, [r3, #16]
 800302c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 800302e:	f003 fff1 	bl	8007014 <SM_GetOutputInHertz>
 8003032:	ee10 3a10 	vmov	r3, s0
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd faae 	bl	8000598 <__aeabi_f2d>
 800303c:	4603      	mov	r3, r0
 800303e:	460c      	mov	r4, r1
 8003040:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003044:	e9cd 3400 	strd	r3, r4, [sp]
 8003048:	4a80      	ldr	r2, [pc, #512]	; (800324c <FreqMenu_DrawSweepMenu+0x2b0>)
 800304a:	2119      	movs	r1, #25
 800304c:	f00e ff34 	bl	8011eb8 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003050:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8003054:	2300      	movs	r3, #0
 8003056:	9301      	str	r3, [sp, #4]
 8003058:	2302      	movs	r3, #2
 800305a:	9300      	str	r3, [sp, #0]
 800305c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003060:	223c      	movs	r2, #60	; 0x3c
 8003062:	2105      	movs	r1, #5
 8003064:	f00d fb6c 	bl	8010740 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003068:	2300      	movs	r3, #0
 800306a:	9301      	str	r3, [sp, #4]
 800306c:	2302      	movs	r3, #2
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003074:	2264      	movs	r2, #100	; 0x64
 8003076:	2105      	movs	r1, #5
 8003078:	4875      	ldr	r0, [pc, #468]	; (8003250 <FreqMenu_DrawSweepMenu+0x2b4>)
 800307a:	f00d fb61 	bl	8010740 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 800307e:	4b70      	ldr	r3, [pc, #448]	; (8003240 <FreqMenu_DrawSweepMenu+0x2a4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b10      	cmp	r3, #16
 8003088:	d117      	bne.n	80030ba <FreqMenu_DrawSweepMenu+0x11e>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800308a:	2300      	movs	r3, #0
 800308c:	9301      	str	r3, [sp, #4]
 800308e:	2302      	movs	r3, #2
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003096:	2264      	movs	r2, #100	; 0x64
 8003098:	21eb      	movs	r1, #235	; 0xeb
 800309a:	486e      	ldr	r0, [pc, #440]	; (8003254 <FreqMenu_DrawSweepMenu+0x2b8>)
 800309c:	f00d fb50 	bl	8010740 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030a0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2302      	movs	r3, #2
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	2300      	movs	r3, #0
 80030ac:	2264      	movs	r2, #100	; 0x64
 80030ae:	f240 1109 	movw	r1, #265	; 0x109
 80030b2:	4869      	ldr	r0, [pc, #420]	; (8003258 <FreqMenu_DrawSweepMenu+0x2bc>)
 80030b4:	f00d fb44 	bl	8010740 <ILI9341_Draw_Text>
 80030b8:	e016      	b.n	80030e8 <FreqMenu_DrawSweepMenu+0x14c>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030ba:	2300      	movs	r3, #0
 80030bc:	9301      	str	r3, [sp, #4]
 80030be:	2302      	movs	r3, #2
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030c6:	2264      	movs	r2, #100	; 0x64
 80030c8:	f240 1109 	movw	r1, #265	; 0x109
 80030cc:	4862      	ldr	r0, [pc, #392]	; (8003258 <FreqMenu_DrawSweepMenu+0x2bc>)
 80030ce:	f00d fb37 	bl	8010740 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030d2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	2302      	movs	r3, #2
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	2264      	movs	r2, #100	; 0x64
 80030e0:	21eb      	movs	r1, #235	; 0xeb
 80030e2:	485c      	ldr	r0, [pc, #368]	; (8003254 <FreqMenu_DrawSweepMenu+0x2b8>)
 80030e4:	f00d fb2c 	bl	8010740 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 80030e8:	4b5c      	ldr	r3, [pc, #368]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <FreqMenu_DrawSweepMenu+0x16c>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	2302      	movs	r3, #2
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2300      	movs	r3, #0
 80030fc:	2278      	movs	r2, #120	; 0x78
 80030fe:	2105      	movs	r1, #5
 8003100:	4857      	ldr	r0, [pc, #348]	; (8003260 <FreqMenu_DrawSweepMenu+0x2c4>)
 8003102:	f00d fb1d 	bl	8010740 <ILI9341_Draw_Text>
 8003106:	e00a      	b.n	800311e <FreqMenu_DrawSweepMenu+0x182>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003108:	2300      	movs	r3, #0
 800310a:	9301      	str	r3, [sp, #4]
 800310c:	2302      	movs	r3, #2
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003114:	2278      	movs	r2, #120	; 0x78
 8003116:	2105      	movs	r1, #5
 8003118:	4851      	ldr	r0, [pc, #324]	; (8003260 <FreqMenu_DrawSweepMenu+0x2c4>)
 800311a:	f00d fb11 	bl	8010740 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 800311e:	2300      	movs	r3, #0
 8003120:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003122:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	601a      	str	r2, [r3, #0]
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	609a      	str	r2, [r3, #8]
 800312e:	60da      	str	r2, [r3, #12]
 8003130:	611a      	str	r2, [r3, #16]
 8003132:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8003134:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <FreqMenu_DrawSweepMenu+0x2c8>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd fa2d 	bl	8000598 <__aeabi_f2d>
 800313e:	4603      	mov	r3, r0
 8003140:	460c      	mov	r4, r1
 8003142:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003146:	e9cd 3400 	strd	r3, r4, [sp]
 800314a:	4a47      	ldr	r2, [pc, #284]	; (8003268 <FreqMenu_DrawSweepMenu+0x2cc>)
 800314c:	2119      	movs	r1, #25
 800314e:	f00e feb3 	bl	8011eb8 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003152:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8003156:	2300      	movs	r3, #0
 8003158:	9301      	str	r3, [sp, #4]
 800315a:	2302      	movs	r3, #2
 800315c:	9300      	str	r3, [sp, #0]
 800315e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003162:	2278      	movs	r2, #120	; 0x78
 8003164:	21b6      	movs	r1, #182	; 0xb6
 8003166:	f00d faeb 	bl	8010740 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 800316a:	4b3c      	ldr	r3, [pc, #240]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d10f      	bne.n	8003192 <FreqMenu_DrawSweepMenu+0x1f6>
 8003172:	4b3e      	ldr	r3, [pc, #248]	; (800326c <FreqMenu_DrawSweepMenu+0x2d0>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10b      	bne.n	8003192 <FreqMenu_DrawSweepMenu+0x1f6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 800317a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	2302      	movs	r3, #2
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	228c      	movs	r2, #140	; 0x8c
 8003188:	2105      	movs	r1, #5
 800318a:	4839      	ldr	r0, [pc, #228]	; (8003270 <FreqMenu_DrawSweepMenu+0x2d4>)
 800318c:	f00d fad8 	bl	8010740 <ILI9341_Draw_Text>
 8003190:	e00a      	b.n	80031a8 <FreqMenu_DrawSweepMenu+0x20c>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003192:	2300      	movs	r3, #0
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2302      	movs	r3, #2
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800319e:	228c      	movs	r2, #140	; 0x8c
 80031a0:	2105      	movs	r1, #5
 80031a2:	4833      	ldr	r0, [pc, #204]	; (8003270 <FreqMenu_DrawSweepMenu+0x2d4>)
 80031a4:	f00d facc 	bl	8010740 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 80031a8:	2300      	movs	r3, #0
 80031aa:	61bb      	str	r3, [r7, #24]
 80031ac:	f107 031c 	add.w	r3, r7, #28
 80031b0:	2200      	movs	r2, #0
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	605a      	str	r2, [r3, #4]
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 80031ba:	4b2e      	ldr	r3, [pc, #184]	; (8003274 <FreqMenu_DrawSweepMenu+0x2d8>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031c4:	4b2c      	ldr	r3, [pc, #176]	; (8003278 <FreqMenu_DrawSweepMenu+0x2dc>)
 80031c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	4619      	mov	r1, r3
 80031cc:	ee17 0a90 	vmov	r0, s15
 80031d0:	f003 ff64 	bl	800709c <SM_ConvertPeriodToHertz>
 80031d4:	eeb0 7a40 	vmov.f32	s14, s0
 80031d8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800327c <FreqMenu_DrawSweepMenu+0x2e0>
 80031dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031e0:	ee16 0a90 	vmov	r0, s13
 80031e4:	f7fd f9d8 	bl	8000598 <__aeabi_f2d>
 80031e8:	4603      	mov	r3, r0
 80031ea:	460c      	mov	r4, r1
 80031ec:	f107 0018 	add.w	r0, r7, #24
 80031f0:	e9cd 3400 	strd	r3, r4, [sp]
 80031f4:	4a22      	ldr	r2, [pc, #136]	; (8003280 <FreqMenu_DrawSweepMenu+0x2e4>)
 80031f6:	2114      	movs	r1, #20
 80031f8:	f00e fe5e 	bl	8011eb8 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80031fc:	f107 0018 	add.w	r0, r7, #24
 8003200:	2300      	movs	r3, #0
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	2302      	movs	r3, #2
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800320c:	228c      	movs	r2, #140	; 0x8c
 800320e:	219e      	movs	r1, #158	; 0x9e
 8003210:	f00d fa96 	bl	8010740 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <FreqMenu_DrawSweepMenu+0x2c0>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d135      	bne.n	8003288 <FreqMenu_DrawSweepMenu+0x2ec>
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <FreqMenu_DrawSweepMenu+0x2d0>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d131      	bne.n	8003288 <FreqMenu_DrawSweepMenu+0x2ec>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8003224:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2302      	movs	r3, #2
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	22a0      	movs	r2, #160	; 0xa0
 8003232:	2105      	movs	r1, #5
 8003234:	4813      	ldr	r0, [pc, #76]	; (8003284 <FreqMenu_DrawSweepMenu+0x2e8>)
 8003236:	f00d fa83 	bl	8010740 <ILI9341_Draw_Text>
 800323a:	e030      	b.n	800329e <FreqMenu_DrawSweepMenu+0x302>
 800323c:	080158ac 	.word	0x080158ac
 8003240:	40000c00 	.word	0x40000c00
 8003244:	080158c0 	.word	0x080158c0
 8003248:	080158d4 	.word	0x080158d4
 800324c:	080158e8 	.word	0x080158e8
 8003250:	080158fc 	.word	0x080158fc
 8003254:	08015908 	.word	0x08015908
 8003258:	0801590c 	.word	0x0801590c
 800325c:	20001e59 	.word	0x20001e59
 8003260:	08015914 	.word	0x08015914
 8003264:	20001eb0 	.word	0x20001eb0
 8003268:	08015924 	.word	0x08015924
 800326c:	20001e58 	.word	0x20001e58
 8003270:	08015930 	.word	0x08015930
 8003274:	20000124 	.word	0x20000124
 8003278:	40013400 	.word	0x40013400
 800327c:	42f00000 	.word	0x42f00000
 8003280:	08015940 	.word	0x08015940
 8003284:	0801594c 	.word	0x0801594c
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003288:	2300      	movs	r3, #0
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	2302      	movs	r3, #2
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003294:	22a0      	movs	r2, #160	; 0xa0
 8003296:	2105      	movs	r1, #5
 8003298:	484d      	ldr	r0, [pc, #308]	; (80033d0 <FreqMenu_DrawSweepMenu+0x434>)
 800329a:	f00d fa51 	bl	8010740 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	2200      	movs	r2, #0
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	609a      	str	r2, [r3, #8]
 80032ae:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 80032b0:	4b48      	ldr	r3, [pc, #288]	; (80033d4 <FreqMenu_DrawSweepMenu+0x438>)
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ba:	4b47      	ldr	r3, [pc, #284]	; (80033d8 <FreqMenu_DrawSweepMenu+0x43c>)
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	ee17 0a90 	vmov	r0, s15
 80032c6:	f003 fee9 	bl	800709c <SM_ConvertPeriodToHertz>
 80032ca:	eeb0 7a40 	vmov.f32	s14, s0
 80032ce:	eddf 7a43 	vldr	s15, [pc, #268]	; 80033dc <FreqMenu_DrawSweepMenu+0x440>
 80032d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032d6:	ee16 0a90 	vmov	r0, s13
 80032da:	f7fd f95d 	bl	8000598 <__aeabi_f2d>
 80032de:	4603      	mov	r3, r0
 80032e0:	460c      	mov	r4, r1
 80032e2:	1d38      	adds	r0, r7, #4
 80032e4:	e9cd 3400 	strd	r3, r4, [sp]
 80032e8:	4a3d      	ldr	r2, [pc, #244]	; (80033e0 <FreqMenu_DrawSweepMenu+0x444>)
 80032ea:	2114      	movs	r1, #20
 80032ec:	f00e fde4 	bl	8011eb8 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032f0:	1d38      	adds	r0, r7, #4
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032fe:	22a0      	movs	r2, #160	; 0xa0
 8003300:	21aa      	movs	r1, #170	; 0xaa
 8003302:	f00d fa1d 	bl	8010740 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003306:	4b37      	ldr	r3, [pc, #220]	; (80033e4 <FreqMenu_DrawSweepMenu+0x448>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d10b      	bne.n	800332a <FreqMenu_DrawSweepMenu+0x38e>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003312:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003316:	9301      	str	r3, [sp, #4]
 8003318:	2302      	movs	r3, #2
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	2300      	movs	r3, #0
 800331e:	22d5      	movs	r2, #213	; 0xd5
 8003320:	2106      	movs	r1, #6
 8003322:	4831      	ldr	r0, [pc, #196]	; (80033e8 <FreqMenu_DrawSweepMenu+0x44c>)
 8003324:	f00d fa0c 	bl	8010740 <ILI9341_Draw_Text>
 8003328:	e00a      	b.n	8003340 <FreqMenu_DrawSweepMenu+0x3a4>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800332a:	f240 23fd 	movw	r3, #765	; 0x2fd
 800332e:	9301      	str	r3, [sp, #4]
 8003330:	2302      	movs	r3, #2
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2300      	movs	r3, #0
 8003336:	22d5      	movs	r2, #213	; 0xd5
 8003338:	2105      	movs	r1, #5
 800333a:	482c      	ldr	r0, [pc, #176]	; (80033ec <FreqMenu_DrawSweepMenu+0x450>)
 800333c:	f00d fa00 	bl	8010740 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003340:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003344:	9301      	str	r3, [sp, #4]
 8003346:	2302      	movs	r3, #2
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	2300      	movs	r3, #0
 800334c:	22cc      	movs	r2, #204	; 0xcc
 800334e:	2168      	movs	r1, #104	; 0x68
 8003350:	4827      	ldr	r0, [pc, #156]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 8003352:	f00d f9f5 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003356:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	2302      	movs	r3, #2
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2300      	movs	r3, #0
 8003362:	22de      	movs	r2, #222	; 0xde
 8003364:	2161      	movs	r1, #97	; 0x61
 8003366:	4823      	ldr	r0, [pc, #140]	; (80033f4 <FreqMenu_DrawSweepMenu+0x458>)
 8003368:	f00d f9ea 	bl	8010740 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800336c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003370:	9301      	str	r3, [sp, #4]
 8003372:	2302      	movs	r3, #2
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	2300      	movs	r3, #0
 8003378:	22cc      	movs	r2, #204	; 0xcc
 800337a:	21b7      	movs	r1, #183	; 0xb7
 800337c:	481c      	ldr	r0, [pc, #112]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 800337e:	f00d f9df 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003382:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	2302      	movs	r3, #2
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	2300      	movs	r3, #0
 800338e:	22de      	movs	r2, #222	; 0xde
 8003390:	21ad      	movs	r1, #173	; 0xad
 8003392:	4819      	ldr	r0, [pc, #100]	; (80033f8 <FreqMenu_DrawSweepMenu+0x45c>)
 8003394:	f00d f9d4 	bl	8010740 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003398:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	2302      	movs	r3, #2
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	2300      	movs	r3, #0
 80033a4:	22cc      	movs	r2, #204	; 0xcc
 80033a6:	f240 1107 	movw	r1, #263	; 0x107
 80033aa:	4811      	ldr	r0, [pc, #68]	; (80033f0 <FreqMenu_DrawSweepMenu+0x454>)
 80033ac:	f00d f9c8 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80033b0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80033b4:	9301      	str	r3, [sp, #4]
 80033b6:	2302      	movs	r3, #2
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	2300      	movs	r3, #0
 80033bc:	22de      	movs	r2, #222	; 0xde
 80033be:	21fc      	movs	r1, #252	; 0xfc
 80033c0:	480e      	ldr	r0, [pc, #56]	; (80033fc <FreqMenu_DrawSweepMenu+0x460>)
 80033c2:	f00d f9bd 	bl	8010740 <ILI9341_Draw_Text>
}
 80033c6:	bf00      	nop
 80033c8:	3778      	adds	r7, #120	; 0x78
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bdb0      	pop	{r4, r5, r7, pc}
 80033ce:	bf00      	nop
 80033d0:	0801594c 	.word	0x0801594c
 80033d4:	20000128 	.word	0x20000128
 80033d8:	40013400 	.word	0x40013400
 80033dc:	42f00000 	.word	0x42f00000
 80033e0:	0801595c 	.word	0x0801595c
 80033e4:	40000c00 	.word	0x40000c00
 80033e8:	08015968 	.word	0x08015968
 80033ec:	08015970 	.word	0x08015970
 80033f0:	08015978 	.word	0x08015978
 80033f4:	0801597c 	.word	0x0801597c
 80033f8:	08015984 	.word	0x08015984
 80033fc:	0801598c 	.word	0x0801598c

08003400 <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800340a:	9301      	str	r3, [sp, #4]
 800340c:	2302      	movs	r3, #2
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	2300      	movs	r3, #0
 8003412:	220a      	movs	r2, #10
 8003414:	2105      	movs	r1, #5
 8003416:	4804      	ldr	r0, [pc, #16]	; (8003428 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003418:	f00d f992 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800341c:	f7fd fd6c 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	08015994 	.word	0x08015994

0800342c <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003436:	79fb      	ldrb	r3, [r7, #7]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d007      	beq.n	800344c <FuncMenu_DrawMenu+0x20>
 800343c:	2b03      	cmp	r3, #3
 800343e:	d009      	beq.n	8003454 <FuncMenu_DrawMenu+0x28>
 8003440:	2b01      	cmp	r3, #1
 8003442:	d000      	beq.n	8003446 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_AUX_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003444:	e00a      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003446:	f000 f80d 	bl	8003464 <FuncMenu_DrawMainMenu>
			break;
 800344a:	e007      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 800344c:	2000      	movs	r0, #0
 800344e:	f000 f851 	bl	80034f4 <FuncMenu_DrawOutputMenu>
			break;
 8003452:	e003      	b.n	800345c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003454:	2001      	movs	r0, #1
 8003456:	f000 f84d 	bl	80034f4 <FuncMenu_DrawOutputMenu>
			break;
 800345a:	bf00      	nop

	}
}
 800345c:	bf00      	nop
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800346a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800346e:	9301      	str	r3, [sp, #4]
 8003470:	2302      	movs	r3, #2
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	2300      	movs	r3, #0
 8003476:	220a      	movs	r2, #10
 8003478:	210a      	movs	r1, #10
 800347a:	481a      	ldr	r0, [pc, #104]	; (80034e4 <FuncMenu_DrawMainMenu+0x80>)
 800347c:	f00d f960 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003480:	f7fd fd3a 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003484:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	2302      	movs	r3, #2
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	2300      	movs	r3, #0
 8003490:	22d2      	movs	r2, #210	; 0xd2
 8003492:	2105      	movs	r1, #5
 8003494:	4814      	ldr	r0, [pc, #80]	; (80034e8 <FuncMenu_DrawMainMenu+0x84>)
 8003496:	f00d f953 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800349a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800349e:	9301      	str	r3, [sp, #4]
 80034a0:	2302      	movs	r3, #2
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	22d2      	movs	r2, #210	; 0xd2
 80034a8:	2164      	movs	r1, #100	; 0x64
 80034aa:	4810      	ldr	r0, [pc, #64]	; (80034ec <FuncMenu_DrawMainMenu+0x88>)
 80034ac:	f00d f948 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80034b0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80034b4:	9301      	str	r3, [sp, #4]
 80034b6:	2302      	movs	r3, #2
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	2300      	movs	r3, #0
 80034bc:	22d2      	movs	r2, #210	; 0xd2
 80034be:	21af      	movs	r1, #175	; 0xaf
 80034c0:	480b      	ldr	r0, [pc, #44]	; (80034f0 <FuncMenu_DrawMainMenu+0x8c>)
 80034c2:	f00d f93d 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80034c6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	2302      	movs	r3, #2
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	2300      	movs	r3, #0
 80034d2:	22d2      	movs	r2, #210	; 0xd2
 80034d4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80034d8:	4805      	ldr	r0, [pc, #20]	; (80034f0 <FuncMenu_DrawMainMenu+0x8c>)
 80034da:	f00d f931 	bl	8010740 <ILI9341_Draw_Text>
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	080159a4 	.word	0x080159a4
 80034e8:	080159b0 	.word	0x080159b0
 80034ec:	080159b8 	.word	0x080159b8
 80034f0:	080159bc 	.word	0x080159bc

080034f4 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af02      	add	r7, sp, #8
 80034fa:	4603      	mov	r3, r0
 80034fc:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003508:	9301      	str	r3, [sp, #4]
 800350a:	2302      	movs	r3, #2
 800350c:	9300      	str	r3, [sp, #0]
 800350e:	2300      	movs	r3, #0
 8003510:	220a      	movs	r2, #10
 8003512:	210a      	movs	r1, #10
 8003514:	4896      	ldr	r0, [pc, #600]	; (8003770 <FuncMenu_DrawOutputMenu+0x27c>)
 8003516:	f00d f913 	bl	8010740 <ILI9341_Draw_Text>
 800351a:	e00a      	b.n	8003532 <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800351c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003520:	9301      	str	r3, [sp, #4]
 8003522:	2302      	movs	r3, #2
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	2300      	movs	r3, #0
 8003528:	220a      	movs	r2, #10
 800352a:	210a      	movs	r1, #10
 800352c:	4891      	ldr	r0, [pc, #580]	; (8003774 <FuncMenu_DrawOutputMenu+0x280>)
 800352e:	f00d f907 	bl	8010740 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	4618      	mov	r0, r3
 8003536:	f003 fad5 	bl	8006ae4 <SM_GetOutputChannel>
 800353a:	4603      	mov	r3, r0
 800353c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003540:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8424 	beq.w	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b06      	cmp	r3, #6
 8003550:	f200 841f 	bhi.w	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003554:	a201      	add	r2, pc, #4	; (adr r2, 800355c <FuncMenu_DrawOutputMenu+0x68>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003579 	.word	0x08003579
 8003560:	08003675 	.word	0x08003675
 8003564:	08003799 	.word	0x08003799
 8003568:	08003895 	.word	0x08003895
 800356c:	08003991 	.word	0x08003991
 8003570:	08003ac9 	.word	0x08003ac9
 8003574:	08003bdb 	.word	0x08003bdb
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003578:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800357c:	9301      	str	r3, [sp, #4]
 800357e:	2302      	movs	r3, #2
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	2232      	movs	r2, #50	; 0x32
 8003586:	210a      	movs	r1, #10
 8003588:	487b      	ldr	r0, [pc, #492]	; (8003778 <FuncMenu_DrawOutputMenu+0x284>)
 800358a:	f00d f8d9 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800358e:	2300      	movs	r3, #0
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2302      	movs	r3, #2
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800359a:	2246      	movs	r2, #70	; 0x46
 800359c:	210a      	movs	r1, #10
 800359e:	4877      	ldr	r0, [pc, #476]	; (800377c <FuncMenu_DrawOutputMenu+0x288>)
 80035a0:	f00d f8ce 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035a4:	2300      	movs	r3, #0
 80035a6:	9301      	str	r3, [sp, #4]
 80035a8:	2302      	movs	r3, #2
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035b0:	225a      	movs	r2, #90	; 0x5a
 80035b2:	210a      	movs	r1, #10
 80035b4:	4872      	ldr	r0, [pc, #456]	; (8003780 <FuncMenu_DrawOutputMenu+0x28c>)
 80035b6:	f00d f8c3 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035ba:	2300      	movs	r3, #0
 80035bc:	9301      	str	r3, [sp, #4]
 80035be:	2302      	movs	r3, #2
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035c6:	226e      	movs	r2, #110	; 0x6e
 80035c8:	210a      	movs	r1, #10
 80035ca:	486e      	ldr	r0, [pc, #440]	; (8003784 <FuncMenu_DrawOutputMenu+0x290>)
 80035cc:	f00d f8b8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035d0:	2300      	movs	r3, #0
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	2302      	movs	r3, #2
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035dc:	2282      	movs	r2, #130	; 0x82
 80035de:	210a      	movs	r1, #10
 80035e0:	4869      	ldr	r0, [pc, #420]	; (8003788 <FuncMenu_DrawOutputMenu+0x294>)
 80035e2:	f00d f8ad 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035e6:	2300      	movs	r3, #0
 80035e8:	9301      	str	r3, [sp, #4]
 80035ea:	2302      	movs	r3, #2
 80035ec:	9300      	str	r3, [sp, #0]
 80035ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035f2:	2296      	movs	r2, #150	; 0x96
 80035f4:	210a      	movs	r1, #10
 80035f6:	4865      	ldr	r0, [pc, #404]	; (800378c <FuncMenu_DrawOutputMenu+0x298>)
 80035f8:	f00d f8a2 	bl	8010740 <ILI9341_Draw_Text>

				if(pOutChan)
 80035fc:	79fb      	ldrb	r3, [r7, #7]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00a      	beq.n	8003618 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003602:	2300      	movs	r3, #0
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	2302      	movs	r3, #2
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800360e:	22aa      	movs	r2, #170	; 0xaa
 8003610:	210a      	movs	r1, #10
 8003612:	485f      	ldr	r0, [pc, #380]	; (8003790 <FuncMenu_DrawOutputMenu+0x29c>)
 8003614:	f00d f894 	bl	8010740 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003618:	f240 23fd 	movw	r3, #765	; 0x2fd
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2302      	movs	r3, #2
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2300      	movs	r3, #0
 8003624:	22d2      	movs	r2, #210	; 0xd2
 8003626:	2105      	movs	r1, #5
 8003628:	485a      	ldr	r0, [pc, #360]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800362a:	f00d f889 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800362e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003632:	9301      	str	r3, [sp, #4]
 8003634:	2302      	movs	r3, #2
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	2300      	movs	r3, #0
 800363a:	22d2      	movs	r2, #210	; 0xd2
 800363c:	2161      	movs	r1, #97	; 0x61
 800363e:	4855      	ldr	r0, [pc, #340]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003640:	f00d f87e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003644:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	2302      	movs	r3, #2
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	2300      	movs	r3, #0
 8003650:	22d2      	movs	r2, #210	; 0xd2
 8003652:	21af      	movs	r1, #175	; 0xaf
 8003654:	484f      	ldr	r0, [pc, #316]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003656:	f00d f873 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800365a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	2302      	movs	r3, #2
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	2300      	movs	r3, #0
 8003666:	22d2      	movs	r2, #210	; 0xd2
 8003668:	f44f 7182 	mov.w	r1, #260	; 0x104
 800366c:	4849      	ldr	r0, [pc, #292]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800366e:	f00d f867 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8003672:	e38e      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003674:	2300      	movs	r3, #0
 8003676:	9301      	str	r3, [sp, #4]
 8003678:	2302      	movs	r3, #2
 800367a:	9300      	str	r3, [sp, #0]
 800367c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003680:	2232      	movs	r2, #50	; 0x32
 8003682:	210a      	movs	r1, #10
 8003684:	483c      	ldr	r0, [pc, #240]	; (8003778 <FuncMenu_DrawOutputMenu+0x284>)
 8003686:	f00d f85b 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800368a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	2302      	movs	r3, #2
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	2300      	movs	r3, #0
 8003696:	2246      	movs	r2, #70	; 0x46
 8003698:	210a      	movs	r1, #10
 800369a:	4838      	ldr	r0, [pc, #224]	; (800377c <FuncMenu_DrawOutputMenu+0x288>)
 800369c:	f00d f850 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036a0:	2300      	movs	r3, #0
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	2302      	movs	r3, #2
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ac:	225a      	movs	r2, #90	; 0x5a
 80036ae:	210a      	movs	r1, #10
 80036b0:	4833      	ldr	r0, [pc, #204]	; (8003780 <FuncMenu_DrawOutputMenu+0x28c>)
 80036b2:	f00d f845 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036b6:	2300      	movs	r3, #0
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	2302      	movs	r3, #2
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036c2:	226e      	movs	r2, #110	; 0x6e
 80036c4:	210a      	movs	r1, #10
 80036c6:	482f      	ldr	r0, [pc, #188]	; (8003784 <FuncMenu_DrawOutputMenu+0x290>)
 80036c8:	f00d f83a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036cc:	2300      	movs	r3, #0
 80036ce:	9301      	str	r3, [sp, #4]
 80036d0:	2302      	movs	r3, #2
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d8:	2282      	movs	r2, #130	; 0x82
 80036da:	210a      	movs	r1, #10
 80036dc:	482a      	ldr	r0, [pc, #168]	; (8003788 <FuncMenu_DrawOutputMenu+0x294>)
 80036de:	f00d f82f 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036e2:	2300      	movs	r3, #0
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	2302      	movs	r3, #2
 80036e8:	9300      	str	r3, [sp, #0]
 80036ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ee:	2296      	movs	r2, #150	; 0x96
 80036f0:	210a      	movs	r1, #10
 80036f2:	4826      	ldr	r0, [pc, #152]	; (800378c <FuncMenu_DrawOutputMenu+0x298>)
 80036f4:	f00d f824 	bl	8010740 <ILI9341_Draw_Text>

				if(pOutChan)
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036fe:	2300      	movs	r3, #0
 8003700:	9301      	str	r3, [sp, #4]
 8003702:	2302      	movs	r3, #2
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800370a:	22aa      	movs	r2, #170	; 0xaa
 800370c:	210a      	movs	r1, #10
 800370e:	4820      	ldr	r0, [pc, #128]	; (8003790 <FuncMenu_DrawOutputMenu+0x29c>)
 8003710:	f00d f816 	bl	8010740 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003714:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003718:	9301      	str	r3, [sp, #4]
 800371a:	2302      	movs	r3, #2
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	2300      	movs	r3, #0
 8003720:	22d2      	movs	r2, #210	; 0xd2
 8003722:	2105      	movs	r1, #5
 8003724:	481b      	ldr	r0, [pc, #108]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003726:	f00d f80b 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800372a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800372e:	9301      	str	r3, [sp, #4]
 8003730:	2302      	movs	r3, #2
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	22d2      	movs	r2, #210	; 0xd2
 8003738:	2161      	movs	r1, #97	; 0x61
 800373a:	4816      	ldr	r0, [pc, #88]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800373c:	f00d f800 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003740:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	2302      	movs	r3, #2
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	2300      	movs	r3, #0
 800374c:	22d2      	movs	r2, #210	; 0xd2
 800374e:	21af      	movs	r1, #175	; 0xaf
 8003750:	4810      	ldr	r0, [pc, #64]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003752:	f00c fff5 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003756:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	2302      	movs	r3, #2
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	2300      	movs	r3, #0
 8003762:	22d2      	movs	r2, #210	; 0xd2
 8003764:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003768:	480a      	ldr	r0, [pc, #40]	; (8003794 <FuncMenu_DrawOutputMenu+0x2a0>)
 800376a:	f00c ffe9 	bl	8010740 <ILI9341_Draw_Text>
				break;
 800376e:	e310      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003770:	080159c4 	.word	0x080159c4
 8003774:	080159d4 	.word	0x080159d4
 8003778:	080159e4 	.word	0x080159e4
 800377c:	080159ec 	.word	0x080159ec
 8003780:	080159f8 	.word	0x080159f8
 8003784:	08015a00 	.word	0x08015a00
 8003788:	08015a0c 	.word	0x08015a0c
 800378c:	08015a18 	.word	0x08015a18
 8003790:	08015a20 	.word	0x08015a20
 8003794:	080159bc 	.word	0x080159bc
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003798:	2300      	movs	r3, #0
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	2302      	movs	r3, #2
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037a4:	2232      	movs	r2, #50	; 0x32
 80037a6:	210a      	movs	r1, #10
 80037a8:	48be      	ldr	r0, [pc, #760]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80037aa:	f00c ffc9 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ae:	2300      	movs	r3, #0
 80037b0:	9301      	str	r3, [sp, #4]
 80037b2:	2302      	movs	r3, #2
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037ba:	2246      	movs	r2, #70	; 0x46
 80037bc:	210a      	movs	r1, #10
 80037be:	48ba      	ldr	r0, [pc, #744]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80037c0:	f00c ffbe 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80037c4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80037c8:	9301      	str	r3, [sp, #4]
 80037ca:	2302      	movs	r3, #2
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	2300      	movs	r3, #0
 80037d0:	225a      	movs	r2, #90	; 0x5a
 80037d2:	210a      	movs	r1, #10
 80037d4:	48b5      	ldr	r0, [pc, #724]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80037d6:	f00c ffb3 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037da:	2300      	movs	r3, #0
 80037dc:	9301      	str	r3, [sp, #4]
 80037de:	2302      	movs	r3, #2
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e6:	226e      	movs	r2, #110	; 0x6e
 80037e8:	210a      	movs	r1, #10
 80037ea:	48b1      	ldr	r0, [pc, #708]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80037ec:	f00c ffa8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037f0:	2300      	movs	r3, #0
 80037f2:	9301      	str	r3, [sp, #4]
 80037f4:	2302      	movs	r3, #2
 80037f6:	9300      	str	r3, [sp, #0]
 80037f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037fc:	2282      	movs	r2, #130	; 0x82
 80037fe:	210a      	movs	r1, #10
 8003800:	48ac      	ldr	r0, [pc, #688]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 8003802:	f00c ff9d 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003806:	2300      	movs	r3, #0
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2302      	movs	r3, #2
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003812:	2296      	movs	r2, #150	; 0x96
 8003814:	210a      	movs	r1, #10
 8003816:	48a8      	ldr	r0, [pc, #672]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003818:	f00c ff92 	bl	8010740 <ILI9341_Draw_Text>
				if(pOutChan)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00a      	beq.n	8003838 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003822:	2300      	movs	r3, #0
 8003824:	9301      	str	r3, [sp, #4]
 8003826:	2302      	movs	r3, #2
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800382e:	22aa      	movs	r2, #170	; 0xaa
 8003830:	210a      	movs	r1, #10
 8003832:	48a2      	ldr	r0, [pc, #648]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003834:	f00c ff84 	bl	8010740 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003838:	f240 23fd 	movw	r3, #765	; 0x2fd
 800383c:	9301      	str	r3, [sp, #4]
 800383e:	2302      	movs	r3, #2
 8003840:	9300      	str	r3, [sp, #0]
 8003842:	2300      	movs	r3, #0
 8003844:	22d2      	movs	r2, #210	; 0xd2
 8003846:	2105      	movs	r1, #5
 8003848:	489d      	ldr	r0, [pc, #628]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800384a:	f00c ff79 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800384e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	2302      	movs	r3, #2
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	2300      	movs	r3, #0
 800385a:	22d2      	movs	r2, #210	; 0xd2
 800385c:	2161      	movs	r1, #97	; 0x61
 800385e:	4898      	ldr	r0, [pc, #608]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003860:	f00c ff6e 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003864:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003868:	9301      	str	r3, [sp, #4]
 800386a:	2302      	movs	r3, #2
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2300      	movs	r3, #0
 8003870:	22d2      	movs	r2, #210	; 0xd2
 8003872:	21af      	movs	r1, #175	; 0xaf
 8003874:	4892      	ldr	r0, [pc, #584]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003876:	f00c ff63 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800387a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800387e:	9301      	str	r3, [sp, #4]
 8003880:	2302      	movs	r3, #2
 8003882:	9300      	str	r3, [sp, #0]
 8003884:	2300      	movs	r3, #0
 8003886:	22d2      	movs	r2, #210	; 0xd2
 8003888:	f44f 7182 	mov.w	r1, #260	; 0x104
 800388c:	488c      	ldr	r0, [pc, #560]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800388e:	f00c ff57 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8003892:	e27e      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003894:	2300      	movs	r3, #0
 8003896:	9301      	str	r3, [sp, #4]
 8003898:	2302      	movs	r3, #2
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038a0:	2232      	movs	r2, #50	; 0x32
 80038a2:	210a      	movs	r1, #10
 80038a4:	487f      	ldr	r0, [pc, #508]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80038a6:	f00c ff4b 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038aa:	2300      	movs	r3, #0
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	2302      	movs	r3, #2
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038b6:	2246      	movs	r2, #70	; 0x46
 80038b8:	210a      	movs	r1, #10
 80038ba:	487b      	ldr	r0, [pc, #492]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80038bc:	f00c ff40 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038c0:	2300      	movs	r3, #0
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	2302      	movs	r3, #2
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038cc:	225a      	movs	r2, #90	; 0x5a
 80038ce:	210a      	movs	r1, #10
 80038d0:	4876      	ldr	r0, [pc, #472]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80038d2:	f00c ff35 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80038d6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80038da:	9301      	str	r3, [sp, #4]
 80038dc:	2302      	movs	r3, #2
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	2300      	movs	r3, #0
 80038e2:	226e      	movs	r2, #110	; 0x6e
 80038e4:	210a      	movs	r1, #10
 80038e6:	4872      	ldr	r0, [pc, #456]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80038e8:	f00c ff2a 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ec:	2300      	movs	r3, #0
 80038ee:	9301      	str	r3, [sp, #4]
 80038f0:	2302      	movs	r3, #2
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038f8:	2282      	movs	r2, #130	; 0x82
 80038fa:	210a      	movs	r1, #10
 80038fc:	486d      	ldr	r0, [pc, #436]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 80038fe:	f00c ff1f 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003902:	2300      	movs	r3, #0
 8003904:	9301      	str	r3, [sp, #4]
 8003906:	2302      	movs	r3, #2
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800390e:	2296      	movs	r2, #150	; 0x96
 8003910:	210a      	movs	r1, #10
 8003912:	4869      	ldr	r0, [pc, #420]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003914:	f00c ff14 	bl	8010740 <ILI9341_Draw_Text>

				if(pOutChan)
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800391e:	2300      	movs	r3, #0
 8003920:	9301      	str	r3, [sp, #4]
 8003922:	2302      	movs	r3, #2
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800392a:	22aa      	movs	r2, #170	; 0xaa
 800392c:	210a      	movs	r1, #10
 800392e:	4863      	ldr	r0, [pc, #396]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003930:	f00c ff06 	bl	8010740 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003934:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	2302      	movs	r3, #2
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	2300      	movs	r3, #0
 8003940:	22d2      	movs	r2, #210	; 0xd2
 8003942:	2105      	movs	r1, #5
 8003944:	485e      	ldr	r0, [pc, #376]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003946:	f00c fefb 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800394a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	2302      	movs	r3, #2
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	2300      	movs	r3, #0
 8003956:	22d2      	movs	r2, #210	; 0xd2
 8003958:	2161      	movs	r1, #97	; 0x61
 800395a:	4859      	ldr	r0, [pc, #356]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800395c:	f00c fef0 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003960:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2302      	movs	r3, #2
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	22d2      	movs	r2, #210	; 0xd2
 800396e:	21af      	movs	r1, #175	; 0xaf
 8003970:	4853      	ldr	r0, [pc, #332]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003972:	f00c fee5 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003976:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	2302      	movs	r3, #2
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	2300      	movs	r3, #0
 8003982:	22d2      	movs	r2, #210	; 0xd2
 8003984:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003988:	484d      	ldr	r0, [pc, #308]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 800398a:	f00c fed9 	bl	8010740 <ILI9341_Draw_Text>
				break;
 800398e:	e200      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003990:	2300      	movs	r3, #0
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	2302      	movs	r3, #2
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800399c:	2232      	movs	r2, #50	; 0x32
 800399e:	210a      	movs	r1, #10
 80039a0:	4840      	ldr	r0, [pc, #256]	; (8003aa4 <FuncMenu_DrawOutputMenu+0x5b0>)
 80039a2:	f00c fecd 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039a6:	2300      	movs	r3, #0
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	2302      	movs	r3, #2
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039b2:	2246      	movs	r2, #70	; 0x46
 80039b4:	210a      	movs	r1, #10
 80039b6:	483c      	ldr	r0, [pc, #240]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x5b4>)
 80039b8:	f00c fec2 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039bc:	2300      	movs	r3, #0
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2302      	movs	r3, #2
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039c8:	225a      	movs	r2, #90	; 0x5a
 80039ca:	210a      	movs	r1, #10
 80039cc:	4837      	ldr	r0, [pc, #220]	; (8003aac <FuncMenu_DrawOutputMenu+0x5b8>)
 80039ce:	f00c feb7 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039d2:	2300      	movs	r3, #0
 80039d4:	9301      	str	r3, [sp, #4]
 80039d6:	2302      	movs	r3, #2
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80039de:	226e      	movs	r2, #110	; 0x6e
 80039e0:	210a      	movs	r1, #10
 80039e2:	4833      	ldr	r0, [pc, #204]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x5bc>)
 80039e4:	f00c feac 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80039e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80039ec:	9301      	str	r3, [sp, #4]
 80039ee:	2302      	movs	r3, #2
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	2300      	movs	r3, #0
 80039f4:	2282      	movs	r2, #130	; 0x82
 80039f6:	210a      	movs	r1, #10
 80039f8:	482e      	ldr	r0, [pc, #184]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x5c0>)
 80039fa:	f00c fea1 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80039fe:	2300      	movs	r3, #0
 8003a00:	9301      	str	r3, [sp, #4]
 8003a02:	2302      	movs	r3, #2
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a0a:	2296      	movs	r2, #150	; 0x96
 8003a0c:	210a      	movs	r1, #10
 8003a0e:	482a      	ldr	r0, [pc, #168]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003a10:	f00c fe96 	bl	8010740 <ILI9341_Draw_Text>

				if(pOutChan)
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d00a      	beq.n	8003a30 <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9301      	str	r3, [sp, #4]
 8003a1e:	2302      	movs	r3, #2
 8003a20:	9300      	str	r3, [sp, #0]
 8003a22:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a26:	22aa      	movs	r2, #170	; 0xaa
 8003a28:	210a      	movs	r1, #10
 8003a2a:	4824      	ldr	r0, [pc, #144]	; (8003abc <FuncMenu_DrawOutputMenu+0x5c8>)
 8003a2c:	f00c fe88 	bl	8010740 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003a30:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	2302      	movs	r3, #2
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	22d2      	movs	r2, #210	; 0xd2
 8003a3e:	2105      	movs	r1, #5
 8003a40:	481f      	ldr	r0, [pc, #124]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a42:	f00c fe7d 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003a46:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	2300      	movs	r3, #0
 8003a52:	22d2      	movs	r2, #210	; 0xd2
 8003a54:	2161      	movs	r1, #97	; 0x61
 8003a56:	481a      	ldr	r0, [pc, #104]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a58:	f00c fe72 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a5c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	2302      	movs	r3, #2
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2300      	movs	r3, #0
 8003a68:	22d2      	movs	r2, #210	; 0xd2
 8003a6a:	21af      	movs	r1, #175	; 0xaf
 8003a6c:	4814      	ldr	r0, [pc, #80]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a6e:	f00c fe67 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a72:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	2302      	movs	r3, #2
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	22d2      	movs	r2, #210	; 0xd2
 8003a80:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a84:	480e      	ldr	r0, [pc, #56]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x5cc>)
 8003a86:	f00c fe5b 	bl	8010740 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	2302      	movs	r3, #2
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a96:	2232      	movs	r2, #50	; 0x32
 8003a98:	2196      	movs	r1, #150	; 0x96
 8003a9a:	480a      	ldr	r0, [pc, #40]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x5d0>)
 8003a9c:	f00c fe50 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8003aa0:	e177      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
 8003aa2:	bf00      	nop
 8003aa4:	080159e4 	.word	0x080159e4
 8003aa8:	080159ec 	.word	0x080159ec
 8003aac:	080159f8 	.word	0x080159f8
 8003ab0:	08015a00 	.word	0x08015a00
 8003ab4:	08015a0c 	.word	0x08015a0c
 8003ab8:	08015a18 	.word	0x08015a18
 8003abc:	08015a20 	.word	0x08015a20
 8003ac0:	080159bc 	.word	0x080159bc
 8003ac4:	08015a28 	.word	0x08015a28
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ac8:	2300      	movs	r3, #0
 8003aca:	9301      	str	r3, [sp, #4]
 8003acc:	2302      	movs	r3, #2
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ad4:	2232      	movs	r2, #50	; 0x32
 8003ad6:	210a      	movs	r1, #10
 8003ad8:	48b0      	ldr	r0, [pc, #704]	; (8003d9c <FuncMenu_DrawOutputMenu+0x8a8>)
 8003ada:	f00c fe31 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ade:	2300      	movs	r3, #0
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003aea:	2246      	movs	r2, #70	; 0x46
 8003aec:	210a      	movs	r1, #10
 8003aee:	48ac      	ldr	r0, [pc, #688]	; (8003da0 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003af0:	f00c fe26 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003af4:	2300      	movs	r3, #0
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	2302      	movs	r3, #2
 8003afa:	9300      	str	r3, [sp, #0]
 8003afc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b00:	225a      	movs	r2, #90	; 0x5a
 8003b02:	210a      	movs	r1, #10
 8003b04:	48a7      	ldr	r0, [pc, #668]	; (8003da4 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003b06:	f00c fe1b 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	2302      	movs	r3, #2
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b16:	226e      	movs	r2, #110	; 0x6e
 8003b18:	210a      	movs	r1, #10
 8003b1a:	48a3      	ldr	r0, [pc, #652]	; (8003da8 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003b1c:	f00c fe10 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b20:	2300      	movs	r3, #0
 8003b22:	9301      	str	r3, [sp, #4]
 8003b24:	2302      	movs	r3, #2
 8003b26:	9300      	str	r3, [sp, #0]
 8003b28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b2c:	2282      	movs	r2, #130	; 0x82
 8003b2e:	210a      	movs	r1, #10
 8003b30:	489e      	ldr	r0, [pc, #632]	; (8003dac <FuncMenu_DrawOutputMenu+0x8b8>)
 8003b32:	f00c fe05 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003b36:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003b3a:	9301      	str	r3, [sp, #4]
 8003b3c:	2302      	movs	r3, #2
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	2300      	movs	r3, #0
 8003b42:	2296      	movs	r2, #150	; 0x96
 8003b44:	210a      	movs	r1, #10
 8003b46:	489a      	ldr	r0, [pc, #616]	; (8003db0 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003b48:	f00c fdfa 	bl	8010740 <ILI9341_Draw_Text>

				if(pOutChan)
 8003b4c:	79fb      	ldrb	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d00a      	beq.n	8003b68 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003b52:	2300      	movs	r3, #0
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	2302      	movs	r3, #2
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003b5e:	22aa      	movs	r2, #170	; 0xaa
 8003b60:	210a      	movs	r1, #10
 8003b62:	4894      	ldr	r0, [pc, #592]	; (8003db4 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003b64:	f00c fdec 	bl	8010740 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b68:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b6c:	9301      	str	r3, [sp, #4]
 8003b6e:	2302      	movs	r3, #2
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2300      	movs	r3, #0
 8003b74:	22d2      	movs	r2, #210	; 0xd2
 8003b76:	2105      	movs	r1, #5
 8003b78:	488f      	ldr	r0, [pc, #572]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b7a:	f00c fde1 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b7e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	2302      	movs	r3, #2
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	2300      	movs	r3, #0
 8003b8a:	22d2      	movs	r2, #210	; 0xd2
 8003b8c:	2161      	movs	r1, #97	; 0x61
 8003b8e:	488a      	ldr	r0, [pc, #552]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003b90:	f00c fdd6 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b98:	9301      	str	r3, [sp, #4]
 8003b9a:	2302      	movs	r3, #2
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	22d2      	movs	r2, #210	; 0xd2
 8003ba2:	21af      	movs	r1, #175	; 0xaf
 8003ba4:	4884      	ldr	r0, [pc, #528]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ba6:	f00c fdcb 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003baa:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003bae:	9301      	str	r3, [sp, #4]
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	9300      	str	r3, [sp, #0]
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	22d2      	movs	r2, #210	; 0xd2
 8003bb8:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003bbc:	487e      	ldr	r0, [pc, #504]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003bbe:	f00c fdbf 	bl	8010740 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	9301      	str	r3, [sp, #4]
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	9300      	str	r3, [sp, #0]
 8003bca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003bce:	2232      	movs	r2, #50	; 0x32
 8003bd0:	2196      	movs	r1, #150	; 0x96
 8003bd2:	487a      	ldr	r0, [pc, #488]	; (8003dbc <FuncMenu_DrawOutputMenu+0x8c8>)
 8003bd4:	f00c fdb4 	bl	8010740 <ILI9341_Draw_Text>
				break;
 8003bd8:	e0db      	b.n	8003d92 <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	2302      	movs	r3, #2
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003be6:	2232      	movs	r2, #50	; 0x32
 8003be8:	210a      	movs	r1, #10
 8003bea:	486c      	ldr	r0, [pc, #432]	; (8003d9c <FuncMenu_DrawOutputMenu+0x8a8>)
 8003bec:	f00c fda8 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003bfc:	2246      	movs	r2, #70	; 0x46
 8003bfe:	210a      	movs	r1, #10
 8003c00:	4867      	ldr	r0, [pc, #412]	; (8003da0 <FuncMenu_DrawOutputMenu+0x8ac>)
 8003c02:	f00c fd9d 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c06:	2300      	movs	r3, #0
 8003c08:	9301      	str	r3, [sp, #4]
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c12:	225a      	movs	r2, #90	; 0x5a
 8003c14:	210a      	movs	r1, #10
 8003c16:	4863      	ldr	r0, [pc, #396]	; (8003da4 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003c18:	f00c fd92 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	2302      	movs	r3, #2
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c28:	226e      	movs	r2, #110	; 0x6e
 8003c2a:	210a      	movs	r1, #10
 8003c2c:	485e      	ldr	r0, [pc, #376]	; (8003da8 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003c2e:	f00c fd87 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c32:	2300      	movs	r3, #0
 8003c34:	9301      	str	r3, [sp, #4]
 8003c36:	2302      	movs	r3, #2
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c3e:	2282      	movs	r2, #130	; 0x82
 8003c40:	210a      	movs	r1, #10
 8003c42:	485a      	ldr	r0, [pc, #360]	; (8003dac <FuncMenu_DrawOutputMenu+0x8b8>)
 8003c44:	f00c fd7c 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9301      	str	r3, [sp, #4]
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	9300      	str	r3, [sp, #0]
 8003c50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003c54:	2296      	movs	r2, #150	; 0x96
 8003c56:	210a      	movs	r1, #10
 8003c58:	4855      	ldr	r0, [pc, #340]	; (8003db0 <FuncMenu_DrawOutputMenu+0x8bc>)
 8003c5a:	f00c fd71 	bl	8010740 <ILI9341_Draw_Text>

				if(pOutChan)
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003c64:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003c68:	9301      	str	r3, [sp, #4]
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	22aa      	movs	r2, #170	; 0xaa
 8003c72:	210a      	movs	r1, #10
 8003c74:	484f      	ldr	r0, [pc, #316]	; (8003db4 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003c76:	f00c fd63 	bl	8010740 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003c7a:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003c7e:	9301      	str	r3, [sp, #4]
 8003c80:	2302      	movs	r3, #2
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	2300      	movs	r3, #0
 8003c86:	22d2      	movs	r2, #210	; 0xd2
 8003c88:	2105      	movs	r1, #5
 8003c8a:	484b      	ldr	r0, [pc, #300]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003c8c:	f00c fd58 	bl	8010740 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003c90:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c94:	9301      	str	r3, [sp, #4]
 8003c96:	2302      	movs	r3, #2
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	22d2      	movs	r2, #210	; 0xd2
 8003c9e:	2161      	movs	r1, #97	; 0x61
 8003ca0:	4845      	ldr	r0, [pc, #276]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003ca2:	f00c fd4d 	bl	8010740 <ILI9341_Draw_Text>

				if(pOutChan)
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d05a      	beq.n	8003d62 <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cac:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003cb0:	9301      	str	r3, [sp, #4]
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	9300      	str	r3, [sp, #0]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	22d2      	movs	r2, #210	; 0xd2
 8003cba:	21af      	movs	r1, #175	; 0xaf
 8003cbc:	4840      	ldr	r0, [pc, #256]	; (8003dc0 <FuncMenu_DrawOutputMenu+0x8cc>)
 8003cbe:	f00c fd3f 	bl	8010740 <ILI9341_Draw_Text>
					char duty[10] = "";
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	f107 030c 	add.w	r3, r7, #12
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 8003cd0:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003cd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd4:	ee07 3a90 	vmov	s15, r3
 8003cd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cdc:	4b39      	ldr	r3, [pc, #228]	; (8003dc4 <FuncMenu_DrawOutputMenu+0x8d0>)
 8003cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce0:	ee07 3a90 	vmov	s15, r3
 8003ce4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ce8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cec:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003dc8 <FuncMenu_DrawOutputMenu+0x8d4>
 8003cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003cf4:	ee17 0a90 	vmov	r0, s15
 8003cf8:	f7fc fc4e 	bl	8000598 <__aeabi_f2d>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	f107 0008 	add.w	r0, r7, #8
 8003d04:	e9cd 3400 	strd	r3, r4, [sp]
 8003d08:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <FuncMenu_DrawOutputMenu+0x8d8>)
 8003d0a:	210a      	movs	r1, #10
 8003d0c:	f00e f8d4 	bl	8011eb8 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d10:	f107 0008 	add.w	r0, r7, #8
 8003d14:	2300      	movs	r3, #0
 8003d16:	9301      	str	r3, [sp, #4]
 8003d18:	2302      	movs	r3, #2
 8003d1a:	9300      	str	r3, [sp, #0]
 8003d1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d20:	2232      	movs	r2, #50	; 0x32
 8003d22:	21dc      	movs	r1, #220	; 0xdc
 8003d24:	f00c fd0c 	bl	8010740 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003d28:	f003 f9de 	bl	80070e8 <SM_IsFuncPwmDutyMode>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00b      	beq.n	8003d4a <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003d32:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	2302      	movs	r3, #2
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	2232      	movs	r2, #50	; 0x32
 8003d40:	2196      	movs	r1, #150	; 0x96
 8003d42:	4823      	ldr	r0, [pc, #140]	; (8003dd0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003d44:	f00c fcfc 	bl	8010740 <ILI9341_Draw_Text>
 8003d48:	e016      	b.n	8003d78 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9301      	str	r3, [sp, #4]
 8003d4e:	2302      	movs	r3, #2
 8003d50:	9300      	str	r3, [sp, #0]
 8003d52:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003d56:	2232      	movs	r2, #50	; 0x32
 8003d58:	2196      	movs	r1, #150	; 0x96
 8003d5a:	481d      	ldr	r0, [pc, #116]	; (8003dd0 <FuncMenu_DrawOutputMenu+0x8dc>)
 8003d5c:	f00c fcf0 	bl	8010740 <ILI9341_Draw_Text>
 8003d60:	e00a      	b.n	8003d78 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003d62:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	2302      	movs	r3, #2
 8003d6a:	9300      	str	r3, [sp, #0]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	22d2      	movs	r2, #210	; 0xd2
 8003d70:	21af      	movs	r1, #175	; 0xaf
 8003d72:	4811      	ldr	r0, [pc, #68]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003d74:	f00c fce4 	bl	8010740 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d78:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003d7c:	9301      	str	r3, [sp, #4]
 8003d7e:	2302      	movs	r3, #2
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	2300      	movs	r3, #0
 8003d84:	22d2      	movs	r2, #210	; 0xd2
 8003d86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003d8a:	480b      	ldr	r0, [pc, #44]	; (8003db8 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003d8c:	f00c fcd8 	bl	8010740 <ILI9341_Draw_Text>

				break;
 8003d90:	bf00      	nop
				//
		}
	}
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd90      	pop	{r4, r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	080159e4 	.word	0x080159e4
 8003da0:	080159ec 	.word	0x080159ec
 8003da4:	080159f8 	.word	0x080159f8
 8003da8:	08015a00 	.word	0x08015a00
 8003dac:	08015a0c 	.word	0x08015a0c
 8003db0:	08015a18 	.word	0x08015a18
 8003db4:	08015a20 	.word	0x08015a20
 8003db8:	080159bc 	.word	0x080159bc
 8003dbc:	08015a28 	.word	0x08015a28
 8003dc0:	08015a38 	.word	0x08015a38
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	42c80000 	.word	0x42c80000
 8003dcc:	08015a40 	.word	0x08015a40
 8003dd0:	08015a48 	.word	0x08015a48

08003dd4 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	4603      	mov	r3, r0
 8003ddc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d007      	beq.n	8003df4 <GainMenu_DrawMenu+0x20>
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d008      	beq.n	8003dfa <GainMenu_DrawMenu+0x26>
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d000      	beq.n	8003dee <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003dec:	e008      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003dee:	f000 f80b 	bl	8003e08 <GainMenu_DrawMainMenu>
			break;
 8003df2:	e005      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003df4:	f000 f868 	bl	8003ec8 <GainMenu_DrawSignalMenu>
			break;
 8003df8:	e002      	b.n	8003e00 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003dfa:	f000 f8af 	bl	8003f5c <GainMenu_DrawAuxMenu>
			break;
 8003dfe:	bf00      	nop

	}
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	2302      	movs	r3, #2
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2300      	movs	r3, #0
 8003e1a:	220a      	movs	r2, #10
 8003e1c:	210a      	movs	r1, #10
 8003e1e:	4826      	ldr	r0, [pc, #152]	; (8003eb8 <GainMenu_DrawMainMenu+0xb0>)
 8003e20:	f00c fc8e 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003e24:	f7fd f868 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003e28:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2302      	movs	r3, #2
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2300      	movs	r3, #0
 8003e34:	22d2      	movs	r2, #210	; 0xd2
 8003e36:	2105      	movs	r1, #5
 8003e38:	4820      	ldr	r0, [pc, #128]	; (8003ebc <GainMenu_DrawMainMenu+0xb4>)
 8003e3a:	f00c fc81 	bl	8010740 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f002 fe50 	bl	8006ae4 <SM_GetOutputChannel>
 8003e44:	4603      	mov	r3, r0
 8003e46:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2b06      	cmp	r3, #6
 8003e52:	d10b      	bne.n	8003e6c <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e54:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e58:	9301      	str	r3, [sp, #4]
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	2300      	movs	r3, #0
 8003e60:	22d2      	movs	r2, #210	; 0xd2
 8003e62:	2164      	movs	r1, #100	; 0x64
 8003e64:	4816      	ldr	r0, [pc, #88]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003e66:	f00c fc6b 	bl	8010740 <ILI9341_Draw_Text>
 8003e6a:	e00a      	b.n	8003e82 <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003e6c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	2300      	movs	r3, #0
 8003e78:	22d2      	movs	r2, #210	; 0xd2
 8003e7a:	2164      	movs	r1, #100	; 0x64
 8003e7c:	4811      	ldr	r0, [pc, #68]	; (8003ec4 <GainMenu_DrawMainMenu+0xbc>)
 8003e7e:	f00c fc5f 	bl	8010740 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003e82:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	2302      	movs	r3, #2
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	22d2      	movs	r2, #210	; 0xd2
 8003e90:	21af      	movs	r1, #175	; 0xaf
 8003e92:	480b      	ldr	r0, [pc, #44]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003e94:	f00c fc54 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003e98:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	9300      	str	r3, [sp, #0]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	22d2      	movs	r2, #210	; 0xd2
 8003ea6:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003eaa:	4805      	ldr	r0, [pc, #20]	; (8003ec0 <GainMenu_DrawMainMenu+0xb8>)
 8003eac:	f00c fc48 	bl	8010740 <ILI9341_Draw_Text>
}
 8003eb0:	bf00      	nop
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	08015a50 	.word	0x08015a50
 8003ebc:	08015a5c 	.word	0x08015a5c
 8003ec0:	08015a64 	.word	0x08015a64
 8003ec4:	08015a6c 	.word	0x08015a6c

08003ec8 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003ece:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	220a      	movs	r2, #10
 8003edc:	210a      	movs	r1, #10
 8003ede:	481a      	ldr	r0, [pc, #104]	; (8003f48 <GainMenu_DrawSignalMenu+0x80>)
 8003ee0:	f00c fc2e 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003ee4:	f7fd f808 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003ee8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	2302      	movs	r3, #2
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	22d2      	movs	r2, #210	; 0xd2
 8003ef6:	210f      	movs	r1, #15
 8003ef8:	4814      	ldr	r0, [pc, #80]	; (8003f4c <GainMenu_DrawSignalMenu+0x84>)
 8003efa:	f00c fc21 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003efe:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	2302      	movs	r3, #2
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	22d2      	movs	r2, #210	; 0xd2
 8003f0c:	2161      	movs	r1, #97	; 0x61
 8003f0e:	4810      	ldr	r0, [pc, #64]	; (8003f50 <GainMenu_DrawSignalMenu+0x88>)
 8003f10:	f00c fc16 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003f14:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	2302      	movs	r3, #2
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	22d2      	movs	r2, #210	; 0xd2
 8003f22:	21be      	movs	r1, #190	; 0xbe
 8003f24:	480b      	ldr	r0, [pc, #44]	; (8003f54 <GainMenu_DrawSignalMenu+0x8c>)
 8003f26:	f00c fc0b 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003f2a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003f2e:	9301      	str	r3, [sp, #4]
 8003f30:	2302      	movs	r3, #2
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	2300      	movs	r3, #0
 8003f36:	22d2      	movs	r2, #210	; 0xd2
 8003f38:	f240 1109 	movw	r1, #265	; 0x109
 8003f3c:	4806      	ldr	r0, [pc, #24]	; (8003f58 <GainMenu_DrawSignalMenu+0x90>)
 8003f3e:	f00c fbff 	bl	8010740 <ILI9341_Draw_Text>
}
 8003f42:	bf00      	nop
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	08015a70 	.word	0x08015a70
 8003f4c:	08015a80 	.word	0x08015a80
 8003f50:	08015a88 	.word	0x08015a88
 8003f54:	08015a90 	.word	0x08015a90
 8003f58:	08015a94 	.word	0x08015a94

08003f5c <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f66:	9301      	str	r3, [sp, #4]
 8003f68:	2302      	movs	r3, #2
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	220a      	movs	r2, #10
 8003f70:	210a      	movs	r1, #10
 8003f72:	4804      	ldr	r0, [pc, #16]	; (8003f84 <GainMenu_DrawAuxMenu+0x28>)
 8003f74:	f00c fbe4 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003f78:	f7fc ffbe 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003f7c:	bf00      	nop
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	08015a98 	.word	0x08015a98

08003f88 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d007      	beq.n	8003fa8 <ToplevelMenu_DrawMenu+0x20>
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d008      	beq.n	8003fae <ToplevelMenu_DrawMenu+0x26>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d000      	beq.n	8003fa2 <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003fa0:	e008      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003fa2:	f000 f80b 	bl	8003fbc <ToplevelMenu_DrawMainMenu>
			break;
 8003fa6:	e005      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003fa8:	f000 f844 	bl	8004034 <ToplevelMenu_DrawOutputMenu>
			break;
 8003fac:	e002      	b.n	8003fb4 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003fae:	f000 f88b 	bl	80040c8 <ToplevelMenu_DrawInputMenu>
			break;
 8003fb2:	bf00      	nop

	}
}
 8003fb4:	bf00      	nop
 8003fb6:	3708      	adds	r7, #8
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003fc2:	f7fc ff99 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fc6:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2302      	movs	r3, #2
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	22d2      	movs	r2, #210	; 0xd2
 8003fd4:	2106      	movs	r1, #6
 8003fd6:	4814      	ldr	r0, [pc, #80]	; (8004028 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003fd8:	f00c fbb2 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003fdc:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003fe0:	9301      	str	r3, [sp, #4]
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	22d2      	movs	r2, #210	; 0xd2
 8003fea:	215d      	movs	r1, #93	; 0x5d
 8003fec:	480f      	ldr	r0, [pc, #60]	; (800402c <ToplevelMenu_DrawMainMenu+0x70>)
 8003fee:	f00c fba7 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003ff2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	22d2      	movs	r2, #210	; 0xd2
 8004000:	21af      	movs	r1, #175	; 0xaf
 8004002:	480b      	ldr	r0, [pc, #44]	; (8004030 <ToplevelMenu_DrawMainMenu+0x74>)
 8004004:	f00c fb9c 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8004008:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	2302      	movs	r3, #2
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	2300      	movs	r3, #0
 8004014:	22d2      	movs	r2, #210	; 0xd2
 8004016:	f44f 7182 	mov.w	r1, #260	; 0x104
 800401a:	4805      	ldr	r0, [pc, #20]	; (8004030 <ToplevelMenu_DrawMainMenu+0x74>)
 800401c:	f00c fb90 	bl	8010740 <ILI9341_Draw_Text>


}
 8004020:	bf00      	nop
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	08015aa8 	.word	0x08015aa8
 800402c:	08015ab0 	.word	0x08015ab0
 8004030:	08015ab8 	.word	0x08015ab8

08004034 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800403a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	2302      	movs	r3, #2
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2300      	movs	r3, #0
 8004046:	220a      	movs	r2, #10
 8004048:	210a      	movs	r1, #10
 800404a:	481a      	ldr	r0, [pc, #104]	; (80040b4 <ToplevelMenu_DrawOutputMenu+0x80>)
 800404c:	f00c fb78 	bl	8010740 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8004050:	f7fc ff52 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8004054:	f240 23fd 	movw	r3, #765	; 0x2fd
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	2302      	movs	r3, #2
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	22d2      	movs	r2, #210	; 0xd2
 8004062:	210f      	movs	r1, #15
 8004064:	4814      	ldr	r0, [pc, #80]	; (80040b8 <ToplevelMenu_DrawOutputMenu+0x84>)
 8004066:	f00c fb6b 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800406a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800406e:	9301      	str	r3, [sp, #4]
 8004070:	2302      	movs	r3, #2
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2300      	movs	r3, #0
 8004076:	22d2      	movs	r2, #210	; 0xd2
 8004078:	2162      	movs	r1, #98	; 0x62
 800407a:	4810      	ldr	r0, [pc, #64]	; (80040bc <ToplevelMenu_DrawOutputMenu+0x88>)
 800407c:	f00c fb60 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004080:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2302      	movs	r3, #2
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2300      	movs	r3, #0
 800408c:	22d2      	movs	r2, #210	; 0xd2
 800408e:	21b0      	movs	r1, #176	; 0xb0
 8004090:	480b      	ldr	r0, [pc, #44]	; (80040c0 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8004092:	f00c fb55 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8004096:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800409a:	9301      	str	r3, [sp, #4]
 800409c:	2302      	movs	r3, #2
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2300      	movs	r3, #0
 80040a2:	22d2      	movs	r2, #210	; 0xd2
 80040a4:	21f5      	movs	r1, #245	; 0xf5
 80040a6:	4807      	ldr	r0, [pc, #28]	; (80040c4 <ToplevelMenu_DrawOutputMenu+0x90>)
 80040a8:	f00c fb4a 	bl	8010740 <ILI9341_Draw_Text>
}
 80040ac:	bf00      	nop
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	08015ac0 	.word	0x08015ac0
 80040b8:	08015ac8 	.word	0x08015ac8
 80040bc:	08015ad0 	.word	0x08015ad0
 80040c0:	08015ad8 	.word	0x08015ad8
 80040c4:	08015ae0 	.word	0x08015ae0

080040c8 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b088      	sub	sp, #32
 80040cc:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 80040ce:	f7fc ff33 	bl	8000f38 <DM_DisplayInputTriggerStatus>

	//
	// BREADCRUMB TRAIL
	//
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80040d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	2302      	movs	r3, #2
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	2300      	movs	r3, #0
 80040de:	220a      	movs	r2, #10
 80040e0:	210a      	movs	r1, #10
 80040e2:	48c5      	ldr	r0, [pc, #788]	; (80043f8 <ToplevelMenu_DrawInputMenu+0x330>)
 80040e4:	f00c fb2c 	bl	8010740 <ILI9341_Draw_Text>

	//
	// TRIGGER SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80040e8:	2300      	movs	r3, #0
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	2302      	movs	r3, #2
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80040f4:	2232      	movs	r2, #50	; 0x32
 80040f6:	210a      	movs	r1, #10
 80040f8:	48c0      	ldr	r0, [pc, #768]	; (80043fc <ToplevelMenu_DrawInputMenu+0x334>)
 80040fa:	f00c fb21 	bl	8010740 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 80040fe:	f002 fb35 	bl	800676c <IT_GetTriggerStatus>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d016      	beq.n	8004136 <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004108:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800410c:	9301      	str	r3, [sp, #4]
 800410e:	2302      	movs	r3, #2
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2300      	movs	r3, #0
 8004114:	2232      	movs	r2, #50	; 0x32
 8004116:	2196      	movs	r1, #150	; 0x96
 8004118:	48b9      	ldr	r0, [pc, #740]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 800411a:	f00c fb11 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800411e:	2300      	movs	r3, #0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	2302      	movs	r3, #2
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800412a:	2232      	movs	r2, #50	; 0x32
 800412c:	21c8      	movs	r1, #200	; 0xc8
 800412e:	48b5      	ldr	r0, [pc, #724]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 8004130:	f00c fb06 	bl	8010740 <ILI9341_Draw_Text>
 8004134:	e015      	b.n	8004162 <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004136:	2300      	movs	r3, #0
 8004138:	9301      	str	r3, [sp, #4]
 800413a:	2302      	movs	r3, #2
 800413c:	9300      	str	r3, [sp, #0]
 800413e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004142:	2232      	movs	r2, #50	; 0x32
 8004144:	2196      	movs	r1, #150	; 0x96
 8004146:	48ae      	ldr	r0, [pc, #696]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 8004148:	f00c fafa 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800414c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	2302      	movs	r3, #2
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	2300      	movs	r3, #0
 8004158:	2232      	movs	r2, #50	; 0x32
 800415a:	21c8      	movs	r1, #200	; 0xc8
 800415c:	48a9      	ldr	r0, [pc, #676]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 800415e:	f00c faef 	bl	8010740 <ILI9341_Draw_Text>
	}

	//
	// MODE SETTINGS DISPLAY
	//
	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004162:	2300      	movs	r3, #0
 8004164:	9301      	str	r3, [sp, #4]
 8004166:	2302      	movs	r3, #2
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800416e:	2246      	movs	r2, #70	; 0x46
 8004170:	210a      	movs	r1, #10
 8004172:	48a5      	ldr	r0, [pc, #660]	; (8004408 <ToplevelMenu_DrawInputMenu+0x340>)
 8004174:	f00c fae4 	bl	8010740 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 8004178:	f002 fadc 	bl	8006734 <IT_GetActiveTriggerMode>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d122      	bne.n	80041c8 <ToplevelMenu_DrawInputMenu+0x100>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004182:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004186:	9301      	str	r3, [sp, #4]
 8004188:	2302      	movs	r3, #2
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	2300      	movs	r3, #0
 800418e:	2246      	movs	r2, #70	; 0x46
 8004190:	2196      	movs	r1, #150	; 0x96
 8004192:	489e      	ldr	r0, [pc, #632]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 8004194:	f00c fad4 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004198:	2300      	movs	r3, #0
 800419a:	9301      	str	r3, [sp, #4]
 800419c:	2302      	movs	r3, #2
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041a4:	2246      	movs	r2, #70	; 0x46
 80041a6:	21c8      	movs	r1, #200	; 0xc8
 80041a8:	4899      	ldr	r0, [pc, #612]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 80041aa:	f00c fac9 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041ae:	2300      	movs	r3, #0
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2302      	movs	r3, #2
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041ba:	2246      	movs	r2, #70	; 0x46
 80041bc:	f44f 7187 	mov.w	r1, #270	; 0x10e
 80041c0:	4894      	ldr	r0, [pc, #592]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 80041c2:	f00c fabd 	bl	8010740 <ILI9341_Draw_Text>
 80041c6:	e04e      	b.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 80041c8:	f002 fab4 	bl	8006734 <IT_GetActiveTriggerMode>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d122      	bne.n	8004218 <ToplevelMenu_DrawInputMenu+0x150>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041d2:	2300      	movs	r3, #0
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	2302      	movs	r3, #2
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80041de:	2246      	movs	r2, #70	; 0x46
 80041e0:	2196      	movs	r1, #150	; 0x96
 80041e2:	488a      	ldr	r0, [pc, #552]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 80041e4:	f00c faac 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80041e8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	2302      	movs	r3, #2
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	2300      	movs	r3, #0
 80041f4:	2246      	movs	r2, #70	; 0x46
 80041f6:	21c8      	movs	r1, #200	; 0xc8
 80041f8:	4885      	ldr	r0, [pc, #532]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 80041fa:	f00c faa1 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80041fe:	2300      	movs	r3, #0
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	2302      	movs	r3, #2
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800420a:	2246      	movs	r2, #70	; 0x46
 800420c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004210:	4880      	ldr	r0, [pc, #512]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004212:	f00c fa95 	bl	8010740 <ILI9341_Draw_Text>
 8004216:	e026      	b.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>


	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_ADC)
 8004218:	f002 fa8c 	bl	8006734 <IT_GetActiveTriggerMode>
 800421c:	4603      	mov	r3, r0
 800421e:	2b02      	cmp	r3, #2
 8004220:	d121      	bne.n	8004266 <ToplevelMenu_DrawInputMenu+0x19e>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004222:	2300      	movs	r3, #0
 8004224:	9301      	str	r3, [sp, #4]
 8004226:	2302      	movs	r3, #2
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800422e:	2246      	movs	r2, #70	; 0x46
 8004230:	2196      	movs	r1, #150	; 0x96
 8004232:	4876      	ldr	r0, [pc, #472]	; (800440c <ToplevelMenu_DrawInputMenu+0x344>)
 8004234:	f00c fa84 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004238:	2300      	movs	r3, #0
 800423a:	9301      	str	r3, [sp, #4]
 800423c:	2302      	movs	r3, #2
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004244:	2246      	movs	r2, #70	; 0x46
 8004246:	21c8      	movs	r1, #200	; 0xc8
 8004248:	4871      	ldr	r0, [pc, #452]	; (8004410 <ToplevelMenu_DrawInputMenu+0x348>)
 800424a:	f00c fa79 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800424e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004252:	9301      	str	r3, [sp, #4]
 8004254:	2302      	movs	r3, #2
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2300      	movs	r3, #0
 800425a:	2246      	movs	r2, #70	; 0x46
 800425c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004260:	486c      	ldr	r0, [pc, #432]	; (8004414 <ToplevelMenu_DrawInputMenu+0x34c>)
 8004262:	f00c fa6d 	bl	8010740 <ILI9341_Draw_Text>
	}

	//
	// LFO/COMPVOLT MODE DISPLAY
	//
	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 8004266:	f002 fa65 	bl	8006734 <IT_GetActiveTriggerMode>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d141      	bne.n	80042f4 <ToplevelMenu_DrawInputMenu+0x22c>
	{
		ILI9341_Draw_Text("LF MODE:", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004270:	2300      	movs	r3, #0
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	2302      	movs	r3, #2
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800427c:	225a      	movs	r2, #90	; 0x5a
 800427e:	210a      	movs	r1, #10
 8004280:	4865      	ldr	r0, [pc, #404]	; (8004418 <ToplevelMenu_DrawInputMenu+0x350>)
 8004282:	f00c fa5d 	bl	8010740 <ILI9341_Draw_Text>
		if(INPUT_TIMER->PSC > 128)
 8004286:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428c:	2b80      	cmp	r3, #128	; 0x80
 800428e:	d916      	bls.n	80042be <ToplevelMenu_DrawInputMenu+0x1f6>
		{
			ILI9341_Draw_Text("ON", 	150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004290:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004294:	9301      	str	r3, [sp, #4]
 8004296:	2302      	movs	r3, #2
 8004298:	9300      	str	r3, [sp, #0]
 800429a:	2300      	movs	r3, #0
 800429c:	225a      	movs	r2, #90	; 0x5a
 800429e:	2196      	movs	r1, #150	; 0x96
 80042a0:	4857      	ldr	r0, [pc, #348]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 80042a2:	f00c fa4d 	bl	8010740 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80042a6:	2300      	movs	r3, #0
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2302      	movs	r3, #2
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042b2:	225a      	movs	r2, #90	; 0x5a
 80042b4:	21c8      	movs	r1, #200	; 0xc8
 80042b6:	4853      	ldr	r0, [pc, #332]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 80042b8:	f00c fa42 	bl	8010740 <ILI9341_Draw_Text>
 80042bc:	e015      	b.n	80042ea <ToplevelMenu_DrawInputMenu+0x222>
		}
		else
		{
			ILI9341_Draw_Text("ON", 	150, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80042be:	2300      	movs	r3, #0
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2302      	movs	r3, #2
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80042ca:	225a      	movs	r2, #90	; 0x5a
 80042cc:	2196      	movs	r1, #150	; 0x96
 80042ce:	484c      	ldr	r0, [pc, #304]	; (8004400 <ToplevelMenu_DrawInputMenu+0x338>)
 80042d0:	f00c fa36 	bl	8010740 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("OFF", 	200, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80042d4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2302      	movs	r3, #2
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2300      	movs	r3, #0
 80042e0:	225a      	movs	r2, #90	; 0x5a
 80042e2:	21c8      	movs	r1, #200	; 0xc8
 80042e4:	4847      	ldr	r0, [pc, #284]	; (8004404 <ToplevelMenu_DrawInputMenu+0x33c>)
 80042e6:	f00c fa2b 	bl	8010740 <ILI9341_Draw_Text>
		}

		DM_DisplayInputTriggerTimerHertz(200, 17);
 80042ea:	2111      	movs	r1, #17
 80042ec:	20c8      	movs	r0, #200	; 0xc8
 80042ee:	f7fc fea9 	bl	8001044 <DM_DisplayInputTriggerTimerHertz>
 80042f2:	e038      	b.n	8004366 <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TIMER_COMP)
 80042f4:	f002 fa1e 	bl	8006734 <IT_GetActiveTriggerMode>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d128      	bne.n	8004350 <ToplevelMenu_DrawInputMenu+0x288>
	{
		char comp_text[20] = "";
 80042fe:	2300      	movs	r3, #0
 8004300:	607b      	str	r3, [r7, #4]
 8004302:	f107 0308 	add.w	r3, r7, #8
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	605a      	str	r2, [r3, #4]
 800430c:	609a      	str	r2, [r3, #8]
 800430e:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8004310:	4842      	ldr	r0, [pc, #264]	; (800441c <ToplevelMenu_DrawInputMenu+0x354>)
 8004312:	f006 fd71 	bl	800adf8 <HAL_COMP_GetOutputLevel>
 8004316:	4603      	mov	r3, r0
 8004318:	1d38      	adds	r0, r7, #4
 800431a:	4a41      	ldr	r2, [pc, #260]	; (8004420 <ToplevelMenu_DrawInputMenu+0x358>)
 800431c:	2114      	movs	r1, #20
 800431e:	f00d fdcb 	bl	8011eb8 <sniprintf>
		ILI9341_Draw_Text(comp_text, 150, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8004322:	1d38      	adds	r0, r7, #4
 8004324:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8004328:	9301      	str	r3, [sp, #4]
 800432a:	2302      	movs	r3, #2
 800432c:	9300      	str	r3, [sp, #0]
 800432e:	2300      	movs	r3, #0
 8004330:	225a      	movs	r2, #90	; 0x5a
 8004332:	2196      	movs	r1, #150	; 0x96
 8004334:	f00c fa04 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("                ", 	200, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004338:	2300      	movs	r3, #0
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2302      	movs	r3, #2
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8004344:	225a      	movs	r2, #90	; 0x5a
 8004346:	21c8      	movs	r1, #200	; 0xc8
 8004348:	4836      	ldr	r0, [pc, #216]	; (8004424 <ToplevelMenu_DrawInputMenu+0x35c>)
 800434a:	f00c f9f9 	bl	8010740 <ILI9341_Draw_Text>
 800434e:	e00a      	b.n	8004366 <ToplevelMenu_DrawInputMenu+0x29e>
	}
	else
	{
		ILI9341_Draw_Text("                                    ", 	10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8004350:	2300      	movs	r3, #0
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	2302      	movs	r3, #2
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800435c:	225a      	movs	r2, #90	; 0x5a
 800435e:	210a      	movs	r1, #10
 8004360:	4831      	ldr	r0, [pc, #196]	; (8004428 <ToplevelMenu_DrawInputMenu+0x360>)
 8004362:	f00c f9ed 	bl	8010740 <ILI9341_Draw_Text>
	}

	//
	// MENU BUTTON DISPLAY
	//
	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8004366:	f240 23fd 	movw	r3, #765	; 0x2fd
 800436a:	9301      	str	r3, [sp, #4]
 800436c:	2302      	movs	r3, #2
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2300      	movs	r3, #0
 8004372:	22cc      	movs	r2, #204	; 0xcc
 8004374:	2114      	movs	r1, #20
 8004376:	482d      	ldr	r0, [pc, #180]	; (800442c <ToplevelMenu_DrawInputMenu+0x364>)
 8004378:	f00c f9e2 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800437c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2302      	movs	r3, #2
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	22de      	movs	r2, #222	; 0xde
 800438a:	2114      	movs	r1, #20
 800438c:	4828      	ldr	r0, [pc, #160]	; (8004430 <ToplevelMenu_DrawInputMenu+0x368>)
 800438e:	f00c f9d7 	bl	8010740 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8004392:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8004396:	9301      	str	r3, [sp, #4]
 8004398:	2302      	movs	r3, #2
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	2300      	movs	r3, #0
 800439e:	22cc      	movs	r2, #204	; 0xcc
 80043a0:	2168      	movs	r1, #104	; 0x68
 80043a2:	4824      	ldr	r0, [pc, #144]	; (8004434 <ToplevelMenu_DrawInputMenu+0x36c>)
 80043a4:	f00c f9cc 	bl	8010740 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80043a8:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	2302      	movs	r3, #2
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	2300      	movs	r3, #0
 80043b4:	22de      	movs	r2, #222	; 0xde
 80043b6:	2161      	movs	r1, #97	; 0x61
 80043b8:	481f      	ldr	r0, [pc, #124]	; (8004438 <ToplevelMenu_DrawInputMenu+0x370>)
 80043ba:	f00c f9c1 	bl	8010740 <ILI9341_Draw_Text>

	if(IT_GetActiveTriggerMode() == INPUT_TIMER_TIM)
 80043be:	f002 f9b9 	bl	8006734 <IT_GetActiveTriggerMode>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d13b      	bne.n	8004440 <ToplevelMenu_DrawInputMenu+0x378>
	{
		// draw additional "LFO Mode" menu option
		ILI9341_Draw_Text("LF", 	190,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	2302      	movs	r3, #2
 80043d0:	9300      	str	r3, [sp, #0]
 80043d2:	2300      	movs	r3, #0
 80043d4:	22cc      	movs	r2, #204	; 0xcc
 80043d6:	21be      	movs	r1, #190	; 0xbe
 80043d8:	4818      	ldr	r0, [pc, #96]	; (800443c <ToplevelMenu_DrawInputMenu+0x374>)
 80043da:	f00c f9b1 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("MODE",	175, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80043de:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	2302      	movs	r3, #2
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	22de      	movs	r2, #222	; 0xde
 80043ec:	21af      	movs	r1, #175	; 0xaf
 80043ee:	4812      	ldr	r0, [pc, #72]	; (8004438 <ToplevelMenu_DrawInputMenu+0x370>)
 80043f0:	f00c f9a6 	bl	8010740 <ILI9341_Draw_Text>

/*
	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 80043f4:	e03a      	b.n	800446c <ToplevelMenu_DrawInputMenu+0x3a4>
 80043f6:	bf00      	nop
 80043f8:	08015ae8 	.word	0x08015ae8
 80043fc:	08015af0 	.word	0x08015af0
 8004400:	08015afc 	.word	0x08015afc
 8004404:	08015b00 	.word	0x08015b00
 8004408:	08015b04 	.word	0x08015b04
 800440c:	08015b0c 	.word	0x08015b0c
 8004410:	08015b10 	.word	0x08015b10
 8004414:	08015b18 	.word	0x08015b18
 8004418:	08015b1c 	.word	0x08015b1c
 800441c:	20002634 	.word	0x20002634
 8004420:	08015b28 	.word	0x08015b28
 8004424:	08015b30 	.word	0x08015b30
 8004428:	08015b44 	.word	0x08015b44
 800442c:	08015b6c 	.word	0x08015b6c
 8004430:	08015b70 	.word	0x08015b70
 8004434:	08015b78 	.word	0x08015b78
 8004438:	08015b7c 	.word	0x08015b7c
 800443c:	08015b84 	.word	0x08015b84
		ILI9341_Draw_Text("   ", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004440:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	2302      	movs	r3, #2
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	2300      	movs	r3, #0
 800444c:	22cc      	movs	r2, #204	; 0xcc
 800444e:	21b7      	movs	r1, #183	; 0xb7
 8004450:	4808      	ldr	r0, [pc, #32]	; (8004474 <ToplevelMenu_DrawInputMenu+0x3ac>)
 8004452:	f00c f975 	bl	8010740 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("    ",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8004456:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800445a:	9301      	str	r3, [sp, #4]
 800445c:	2302      	movs	r3, #2
 800445e:	9300      	str	r3, [sp, #0]
 8004460:	2300      	movs	r3, #0
 8004462:	22de      	movs	r2, #222	; 0xde
 8004464:	21ad      	movs	r1, #173	; 0xad
 8004466:	4804      	ldr	r0, [pc, #16]	; (8004478 <ToplevelMenu_DrawInputMenu+0x3b0>)
 8004468:	f00c f96a 	bl	8010740 <ILI9341_Draw_Text>
}
 800446c:	bf00      	nop
 800446e:	3718      	adds	r7, #24
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	08015b88 	.word	0x08015b88
 8004478:	08015ab8 	.word	0x08015ab8

0800447c <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 800447c:	b580      	push	{r7, lr}
 800447e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004480:	f7fd f9ee 	bl	8001860 <DM_RefreshScreen>

	_setBiasMenuStatus(ENABLE_BIAS_MENU);
 8004484:	2001      	movs	r0, #1
 8004486:	f000 f875 	bl	8004574 <_setBiasMenuStatus>

	ENCODER_TIMER->ARR = BIAS_MAX;
 800448a:	4b08      	ldr	r3, [pc, #32]	; (80044ac <BiasMenuEntryHandler+0x30>)
 800448c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8004492:	f001 f9f3 	bl	800587c <BO_GetDcBiasEncoderValue>
 8004496:	4603      	mov	r3, r0
 8004498:	461a      	mov	r2, r3
 800449a:	4b04      	ldr	r3, [pc, #16]	; (80044ac <BiasMenuEntryHandler+0x30>)
 800449c:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 800449e:	4b04      	ldr	r3, [pc, #16]	; (80044b0 <BiasMenuEntryHandler+0x34>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80044a4:	230f      	movs	r3, #15
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	40012c00 	.word	0x40012c00
 80044b0:	20001e57 	.word	0x20001e57

080044b4 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 80044be:	79fb      	ldrb	r3, [r7, #7]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d82d      	bhi.n	8004522 <BiasMenuInputHandler+0x6e>
 80044c6:	a201      	add	r2, pc, #4	; (adr r2, 80044cc <BiasMenuInputHandler+0x18>)
 80044c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044cc:	080044f1 	.word	0x080044f1
 80044d0:	08004503 	.word	0x08004503
 80044d4:	08004511 	.word	0x08004511
 80044d8:	08004523 	.word	0x08004523
 80044dc:	080044e1 	.word	0x080044e1
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80044e0:	2000      	movs	r0, #0
 80044e2:	f002 fd7b 	bl	8006fdc <SM_GetEncoderValue>
 80044e6:	4603      	mov	r3, r0
 80044e8:	4618      	mov	r0, r3
 80044ea:	f001 f9d3 	bl	8005894 <BO_MapEncoderPositionToSignalOutput>
			break;
 80044ee:	e019      	b.n	8004524 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 80044f0:	f44f 7048 	mov.w	r0, #800	; 0x320
 80044f4:	f001 f9ce 	bl	8005894 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 80044f8:	4b0e      	ldr	r3, [pc, #56]	; (8004534 <BiasMenuInputHandler+0x80>)
 80044fa:	f44f 7248 	mov.w	r2, #800	; 0x320
 80044fe:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004500:	e010      	b.n	8004524 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 8004502:	200a      	movs	r0, #10
 8004504:	f001 f9c6 	bl	8005894 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 8004508:	4b0a      	ldr	r3, [pc, #40]	; (8004534 <BiasMenuInputHandler+0x80>)
 800450a:	220a      	movs	r2, #10
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 800450e:	e009      	b.n	8004524 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 8004510:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004514:	f001 f9be 	bl	8005894 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <BiasMenuInputHandler+0x80>)
 800451a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800451e:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004520:	e000      	b.n	8004524 <BiasMenuInputHandler+0x70>

		default:
			break;
 8004522:	bf00      	nop
	}


	eNewEvent = evIdle;
 8004524:	4b04      	ldr	r3, [pc, #16]	; (8004538 <BiasMenuInputHandler+0x84>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800452a:	230f      	movs	r3, #15
}
 800452c:	4618      	mov	r0, r3
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40012c00 	.word	0x40012c00
 8004538:	20001e57 	.word	0x20001e57

0800453c <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuExitHandler Event captured\n");
	#endif

	// disable the menu
	_setBiasMenuStatus(DISABLE_BIAS_MENU);
 8004540:	2000      	movs	r0, #0
 8004542:	f000 f817 	bl	8004574 <_setBiasMenuStatus>

	DM_RefreshScreen();
 8004546:	f7fd f98b 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800454a:	4b03      	ldr	r3, [pc, #12]	; (8004558 <BiasMenuExitHandler+0x1c>)
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004550:	2301      	movs	r3, #1
}
 8004552:	4618      	mov	r0, r3
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20001e57 	.word	0x20001e57

0800455c <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8004560:	4b03      	ldr	r3, [pc, #12]	; (8004570 <BiasMenu_getStatus+0x14>)
 8004562:	781b      	ldrb	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	20001e55 	.word	0x20001e55

08004574 <_setBiasMenuStatus>:
 *	@param None
 *	@retval None
 *
 */
void _setBiasMenuStatus(eBiasMenu_Status newStatus)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = newStatus;
 800457e:	4a04      	ldr	r2, [pc, #16]	; (8004590 <_setBiasMenuStatus+0x1c>)
 8004580:	79fb      	ldrb	r3, [r7, #7]
 8004582:	7013      	strb	r3, [r2, #0]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	20001e55 	.word	0x20001e55

08004594 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0

	switch(eNextState)
 8004598:	4b2b      	ldr	r3, [pc, #172]	; (8004648 <EM_ProcessEvent+0xb4>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	2b0f      	cmp	r3, #15
 800459e:	d850      	bhi.n	8004642 <EM_ProcessEvent+0xae>
 80045a0:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <EM_ProcessEvent+0x14>)
 80045a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a6:	bf00      	nop
 80045a8:	080045e9 	.word	0x080045e9
 80045ac:	080045ef 	.word	0x080045ef
 80045b0:	080045f5 	.word	0x080045f5
 80045b4:	080045fb 	.word	0x080045fb
 80045b8:	08004601 	.word	0x08004601
 80045bc:	08004607 	.word	0x08004607
 80045c0:	0800460d 	.word	0x0800460d
 80045c4:	08004613 	.word	0x08004613
 80045c8:	08004619 	.word	0x08004619
 80045cc:	08004643 	.word	0x08004643
 80045d0:	0800461f 	.word	0x0800461f
 80045d4:	08004625 	.word	0x08004625
 80045d8:	0800462b 	.word	0x0800462b
 80045dc:	08004637 	.word	0x08004637
 80045e0:	08004631 	.word	0x08004631
 80045e4:	0800463d 	.word	0x0800463d
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 80045e8:	f000 f830 	bl	800464c <_ProcessIdleStateEvents>
			break;
 80045ec:	e02a      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 80045ee:	f000 f849 	bl	8004684 <_ProcessTopLevelOutputMenuStateEvents>
			break;
 80045f2:	e027      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 80045f4:	f000 f88c 	bl	8004710 <_ProcessTopLevelInputMenuStateEvents>
			break;
 80045f8:	e024      	b.n	8004644 <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 80045fa:	f000 f8b5 	bl	8004768 <_ProcessFuncMainMenuStateEvents>
			break;
 80045fe:	e021      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 8004600:	f000 f8d8 	bl	80047b4 <_ProcessFuncSignalMenuStateEvents>
			break;
 8004604:	e01e      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 8004606:	f000 f8f1 	bl	80047ec <_ProcessFuncAuxMenuStateEvents>
			break;
 800460a:	e01b      	b.n	8004644 <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 800460c:	f000 f914 	bl	8004838 <_ProcessGainMainMenuStateEvents>
			break;
 8004610:	e018      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 8004612:	f000 f949 	bl	80048a8 <_ProcessGainSignalMenuStateEvents>
			break;
 8004616:	e015      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 8004618:	f000 f990 	bl	800493c <_ProcessGainAuxMenuStateEvents>
			break;
 800461c:	e012      	b.n	8004644 <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 800461e:	f000 f9a9 	bl	8004974 <_ProcessFreqMainMenuStateEvents>
			break;
 8004622:	e00f      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 8004624:	f000 f9e4 	bl	80049f0 <_ProcessFreqPresetMenuStateEvents>
			break;
 8004628:	e00c      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 800462a:	f000 f9fd 	bl	8004a28 <_ProcessFreqAdjustMenuState>
			break;
 800462e:	e009      	b.n	8004644 <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 8004630:	f000 fa16 	bl	8004a60 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 8004634:	e006      	b.n	8004644 <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 8004636:	f000 fa2f 	bl	8004a98 <_ProcessFreqSweepMenuStateEvents>
			break;
 800463a:	e003      	b.n	8004644 <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 800463c:	f000 fa76 	bl	8004b2c <_ProcessBiasMainMenuEvents>
			break;
 8004640:	e000      	b.n	8004644 <EM_ProcessEvent+0xb0>

		default:
			break;
 8004642:	bf00      	nop
	}

}
 8004644:	bf00      	nop
 8004646:	bd80      	pop	{r7, pc}
 8004648:	20001e56 	.word	0x20001e56

0800464c <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <_ProcessIdleStateEvents+0x30>)
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004658:	f000 ff18 	bl	800548c <ToplevelOutputMenuEntryHandler>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <_ProcessIdleStateEvents+0x34>)
 8004662:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <_ProcessIdleStateEvents+0x30>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b02      	cmp	r3, #2
 800466a:	d105      	bne.n	8004678 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 800466c:	f000 ff2e 	bl	80054cc <ToplevelInputMenuEntryHandler>
 8004670:	4603      	mov	r3, r0
 8004672:	461a      	mov	r2, r3
 8004674:	4b02      	ldr	r3, [pc, #8]	; (8004680 <_ProcessIdleStateEvents+0x34>)
 8004676:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20001e57 	.word	0x20001e57
 8004680:	20001e56 	.word	0x20001e56

08004684 <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004688:	4b1f      	ldr	r3, [pc, #124]	; (8004708 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b06      	cmp	r3, #6
 800468e:	d105      	bne.n	800469c <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 8004690:	f000 ff0c 	bl	80054ac <ToplevelOutputMenuExitHandler>
 8004694:	4603      	mov	r3, r0
 8004696:	461a      	mov	r2, r3
 8004698:	4b1c      	ldr	r3, [pc, #112]	; (800470c <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 800469a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 800469c:	4b1a      	ldr	r3, [pc, #104]	; (8004708 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d108      	bne.n	80046b6 <_ProcessTopLevelOutputMenuStateEvents+0x32>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046a4:	2000      	movs	r0, #0
 80046a6:	f000 ff5f 	bl	8005568 <ToplevelMenu_setStatus>
		eNextState = FuncMainMenuEntryHandler();
 80046aa:	f000 fcd5 	bl	8005058 <FuncMainMenuEntryHandler>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b16      	ldr	r3, [pc, #88]	; (800470c <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046b4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d108      	bne.n	80046d0 <_ProcessTopLevelOutputMenuStateEvents+0x4c>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046be:	2000      	movs	r0, #0
 80046c0:	f000 ff52 	bl	8005568 <ToplevelMenu_setStatus>
		eNextState = FreqMainMenuEntryHandler();
 80046c4:	f000 fbcc 	bl	8004e60 <FreqMainMenuEntryHandler>
 80046c8:	4603      	mov	r3, r0
 80046ca:	461a      	mov	r2, r3
 80046cc:	4b0f      	ldr	r3, [pc, #60]	; (800470c <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046ce:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b03      	cmp	r3, #3
 80046d6:	d108      	bne.n	80046ea <_ProcessTopLevelOutputMenuStateEvents+0x66>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046d8:	2000      	movs	r0, #0
 80046da:	f000 ff45 	bl	8005568 <ToplevelMenu_setStatus>
		eNextState = GainMainMenuEntryHandler();
 80046de:	f000 fdb7 	bl	8005250 <GainMainMenuEntryHandler>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b09      	ldr	r3, [pc, #36]	; (800470c <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80046e8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80046ea:	4b07      	ldr	r3, [pc, #28]	; (8004708 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d108      	bne.n	8004704 <_ProcessTopLevelOutputMenuStateEvents+0x80>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80046f2:	2000      	movs	r0, #0
 80046f4:	f000 ff38 	bl	8005568 <ToplevelMenu_setStatus>
		eNextState = BiasMenuEntryHandler();
 80046f8:	f7ff fec0 	bl	800447c <BiasMenuEntryHandler>
 80046fc:	4603      	mov	r3, r0
 80046fe:	461a      	mov	r2, r3
 8004700:	4b02      	ldr	r3, [pc, #8]	; (800470c <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004702:	701a      	strb	r2, [r3, #0]
	}
}
 8004704:	bf00      	nop
 8004706:	bd80      	pop	{r7, pc}
 8004708:	20001e57 	.word	0x20001e57
 800470c:	20001e56 	.word	0x20001e56

08004710 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 8004710:	b580      	push	{r7, lr}
 8004712:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d105      	bne.n	8004728 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 800471c:	f000 ff08 	bl	8005530 <ToplevelInputMenuExitHandler>
 8004720:	4603      	mov	r3, r0
 8004722:	461a      	mov	r2, r3
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004726:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004728:	4b0d      	ldr	r3, [pc, #52]	; (8004760 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d108      	bne.n	8004742 <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fed9 	bl	80054ec <ToplevelInputMenuInputHandler>
 800473a:	4603      	mov	r3, r0
 800473c:	461a      	mov	r2, r3
 800473e:	4b09      	ldr	r3, [pc, #36]	; (8004764 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004740:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004742:	4b07      	ldr	r3, [pc, #28]	; (8004760 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d108      	bne.n	800475c <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fecc 	bl	80054ec <ToplevelInputMenuInputHandler>
 8004754:	4603      	mov	r3, r0
 8004756:	461a      	mov	r2, r3
 8004758:	4b02      	ldr	r3, [pc, #8]	; (8004764 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800475a:	701a      	strb	r2, [r3, #0]
	}
}
 800475c:	bf00      	nop
 800475e:	bd80      	pop	{r7, pc}
 8004760:	20001e57 	.word	0x20001e57
 8004764:	20001e56 	.word	0x20001e56

08004768 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <_ProcessFuncMainMenuStateEvents+0x44>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b06      	cmp	r3, #6
 8004772:	d105      	bne.n	8004780 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 8004774:	f000 fc80 	bl	8005078 <FuncMainMenuExitHandler>
 8004778:	4603      	mov	r3, r0
 800477a:	461a      	mov	r2, r3
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <_ProcessFuncMainMenuStateEvents+0x48>)
 800477e:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 8004780:	4b0a      	ldr	r3, [pc, #40]	; (80047ac <_ProcessFuncMainMenuStateEvents+0x44>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d105      	bne.n	8004794 <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004788:	f000 fc88 	bl	800509c <FuncSignalMenuEntryHandler>
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004792:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004794:	4b05      	ldr	r3, [pc, #20]	; (80047ac <_ProcessFuncMainMenuStateEvents+0x44>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d105      	bne.n	80047a8 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 800479c:	f000 fcbe 	bl	800511c <FuncAuxMenuEntryHandler>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <_ProcessFuncMainMenuStateEvents+0x48>)
 80047a6:	701a      	strb	r2, [r3, #0]
	}
}
 80047a8:	bf00      	nop
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	20001e57 	.word	0x20001e57
 80047b0:	20001e56 	.word	0x20001e56

080047b4 <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	2b05      	cmp	r3, #5
 80047be:	d105      	bne.n	80047cc <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 80047c0:	f000 fc88 	bl	80050d4 <FuncSignalMenuInputHandler>
 80047c4:	4603      	mov	r3, r0
 80047c6:	461a      	mov	r2, r3
 80047c8:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80047ca:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b06      	cmp	r3, #6
 80047d2:	d105      	bne.n	80047e0 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 80047d4:	f000 fc90 	bl	80050f8 <FuncSignalMenuExitHandler>
 80047d8:	4603      	mov	r3, r0
 80047da:	461a      	mov	r2, r3
 80047dc:	4b02      	ldr	r3, [pc, #8]	; (80047e8 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80047de:	701a      	strb	r2, [r3, #0]
	}
}
 80047e0:	bf00      	nop
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	20001e57 	.word	0x20001e57
 80047e8:	20001e56 	.word	0x20001e56

080047ec <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	2b05      	cmp	r3, #5
 80047f6:	d105      	bne.n	8004804 <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 80047f8:	f000 fcae 	bl	8005158 <FuncAuxMenuInputHandler>
 80047fc:	4603      	mov	r3, r0
 80047fe:	461a      	mov	r2, r3
 8004800:	4b0c      	ldr	r3, [pc, #48]	; (8004834 <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004802:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004804:	4b0a      	ldr	r3, [pc, #40]	; (8004830 <_ProcessFuncAuxMenuStateEvents+0x44>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d105      	bne.n	8004818 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 800480c:	f000 fcf2 	bl	80051f4 <FuncAuxMenuExitHandler>
 8004810:	4603      	mov	r3, r0
 8004812:	461a      	mov	r2, r3
 8004814:	4b07      	ldr	r3, [pc, #28]	; (8004834 <_ProcessFuncAuxMenuStateEvents+0x48>)
 8004816:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <_ProcessFuncAuxMenuStateEvents+0x44>)
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	2b03      	cmp	r3, #3
 800481e:	d105      	bne.n	800482c <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 8004820:	f000 fcd6 	bl	80051d0 <FuncAuxToggleDutyMode>
 8004824:	4603      	mov	r3, r0
 8004826:	461a      	mov	r2, r3
 8004828:	4b02      	ldr	r3, [pc, #8]	; (8004834 <_ProcessFuncAuxMenuStateEvents+0x48>)
 800482a:	701a      	strb	r2, [r3, #0]
	}

}
 800482c:	bf00      	nop
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20001e57 	.word	0x20001e57
 8004834:	20001e56 	.word	0x20001e56

08004838 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800483e:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <_ProcessGainMainMenuStateEvents+0x68>)
 8004840:	781b      	ldrb	r3, [r3, #0]
 8004842:	2b06      	cmp	r3, #6
 8004844:	d108      	bne.n	8004858 <_ProcessGainMainMenuStateEvents+0x20>
	{
		eNextState = GainMainMenuExitHandler();
 8004846:	f000 fd13 	bl	8005270 <GainMainMenuExitHandler>
 800484a:	4603      	mov	r3, r0
 800484c:	461a      	mov	r2, r3
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <_ProcessGainMainMenuStateEvents+0x6c>)
 8004850:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004852:	2002      	movs	r0, #2
 8004854:	f000 fe88 	bl	8005568 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <_ProcessGainMainMenuStateEvents+0x68>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <_ProcessGainMainMenuStateEvents+0x34>
	{
		eNextState = GainSignalMenuEntryHandler();
 8004860:	f000 fd16 	bl	8005290 <GainSignalMenuEntryHandler>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	4b0e      	ldr	r3, [pc, #56]	; (80048a4 <_ProcessGainMainMenuStateEvents+0x6c>)
 800486a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800486c:	4b0c      	ldr	r3, [pc, #48]	; (80048a0 <_ProcessGainMainMenuStateEvents+0x68>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	2b02      	cmp	r3, #2
 8004872:	d110      	bne.n	8004896 <_ProcessGainMainMenuStateEvents+0x5e>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004874:	2001      	movs	r0, #1
 8004876:	f002 f935 	bl	8006ae4 <SM_GetOutputChannel>
 800487a:	4603      	mov	r3, r0
 800487c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b06      	cmp	r3, #6
 8004888:	d005      	beq.n	8004896 <_ProcessGainMainMenuStateEvents+0x5e>
			eNextState = GainAuxMenuEntryHandler();
 800488a:	f000 fd93 	bl	80053b4 <GainAuxMenuEntryHandler>
 800488e:	4603      	mov	r3, r0
 8004890:	461a      	mov	r2, r3
 8004892:	4b04      	ldr	r3, [pc, #16]	; (80048a4 <_ProcessGainMainMenuStateEvents+0x6c>)
 8004894:	701a      	strb	r2, [r3, #0]
	}
}
 8004896:	bf00      	nop
 8004898:	3708      	adds	r7, #8
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	20001e57 	.word	0x20001e57
 80048a4:	20001e56 	.word	0x20001e56

080048a8 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80048ac:	4b21      	ldr	r3, [pc, #132]	; (8004934 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d106      	bne.n	80048c2 <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 80048b4:	2005      	movs	r0, #5
 80048b6:	f000 fd1b 	bl	80052f0 <GainSignalMenuInputHandler>
 80048ba:	4603      	mov	r3, r0
 80048bc:	461a      	mov	r2, r3
 80048be:	4b1e      	ldr	r3, [pc, #120]	; (8004938 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048c0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80048c2:	4b1c      	ldr	r3, [pc, #112]	; (8004934 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b06      	cmp	r3, #6
 80048c8:	d105      	bne.n	80048d6 <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 80048ca:	f000 fd63 	bl	8005394 <GainSignalMenuExitHandler>
 80048ce:	4603      	mov	r3, r0
 80048d0:	461a      	mov	r2, r3
 80048d2:	4b19      	ldr	r3, [pc, #100]	; (8004938 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048d4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80048d6:	4b17      	ldr	r3, [pc, #92]	; (8004934 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d106      	bne.n	80048ec <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 80048de:	2001      	movs	r0, #1
 80048e0:	f000 fd06 	bl	80052f0 <GainSignalMenuInputHandler>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	4b13      	ldr	r3, [pc, #76]	; (8004938 <_ProcessGainSignalMenuStateEvents+0x90>)
 80048ea:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80048ec:	4b11      	ldr	r3, [pc, #68]	; (8004934 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d106      	bne.n	8004902 <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 80048f4:	2002      	movs	r0, #2
 80048f6:	f000 fcfb 	bl	80052f0 <GainSignalMenuInputHandler>
 80048fa:	4603      	mov	r3, r0
 80048fc:	461a      	mov	r2, r3
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004900:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004902:	4b0c      	ldr	r3, [pc, #48]	; (8004934 <_ProcessGainSignalMenuStateEvents+0x8c>)
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d106      	bne.n	8004918 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 800490a:	2003      	movs	r0, #3
 800490c:	f000 fcf0 	bl	80052f0 <GainSignalMenuInputHandler>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	4b08      	ldr	r3, [pc, #32]	; (8004938 <_ProcessGainSignalMenuStateEvents+0x90>)
 8004916:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <_ProcessGainSignalMenuStateEvents+0x8c>)
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	2b04      	cmp	r3, #4
 800491e:	d106      	bne.n	800492e <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 8004920:	2004      	movs	r0, #4
 8004922:	f000 fce5 	bl	80052f0 <GainSignalMenuInputHandler>
 8004926:	4603      	mov	r3, r0
 8004928:	461a      	mov	r2, r3
 800492a:	4b03      	ldr	r3, [pc, #12]	; (8004938 <_ProcessGainSignalMenuStateEvents+0x90>)
 800492c:	701a      	strb	r2, [r3, #0]
	}

}
 800492e:	bf00      	nop
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20001e57 	.word	0x20001e57
 8004938:	20001e56 	.word	0x20001e56

0800493c <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <_ProcessGainAuxMenuStateEvents+0x30>)
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b05      	cmp	r3, #5
 8004946:	d105      	bne.n	8004954 <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 8004948:	f000 fd62 	bl	8005410 <GainAuxMenuInputHandler>
 800494c:	4603      	mov	r3, r0
 800494e:	461a      	mov	r2, r3
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <_ProcessGainAuxMenuStateEvents+0x34>)
 8004952:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <_ProcessGainAuxMenuStateEvents+0x30>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	2b06      	cmp	r3, #6
 800495a:	d105      	bne.n	8004968 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 800495c:	f000 fd6a 	bl	8005434 <GainAuxMenuExitHandler>
 8004960:	4603      	mov	r3, r0
 8004962:	461a      	mov	r2, r3
 8004964:	4b02      	ldr	r3, [pc, #8]	; (8004970 <_ProcessGainAuxMenuStateEvents+0x34>)
 8004966:	701a      	strb	r2, [r3, #0]
	}
}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20001e57 	.word	0x20001e57
 8004970:	20001e56 	.word	0x20001e56

08004974 <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <_ProcessFreqMainMenuStateEvents+0x74>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	2b06      	cmp	r3, #6
 800497e:	d108      	bne.n	8004992 <_ProcessFreqMainMenuStateEvents+0x1e>
	{
		eNextState = FreqMainMenuExitHandler();
 8004980:	f000 fa7e 	bl	8004e80 <FreqMainMenuExitHandler>
 8004984:	4603      	mov	r3, r0
 8004986:	461a      	mov	r2, r3
 8004988:	4b18      	ldr	r3, [pc, #96]	; (80049ec <_ProcessFreqMainMenuStateEvents+0x78>)
 800498a:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800498c:	2002      	movs	r0, #2
 800498e:	f000 fdeb 	bl	8005568 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004992:	4b15      	ldr	r3, [pc, #84]	; (80049e8 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d105      	bne.n	80049a6 <_ProcessFreqMainMenuStateEvents+0x32>
	{
		eNextState = FreqPresetMenuEntryHandler();
 800499a:	f000 fa87 	bl	8004eac <FreqPresetMenuEntryHandler>
 800499e:	4603      	mov	r3, r0
 80049a0:	461a      	mov	r2, r3
 80049a2:	4b12      	ldr	r3, [pc, #72]	; (80049ec <_ProcessFreqMainMenuStateEvents+0x78>)
 80049a4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80049a6:	4b10      	ldr	r3, [pc, #64]	; (80049e8 <_ProcessFreqMainMenuStateEvents+0x74>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d105      	bne.n	80049ba <_ProcessFreqMainMenuStateEvents+0x46>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 80049ae:	f000 fac9 	bl	8004f44 <FreqAdjustMenuEntryHandler>
 80049b2:	4603      	mov	r3, r0
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <_ProcessFreqMainMenuStateEvents+0x78>)
 80049b8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80049ba:	4b0b      	ldr	r3, [pc, #44]	; (80049e8 <_ProcessFreqMainMenuStateEvents+0x74>)
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d105      	bne.n	80049ce <_ProcessFreqMainMenuStateEvents+0x5a>
	{
		eNextState = FreqSweepMenuEntryHandler();
 80049c2:	f000 f905 	bl	8004bd0 <FreqSweepMenuEntryHandler>
 80049c6:	4603      	mov	r3, r0
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b08      	ldr	r3, [pc, #32]	; (80049ec <_ProcessFreqMainMenuStateEvents+0x78>)
 80049cc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80049ce:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <_ProcessFreqMainMenuStateEvents+0x74>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d105      	bne.n	80049e2 <_ProcessFreqMainMenuStateEvents+0x6e>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 80049d6:	f000 faed 	bl	8004fb4 <FreqPrescalerMenuEntryHandler>
 80049da:	4603      	mov	r3, r0
 80049dc:	461a      	mov	r2, r3
 80049de:	4b03      	ldr	r3, [pc, #12]	; (80049ec <_ProcessFreqMainMenuStateEvents+0x78>)
 80049e0:	701a      	strb	r2, [r3, #0]
	}
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20001e57 	.word	0x20001e57
 80049ec:	20001e56 	.word	0x20001e56

080049f0 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80049f4:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d105      	bne.n	8004a08 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80049fc:	f000 fa80 	bl	8004f00 <FreqPresetMenuInputHandler>
 8004a00:	4603      	mov	r3, r0
 8004a02:	461a      	mov	r2, r3
 8004a04:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <_ProcessFreqPresetMenuStateEvents+0x34>)
 8004a06:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <_ProcessFreqPresetMenuStateEvents+0x30>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b06      	cmp	r3, #6
 8004a0e:	d105      	bne.n	8004a1c <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 8004a10:	f000 fa88 	bl	8004f24 <FreqPresetMenuExitHandler>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461a      	mov	r2, r3
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <_ProcessFreqPresetMenuStateEvents+0x34>)
 8004a1a:	701a      	strb	r2, [r3, #0]
	}
}
 8004a1c:	bf00      	nop
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20001e57 	.word	0x20001e57
 8004a24:	20001e56 	.word	0x20001e56

08004a28 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <_ProcessFreqAdjustMenuState+0x30>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b05      	cmp	r3, #5
 8004a32:	d105      	bne.n	8004a40 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 8004a34:	f000 faa2 	bl	8004f7c <FreqAdjustMenuInputHandler>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <_ProcessFreqAdjustMenuState+0x34>)
 8004a3e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <_ProcessFreqAdjustMenuState+0x30>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d105      	bne.n	8004a54 <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 8004a48:	f000 faa4 	bl	8004f94 <FreqAdjustMenuExitHandler>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4b02      	ldr	r3, [pc, #8]	; (8004a5c <_ProcessFreqAdjustMenuState+0x34>)
 8004a52:	701a      	strb	r2, [r3, #0]
	}
}
 8004a54:	bf00      	nop
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	20001e57 	.word	0x20001e57
 8004a5c:	20001e56 	.word	0x20001e56

08004a60 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004a64:	4b0a      	ldr	r3, [pc, #40]	; (8004a90 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	2b05      	cmp	r3, #5
 8004a6a:	d105      	bne.n	8004a78 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 8004a6c:	f000 fabc 	bl	8004fe8 <FreqPrescalerMenuInputHandler>
 8004a70:	4603      	mov	r3, r0
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004a76:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004a78:	4b05      	ldr	r3, [pc, #20]	; (8004a90 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b06      	cmp	r3, #6
 8004a7e:	d105      	bne.n	8004a8c <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 8004a80:	f000 fabe 	bl	8005000 <FreqPrescalerMenuExitHandler>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461a      	mov	r2, r3
 8004a88:	4b02      	ldr	r3, [pc, #8]	; (8004a94 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004a8a:	701a      	strb	r2, [r3, #0]
	}
}
 8004a8c:	bf00      	nop
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20001e57 	.word	0x20001e57
 8004a94:	20001e56 	.word	0x20001e56

08004a98 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004a9c:	4b21      	ldr	r3, [pc, #132]	; (8004b24 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d106      	bne.n	8004ab2 <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004aa4:	2007      	movs	r0, #7
 8004aa6:	f000 f8e7 	bl	8004c78 <FreqSweepMenuInputHandler>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	461a      	mov	r2, r3
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004ab0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	; (8004b24 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004ab4:	781b      	ldrb	r3, [r3, #0]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d106      	bne.n	8004ac8 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 8004aba:	2008      	movs	r0, #8
 8004abc:	f000 f8dc 	bl	8004c78 <FreqSweepMenuInputHandler>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	4b18      	ldr	r3, [pc, #96]	; (8004b28 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004ac6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004ac8:	4b16      	ldr	r3, [pc, #88]	; (8004b24 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d106      	bne.n	8004ade <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004ad0:	2009      	movs	r0, #9
 8004ad2:	f000 f8d1 	bl	8004c78 <FreqSweepMenuInputHandler>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004adc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 8004ade:	4b11      	ldr	r3, [pc, #68]	; (8004b24 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d106      	bne.n	8004af4 <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 8004ae6:	200a      	movs	r0, #10
 8004ae8:	f000 f8c6 	bl	8004c78 <FreqSweepMenuInputHandler>
 8004aec:	4603      	mov	r3, r0
 8004aee:	461a      	mov	r2, r3
 8004af0:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004af2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 8004af4:	4b0b      	ldr	r3, [pc, #44]	; (8004b24 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	d106      	bne.n	8004b0a <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8004afc:	200b      	movs	r0, #11
 8004afe:	f000 f8bb 	bl	8004c78 <FreqSweepMenuInputHandler>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	4b08      	ldr	r3, [pc, #32]	; (8004b28 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004b08:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004b0a:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004b0c:	781b      	ldrb	r3, [r3, #0]
 8004b0e:	2b06      	cmp	r3, #6
 8004b10:	d105      	bne.n	8004b1e <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 8004b12:	f000 f987 	bl	8004e24 <FreqSweepMenuExitHandler>
 8004b16:	4603      	mov	r3, r0
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4b03      	ldr	r3, [pc, #12]	; (8004b28 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004b1c:	701a      	strb	r2, [r3, #0]
	}

}
 8004b1e:	bf00      	nop
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20001e57 	.word	0x20001e57
 8004b28:	20001e56 	.word	0x20001e56

08004b2c <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004b30:	4b1d      	ldr	r3, [pc, #116]	; (8004ba8 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b32:	781b      	ldrb	r3, [r3, #0]
 8004b34:	2b05      	cmp	r3, #5
 8004b36:	d106      	bne.n	8004b46 <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004b38:	2005      	movs	r0, #5
 8004b3a:	f7ff fcbb 	bl	80044b4 <BiasMenuInputHandler>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	461a      	mov	r2, r3
 8004b42:	4b1a      	ldr	r3, [pc, #104]	; (8004bac <_ProcessBiasMainMenuEvents+0x80>)
 8004b44:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004b46:	4b18      	ldr	r3, [pc, #96]	; (8004ba8 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b06      	cmp	r3, #6
 8004b4c:	d108      	bne.n	8004b60 <_ProcessBiasMainMenuEvents+0x34>
	{
		eNextState = BiasMenuExitHandler();
 8004b4e:	f7ff fcf5 	bl	800453c <BiasMenuExitHandler>
 8004b52:	4603      	mov	r3, r0
 8004b54:	461a      	mov	r2, r3
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <_ProcessBiasMainMenuEvents+0x80>)
 8004b58:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004b5a:	2002      	movs	r0, #2
 8004b5c:	f000 fd04 	bl	8005568 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004b60:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d106      	bne.n	8004b76 <_ProcessBiasMainMenuEvents+0x4a>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 8004b68:	2001      	movs	r0, #1
 8004b6a:	f7ff fca3 	bl	80044b4 <BiasMenuInputHandler>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	461a      	mov	r2, r3
 8004b72:	4b0e      	ldr	r3, [pc, #56]	; (8004bac <_ProcessBiasMainMenuEvents+0x80>)
 8004b74:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d106      	bne.n	8004b8c <_ProcessBiasMainMenuEvents+0x60>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 8004b7e:	2002      	movs	r0, #2
 8004b80:	f7ff fc98 	bl	80044b4 <BiasMenuInputHandler>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b08      	ldr	r3, [pc, #32]	; (8004bac <_ProcessBiasMainMenuEvents+0x80>)
 8004b8a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 8004b8c:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <_ProcessBiasMainMenuEvents+0x7c>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d106      	bne.n	8004ba2 <_ProcessBiasMainMenuEvents+0x76>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004b94:	2003      	movs	r0, #3
 8004b96:	f7ff fc8d 	bl	80044b4 <BiasMenuInputHandler>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	4b03      	ldr	r3, [pc, #12]	; (8004bac <_ProcessBiasMainMenuEvents+0x80>)
 8004ba0:	701a      	strb	r2, [r3, #0]
	}
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	20001e57 	.word	0x20001e57
 8004bac:	20001e56 	.word	0x20001e56

08004bb0 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b083      	sub	sp, #12
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8004bba:	4a04      	ldr	r2, [pc, #16]	; (8004bcc <EM_SetNewEvent+0x1c>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	7013      	strb	r3, [r2, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	20001e57 	.word	0x20001e57

08004bd0 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 8004bd4:	f7fc fe44 	bl	8001860 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 8004bd8:	4b22      	ldr	r3, [pc, #136]	; (8004c64 <FreqSweepMenuEntryHandler+0x94>)
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	ee07 3a90 	vmov	s15, r3
 8004be0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004be4:	4b20      	ldr	r3, [pc, #128]	; (8004c68 <FreqSweepMenuEntryHandler+0x98>)
 8004be6:	edd3 7a00 	vldr	s15, [r3]
 8004bea:	eeb4 7a67 	vcmp.f32	s14, s15
 8004bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf2:	d008      	beq.n	8004c06 <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8004bf4:	4b1b      	ldr	r3, [pc, #108]	; (8004c64 <FreqSweepMenuEntryHandler+0x94>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	ee07 3a90 	vmov	s15, r3
 8004bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c00:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <FreqSweepMenuEntryHandler+0x98>)
 8004c02:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8004c06:	4b18      	ldr	r3, [pc, #96]	; (8004c68 <FreqSweepMenuEntryHandler+0x98>)
 8004c08:	edd3 7a00 	vldr	s15, [r3]
 8004c0c:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8004c10:	eef4 7a47 	vcmp.f32	s15, s14
 8004c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c18:	d101      	bne.n	8004c1e <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 8004c1a:	f001 f88d 	bl	8005d38 <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c1e:	2000      	movs	r0, #0
 8004c20:	f001 f8e4 	bl	8005dec <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004c24:	2000      	movs	r0, #0
 8004c26:	f001 f93f 	bl	8005ea8 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004c2a:	f001 f979 	bl	8005f20 <FS_GetCalculatedSweepFrequencyInHertz>
 8004c2e:	eef0 7a40 	vmov.f32	s15, s0
 8004c32:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <FreqSweepMenuEntryHandler+0x9c>)
 8004c34:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004c38:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <FreqSweepMenuEntryHandler+0xa0>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8004c3e:	2009      	movs	r0, #9
 8004c40:	f000 f81a 	bl	8004c78 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004c44:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <FreqSweepMenuEntryHandler+0xa0>)
 8004c46:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8004c4c:	4b08      	ldr	r3, [pc, #32]	; (8004c70 <FreqSweepMenuEntryHandler+0xa0>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	_setFreqMenuStatus(ENABLE_FREQ_SWEEP_MENU);
 8004c52:	2004      	movs	r0, #4
 8004c54:	f000 f9f0 	bl	8005038 <_setFreqMenuStatus>


	// stay in this state
	eNewEvent = evIdle;
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <FreqSweepMenuEntryHandler+0xa4>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004c5e:	230d      	movs	r3, #13
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	40013400 	.word	0x40013400
 8004c68:	20000128 	.word	0x20000128
 8004c6c:	20001eb0 	.word	0x20001eb0
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	20001e57 	.word	0x20001e57

08004c78 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	4603      	mov	r3, r0
 8004c80:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004c82:	79fb      	ldrb	r3, [r7, #7]
 8004c84:	3b07      	subs	r3, #7
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	f200 80b2 	bhi.w	8004df0 <FreqSweepMenuInputHandler+0x178>
 8004c8c:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <FreqSweepMenuInputHandler+0x1c>)
 8004c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c92:	bf00      	nop
 8004c94:	08004ca9 	.word	0x08004ca9
 8004c98:	08004cc3 	.word	0x08004cc3
 8004c9c:	08004de1 	.word	0x08004de1
 8004ca0:	08004de9 	.word	0x08004de9
 8004ca4:	08004cfd 	.word	0x08004cfd
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8004ca8:	4b56      	ldr	r3, [pc, #344]	; (8004e04 <FreqSweepMenuInputHandler+0x18c>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	4a55      	ldr	r2, [pc, #340]	; (8004e04 <FreqSweepMenuInputHandler+0x18c>)
 8004cae:	f083 0301 	eor.w	r3, r3, #1
 8004cb2:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004cb4:	4b53      	ldr	r3, [pc, #332]	; (8004e04 <FreqSweepMenuInputHandler+0x18c>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a52      	ldr	r2, [pc, #328]	; (8004e04 <FreqSweepMenuInputHandler+0x18c>)
 8004cba:	f083 0301 	eor.w	r3, r3, #1
 8004cbe:	6013      	str	r3, [r2, #0]
			break;
 8004cc0:	e097      	b.n	8004df2 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8004cc2:	4b51      	ldr	r3, [pc, #324]	; (8004e08 <FreqSweepMenuInputHandler+0x190>)
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	f083 0301 	eor.w	r3, r3, #1
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	4b4e      	ldr	r3, [pc, #312]	; (8004e08 <FreqSweepMenuInputHandler+0x190>)
 8004cce:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8004cd0:	4b4d      	ldr	r3, [pc, #308]	; (8004e08 <FreqSweepMenuInputHandler+0x190>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d004      	beq.n	8004ce2 <FreqSweepMenuInputHandler+0x6a>
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d008      	beq.n	8004cee <FreqSweepMenuInputHandler+0x76>
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <FreqSweepMenuInputHandler+0x70>
 8004ce0:	e006      	b.n	8004cf0 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 8004ce2:	f001 f829 	bl	8005d38 <FS_SetSweepModeDown>
					break;
 8004ce6:	e003      	b.n	8004cf0 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 8004ce8:	f001 f856 	bl	8005d98 <FS_SetSweepModeUp>
					break;
 8004cec:	e000      	b.n	8004cf0 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8004cee:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 8004cf0:	4b46      	ldr	r3, [pc, #280]	; (8004e0c <FreqSweepMenuInputHandler+0x194>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f001 f879 	bl	8005dec <FS_SetEncoderControlMode>

			break;
 8004cfa:	e07a      	b.n	8004df2 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 8004cfc:	4b43      	ldr	r3, [pc, #268]	; (8004e0c <FreqSweepMenuInputHandler+0x194>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d002      	beq.n	8004d0a <FreqSweepMenuInputHandler+0x92>
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d00b      	beq.n	8004d20 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8004d08:	e073      	b.n	8004df2 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f001 f8cc 	bl	8005ea8 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 8004d10:	f001 f906 	bl	8005f20 <FS_GetCalculatedSweepFrequencyInHertz>
 8004d14:	eef0 7a40 	vmov.f32	s15, s0
 8004d18:	4b3d      	ldr	r3, [pc, #244]	; (8004e10 <FreqSweepMenuInputHandler+0x198>)
 8004d1a:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004d1e:	e05e      	b.n	8004dde <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004d20:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <FreqSweepMenuInputHandler+0x190>)
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <FreqSweepMenuInputHandler+0xb6>
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d02a      	beq.n	8004d82 <FreqSweepMenuInputHandler+0x10a>
							break;
 8004d2c:	e056      	b.n	8004ddc <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004d2e:	4b39      	ldr	r3, [pc, #228]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d32:	2b0c      	cmp	r3, #12
 8004d34:	d803      	bhi.n	8004d3e <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8004d36:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004d38:	220d      	movs	r2, #13
 8004d3a:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d3c:	e04e      	b.n	8004ddc <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004d3e:	4b35      	ldr	r3, [pc, #212]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	ee07 3a90 	vmov	s15, r3
 8004d46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d4a:	4b33      	ldr	r3, [pc, #204]	; (8004e18 <FreqSweepMenuInputHandler+0x1a0>)
 8004d4c:	edd3 7a00 	vldr	s15, [r3]
 8004d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d58:	dd09      	ble.n	8004d6e <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8004d5a:	4b2f      	ldr	r3, [pc, #188]	; (8004e18 <FreqSweepMenuInputHandler+0x1a0>)
 8004d5c:	edd3 7a00 	vldr	s15, [r3]
 8004d60:	4b2c      	ldr	r3, [pc, #176]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d66:	ee17 2a90 	vmov	r2, s15
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d6c:	e036      	b.n	8004ddc <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004d6e:	4b29      	ldr	r3, [pc, #164]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d7a:	4b28      	ldr	r3, [pc, #160]	; (8004e1c <FreqSweepMenuInputHandler+0x1a4>)
 8004d7c:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004d80:	e02c      	b.n	8004ddc <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004d82:	4b24      	ldr	r3, [pc, #144]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d86:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d904      	bls.n	8004d98 <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004d8e:	4b21      	ldr	r3, [pc, #132]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004d96:	e020      	b.n	8004dda <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	ee07 3a90 	vmov	s15, r3
 8004da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004da4:	4b1d      	ldr	r3, [pc, #116]	; (8004e1c <FreqSweepMenuInputHandler+0x1a4>)
 8004da6:	edd3 7a00 	vldr	s15, [r3]
 8004daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004db2:	d509      	bpl.n	8004dc8 <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004db4:	4b19      	ldr	r3, [pc, #100]	; (8004e1c <FreqSweepMenuInputHandler+0x1a4>)
 8004db6:	edd3 7a00 	vldr	s15, [r3]
 8004dba:	4b16      	ldr	r3, [pc, #88]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dc0:	ee17 2a90 	vmov	r2, s15
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004dc6:	e008      	b.n	8004dda <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <FreqSweepMenuInputHandler+0x19c>)
 8004dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd4:	4b10      	ldr	r3, [pc, #64]	; (8004e18 <FreqSweepMenuInputHandler+0x1a0>)
 8004dd6:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004dda:	bf00      	nop
					break;
 8004ddc:	bf00      	nop
			break;
 8004dde:	e008      	b.n	8004df2 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8004de0:	2000      	movs	r0, #0
 8004de2:	f001 f803 	bl	8005dec <FS_SetEncoderControlMode>

			break;
 8004de6:	e004      	b.n	8004df2 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8004de8:	2001      	movs	r0, #1
 8004dea:	f000 ffff 	bl	8005dec <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8004dee:	e000      	b.n	8004df2 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 8004df0:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <FreqSweepMenuInputHandler+0x1a8>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8004df8:	230d      	movs	r3, #13
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	40000c00 	.word	0x40000c00
 8004e08:	20001e58 	.word	0x20001e58
 8004e0c:	20001e59 	.word	0x20001e59
 8004e10:	20001eb0 	.word	0x20001eb0
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	20000128 	.word	0x20000128
 8004e1c:	20000124 	.word	0x20000124
 8004e20:	20001e57 	.word	0x20001e57

08004e24 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e28:	f7fc fd1a 	bl	8001860 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <FreqSweepMenuExitHandler+0x34>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4a09      	ldr	r2, [pc, #36]	; (8004e58 <FreqSweepMenuExitHandler+0x34>)
 8004e32:	f023 0301 	bic.w	r3, r3, #1
 8004e36:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <FreqSweepMenuExitHandler+0x34>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a06      	ldr	r2, [pc, #24]	; (8004e58 <FreqSweepMenuExitHandler+0x34>)
 8004e3e:	f023 0301 	bic.w	r3, r3, #1
 8004e42:	6013      	str	r3, [r2, #0]



	// disable the menu
	_setFreqMenuStatus(ENABLE_FREQ_MAIN_MENU);
 8004e44:	2001      	movs	r0, #1
 8004e46:	f000 f8f7 	bl	8005038 <_setFreqMenuStatus>

	// back to main freq menu
	eNewEvent = evIdle;
 8004e4a:	4b04      	ldr	r3, [pc, #16]	; (8004e5c <FreqSweepMenuExitHandler+0x38>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e50:	230a      	movs	r3, #10
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40000c00 	.word	0x40000c00
 8004e5c:	20001e57 	.word	0x20001e57

08004e60 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e64:	f7fc fcfc 	bl	8001860 <DM_RefreshScreen>

	_setFreqMenuStatus(ENABLE_FREQ_MAIN_MENU);
 8004e68:	2001      	movs	r0, #1
 8004e6a:	f000 f8e5 	bl	8005038 <_setFreqMenuStatus>

	// stay in this state
	eNewEvent = evIdle;
 8004e6e:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <FreqMainMenuEntryHandler+0x1c>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004e74:	230a      	movs	r3, #10
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20001e57 	.word	0x20001e57

08004e80 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	_setFreqMenuStatus(DISABLE_FREQ_MENU);
 8004e84:	2000      	movs	r0, #0
 8004e86:	f000 f8d7 	bl	8005038 <_setFreqMenuStatus>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004e8a:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <FreqMainMenuExitHandler+0x24>)
 8004e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e90:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004e92:	f7fc fce5 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004e96:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <FreqMainMenuExitHandler+0x28>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004e9c:	2301      	movs	r3, #1
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40012c00 	.word	0x40012c00
 8004ea8:	20001e57 	.word	0x20001e57

08004eac <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004eb2:	f7fc fcd5 	bl	8001860 <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004eb6:	f000 ff33 	bl	8005d20 <FreqO_ResetLastEncoderValue>

	_setFreqMenuStatus(ENABLE_FREQ_PRESET_MENU);
 8004eba:	2002      	movs	r0, #2
 8004ebc:	f000 f8bc 	bl	8005038 <_setFreqMenuStatus>

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004ec0:	f000 fee0 	bl	8005c84 <FreqO_GetFPresetObject>
 8004ec4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004ecc:	4b09      	ldr	r3, [pc, #36]	; (8004ef4 <FreqPresetMenuEntryHandler+0x48>)
 8004ece:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ed2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004ed4:	4b07      	ldr	r3, [pc, #28]	; (8004ef4 <FreqPresetMenuEntryHandler+0x48>)
 8004ed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c
 8004edc:	e002      	b.n	8004ee4 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004ede:	4806      	ldr	r0, [pc, #24]	; (8004ef8 <FreqPresetMenuEntryHandler+0x4c>)
 8004ee0:	f7fc fd04 	bl	80018ec <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004ee4:	4b05      	ldr	r3, [pc, #20]	; (8004efc <FreqPresetMenuEntryHandler+0x50>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004eea:	230b      	movs	r3, #11
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40012c00 	.word	0x40012c00
 8004ef8:	08015b8c 	.word	0x08015b8c
 8004efc:	20001e57 	.word	0x20001e57

08004f00 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f04:	2000      	movs	r0, #0
 8004f06:	f002 f869 	bl	8006fdc <SM_GetEncoderValue>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fd95 	bl	8005a3c <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004f12:	4b03      	ldr	r3, [pc, #12]	; (8004f20 <FreqPresetMenuInputHandler+0x20>)
 8004f14:	2200      	movs	r2, #0
 8004f16:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004f18:	230b      	movs	r3, #11
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	20001e57 	.word	0x20001e57

08004f24 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f28:	f7fc fc9a 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	_setFreqMenuStatus(ENABLE_FREQ_MAIN_MENU);
 8004f2c:	2001      	movs	r0, #1
 8004f2e:	f000 f883 	bl	8005038 <_setFreqMenuStatus>

	// back to main freq menu
	eNewEvent = evIdle;
 8004f32:	4b03      	ldr	r3, [pc, #12]	; (8004f40 <FreqPresetMenuExitHandler+0x1c>)
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004f38:	230a      	movs	r3, #10
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20001e57 	.word	0x20001e57

08004f44 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f48:	f7fc fc8a 	bl	8001860 <DM_RefreshScreen>

	_setFreqMenuStatus(ENABLE_FREQ_ADJUST_MENU);
 8004f4c:	2003      	movs	r0, #3
 8004f4e:	f000 f873 	bl	8005038 <_setFreqMenuStatus>

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004f52:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <FreqAdjustMenuEntryHandler+0x2c>)
 8004f54:	4a07      	ldr	r2, [pc, #28]	; (8004f74 <FreqAdjustMenuEntryHandler+0x30>)
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <FreqAdjustMenuEntryHandler+0x30>)
 8004f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f60:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004f62:	4b05      	ldr	r3, [pc, #20]	; (8004f78 <FreqAdjustMenuEntryHandler+0x34>)
 8004f64:	2200      	movs	r2, #0
 8004f66:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004f68:	230c      	movs	r3, #12
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40013400 	.word	0x40013400
 8004f74:	40012c00 	.word	0x40012c00
 8004f78:	20001e57 	.word	0x20001e57

08004f7c <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004f80:	f000 fe2c 	bl	8005bdc <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004f84:	4b02      	ldr	r3, [pc, #8]	; (8004f90 <FreqAdjustMenuInputHandler+0x14>)
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004f8a:	230c      	movs	r3, #12
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20001e57 	.word	0x20001e57

08004f94 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004f98:	f7fc fc62 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	_setFreqMenuStatus(ENABLE_FREQ_MAIN_MENU);
 8004f9c:	2001      	movs	r0, #1
 8004f9e:	f000 f84b 	bl	8005038 <_setFreqMenuStatus>

	// back to main freq menu
	eNewEvent = evIdle;
 8004fa2:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <FreqAdjustMenuExitHandler+0x1c>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004fa8:	230a      	movs	r3, #10
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20001e57 	.word	0x20001e57

08004fb4 <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004fb8:	f7fc fc52 	bl	8001860 <DM_RefreshScreen>

	_setFreqMenuStatus(ENABLE_FREQ_PRESCALER_MENU);
 8004fbc:	2005      	movs	r0, #5
 8004fbe:	f000 f83b 	bl	8005038 <_setFreqMenuStatus>

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004fc2:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004fc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004fca:	4b05      	ldr	r3, [pc, #20]	; (8004fe0 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004fcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fd0:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004fd2:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <FreqPrescalerMenuEntryHandler+0x30>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004fd8:	230e      	movs	r3, #14
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40012c00 	.word	0x40012c00
 8004fe4:	20001e57 	.word	0x20001e57

08004fe8 <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004fec:	f000 fe22 	bl	8005c34 <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004ff0:	4b02      	ldr	r3, [pc, #8]	; (8004ffc <FreqPrescalerMenuInputHandler+0x14>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004ff6:	230e      	movs	r3, #14
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20001e57 	.word	0x20001e57

08005000 <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8005000:	b580      	push	{r7, lr}
 8005002:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005004:	f7fc fc2c 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	_setFreqMenuStatus(ENABLE_FREQ_MAIN_MENU);
 8005008:	2001      	movs	r0, #1
 800500a:	f000 f815 	bl	8005038 <_setFreqMenuStatus>

	// back to main freq menu
	eNewEvent = evIdle;
 800500e:	4b03      	ldr	r3, [pc, #12]	; (800501c <FreqPrescalerMenuExitHandler+0x1c>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8005014:	230a      	movs	r3, #10
}
 8005016:	4618      	mov	r0, r3
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	20001e57 	.word	0x20001e57

08005020 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8005024:	4b03      	ldr	r3, [pc, #12]	; (8005034 <FreqMenu_getStatus+0x14>)
 8005026:	781b      	ldrb	r3, [r3, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	20001e5a 	.word	0x20001e5a

08005038 <_setFreqMenuStatus>:
 *	@param None
 *	@retval None
 *
 */
void _setFreqMenuStatus(eFreqMenu_Status newStatus)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	4603      	mov	r3, r0
 8005040:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = newStatus;
 8005042:	4a04      	ldr	r2, [pc, #16]	; (8005054 <_setFreqMenuStatus+0x1c>)
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	7013      	strb	r3, [r2, #0]
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr
 8005054:	20001e5a 	.word	0x20001e5a

08005058 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800505c:	f7fc fc00 	bl	8001860 <DM_RefreshScreen>

	_setFuncMenuStatus(ENABLE_FUNC_MAIN_MENU);
 8005060:	2001      	movs	r0, #1
 8005062:	f000 f8e5 	bl	8005230 <_setFuncMenuStatus>

	eNewEvent = evIdle;
 8005066:	4b03      	ldr	r3, [pc, #12]	; (8005074 <FuncMainMenuEntryHandler+0x1c>)
 8005068:	2200      	movs	r2, #0
 800506a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800506c:	2303      	movs	r3, #3
}
 800506e:	4618      	mov	r0, r3
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	20001e57 	.word	0x20001e57

08005078 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	_setFuncMenuStatus(DISABLE_FUNC_MENU);
 800507c:	2000      	movs	r0, #0
 800507e:	f000 f8d7 	bl	8005230 <_setFuncMenuStatus>

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8005082:	2002      	movs	r0, #2
 8005084:	f000 fa70 	bl	8005568 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8005088:	f7fc fbea 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800508c:	4b02      	ldr	r3, [pc, #8]	; (8005098 <FuncMainMenuExitHandler+0x20>)
 800508e:	2200      	movs	r2, #0
 8005090:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8005092:	2301      	movs	r3, #1
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20001e57 	.word	0x20001e57

0800509c <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050a0:	f7fc fbde 	bl	8001860 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 80050a4:	f000 ff6a 	bl	8005f7c <FuncO_ResetLastEncoderValue>

	_setFuncMenuStatus(ENABLE_FUNC_SIGNAL_MENU);
 80050a8:	2002      	movs	r0, #2
 80050aa:	f000 f8c1 	bl	8005230 <_setFuncMenuStatus>

	ENCODER_TIMER->CNT = 32768;
 80050ae:	4b07      	ldr	r3, [pc, #28]	; (80050cc <FuncSignalMenuEntryHandler+0x30>)
 80050b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80050b6:	4b05      	ldr	r3, [pc, #20]	; (80050cc <FuncSignalMenuEntryHandler+0x30>)
 80050b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050bc:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 80050be:	4b04      	ldr	r3, [pc, #16]	; (80050d0 <FuncSignalMenuEntryHandler+0x34>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80050c4:	2304      	movs	r3, #4
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40012c00 	.word	0x40012c00
 80050d0:	20001e57 	.word	0x20001e57

080050d4 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif

	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80050d8:	2000      	movs	r0, #0
 80050da:	f001 ff7f 	bl	8006fdc <SM_GetEncoderValue>
 80050de:	4603      	mov	r3, r0
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 ff57 	bl	8005f94 <FuncO_MapEncoderPositionToSignalOutput>

	eNewEvent = evIdle;
 80050e6:	4b03      	ldr	r3, [pc, #12]	; (80050f4 <FuncSignalMenuInputHandler+0x20>)
 80050e8:	2200      	movs	r2, #0
 80050ea:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80050ec:	2304      	movs	r3, #4
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20001e57 	.word	0x20001e57

080050f8 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu
	_setFuncMenuStatus(ENABLE_FUNC_MAIN_MENU);
 80050fc:	2001      	movs	r0, #1
 80050fe:	f000 f897 	bl	8005230 <_setFuncMenuStatus>

	DM_RefreshScreen();
 8005102:	f7fc fbad 	bl	8001860 <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8005106:	f002 f80b 	bl	8007120 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 800510a:	4b03      	ldr	r3, [pc, #12]	; (8005118 <FuncSignalMenuExitHandler+0x20>)
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8005110:	2303      	movs	r3, #3
}
 8005112:	4618      	mov	r0, r3
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20001e57 	.word	0x20001e57

0800511c <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005120:	f7fc fb9e 	bl	8001860 <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8005124:	f000 ff2a 	bl	8005f7c <FuncO_ResetLastEncoderValue>

	_setFuncMenuStatus(ENABLE_FUNC_AUX_MENU);
 8005128:	2003      	movs	r0, #3
 800512a:	f000 f881 	bl	8005230 <_setFuncMenuStatus>

	ENCODER_TIMER->CNT = 32768;
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <FuncAuxMenuEntryHandler+0x30>)
 8005130:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005134:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <FuncAuxMenuEntryHandler+0x30>)
 8005138:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800513c:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 800513e:	4b04      	ldr	r3, [pc, #16]	; (8005150 <FuncAuxMenuEntryHandler+0x34>)
 8005140:	2200      	movs	r2, #0
 8005142:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8005144:	2305      	movs	r3, #5
}
 8005146:	4618      	mov	r0, r3
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	40012c00 	.word	0x40012c00
 8005150:	20001e57 	.word	0x20001e57
 8005154:	00000000 	.word	0x00000000

08005158 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8005158:	b590      	push	{r4, r7, lr}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 800515e:	f001 ffc3 	bl	80070e8 <SM_IsFuncPwmDutyMode>
 8005162:	4603      	mov	r3, r0
 8005164:	2b00      	cmp	r3, #0
 8005166:	d01a      	beq.n	800519e <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005168:	2000      	movs	r0, #0
 800516a:	f001 ff37 	bl	8006fdc <SM_GetEncoderValue>
 800516e:	4603      	mov	r3, r0
 8005170:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8005172:	88fb      	ldrh	r3, [r7, #6]
 8005174:	4618      	mov	r0, r3
 8005176:	f7fb f9ed 	bl	8000554 <__aeabi_ui2d>
 800517a:	4603      	mov	r3, r0
 800517c:	460c      	mov	r4, r1
 800517e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 80051c0 <FuncAuxMenuInputHandler+0x68>
 8005182:	ec44 3b10 	vmov	d0, r3, r4
 8005186:	f00e ffa7 	bl	80140d8 <pow>
 800518a:	ec53 2b10 	vmov	r2, r3, d0
 800518e:	4c0e      	ldr	r4, [pc, #56]	; (80051c8 <FuncAuxMenuInputHandler+0x70>)
 8005190:	4610      	mov	r0, r2
 8005192:	4619      	mov	r1, r3
 8005194:	f7fb fd30 	bl	8000bf8 <__aeabi_d2uiz>
 8005198:	4603      	mov	r3, r0
 800519a:	6363      	str	r3, [r4, #52]	; 0x34
 800519c:	e006      	b.n	80051ac <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 800519e:	2000      	movs	r0, #0
 80051a0:	f001 ff1c 	bl	8006fdc <SM_GetEncoderValue>
 80051a4:	4603      	mov	r3, r0
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 ff2e 	bl	8006008 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <FuncAuxMenuInputHandler+0x74>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80051b2:	2305      	movs	r3, #5
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd90      	pop	{r4, r7, pc}
 80051bc:	f3af 8000 	nop.w
 80051c0:	00000000 	.word	0x00000000
 80051c4:	40000000 	.word	0x40000000
 80051c8:	40000400 	.word	0x40000400
 80051cc:	20001e57 	.word	0x20001e57

080051d0 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 80051d4:	f001 ff94 	bl	8007100 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 80051d8:	4b04      	ldr	r3, [pc, #16]	; (80051ec <FuncAuxToggleDutyMode+0x1c>)
 80051da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051de:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 80051e0:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <FuncAuxToggleDutyMode+0x20>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 80051e6:	2305      	movs	r3, #5
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	20001e57 	.word	0x20001e57

080051f4 <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu
	_setFuncMenuStatus(ENABLE_FUNC_MAIN_MENU);
 80051f8:	2001      	movs	r0, #1
 80051fa:	f000 f819 	bl	8005230 <_setFuncMenuStatus>

	SM_ResetFuncPwmDutyMode();
 80051fe:	f001 ff8f 	bl	8007120 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8005202:	f7fc fb2d 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005206:	4b03      	ldr	r3, [pc, #12]	; (8005214 <FuncAuxMenuExitHandler+0x20>)
 8005208:	2200      	movs	r2, #0
 800520a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 800520c:	2303      	movs	r3, #3
}
 800520e:	4618      	mov	r0, r3
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	20001e57 	.word	0x20001e57

08005218 <FuncMenu_getStatus>:
 *	@param None
 *	@retval eFuncMenu_Status enum for current menu state
 *
 */
eFuncMenu_Status FuncMenu_getStatus()
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 800521c:	4b03      	ldr	r3, [pc, #12]	; (800522c <FuncMenu_getStatus+0x14>)
 800521e:	781b      	ldrb	r3, [r3, #0]
}
 8005220:	4618      	mov	r0, r3
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	20001e5b 	.word	0x20001e5b

08005230 <_setFuncMenuStatus>:
 *	@param eFuncMenu_Status enum for next menu state
 *	@retval None
 *
 */
void _setFuncMenuStatus(eFuncMenu_Status newStatus)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	4603      	mov	r3, r0
 8005238:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = newStatus;
 800523a:	4a04      	ldr	r2, [pc, #16]	; (800524c <_setFuncMenuStatus+0x1c>)
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	7013      	strb	r3, [r2, #0]
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr
 800524c:	20001e5b 	.word	0x20001e5b

08005250 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8005250:	b580      	push	{r7, lr}
 8005252:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005254:	f7fc fb04 	bl	8001860 <DM_RefreshScreen>

	_setGainMenuStatus(ENABLE_GAIN_MAIN_MENU);
 8005258:	2001      	movs	r0, #1
 800525a:	f000 f907 	bl	800546c <_setGainMenuStatus>

	eNewEvent = evIdle;
 800525e:	4b03      	ldr	r3, [pc, #12]	; (800526c <GainMainMenuEntryHandler+0x1c>)
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005264:	2306      	movs	r3, #6
}
 8005266:	4618      	mov	r0, r3
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	20001e57 	.word	0x20001e57

08005270 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	_setGainMenuStatus(DISABLE_GAIN_MENU);
 8005274:	2000      	movs	r0, #0
 8005276:	f000 f8f9 	bl	800546c <_setGainMenuStatus>

	DM_RefreshScreen();
 800527a:	f7fc faf1 	bl	8001860 <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800527e:	4b03      	ldr	r3, [pc, #12]	; (800528c <GainMainMenuExitHandler+0x1c>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8005284:	2301      	movs	r3, #1
}
 8005286:	4618      	mov	r0, r3
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20001e57 	.word	0x20001e57

08005290 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005296:	f7fc fae3 	bl	8001860 <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 800529a:	f001 f8ab 	bl	80063f4 <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 800529e:	f001 ff4b 	bl	8007138 <VPP_ResetLastEncoderValue>

	_setGainMenuStatus(ENABLE_GAIN_SIGNAL_MENU);
 80052a2:	2002      	movs	r0, #2
 80052a4:	f000 f8e2 	bl	800546c <_setGainMenuStatus>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 80052a8:	2000      	movs	r0, #0
 80052aa:	f001 fc1b 	bl	8006ae4 <SM_GetOutputChannel>
 80052ae:	4603      	mov	r3, r0
 80052b0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80052b4:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80052bc:	4b09      	ldr	r3, [pc, #36]	; (80052e4 <GainSignalMenuEntryHandler+0x54>)
 80052be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <GainSignalMenuEntryHandler+0x54>)
 80052c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80052cc:	e002      	b.n	80052d4 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80052ce:	4806      	ldr	r0, [pc, #24]	; (80052e8 <GainSignalMenuEntryHandler+0x58>)
 80052d0:	f7fc fb0c 	bl	80018ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <GainSignalMenuEntryHandler+0x5c>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80052da:	2307      	movs	r3, #7
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	08015bc8 	.word	0x08015bc8
 80052ec:	20001e57 	.word	0x20001e57

080052f0 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	4603      	mov	r3, r0
 80052f8:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 80052fa:	2000      	movs	r0, #0
 80052fc:	f001 fbf2 	bl	8006ae4 <SM_GetOutputChannel>
 8005300:	4603      	mov	r3, r0
 8005302:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005306:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8005308:	79fb      	ldrb	r3, [r7, #7]
 800530a:	3b01      	subs	r3, #1
 800530c:	2b04      	cmp	r3, #4
 800530e:	d834      	bhi.n	800537a <GainSignalMenuInputHandler+0x8a>
 8005310:	a201      	add	r2, pc, #4	; (adr r2, 8005318 <GainSignalMenuInputHandler+0x28>)
 8005312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005316:	bf00      	nop
 8005318:	0800535b 	.word	0x0800535b
 800531c:	08005363 	.word	0x08005363
 8005320:	0800536b 	.word	0x0800536b
 8005324:	08005373 	.word	0x08005373
 8005328:	0800532d 	.word	0x0800532d
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d025      	beq.n	800537e <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	2b06      	cmp	r3, #6
 8005338:	d107      	bne.n	800534a <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 800533a:	2001      	movs	r0, #1
 800533c:	f001 fe4e 	bl	8006fdc <SM_GetEncoderValue>
 8005340:	4603      	mov	r3, r0
 8005342:	4618      	mov	r0, r3
 8005344:	f001 f862 	bl	800640c <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8005348:	e019      	b.n	800537e <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 800534a:	2000      	movs	r0, #0
 800534c:	f001 fe46 	bl	8006fdc <SM_GetEncoderValue>
 8005350:	4603      	mov	r3, r0
 8005352:	4618      	mov	r0, r3
 8005354:	f002 f862 	bl	800741c <VPP_MapEncoderPositionToSignalOutput>
			break;
 8005358:	e011      	b.n	800537e <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 800535a:	2011      	movs	r0, #17
 800535c:	f001 fef8 	bl	8007150 <VPP_ApplyProfileToSignal>
			break;
 8005360:	e00e      	b.n	8005380 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 8005362:	2020      	movs	r0, #32
 8005364:	f001 fef4 	bl	8007150 <VPP_ApplyProfileToSignal>
			break;
 8005368:	e00a      	b.n	8005380 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 800536a:	2031      	movs	r0, #49	; 0x31
 800536c:	f001 fef0 	bl	8007150 <VPP_ApplyProfileToSignal>
			break;
 8005370:	e006      	b.n	8005380 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 8005372:	2059      	movs	r0, #89	; 0x59
 8005374:	f001 feec 	bl	8007150 <VPP_ApplyProfileToSignal>
			break;
 8005378:	e002      	b.n	8005380 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <GainSignalMenuInputHandler+0x90>
			break;
 800537e:	bf00      	nop
	}

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evIdle;
 8005380:	4b03      	ldr	r3, [pc, #12]	; (8005390 <GainSignalMenuInputHandler+0xa0>)
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8005386:	2307      	movs	r3, #7
}
 8005388:	4618      	mov	r0, r3
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	20001e57 	.word	0x20001e57

08005394 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	_setGainMenuStatus(ENABLE_GAIN_MAIN_MENU);
 8005398:	2001      	movs	r0, #1
 800539a:	f000 f867 	bl	800546c <_setGainMenuStatus>

	DM_RefreshScreen();
 800539e:	f7fc fa5f 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80053a2:	4b03      	ldr	r3, [pc, #12]	; (80053b0 <GainSignalMenuExitHandler+0x1c>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80053a8:	2306      	movs	r3, #6
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20001e57 	.word	0x20001e57

080053b4 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80053ba:	f7fc fa51 	bl	8001860 <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 80053be:	f001 febb 	bl	8007138 <VPP_ResetLastEncoderValue>

	_setGainMenuStatus(ENABLE_GAIN_Aux_MENU);
 80053c2:	2003      	movs	r0, #3
 80053c4:	f000 f852 	bl	800546c <_setGainMenuStatus>

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 80053c8:	2001      	movs	r0, #1
 80053ca:	f001 fb8b 	bl	8006ae4 <SM_GetOutputChannel>
 80053ce:	4603      	mov	r3, r0
 80053d0:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80053d4:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d008      	beq.n	80053ee <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 80053dc:	4b09      	ldr	r3, [pc, #36]	; (8005404 <GainAuxMenuEntryHandler+0x50>)
 80053de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80053e2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 80053e4:	4b07      	ldr	r3, [pc, #28]	; (8005404 <GainAuxMenuEntryHandler+0x50>)
 80053e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80053ec:	e002      	b.n	80053f4 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 80053ee:	4806      	ldr	r0, [pc, #24]	; (8005408 <GainAuxMenuEntryHandler+0x54>)
 80053f0:	f7fc fa7c 	bl	80018ec <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 80053f4:	4b05      	ldr	r3, [pc, #20]	; (800540c <GainAuxMenuEntryHandler+0x58>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 80053fa:	2308      	movs	r3, #8
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40012c00 	.word	0x40012c00
 8005408:	08015bc8 	.word	0x08015bc8
 800540c:	20001e57 	.word	0x20001e57

08005410 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8005414:	2000      	movs	r0, #0
 8005416:	f001 fde1 	bl	8006fdc <SM_GetEncoderValue>
 800541a:	4603      	mov	r3, r0
 800541c:	4618      	mov	r0, r3
 800541e:	f002 f837 	bl	8007490 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 8005422:	4b03      	ldr	r3, [pc, #12]	; (8005430 <GainAuxMenuInputHandler+0x20>)
 8005424:	2203      	movs	r2, #3
 8005426:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005428:	2308      	movs	r3, #8
}
 800542a:	4618      	mov	r0, r3
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20001e57 	.word	0x20001e57

08005434 <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 8005434:	b580      	push	{r7, lr}
 8005436:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	_setGainMenuStatus(ENABLE_GAIN_MAIN_MENU);
 8005438:	2001      	movs	r0, #1
 800543a:	f000 f817 	bl	800546c <_setGainMenuStatus>

	DM_RefreshScreen();
 800543e:	f7fc fa0f 	bl	8001860 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8005442:	4b03      	ldr	r3, [pc, #12]	; (8005450 <GainAuxMenuExitHandler+0x1c>)
 8005444:	2200      	movs	r2, #0
 8005446:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005448:	2306      	movs	r3, #6
}
 800544a:	4618      	mov	r0, r3
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20001e57 	.word	0x20001e57

08005454 <GainMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eGainMenu_Status GainMenu_getStatus()
{
 8005454:	b480      	push	{r7}
 8005456:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8005458:	4b03      	ldr	r3, [pc, #12]	; (8005468 <GainMenu_getStatus+0x14>)
 800545a:	781b      	ldrb	r3, [r3, #0]
}
 800545c:	4618      	mov	r0, r3
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	20001e5c 	.word	0x20001e5c

0800546c <_setGainMenuStatus>:
 *	@param eFuncMenu_Status enum for next menu state
 *	@retval None
 *
 */
void _setGainMenuStatus(eGainMenu_Status newStatus)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	4603      	mov	r3, r0
 8005474:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = newStatus;
 8005476:	4a04      	ldr	r2, [pc, #16]	; (8005488 <_setGainMenuStatus+0x1c>)
 8005478:	79fb      	ldrb	r3, [r7, #7]
 800547a:	7013      	strb	r3, [r2, #0]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	20001e5c 	.word	0x20001e5c

0800548c <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005490:	f7fc f9e6 	bl	8001860 <DM_RefreshScreen>

	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8005494:	2002      	movs	r0, #2
 8005496:	f000 f867 	bl	8005568 <ToplevelMenu_setStatus>




	// stay in this state
	eNewEvent = evIdle;
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <ToplevelOutputMenuEntryHandler+0x1c>)
 800549c:	2200      	movs	r2, #0
 800549e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80054a0:	2301      	movs	r3, #1
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	20001e57 	.word	0x20001e57

080054ac <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80054b0:	f7fc f9d6 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_MAIN_MENU);
 80054b4:	2001      	movs	r0, #1
 80054b6:	f000 f857 	bl	8005568 <ToplevelMenu_setStatus>

	// back to main freq menu
	eNewEvent = evIdle;
 80054ba:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <ToplevelOutputMenuExitHandler+0x1c>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20001e57 	.word	0x20001e57

080054cc <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80054d0:	f7fc f9c6 	bl	8001860 <DM_RefreshScreen>

	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_INPUT_MENU);
 80054d4:	2003      	movs	r0, #3
 80054d6:	f000 f847 	bl	8005568 <ToplevelMenu_setStatus>




	// stay in this state
	eNewEvent = evIdle;
 80054da:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <ToplevelInputMenuEntryHandler+0x1c>)
 80054dc:	2200      	movs	r2, #0
 80054de:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80054e0:	2302      	movs	r3, #2
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	20001e57 	.word	0x20001e57

080054ec <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	4603      	mov	r3, r0
 80054f4:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 80054f6:	79fb      	ldrb	r3, [r7, #7]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d002      	beq.n	8005502 <ToplevelInputMenuInputHandler+0x16>
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d003      	beq.n	8005508 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005500:	e00b      	b.n	800551a <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 8005502:	f001 f86f 	bl	80065e4 <IT_ArbitrateInputTrigger>
				break;
 8005506:	e008      	b.n	800551a <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8005508:	f001 f8fa 	bl	8006700 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 800550c:	2001      	movs	r0, #1
 800550e:	f7ff ffed 	bl	80054ec <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8005512:	2001      	movs	r0, #1
 8005514:	f7ff ffea 	bl	80054ec <ToplevelInputMenuInputHandler>
				break;
 8005518:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 800551a:	4b04      	ldr	r3, [pc, #16]	; (800552c <ToplevelInputMenuInputHandler+0x40>)
 800551c:	2200      	movs	r2, #0
 800551e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8005520:	2302      	movs	r3, #2
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20001e57 	.word	0x20001e57

08005530 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8005530:	b580      	push	{r7, lr}
 8005532:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8005534:	f7fc f994 	bl	8001860 <DM_RefreshScreen>

	// disable the menu
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_MAIN_MENU);
 8005538:	2001      	movs	r0, #1
 800553a:	f000 f815 	bl	8005568 <ToplevelMenu_setStatus>

	// back to main freq menu
	eNewEvent = evIdle;
 800553e:	4b03      	ldr	r3, [pc, #12]	; (800554c <ToplevelInputMenuExitHandler+0x1c>)
 8005540:	2200      	movs	r2, #0
 8005542:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	20001e57 	.word	0x20001e57

08005550 <ToplevelMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8005554:	4b03      	ldr	r3, [pc, #12]	; (8005564 <ToplevelMenu_getStatus+0x14>)
 8005556:	781b      	ldrb	r3, [r3, #0]
}
 8005558:	4618      	mov	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
 8005562:	bf00      	nop
 8005564:	20000001 	.word	0x20000001

08005568 <ToplevelMenu_setStatus>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	4603      	mov	r3, r0
 8005570:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8005572:	4a04      	ldr	r2, [pc, #16]	; (8005584 <ToplevelMenu_setStatus+0x1c>)
 8005574:	79fb      	ldrb	r3, [r7, #7]
 8005576:	7013      	strb	r3, [r2, #0]
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr
 8005584:	20000001 	.word	0x20000001

08005588 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4013      	ands	r3, r2
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	429a      	cmp	r2, r3
 800559c:	d101      	bne.n	80055a2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr
 80055b0:	40010400 	.word	0x40010400

080055b4 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <IM_Init+0x1c>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a04      	ldr	r2, [pc, #16]	; (80055d0 <IM_Init+0x1c>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	6013      	str	r3, [r2, #0]



}
 80055c4:	bf00      	nop
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	40014400 	.word	0x40014400

080055d4 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80055d4:	b480      	push	{r7}
 80055d6:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80055d8:	4b26      	ldr	r3, [pc, #152]	; (8005674 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b10      	cmp	r3, #16
 80055e2:	d11c      	bne.n	800561e <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80055e4:	4b24      	ldr	r3, [pc, #144]	; (8005678 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80055e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e8:	ee07 3a90 	vmov	s15, r3
 80055ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055f0:	4b22      	ldr	r3, [pc, #136]	; (800567c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80055f2:	edd3 7a00 	vldr	s15, [r3]
 80055f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80055fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80055fe:	db09      	blt.n	8005614 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8005600:	4b1f      	ldr	r3, [pc, #124]	; (8005680 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8005602:	edd3 7a00 	vldr	s15, [r3]
 8005606:	4b1c      	ldr	r3, [pc, #112]	; (8005678 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800560c:	ee17 2a90 	vmov	r2, s15
 8005610:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8005612:	e029      	b.n	8005668 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8005614:	4b18      	ldr	r3, [pc, #96]	; (8005678 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	3201      	adds	r2, #1
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800561c:	e024      	b.n	8005668 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 800561e:	4b16      	ldr	r3, [pc, #88]	; (8005678 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d104      	bne.n	8005630 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 8005626:	4b14      	ldr	r3, [pc, #80]	; (8005678 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005628:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800562c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800562e:	e01b      	b.n	8005668 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8005630:	4b11      	ldr	r3, [pc, #68]	; (8005678 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005634:	ee07 3a90 	vmov	s15, r3
 8005638:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800563c:	4b10      	ldr	r3, [pc, #64]	; (8005680 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 800563e:	edd3 7a00 	vldr	s15, [r3]
 8005642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800564a:	d809      	bhi.n	8005660 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 800564c:	4b0b      	ldr	r3, [pc, #44]	; (800567c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 800564e:	edd3 7a00 	vldr	s15, [r3]
 8005652:	4b09      	ldr	r3, [pc, #36]	; (8005678 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005658:	ee17 2a90 	vmov	r2, s15
 800565c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800565e:	e003      	b.n	8005668 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005664:	3a01      	subs	r2, #1
 8005666:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40013400 	.word	0x40013400
 800567c:	20000128 	.word	0x20000128
 8005680:	20000124 	.word	0x20000124

08005684 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800568a:	4b0f      	ldr	r3, [pc, #60]	; (80056c8 <IM_BTN1_EXTI14_Handler+0x44>)
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	4a0e      	ldr	r2, [pc, #56]	; (80056cc <IM_BTN1_EXTI14_Handler+0x48>)
 8005694:	8812      	ldrh	r2, [r2, #0]
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800569c:	dd0c      	ble.n	80056b8 <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 800569e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80056a2:	f7ff ff71 	bl	8005588 <LL_EXTI_IsActiveFlag_0_31>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d005      	beq.n	80056b8 <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 80056ac:	2001      	movs	r0, #1
 80056ae:	f7ff fa7f 	bl	8004bb0 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 80056b2:	4807      	ldr	r0, [pc, #28]	; (80056d0 <IM_BTN1_EXTI14_Handler+0x4c>)
 80056b4:	f00c fbf8 	bl	8011ea8 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80056b8:	4a04      	ldr	r2, [pc, #16]	; (80056cc <IM_BTN1_EXTI14_Handler+0x48>)
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	8013      	strh	r3, [r2, #0]


}
 80056be:	bf00      	nop
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	40014400 	.word	0x40014400
 80056cc:	20001e5e 	.word	0x20001e5e
 80056d0:	08015c00 	.word	0x08015c00

080056d4 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80056da:	4b0f      	ldr	r3, [pc, #60]	; (8005718 <IM_BTN2_EXTI15_Handler+0x44>)
 80056dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056de:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	4a0e      	ldr	r2, [pc, #56]	; (800571c <IM_BTN2_EXTI15_Handler+0x48>)
 80056e4:	8812      	ldrh	r2, [r2, #0]
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ec:	dd0c      	ble.n	8005708 <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80056ee:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056f2:	f7ff ff49 	bl	8005588 <LL_EXTI_IsActiveFlag_0_31>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d005      	beq.n	8005708 <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80056fc:	2003      	movs	r0, #3
 80056fe:	f7ff fa57 	bl	8004bb0 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8005702:	4807      	ldr	r0, [pc, #28]	; (8005720 <IM_BTN2_EXTI15_Handler+0x4c>)
 8005704:	f00c fbd0 	bl	8011ea8 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 8005708:	4a04      	ldr	r2, [pc, #16]	; (800571c <IM_BTN2_EXTI15_Handler+0x48>)
 800570a:	88fb      	ldrh	r3, [r7, #6]
 800570c:	8013      	strh	r3, [r2, #0]


}
 800570e:	bf00      	nop
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40014400 	.word	0x40014400
 800571c:	20001e60 	.word	0x20001e60
 8005720:	08015c18 	.word	0x08015c18

08005724 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <IM_BTN3_EXTI0_Handler+0x40>)
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005730:	88fb      	ldrh	r3, [r7, #6]
 8005732:	4a0d      	ldr	r2, [pc, #52]	; (8005768 <IM_BTN3_EXTI0_Handler+0x44>)
 8005734:	8812      	ldrh	r2, [r2, #0]
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800573c:	dd0b      	ble.n	8005756 <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800573e:	2001      	movs	r0, #1
 8005740:	f7ff ff22 	bl	8005588 <LL_EXTI_IsActiveFlag_0_31>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 800574a:	2004      	movs	r0, #4
 800574c:	f7ff fa30 	bl	8004bb0 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8005750:	4806      	ldr	r0, [pc, #24]	; (800576c <IM_BTN3_EXTI0_Handler+0x48>)
 8005752:	f00c fba9 	bl	8011ea8 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 8005756:	4a04      	ldr	r2, [pc, #16]	; (8005768 <IM_BTN3_EXTI0_Handler+0x44>)
 8005758:	88fb      	ldrh	r3, [r7, #6]
 800575a:	8013      	strh	r3, [r2, #0]


}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	40014400 	.word	0x40014400
 8005768:	20001e62 	.word	0x20001e62
 800576c:	08015c34 	.word	0x08015c34

08005770 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005776:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <IM_BTN4_EXTI1_Handler+0x40>)
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 800577c:	88fb      	ldrh	r3, [r7, #6]
 800577e:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <IM_BTN4_EXTI1_Handler+0x44>)
 8005780:	8812      	ldrh	r2, [r2, #0]
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005788:	dd0b      	ble.n	80057a2 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 800578a:	2002      	movs	r0, #2
 800578c:	f7ff fefc 	bl	8005588 <LL_EXTI_IsActiveFlag_0_31>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d005      	beq.n	80057a2 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 8005796:	2002      	movs	r0, #2
 8005798:	f7ff fa0a 	bl	8004bb0 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 800579c:	4806      	ldr	r0, [pc, #24]	; (80057b8 <IM_BTN4_EXTI1_Handler+0x48>)
 800579e:	f00c fb83 	bl	8011ea8 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 80057a2:	4a04      	ldr	r2, [pc, #16]	; (80057b4 <IM_BTN4_EXTI1_Handler+0x44>)
 80057a4:	88fb      	ldrh	r3, [r7, #6]
 80057a6:	8013      	strh	r3, [r2, #0]


}
 80057a8:	bf00      	nop
 80057aa:	3708      	adds	r7, #8
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40014400 	.word	0x40014400
 80057b4:	20001e64 	.word	0x20001e64
 80057b8:	08015c4c 	.word	0x08015c4c

080057bc <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80057c2:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <IM_ENC_EXTI2_Handler+0x40>)
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <IM_ENC_EXTI2_Handler+0x44>)
 80057cc:	8812      	ldrh	r2, [r2, #0]
 80057ce:	1a9b      	subs	r3, r3, r2
 80057d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057d4:	dd0b      	ble.n	80057ee <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80057d6:	2004      	movs	r0, #4
 80057d8:	f7ff fed6 	bl	8005588 <LL_EXTI_IsActiveFlag_0_31>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80057e2:	2006      	movs	r0, #6
 80057e4:	f7ff f9e4 	bl	8004bb0 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80057e8:	4806      	ldr	r0, [pc, #24]	; (8005804 <IM_ENC_EXTI2_Handler+0x48>)
 80057ea:	f00c fb5d 	bl	8011ea8 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80057ee:	4a04      	ldr	r2, [pc, #16]	; (8005800 <IM_ENC_EXTI2_Handler+0x44>)
 80057f0:	88fb      	ldrh	r3, [r7, #6]
 80057f2:	8013      	strh	r3, [r2, #0]


}
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40014400 	.word	0x40014400
 8005800:	20001e66 	.word	0x20001e66
 8005804:	08015c64 	.word	0x08015c64

08005808 <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 800580e:	4b11      	ldr	r3, [pc, #68]	; (8005854 <IM_ENC_DIRF_Handler+0x4c>)
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800581a:	d117      	bne.n	800584c <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800581c:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <IM_ENC_DIRF_Handler+0x50>)
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	4a0d      	ldr	r2, [pc, #52]	; (800585c <IM_ENC_DIRF_Handler+0x54>)
 8005826:	8812      	ldrh	r2, [r2, #0]
 8005828:	1a9b      	subs	r3, r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	dd0b      	ble.n	8005846 <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 800582e:	2005      	movs	r0, #5
 8005830:	f7ff f9be 	bl	8004bb0 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8005834:	480a      	ldr	r0, [pc, #40]	; (8005860 <IM_ENC_DIRF_Handler+0x58>)
 8005836:	f00c fb37 	bl	8011ea8 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 800583a:	4b06      	ldr	r3, [pc, #24]	; (8005854 <IM_ENC_DIRF_Handler+0x4c>)
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	4a05      	ldr	r2, [pc, #20]	; (8005854 <IM_ENC_DIRF_Handler+0x4c>)
 8005840:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005844:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 8005846:	4a05      	ldr	r2, [pc, #20]	; (800585c <IM_ENC_DIRF_Handler+0x54>)
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	8013      	strh	r3, [r2, #0]


	}


}
 800584c:	bf00      	nop
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40012c00 	.word	0x40012c00
 8005858:	40014400 	.word	0x40014400
 800585c:	20001e68 	.word	0x20001e68
 8005860:	08015c80 	.word	0x08015c80

08005864 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8005868:	4b03      	ldr	r3, [pc, #12]	; (8005878 <BO_GetBiasPolarity+0x14>)
 800586a:	781b      	ldrb	r3, [r3, #0]
}
 800586c:	4618      	mov	r0, r3
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000002 	.word	0x20000002

0800587c <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 800587c:	b480      	push	{r7}
 800587e:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005880:	4b03      	ldr	r3, [pc, #12]	; (8005890 <BO_GetDcBiasEncoderValue+0x14>)
 8005882:	881b      	ldrh	r3, [r3, #0]
}
 8005884:	4618      	mov	r0, r3
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	20000004 	.word	0x20000004

08005894 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	4603      	mov	r3, r0
 800589c:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 800589e:	2000      	movs	r0, #0
 80058a0:	f001 fb9c 	bl	8006fdc <SM_GetEncoderValue>
 80058a4:	4603      	mov	r3, r0
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b1b      	ldr	r3, [pc, #108]	; (8005918 <BO_MapEncoderPositionToSignalOutput+0x84>)
 80058aa:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 80058ac:	88fb      	ldrh	r3, [r7, #6]
 80058ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80058b2:	d214      	bcs.n	80058de <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80058b4:	4b19      	ldr	r3, [pc, #100]	; (800591c <BO_MapEncoderPositionToSignalOutput+0x88>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80058c8:	2200      	movs	r2, #0
 80058ca:	2110      	movs	r1, #16
 80058cc:	4814      	ldr	r0, [pc, #80]	; (8005920 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80058ce:	f005 fd6f 	bl	800b3b0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80058d2:	2201      	movs	r2, #1
 80058d4:	2108      	movs	r1, #8
 80058d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80058da:	f006 fd91 	bl	800c400 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80058e4:	d314      	bcc.n	8005910 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80058e6:	4b0d      	ldr	r3, [pc, #52]	; (800591c <BO_MapEncoderPositionToSignalOutput+0x88>)
 80058e8:	2201      	movs	r2, #1
 80058ea:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80058ec:	88fb      	ldrh	r3, [r7, #6]
 80058ee:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80058f2:	4613      	mov	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4413      	add	r3, r2
 80058f8:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80058fa:	2200      	movs	r2, #0
 80058fc:	2110      	movs	r1, #16
 80058fe:	4808      	ldr	r0, [pc, #32]	; (8005920 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 8005900:	f005 fd56 	bl	800b3b0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 8005904:	2200      	movs	r2, #0
 8005906:	2108      	movs	r1, #8
 8005908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800590c:	f006 fd78 	bl	800c400 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	20000004 	.word	0x20000004
 800591c:	20000002 	.word	0x20000002
 8005920:	2000266c 	.word	0x2000266c

08005924 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8005924:	b580      	push	{r7, lr}
 8005926:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8005928:	2110      	movs	r1, #16
 800592a:	4803      	ldr	r0, [pc, #12]	; (8005938 <BO_GetOutputBias+0x14>)
 800592c:	f005 fd86 	bl	800b43c <HAL_DAC_GetValue>
 8005930:	4603      	mov	r3, r0
}
 8005932:	4618      	mov	r0, r3
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	2000266c 	.word	0x2000266c

0800593c <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	e06b      	b.n	8005a20 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 8005948:	493a      	ldr	r1, [pc, #232]	; (8005a34 <FreqO_InitFreqProfiles+0xf8>)
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	4613      	mov	r3, r2
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	440b      	add	r3, r1
 8005956:	3308      	adds	r3, #8
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d129      	bne.n	80059b2 <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 800595e:	4935      	ldr	r1, [pc, #212]	; (8005a34 <FreqO_InitFreqProfiles+0xf8>)
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	440b      	add	r3, r1
 800596c:	3304      	adds	r3, #4
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a31      	ldr	r2, [pc, #196]	; (8005a38 <FreqO_InitFreqProfiles+0xfc>)
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	ee07 3a90 	vmov	s15, r3
 800597a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800597e:	492d      	ldr	r1, [pc, #180]	; (8005a34 <FreqO_InitFreqProfiles+0xf8>)
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	4613      	mov	r3, r2
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	440b      	add	r3, r1
 800598c:	3310      	adds	r3, #16
 800598e:	edd3 7a00 	vldr	s15, [r3]
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800599a:	ee17 0a90 	vmov	r0, s15
 800599e:	4925      	ldr	r1, [pc, #148]	; (8005a34 <FreqO_InitFreqProfiles+0xf8>)
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	4613      	mov	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4413      	add	r3, r2
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	440b      	add	r3, r1
 80059ac:	330c      	adds	r3, #12
 80059ae:	6018      	str	r0, [r3, #0]
 80059b0:	e033      	b.n	8005a1a <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 80059b2:	4920      	ldr	r1, [pc, #128]	; (8005a34 <FreqO_InitFreqProfiles+0xf8>)
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	440b      	add	r3, r1
 80059c0:	3304      	adds	r3, #4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1c      	ldr	r2, [pc, #112]	; (8005a38 <FreqO_InitFreqProfiles+0xfc>)
 80059c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80059ca:	481a      	ldr	r0, [pc, #104]	; (8005a34 <FreqO_InitFreqProfiles+0xf8>)
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4403      	add	r3, r0
 80059d8:	3308      	adds	r3, #8
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80059e0:	ee07 3a90 	vmov	s15, r3
 80059e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059e8:	4912      	ldr	r1, [pc, #72]	; (8005a34 <FreqO_InitFreqProfiles+0xf8>)
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	4613      	mov	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	440b      	add	r3, r1
 80059f6:	3310      	adds	r3, #16
 80059f8:	edd3 7a00 	vldr	s15, [r3]
 80059fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a04:	ee17 0a90 	vmov	r0, s15
 8005a08:	490a      	ldr	r1, [pc, #40]	; (8005a34 <FreqO_InitFreqProfiles+0xf8>)
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	330c      	adds	r3, #12
 8005a18:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b0d      	cmp	r3, #13
 8005a24:	dd90      	ble.n	8005948 <FreqO_InitFreqProfiles+0xc>
	}
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000008 	.word	0x20000008
 8005a38:	00155cc0 	.word	0x00155cc0

08005a3c <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	4603      	mov	r3, r0
 8005a44:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 8005a46:	4b1b      	ldr	r3, [pc, #108]	; (8005ab4 <FreqO_MapEncoderPositionCoarse+0x78>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8005a4e:	4b1a      	ldr	r3, [pc, #104]	; (8005ab8 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005a50:	881b      	ldrh	r3, [r3, #0]
 8005a52:	88fa      	ldrh	r2, [r7, #6]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d910      	bls.n	8005a7a <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b0d      	cmp	r3, #13
 8005a62:	d901      	bls.n	8005a68 <FreqO_MapEncoderPositionCoarse+0x2c>
 8005a64:	230d      	movs	r3, #13
 8005a66:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 f945 	bl	8005cf8 <FreqO_GetProfileByIndex>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f872 	bl	8005b5c <FreqO_ApplyProfile>
 8005a78:	e014      	b.n	8005aa4 <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 8005a7a:	4b0f      	ldr	r3, [pc, #60]	; (8005ab8 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005a7c:	881b      	ldrh	r3, [r3, #0]
 8005a7e:	88fa      	ldrh	r2, [r7, #6]
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d20f      	bcs.n	8005aa4 <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2b0d      	cmp	r3, #13
 8005a8e:	d901      	bls.n	8005a94 <FreqO_MapEncoderPositionCoarse+0x58>
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f92f 	bl	8005cf8 <FreqO_GetProfileByIndex>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f000 f85c 	bl	8005b5c <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005aa4:	4a04      	ldr	r2, [pc, #16]	; (8005ab8 <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005aa6:	88fb      	ldrh	r3, [r7, #6]
 8005aa8:	8013      	strh	r3, [r2, #0]

}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000120 	.word	0x20000120
 8005ab8:	20001e6a 	.word	0x20001e6a

08005abc <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005ac6:	4b0e      	ldr	r3, [pc, #56]	; (8005b00 <FreqO_MapEncoderPositionFine+0x44>)
 8005ac8:	881b      	ldrh	r3, [r3, #0]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d904      	bls.n	8005ada <FreqO_MapEncoderPositionFine+0x1e>
	{
		OUTPUT_TIMER->ARR++;
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	; (8005b04 <FreqO_MapEncoderPositionFine+0x48>)
 8005ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad4:	3201      	adds	r2, #1
 8005ad6:	62da      	str	r2, [r3, #44]	; 0x2c
 8005ad8:	e008      	b.n	8005aec <FreqO_MapEncoderPositionFine+0x30>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 8005ada:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <FreqO_MapEncoderPositionFine+0x44>)
 8005adc:	881b      	ldrh	r3, [r3, #0]
 8005ade:	88fa      	ldrh	r2, [r7, #6]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d203      	bcs.n	8005aec <FreqO_MapEncoderPositionFine+0x30>
	{
		OUTPUT_TIMER->ARR--;
 8005ae4:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <FreqO_MapEncoderPositionFine+0x48>)
 8005ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae8:	3a01      	subs	r2, #1
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005aec:	4a04      	ldr	r2, [pc, #16]	; (8005b00 <FreqO_MapEncoderPositionFine+0x44>)
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	8013      	strh	r3, [r2, #0]

}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	20001e6a 	.word	0x20001e6a
 8005b04:	40013400 	.word	0x40013400

08005b08 <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b14:	881b      	ldrh	r3, [r3, #0]
 8005b16:	88fa      	ldrh	r2, [r7, #6]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d904      	bls.n	8005b26 <FreqO_MapEncoderPositionToPrescaler+0x1e>
	{
		OUTPUT_TIMER->PSC++;
 8005b1c:	4b0e      	ldr	r3, [pc, #56]	; (8005b58 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b20:	3201      	adds	r2, #1
 8005b22:	629a      	str	r2, [r3, #40]	; 0x28
 8005b24:	e00c      	b.n	8005b40 <FreqO_MapEncoderPositionToPrescaler+0x38>

	}
	else if (pEncValue < freq_last_encoder_value)
 8005b26:	4b0b      	ldr	r3, [pc, #44]	; (8005b54 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	88fa      	ldrh	r2, [r7, #6]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d207      	bcs.n	8005b40 <FreqO_MapEncoderPositionToPrescaler+0x38>
	{
		if(OUTPUT_TIMER->PSC > 0)
 8005b30:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <FreqO_MapEncoderPositionToPrescaler+0x38>
			OUTPUT_TIMER->PSC--;
 8005b38:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3c:	3a01      	subs	r2, #1
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005b40:	4a04      	ldr	r2, [pc, #16]	; (8005b54 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	8013      	strh	r3, [r2, #0]

}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	20001e6a 	.word	0x20001e6a
 8005b58:	40013400 	.word	0x40013400

08005b5c <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f899 	bl	8005c9c <FreqO_FindFPresetObject>
 8005b6a:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d024      	beq.n	8005bbc <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8005b72:	4a16      	ldr	r2, [pc, #88]	; (8005bcc <FreqO_ApplyProfile+0x70>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 8005b7a:	4a14      	ldr	r2, [pc, #80]	; (8005bcc <FreqO_ApplyProfile+0x70>)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005b82:	2001      	movs	r0, #1
 8005b84:	f000 ffae 	bl	8006ae4 <SM_GetOutputChannel>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	2b06      	cmp	r3, #6
 8005b96:	d10d      	bne.n	8005bb4 <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 8005b98:	4b0d      	ldr	r3, [pc, #52]	; (8005bd0 <FreqO_ApplyProfile+0x74>)
 8005b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b9e:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <FreqO_ApplyProfile+0x74>)
 8005ba6:	085b      	lsrs	r3, r3, #1
 8005ba8:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005baa:	4b09      	ldr	r3, [pc, #36]	; (8005bd0 <FreqO_ApplyProfile+0x74>)
 8005bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bae:	4a08      	ldr	r2, [pc, #32]	; (8005bd0 <FreqO_ApplyProfile+0x74>)
 8005bb0:	085b      	lsrs	r3, r3, #1
 8005bb2:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005bb4:	4a07      	ldr	r2, [pc, #28]	; (8005bd4 <FreqO_ApplyProfile+0x78>)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 8005bba:	e002      	b.n	8005bc2 <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 8005bbc:	4806      	ldr	r0, [pc, #24]	; (8005bd8 <FreqO_ApplyProfile+0x7c>)
 8005bbe:	f7fb fe95 	bl	80018ec <DM_SetErrorDebugMsg>
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40013400 	.word	0x40013400
 8005bd0:	40000400 	.word	0x40000400
 8005bd4:	20000120 	.word	0x20000120
 8005bd8:	08015c98 	.word	0x08015c98

08005bdc <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 8005be2:	2000      	movs	r0, #0
 8005be4:	f001 f9fa 	bl	8006fdc <SM_GetEncoderValue>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff ff66 	bl	8005abc <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f000 ff77 	bl	8006ae4 <SM_GetOutputChannel>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005c00:	79fb      	ldrb	r3, [r7, #7]
 8005c02:	2b06      	cmp	r3, #6
 8005c04:	d110      	bne.n	8005c28 <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <FreqO_AdjustFreq+0x54>)
 8005c08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c0c:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005c0e:	2000      	movs	r0, #0
 8005c10:	f001 f9e4 	bl	8006fdc <SM_GetEncoderValue>
 8005c14:	4603      	mov	r3, r0
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	b29a      	uxth	r2, r3
 8005c1a:	4b05      	ldr	r3, [pc, #20]	; (8005c30 <FreqO_AdjustFreq+0x54>)
 8005c1c:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005c1e:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <FreqO_AdjustFreq+0x54>)
 8005c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c22:	4a03      	ldr	r2, [pc, #12]	; (8005c30 <FreqO_AdjustFreq+0x54>)
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005c28:	bf00      	nop
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	40000400 	.word	0x40000400

08005c34 <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f001 f9ce 	bl	8006fdc <SM_GetEncoderValue>
 8005c40:	4603      	mov	r3, r0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff ff60 	bl	8005b08 <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005c48:	2001      	movs	r0, #1
 8005c4a:	f000 ff4b 	bl	8006ae4 <SM_GetOutputChannel>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 8005c58:	79fb      	ldrb	r3, [r7, #7]
 8005c5a:	2b06      	cmp	r3, #6
 8005c5c:	d10c      	bne.n	8005c78 <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005c5e:	2000      	movs	r0, #0
 8005c60:	f001 f9bc 	bl	8006fdc <SM_GetEncoderValue>
 8005c64:	4603      	mov	r3, r0
 8005c66:	085b      	lsrs	r3, r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <FreqO_AdjustPrescaler+0x4c>)
 8005c6c:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005c6e:	4b04      	ldr	r3, [pc, #16]	; (8005c80 <FreqO_AdjustPrescaler+0x4c>)
 8005c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c72:	4a03      	ldr	r2, [pc, #12]	; (8005c80 <FreqO_AdjustPrescaler+0x4c>)
 8005c74:	085b      	lsrs	r3, r3, #1
 8005c76:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 8005c78:	bf00      	nop
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40000400 	.word	0x40000400

08005c84 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
	return freq_profile;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <FreqO_GetFPresetObject+0x14>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
 8005c96:	bf00      	nop
 8005c98:	20000120 	.word	0x20000120

08005c9c <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	60fb      	str	r3, [r7, #12]
 8005ca8:	e016      	b.n	8005cd8 <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8005caa:	4911      	ldr	r1, [pc, #68]	; (8005cf0 <FreqO_FindFPresetObject+0x54>)
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	3304      	adds	r3, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d107      	bne.n	8005cd2 <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4a08      	ldr	r2, [pc, #32]	; (8005cf0 <FreqO_FindFPresetObject+0x54>)
 8005cce:	4413      	add	r3, r2
 8005cd0:	e009      	b.n	8005ce6 <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	60fb      	str	r3, [r7, #12]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b0d      	cmp	r3, #13
 8005cdc:	dde5      	ble.n	8005caa <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8005cde:	4805      	ldr	r0, [pc, #20]	; (8005cf4 <FreqO_FindFPresetObject+0x58>)
 8005ce0:	f7fb fe04 	bl	80018ec <DM_SetErrorDebugMsg>
	return 0;
 8005ce4:	2300      	movs	r3, #0
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000008 	.word	0x20000008
 8005cf4:	08015cc0 	.word	0x08015cc0

08005cf8 <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	4613      	mov	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	4a04      	ldr	r2, [pc, #16]	; (8005d1c <FreqO_GetProfileByIndex+0x24>)
 8005d0c:	4413      	add	r3, r2
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	20000008 	.word	0x20000008

08005d20 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005d20:	b480      	push	{r7}
 8005d22:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <FreqO_ResetLastEncoderValue+0x14>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	801a      	strh	r2, [r3, #0]
}
 8005d2a:	bf00      	nop
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	20001e6a 	.word	0x20001e6a

08005d38 <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 8005d38:	b480      	push	{r7}
 8005d3a:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005d3c:	4b10      	ldr	r3, [pc, #64]	; (8005d80 <FS_SetSweepModeDown+0x48>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a0f      	ldr	r2, [pc, #60]	; (8005d80 <FS_SetSweepModeDown+0x48>)
 8005d42:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005d46:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8005d48:	4b0d      	ldr	r3, [pc, #52]	; (8005d80 <FS_SetSweepModeDown+0x48>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a0c      	ldr	r2, [pc, #48]	; (8005d80 <FS_SetSweepModeDown+0x48>)
 8005d4e:	f043 0310 	orr.w	r3, r3, #16
 8005d52:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <FS_SetSweepModeDown+0x4c>)
 8005d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <FS_SetSweepModeDown+0x50>)
 8005d62:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8005d66:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <FS_SetSweepModeDown+0x54>)
 8005d68:	4a09      	ldr	r2, [pc, #36]	; (8005d90 <FS_SetSweepModeDown+0x58>)
 8005d6a:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005d6c:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <FS_SetSweepModeDown+0x5c>)
 8005d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d72:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005d74:	bf00      	nop
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
 8005d7e:	bf00      	nop
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40013400 	.word	0x40013400
 8005d88:	20000124 	.word	0x20000124
 8005d8c:	20000128 	.word	0x20000128
 8005d90:	477fff00 	.word	0x477fff00
 8005d94:	40012c00 	.word	0x40012c00

08005d98 <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005d9c:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <FS_SetSweepModeUp+0x40>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a0d      	ldr	r2, [pc, #52]	; (8005dd8 <FS_SetSweepModeUp+0x40>)
 8005da2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005da6:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <FS_SetSweepModeUp+0x40>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a0a      	ldr	r2, [pc, #40]	; (8005dd8 <FS_SetSweepModeUp+0x40>)
 8005dae:	f023 0310 	bic.w	r3, r3, #16
 8005db2:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005db4:	4b09      	ldr	r3, [pc, #36]	; (8005ddc <FS_SetSweepModeUp+0x44>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	ee07 3a90 	vmov	s15, r3
 8005dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dc0:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <FS_SetSweepModeUp+0x48>)
 8005dc2:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8005dc6:	4b07      	ldr	r3, [pc, #28]	; (8005de4 <FS_SetSweepModeUp+0x4c>)
 8005dc8:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <FS_SetSweepModeUp+0x50>)
 8005dca:	601a      	str	r2, [r3, #0]


}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	40000c00 	.word	0x40000c00
 8005ddc:	40013400 	.word	0x40013400
 8005de0:	20000128 	.word	0x20000128
 8005de4:	20000124 	.word	0x20000124
 8005de8:	41500000 	.word	0x41500000

08005dec <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8005df6:	79fb      	ldrb	r3, [r7, #7]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d038      	beq.n	8005e6e <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005dfc:	4a24      	ldr	r2, [pc, #144]	; (8005e90 <FS_SetEncoderControlMode+0xa4>)
 8005dfe:	79fb      	ldrb	r3, [r7, #7]
 8005e00:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <FS_SetEncoderControlMode+0xa8>)
 8005e04:	220d      	movs	r2, #13
 8005e06:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8005e08:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <FS_SetEncoderControlMode+0xa8>)
 8005e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e0e:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8005e10:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <FS_SetEncoderControlMode+0xac>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <FS_SetEncoderControlMode+0x32>
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d014      	beq.n	8005e46 <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005e1c:	e031      	b.n	8005e82 <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005e1e:	4b1d      	ldr	r3, [pc, #116]	; (8005e94 <FS_SetEncoderControlMode+0xa8>)
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e2a:	4b1c      	ldr	r3, [pc, #112]	; (8005e9c <FS_SetEncoderControlMode+0xb0>)
 8005e2c:	edd3 7a00 	vldr	s15, [r3]
 8005e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e38:	dc00      	bgt.n	8005e3c <FS_SetEncoderControlMode+0x50>
				break;
 8005e3a:	e022      	b.n	8005e82 <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005e3c:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <FS_SetEncoderControlMode+0xb4>)
 8005e3e:	4a15      	ldr	r2, [pc, #84]	; (8005e94 <FS_SetEncoderControlMode+0xa8>)
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005e44:	e01d      	b.n	8005e82 <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005e46:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <FS_SetEncoderControlMode+0xa8>)
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e52:	4b14      	ldr	r3, [pc, #80]	; (8005ea4 <FS_SetEncoderControlMode+0xb8>)
 8005e54:	edd3 7a00 	vldr	s15, [r3]
 8005e58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e60:	d400      	bmi.n	8005e64 <FS_SetEncoderControlMode+0x78>
				break;
 8005e62:	e00e      	b.n	8005e82 <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <FS_SetEncoderControlMode+0xb4>)
 8005e66:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <FS_SetEncoderControlMode+0xa8>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005e6c:	e009      	b.n	8005e82 <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005e6e:	4a08      	ldr	r2, [pc, #32]	; (8005e90 <FS_SetEncoderControlMode+0xa4>)
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005e74:	4b07      	ldr	r3, [pc, #28]	; (8005e94 <FS_SetEncoderControlMode+0xa8>)
 8005e76:	2201      	movs	r2, #1
 8005e78:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005e7a:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <FS_SetEncoderControlMode+0xa8>)
 8005e7c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005e80:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	20001e59 	.word	0x20001e59
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	20001e58 	.word	0x20001e58
 8005e9c:	20000128 	.word	0x20000128
 8005ea0:	40013400 	.word	0x40013400
 8005ea4:	20000124 	.word	0x20000124

08005ea8 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005ea8:	b590      	push	{r4, r7, lr}
 8005eaa:	b085      	sub	sp, #20
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	4603      	mov	r3, r0
 8005eb0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005eb2:	79fb      	ldrb	r3, [r7, #7]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d122      	bne.n	8005efe <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005eb8:	4b17      	ldr	r3, [pc, #92]	; (8005f18 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7fa fb49 	bl	8000554 <__aeabi_ui2d>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005f08 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005eca:	ec44 3b10 	vmov	d0, r3, r4
 8005ece:	f00e f903 	bl	80140d8 <pow>
 8005ed2:	ec51 0b10 	vmov	r0, r1, d0
 8005ed6:	a30e      	add	r3, pc, #56	; (adr r3, 8005f10 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f9fe 	bl	80002dc <__adddf3>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	460c      	mov	r4, r1
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	f7fa fe86 	bl	8000bf8 <__aeabi_d2uiz>
 8005eec:	4603      	mov	r3, r0
 8005eee:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ef6:	d002      	beq.n	8005efe <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005ef8:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005efe:	bf00      	nop
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd90      	pop	{r4, r7, pc}
 8005f06:	bf00      	nop
 8005f08:	00000000 	.word	0x00000000
 8005f0c:	40080000 	.word	0x40080000
 8005f10:	00000000 	.word	0x00000000
 8005f14:	40d06800 	.word	0x40d06800
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40000c00 	.word	0x40000c00

08005f20 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005f20:	b480      	push	{r7}
 8005f22:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005f24:	4b13      	ldr	r3, [pc, #76]	; (8005f74 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10a      	bne.n	8005f42 <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005f2c:	4b11      	ldr	r3, [pc, #68]	; (8005f74 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	ee07 3a90 	vmov	s15, r3
 8005f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f38:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005f78 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f40:	e011      	b.n	8005f66 <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f46:	ee07 3a90 	vmov	s15, r3
 8005f4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f5e:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005f78 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005f66:	eeb0 0a67 	vmov.f32	s0, s15
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40000c00 	.word	0x40000c00
 8005f78:	4d2037a0 	.word	0x4d2037a0

08005f7c <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005f80:	4b03      	ldr	r3, [pc, #12]	; (8005f90 <FuncO_ResetLastEncoderValue+0x14>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	801a      	strh	r2, [r3, #0]
}
 8005f86:	bf00      	nop
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	20001e96 	.word	0x20001e96

08005f94 <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f000 fda0 	bl	8006ae4 <SM_GetOutputChannel>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005fae:	4b15      	ldr	r3, [pc, #84]	; (8006004 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005fb0:	881b      	ldrh	r3, [r3, #0]
 8005fb2:	88fa      	ldrh	r2, [r7, #6]
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d90c      	bls.n	8005fd2 <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005fbe:	7bfb      	ldrb	r3, [r7, #15]
 8005fc0:	2b05      	cmp	r3, #5
 8005fc2:	d901      	bls.n	8005fc8 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005fc4:	2305      	movs	r3, #5
 8005fc6:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 f856 	bl	800607c <FuncO_ApplyProfileToSignal>
 8005fd0:	e010      	b.n	8005ff4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	88fa      	ldrh	r2, [r7, #6]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d20b      	bcs.n	8005ff4 <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005fdc:	7bfb      	ldrb	r3, [r7, #15]
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	2b06      	cmp	r3, #6
 8005fe6:	d901      	bls.n	8005fec <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005fec:	7bfb      	ldrb	r3, [r7, #15]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 f844 	bl	800607c <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005ff4:	4a03      	ldr	r2, [pc, #12]	; (8006004 <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005ff6:	88fb      	ldrh	r3, [r7, #6]
 8005ff8:	8013      	strh	r3, [r2, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	20001e96 	.word	0x20001e96

08006008 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	4603      	mov	r3, r0
 8006010:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8006012:	2001      	movs	r0, #1
 8006014:	f000 fd66 	bl	8006ae4 <SM_GetOutputChannel>
 8006018:	4603      	mov	r3, r0
 800601a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8006022:	4b15      	ldr	r3, [pc, #84]	; (8006078 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	88fa      	ldrh	r2, [r7, #6]
 8006028:	429a      	cmp	r2, r3
 800602a:	d90c      	bls.n	8006046 <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 800602c:	7bfb      	ldrb	r3, [r7, #15]
 800602e:	3301      	adds	r3, #1
 8006030:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	2b06      	cmp	r3, #6
 8006036:	d901      	bls.n	800603c <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8006038:	2306      	movs	r3, #6
 800603a:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f880 	bl	8006144 <FuncO_ApplyProfileToAux>
 8006044:	e010      	b.n	8006068 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8006046:	4b0c      	ldr	r3, [pc, #48]	; (8006078 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	88fa      	ldrh	r2, [r7, #6]
 800604c:	429a      	cmp	r2, r3
 800604e:	d20b      	bcs.n	8006068 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
 8006052:	3b01      	subs	r3, #1
 8006054:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8006056:	7bfb      	ldrb	r3, [r7, #15]
 8006058:	2b06      	cmp	r3, #6
 800605a:	d901      	bls.n	8006060 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 800605c:	2300      	movs	r3, #0
 800605e:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	4618      	mov	r0, r3
 8006064:	f000 f86e 	bl	8006144 <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8006068:	4a03      	ldr	r2, [pc, #12]	; (8006078 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 800606a:	88fb      	ldrh	r3, [r7, #6]
 800606c:	8013      	strh	r3, [r2, #0]
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20001e96 	.word	0x20001e96

0800607c <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 800607c:	b590      	push	{r4, r7, lr}
 800607e:	b087      	sub	sp, #28
 8006080:	af02      	add	r7, sp, #8
 8006082:	4603      	mov	r3, r0
 8006084:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8006086:	79fc      	ldrb	r4, [r7, #7]
 8006088:	2000      	movs	r0, #0
 800608a:	f000 fd2b 	bl	8006ae4 <SM_GetOutputChannel>
 800608e:	4601      	mov	r1, r0
 8006090:	00e3      	lsls	r3, r4, #3
 8006092:	4a27      	ldr	r2, [pc, #156]	; (8006130 <FuncO_ApplyProfileToSignal+0xb4>)
 8006094:	4413      	add	r3, r2
 8006096:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 800609a:	4826      	ldr	r0, [pc, #152]	; (8006134 <FuncO_ApplyProfileToSignal+0xb8>)
 800609c:	f00b ff04 	bl	8011ea8 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80060a0:	79fc      	ldrb	r4, [r7, #7]
 80060a2:	2000      	movs	r0, #0
 80060a4:	f000 fd1e 	bl	8006ae4 <SM_GetOutputChannel>
 80060a8:	4601      	mov	r1, r0
 80060aa:	4a21      	ldr	r2, [pc, #132]	; (8006130 <FuncO_ApplyProfileToSignal+0xb4>)
 80060ac:	00e3      	lsls	r3, r4, #3
 80060ae:	4413      	add	r3, r2
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 80060b4:	2000      	movs	r0, #0
 80060b6:	f000 fd15 	bl	8006ae4 <SM_GetOutputChannel>
 80060ba:	4603      	mov	r3, r0
 80060bc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f001 f842 	bl	8007150 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 80060cc:	4b1a      	ldr	r3, [pc, #104]	; (8006138 <FuncO_ApplyProfileToSignal+0xbc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a19      	ldr	r2, [pc, #100]	; (8006138 <FuncO_ApplyProfileToSignal+0xbc>)
 80060d2:	f023 0301 	bic.w	r3, r3, #1
 80060d6:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80060d8:	2100      	movs	r1, #0
 80060da:	4818      	ldr	r0, [pc, #96]	; (800613c <FuncO_ApplyProfileToSignal+0xc0>)
 80060dc:	f005 f912 	bl	800b304 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80060e0:	2000      	movs	r0, #0
 80060e2:	f000 fcff 	bl	8006ae4 <SM_GetOutputChannel>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f103 0208 	add.w	r2, r3, #8
 80060ec:	2300      	movs	r3, #0
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	2378      	movs	r3, #120	; 0x78
 80060f2:	2100      	movs	r1, #0
 80060f4:	4811      	ldr	r0, [pc, #68]	; (800613c <FuncO_ApplyProfileToSignal+0xc0>)
 80060f6:	f005 f843 	bl	800b180 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80060fa:	2100      	movs	r1, #0
 80060fc:	4810      	ldr	r0, [pc, #64]	; (8006140 <FuncO_ApplyProfileToSignal+0xc4>)
 80060fe:	f005 f901 	bl	800b304 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006102:	2001      	movs	r0, #1
 8006104:	f000 fcee 	bl	8006ae4 <SM_GetOutputChannel>
 8006108:	4603      	mov	r3, r0
 800610a:	f103 0208 	add.w	r2, r3, #8
 800610e:	2300      	movs	r3, #0
 8006110:	9300      	str	r3, [sp, #0]
 8006112:	2378      	movs	r3, #120	; 0x78
 8006114:	2100      	movs	r1, #0
 8006116:	480a      	ldr	r0, [pc, #40]	; (8006140 <FuncO_ApplyProfileToSignal+0xc4>)
 8006118:	f005 f832 	bl	800b180 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 800611c:	4b06      	ldr	r3, [pc, #24]	; (8006138 <FuncO_ApplyProfileToSignal+0xbc>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a05      	ldr	r2, [pc, #20]	; (8006138 <FuncO_ApplyProfileToSignal+0xbc>)
 8006122:	f043 0301 	orr.w	r3, r3, #1
 8006126:	6013      	str	r3, [r2, #0]



}
 8006128:	bf00      	nop
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	bd90      	pop	{r4, r7, pc}
 8006130:	2000012c 	.word	0x2000012c
 8006134:	08015cf0 	.word	0x08015cf0
 8006138:	40013400 	.word	0x40013400
 800613c:	2000266c 	.word	0x2000266c
 8006140:	20002658 	.word	0x20002658

08006144 <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8006144:	b590      	push	{r4, r7, lr}
 8006146:	b087      	sub	sp, #28
 8006148:	af02      	add	r7, sp, #8
 800614a:	4603      	mov	r3, r0
 800614c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 800614e:	79fc      	ldrb	r4, [r7, #7]
 8006150:	2001      	movs	r0, #1
 8006152:	f000 fcc7 	bl	8006ae4 <SM_GetOutputChannel>
 8006156:	4601      	mov	r1, r0
 8006158:	00e3      	lsls	r3, r4, #3
 800615a:	4a96      	ldr	r2, [pc, #600]	; (80063b4 <FuncO_ApplyProfileToAux+0x270>)
 800615c:	4413      	add	r3, r2
 800615e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8006162:	79fb      	ldrb	r3, [r7, #7]
 8006164:	2b06      	cmp	r3, #6
 8006166:	d10a      	bne.n	800617e <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8006168:	4893      	ldr	r0, [pc, #588]	; (80063b8 <FuncO_ApplyProfileToAux+0x274>)
 800616a:	f00b fe9d 	bl	8011ea8 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 800616e:	f000 ff21 	bl	8006fb4 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8006172:	f000 fccd 	bl	8006b10 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8006176:	4b91      	ldr	r3, [pc, #580]	; (80063bc <FuncO_ApplyProfileToAux+0x278>)
 8006178:	2201      	movs	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 800617c:	e115      	b.n	80063aa <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 800617e:	4b8f      	ldr	r3, [pc, #572]	; (80063bc <FuncO_ApplyProfileToAux+0x278>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 808e 	beq.w	80062a4 <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8006188:	488d      	ldr	r0, [pc, #564]	; (80063c0 <FuncO_ApplyProfileToAux+0x27c>)
 800618a:	f00b fe8d 	bl	8011ea8 <puts>
		SM_DisablePwmToAux();
 800618e:	f000 fdfb 	bl	8006d88 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8006192:	f000 fe35 	bl	8006e00 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8006196:	488b      	ldr	r0, [pc, #556]	; (80063c4 <FuncO_ApplyProfileToAux+0x280>)
 8006198:	f00b fe86 	bl	8011ea8 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 800619c:	79fc      	ldrb	r4, [r7, #7]
 800619e:	2001      	movs	r0, #1
 80061a0:	f000 fca0 	bl	8006ae4 <SM_GetOutputChannel>
 80061a4:	4601      	mov	r1, r0
 80061a6:	4a83      	ldr	r2, [pc, #524]	; (80063b4 <FuncO_ApplyProfileToAux+0x270>)
 80061a8:	00e3      	lsls	r3, r4, #3
 80061aa:	4413      	add	r3, r2
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80061b0:	4884      	ldr	r0, [pc, #528]	; (80063c4 <FuncO_ApplyProfileToAux+0x280>)
 80061b2:	f00b fe79 	bl	8011ea8 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80061b6:	2001      	movs	r0, #1
 80061b8:	f000 fc94 	bl	8006ae4 <SM_GetOutputChannel>
 80061bc:	4603      	mov	r3, r0
 80061be:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 80061c6:	4880      	ldr	r0, [pc, #512]	; (80063c8 <FuncO_ApplyProfileToAux+0x284>)
 80061c8:	f00b fdfa 	bl	8011dc0 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80061cc:	7b7b      	ldrb	r3, [r7, #13]
 80061ce:	4618      	mov	r0, r3
 80061d0:	f000 ffec 	bl	80071ac <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 80061d4:	487d      	ldr	r0, [pc, #500]	; (80063cc <FuncO_ApplyProfileToAux+0x288>)
 80061d6:	f00b fe67 	bl	8011ea8 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 80061da:	487d      	ldr	r0, [pc, #500]	; (80063d0 <FuncO_ApplyProfileToAux+0x28c>)
 80061dc:	f007 fa38 	bl	800d650 <HAL_TIM_Base_Stop>
 80061e0:	4603      	mov	r3, r0
 80061e2:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80061e4:	7bbb      	ldrb	r3, [r7, #14]
 80061e6:	4619      	mov	r1, r3
 80061e8:	487a      	ldr	r0, [pc, #488]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 80061ea:	f00b fde9 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80061ee:	487a      	ldr	r0, [pc, #488]	; (80063d8 <FuncO_ApplyProfileToAux+0x294>)
 80061f0:	f00b fe5a 	bl	8011ea8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80061f4:	2100      	movs	r1, #0
 80061f6:	4879      	ldr	r0, [pc, #484]	; (80063dc <FuncO_ApplyProfileToAux+0x298>)
 80061f8:	f005 f884 	bl	800b304 <HAL_DAC_Stop_DMA>
 80061fc:	4603      	mov	r3, r0
 80061fe:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	4619      	mov	r1, r3
 8006204:	4873      	ldr	r0, [pc, #460]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 8006206:	f00b fddb 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 800620a:	4875      	ldr	r0, [pc, #468]	; (80063e0 <FuncO_ApplyProfileToAux+0x29c>)
 800620c:	f00b fe4c 	bl	8011ea8 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006210:	2001      	movs	r0, #1
 8006212:	f000 fc67 	bl	8006ae4 <SM_GetOutputChannel>
 8006216:	4603      	mov	r3, r0
 8006218:	f103 0208 	add.w	r2, r3, #8
 800621c:	2300      	movs	r3, #0
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	2378      	movs	r3, #120	; 0x78
 8006222:	2100      	movs	r1, #0
 8006224:	486d      	ldr	r0, [pc, #436]	; (80063dc <FuncO_ApplyProfileToAux+0x298>)
 8006226:	f004 ffab 	bl	800b180 <HAL_DAC_Start_DMA>
 800622a:	4603      	mov	r3, r0
 800622c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800622e:	7bbb      	ldrb	r3, [r7, #14]
 8006230:	4619      	mov	r1, r3
 8006232:	4868      	ldr	r0, [pc, #416]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 8006234:	f00b fdc4 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006238:	486a      	ldr	r0, [pc, #424]	; (80063e4 <FuncO_ApplyProfileToAux+0x2a0>)
 800623a:	f00b fe35 	bl	8011ea8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800623e:	2100      	movs	r1, #0
 8006240:	4869      	ldr	r0, [pc, #420]	; (80063e8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006242:	f005 f85f 	bl	800b304 <HAL_DAC_Stop_DMA>
 8006246:	4603      	mov	r3, r0
 8006248:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800624a:	7bbb      	ldrb	r3, [r7, #14]
 800624c:	4619      	mov	r1, r3
 800624e:	4861      	ldr	r0, [pc, #388]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 8006250:	f00b fdb6 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006254:	4865      	ldr	r0, [pc, #404]	; (80063ec <FuncO_ApplyProfileToAux+0x2a8>)
 8006256:	f00b fe27 	bl	8011ea8 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800625a:	2000      	movs	r0, #0
 800625c:	f000 fc42 	bl	8006ae4 <SM_GetOutputChannel>
 8006260:	4603      	mov	r3, r0
 8006262:	f103 0208 	add.w	r2, r3, #8
 8006266:	2300      	movs	r3, #0
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	2378      	movs	r3, #120	; 0x78
 800626c:	2100      	movs	r1, #0
 800626e:	485e      	ldr	r0, [pc, #376]	; (80063e8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006270:	f004 ff86 	bl	800b180 <HAL_DAC_Start_DMA>
 8006274:	4603      	mov	r3, r0
 8006276:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006278:	7bbb      	ldrb	r3, [r7, #14]
 800627a:	4619      	mov	r1, r3
 800627c:	4855      	ldr	r0, [pc, #340]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 800627e:	f00b fd9f 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8006282:	485b      	ldr	r0, [pc, #364]	; (80063f0 <FuncO_ApplyProfileToAux+0x2ac>)
 8006284:	f00b fe10 	bl	8011ea8 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8006288:	4851      	ldr	r0, [pc, #324]	; (80063d0 <FuncO_ApplyProfileToAux+0x28c>)
 800628a:	f007 f9b3 	bl	800d5f4 <HAL_TIM_Base_Start>
 800628e:	4603      	mov	r3, r0
 8006290:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006292:	7bbb      	ldrb	r3, [r7, #14]
 8006294:	4619      	mov	r1, r3
 8006296:	484f      	ldr	r0, [pc, #316]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 8006298:	f00b fd92 	bl	8011dc0 <iprintf>
		last_output_mode_was_pwm = 0;
 800629c:	4b47      	ldr	r3, [pc, #284]	; (80063bc <FuncO_ApplyProfileToAux+0x278>)
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
}
 80062a2:	e082      	b.n	80063aa <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80062a4:	4847      	ldr	r0, [pc, #284]	; (80063c4 <FuncO_ApplyProfileToAux+0x280>)
 80062a6:	f00b fdff 	bl	8011ea8 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 80062aa:	79fc      	ldrb	r4, [r7, #7]
 80062ac:	2001      	movs	r0, #1
 80062ae:	f000 fc19 	bl	8006ae4 <SM_GetOutputChannel>
 80062b2:	4601      	mov	r1, r0
 80062b4:	4a3f      	ldr	r2, [pc, #252]	; (80063b4 <FuncO_ApplyProfileToAux+0x270>)
 80062b6:	00e3      	lsls	r3, r4, #3
 80062b8:	4413      	add	r3, r2
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 80062be:	4841      	ldr	r0, [pc, #260]	; (80063c4 <FuncO_ApplyProfileToAux+0x280>)
 80062c0:	f00b fdf2 	bl	8011ea8 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80062c4:	2001      	movs	r0, #1
 80062c6:	f000 fc0d 	bl	8006ae4 <SM_GetOutputChannel>
 80062ca:	4603      	mov	r3, r0
 80062cc:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80062d0:	781b      	ldrb	r3, [r3, #0]
 80062d2:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 80062d4:	483c      	ldr	r0, [pc, #240]	; (80063c8 <FuncO_ApplyProfileToAux+0x284>)
 80062d6:	f00b fd73 	bl	8011dc0 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 ff65 	bl	80071ac <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 80062e2:	483a      	ldr	r0, [pc, #232]	; (80063cc <FuncO_ApplyProfileToAux+0x288>)
 80062e4:	f00b fde0 	bl	8011ea8 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 80062e8:	4839      	ldr	r0, [pc, #228]	; (80063d0 <FuncO_ApplyProfileToAux+0x28c>)
 80062ea:	f007 f9b1 	bl	800d650 <HAL_TIM_Base_Stop>
 80062ee:	4603      	mov	r3, r0
 80062f0:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	4619      	mov	r1, r3
 80062f6:	4837      	ldr	r0, [pc, #220]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 80062f8:	f00b fd62 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 80062fc:	4836      	ldr	r0, [pc, #216]	; (80063d8 <FuncO_ApplyProfileToAux+0x294>)
 80062fe:	f00b fdd3 	bl	8011ea8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8006302:	2100      	movs	r1, #0
 8006304:	4835      	ldr	r0, [pc, #212]	; (80063dc <FuncO_ApplyProfileToAux+0x298>)
 8006306:	f004 fffd 	bl	800b304 <HAL_DAC_Stop_DMA>
 800630a:	4603      	mov	r3, r0
 800630c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800630e:	7bbb      	ldrb	r3, [r7, #14]
 8006310:	4619      	mov	r1, r3
 8006312:	4830      	ldr	r0, [pc, #192]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 8006314:	f00b fd54 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8006318:	4831      	ldr	r0, [pc, #196]	; (80063e0 <FuncO_ApplyProfileToAux+0x29c>)
 800631a:	f00b fdc5 	bl	8011ea8 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800631e:	2001      	movs	r0, #1
 8006320:	f000 fbe0 	bl	8006ae4 <SM_GetOutputChannel>
 8006324:	4603      	mov	r3, r0
 8006326:	f103 0208 	add.w	r2, r3, #8
 800632a:	2300      	movs	r3, #0
 800632c:	9300      	str	r3, [sp, #0]
 800632e:	2378      	movs	r3, #120	; 0x78
 8006330:	2100      	movs	r1, #0
 8006332:	482a      	ldr	r0, [pc, #168]	; (80063dc <FuncO_ApplyProfileToAux+0x298>)
 8006334:	f004 ff24 	bl	800b180 <HAL_DAC_Start_DMA>
 8006338:	4603      	mov	r3, r0
 800633a:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 800633c:	7bbb      	ldrb	r3, [r7, #14]
 800633e:	4619      	mov	r1, r3
 8006340:	4824      	ldr	r0, [pc, #144]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 8006342:	f00b fd3d 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006346:	4827      	ldr	r0, [pc, #156]	; (80063e4 <FuncO_ApplyProfileToAux+0x2a0>)
 8006348:	f00b fdae 	bl	8011ea8 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800634c:	2100      	movs	r1, #0
 800634e:	4826      	ldr	r0, [pc, #152]	; (80063e8 <FuncO_ApplyProfileToAux+0x2a4>)
 8006350:	f004 ffd8 	bl	800b304 <HAL_DAC_Stop_DMA>
 8006354:	4603      	mov	r3, r0
 8006356:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	4619      	mov	r1, r3
 800635c:	481d      	ldr	r0, [pc, #116]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 800635e:	f00b fd2f 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8006362:	4822      	ldr	r0, [pc, #136]	; (80063ec <FuncO_ApplyProfileToAux+0x2a8>)
 8006364:	f00b fda0 	bl	8011ea8 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8006368:	2000      	movs	r0, #0
 800636a:	f000 fbbb 	bl	8006ae4 <SM_GetOutputChannel>
 800636e:	4603      	mov	r3, r0
 8006370:	f103 0208 	add.w	r2, r3, #8
 8006374:	2300      	movs	r3, #0
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	2378      	movs	r3, #120	; 0x78
 800637a:	2100      	movs	r1, #0
 800637c:	481a      	ldr	r0, [pc, #104]	; (80063e8 <FuncO_ApplyProfileToAux+0x2a4>)
 800637e:	f004 feff 	bl	800b180 <HAL_DAC_Start_DMA>
 8006382:	4603      	mov	r3, r0
 8006384:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8006386:	7bbb      	ldrb	r3, [r7, #14]
 8006388:	4619      	mov	r1, r3
 800638a:	4812      	ldr	r0, [pc, #72]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 800638c:	f00b fd18 	bl	8011dc0 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8006390:	4817      	ldr	r0, [pc, #92]	; (80063f0 <FuncO_ApplyProfileToAux+0x2ac>)
 8006392:	f00b fd89 	bl	8011ea8 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8006396:	480e      	ldr	r0, [pc, #56]	; (80063d0 <FuncO_ApplyProfileToAux+0x28c>)
 8006398:	f007 f92c 	bl	800d5f4 <HAL_TIM_Base_Start>
 800639c:	4603      	mov	r3, r0
 800639e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	4619      	mov	r1, r3
 80063a4:	480b      	ldr	r0, [pc, #44]	; (80063d4 <FuncO_ApplyProfileToAux+0x290>)
 80063a6:	f00b fd0b 	bl	8011dc0 <iprintf>
}
 80063aa:	bf00      	nop
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd90      	pop	{r4, r7, pc}
 80063b2:	bf00      	nop
 80063b4:	2000012c 	.word	0x2000012c
 80063b8:	08015d04 	.word	0x08015d04
 80063bc:	20001e94 	.word	0x20001e94
 80063c0:	08015d2c 	.word	0x08015d2c
 80063c4:	08015d58 	.word	0x08015d58
 80063c8:	08015d84 	.word	0x08015d84
 80063cc:	08015d9c 	.word	0x08015d9c
 80063d0:	200027a4 	.word	0x200027a4
 80063d4:	08015dd0 	.word	0x08015dd0
 80063d8:	08015ddc 	.word	0x08015ddc
 80063dc:	20002658 	.word	0x20002658
 80063e0:	08015e20 	.word	0x08015e20
 80063e4:	08015e64 	.word	0x08015e64
 80063e8:	2000266c 	.word	0x2000266c
 80063ec:	08015ea8 	.word	0x08015ea8
 80063f0:	08015eec 	.word	0x08015eec

080063f4 <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 80063f4:	b480      	push	{r7}
 80063f6:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 80063f8:	4b03      	ldr	r3, [pc, #12]	; (8006408 <GO_ResetLastEncoderValue+0x14>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	801a      	strh	r2, [r3, #0]
}
 80063fe:	bf00      	nop
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr
 8006408:	20001e98 	.word	0x20001e98

0800640c <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	4603      	mov	r3, r0
 8006414:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8006416:	2000      	movs	r0, #0
 8006418:	f000 fb64 	bl	8006ae4 <SM_GetOutputChannel>
 800641c:	4603      	mov	r3, r0
 800641e:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 8006426:	4b15      	ldr	r3, [pc, #84]	; (800647c <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	88fa      	ldrh	r2, [r7, #6]
 800642c:	429a      	cmp	r2, r3
 800642e:	d90c      	bls.n	800644a <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8006430:	7bfb      	ldrb	r3, [r7, #15]
 8006432:	3301      	adds	r3, #1
 8006434:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
 8006438:	2b07      	cmp	r3, #7
 800643a:	d901      	bls.n	8006440 <GO_MapEncoderPositionToSignalOutput+0x34>
 800643c:	2307      	movs	r3, #7
 800643e:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 f81c 	bl	8006480 <GO_ApplyPresetToSignal>
 8006448:	e010      	b.n	800646c <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	88fa      	ldrh	r2, [r7, #6]
 8006450:	429a      	cmp	r2, r3
 8006452:	d20b      	bcs.n	800646c <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 8006454:	7bfb      	ldrb	r3, [r7, #15]
 8006456:	3b01      	subs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
 800645c:	2b07      	cmp	r3, #7
 800645e:	d901      	bls.n	8006464 <GO_MapEncoderPositionToSignalOutput+0x58>
 8006460:	2300      	movs	r3, #0
 8006462:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006464:	7bfb      	ldrb	r3, [r7, #15]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 f80a 	bl	8006480 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 800646c:	4a03      	ldr	r2, [pc, #12]	; (800647c <GO_MapEncoderPositionToSignalOutput+0x70>)
 800646e:	88fb      	ldrh	r3, [r7, #6]
 8006470:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 8006472:	bf00      	nop
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop
 800647c:	20001e98 	.word	0x20001e98

08006480 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8006480:	b590      	push	{r4, r7, lr}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 800648a:	79fc      	ldrb	r4, [r7, #7]
 800648c:	2000      	movs	r0, #0
 800648e:	f000 fb29 	bl	8006ae4 <SM_GetOutputChannel>
 8006492:	4601      	mov	r1, r0
 8006494:	4623      	mov	r3, r4
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4423      	add	r3, r4
 800649a:	4a4f      	ldr	r2, [pc, #316]	; (80065d8 <GO_ApplyPresetToSignal+0x158>)
 800649c:	4413      	add	r3, r2
 800649e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	2b07      	cmp	r3, #7
 80064a6:	f200 8093 	bhi.w	80065d0 <GO_ApplyPresetToSignal+0x150>
 80064aa:	a201      	add	r2, pc, #4	; (adr r2, 80064b0 <GO_ApplyPresetToSignal+0x30>)
 80064ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b0:	080064d1 	.word	0x080064d1
 80064b4:	080064f1 	.word	0x080064f1
 80064b8:	08006511 	.word	0x08006511
 80064bc:	08006531 	.word	0x08006531
 80064c0:	08006551 	.word	0x08006551
 80064c4:	08006571 	.word	0x08006571
 80064c8:	08006591 	.word	0x08006591
 80064cc:	080065b1 	.word	0x080065b1
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80064d0:	2200      	movs	r2, #0
 80064d2:	2101      	movs	r1, #1
 80064d4:	4841      	ldr	r0, [pc, #260]	; (80065dc <GO_ApplyPresetToSignal+0x15c>)
 80064d6:	f005 ff93 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80064da:	2200      	movs	r2, #0
 80064dc:	2120      	movs	r1, #32
 80064de:	4840      	ldr	r0, [pc, #256]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 80064e0:	f005 ff8e 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80064e4:	2200      	movs	r2, #0
 80064e6:	2110      	movs	r1, #16
 80064e8:	483d      	ldr	r0, [pc, #244]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 80064ea:	f005 ff89 	bl	800c400 <HAL_GPIO_WritePin>
			break;
 80064ee:	e06f      	b.n	80065d0 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80064f0:	2201      	movs	r2, #1
 80064f2:	2101      	movs	r1, #1
 80064f4:	4839      	ldr	r0, [pc, #228]	; (80065dc <GO_ApplyPresetToSignal+0x15c>)
 80064f6:	f005 ff83 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80064fa:	2200      	movs	r2, #0
 80064fc:	2120      	movs	r1, #32
 80064fe:	4838      	ldr	r0, [pc, #224]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 8006500:	f005 ff7e 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006504:	2200      	movs	r2, #0
 8006506:	2110      	movs	r1, #16
 8006508:	4835      	ldr	r0, [pc, #212]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 800650a:	f005 ff79 	bl	800c400 <HAL_GPIO_WritePin>
			break;
 800650e:	e05f      	b.n	80065d0 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006510:	2200      	movs	r2, #0
 8006512:	2101      	movs	r1, #1
 8006514:	4831      	ldr	r0, [pc, #196]	; (80065dc <GO_ApplyPresetToSignal+0x15c>)
 8006516:	f005 ff73 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800651a:	2201      	movs	r2, #1
 800651c:	2120      	movs	r1, #32
 800651e:	4830      	ldr	r0, [pc, #192]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 8006520:	f005 ff6e 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006524:	2200      	movs	r2, #0
 8006526:	2110      	movs	r1, #16
 8006528:	482d      	ldr	r0, [pc, #180]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 800652a:	f005 ff69 	bl	800c400 <HAL_GPIO_WritePin>
			break;
 800652e:	e04f      	b.n	80065d0 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006530:	2201      	movs	r2, #1
 8006532:	2101      	movs	r1, #1
 8006534:	4829      	ldr	r0, [pc, #164]	; (80065dc <GO_ApplyPresetToSignal+0x15c>)
 8006536:	f005 ff63 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800653a:	2201      	movs	r2, #1
 800653c:	2120      	movs	r1, #32
 800653e:	4828      	ldr	r0, [pc, #160]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 8006540:	f005 ff5e 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 8006544:	2200      	movs	r2, #0
 8006546:	2110      	movs	r1, #16
 8006548:	4825      	ldr	r0, [pc, #148]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 800654a:	f005 ff59 	bl	800c400 <HAL_GPIO_WritePin>
			break;
 800654e:	e03f      	b.n	80065d0 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006550:	2200      	movs	r2, #0
 8006552:	2101      	movs	r1, #1
 8006554:	4821      	ldr	r0, [pc, #132]	; (80065dc <GO_ApplyPresetToSignal+0x15c>)
 8006556:	f005 ff53 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800655a:	2200      	movs	r2, #0
 800655c:	2120      	movs	r1, #32
 800655e:	4820      	ldr	r0, [pc, #128]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 8006560:	f005 ff4e 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006564:	2201      	movs	r2, #1
 8006566:	2110      	movs	r1, #16
 8006568:	481d      	ldr	r0, [pc, #116]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 800656a:	f005 ff49 	bl	800c400 <HAL_GPIO_WritePin>
			break;
 800656e:	e02f      	b.n	80065d0 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006570:	2201      	movs	r2, #1
 8006572:	2101      	movs	r1, #1
 8006574:	4819      	ldr	r0, [pc, #100]	; (80065dc <GO_ApplyPresetToSignal+0x15c>)
 8006576:	f005 ff43 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 800657a:	2200      	movs	r2, #0
 800657c:	2120      	movs	r1, #32
 800657e:	4818      	ldr	r0, [pc, #96]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 8006580:	f005 ff3e 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 8006584:	2201      	movs	r2, #1
 8006586:	2110      	movs	r1, #16
 8006588:	4815      	ldr	r0, [pc, #84]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 800658a:	f005 ff39 	bl	800c400 <HAL_GPIO_WritePin>
			break;
 800658e:	e01f      	b.n	80065d0 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006590:	2200      	movs	r2, #0
 8006592:	2101      	movs	r1, #1
 8006594:	4811      	ldr	r0, [pc, #68]	; (80065dc <GO_ApplyPresetToSignal+0x15c>)
 8006596:	f005 ff33 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 800659a:	2201      	movs	r2, #1
 800659c:	2120      	movs	r1, #32
 800659e:	4810      	ldr	r0, [pc, #64]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 80065a0:	f005 ff2e 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80065a4:	2201      	movs	r2, #1
 80065a6:	2110      	movs	r1, #16
 80065a8:	480d      	ldr	r0, [pc, #52]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 80065aa:	f005 ff29 	bl	800c400 <HAL_GPIO_WritePin>
			break;
 80065ae:	e00f      	b.n	80065d0 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80065b0:	2201      	movs	r2, #1
 80065b2:	2101      	movs	r1, #1
 80065b4:	4809      	ldr	r0, [pc, #36]	; (80065dc <GO_ApplyPresetToSignal+0x15c>)
 80065b6:	f005 ff23 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80065ba:	2201      	movs	r2, #1
 80065bc:	2120      	movs	r1, #32
 80065be:	4808      	ldr	r0, [pc, #32]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 80065c0:	f005 ff1e 	bl	800c400 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80065c4:	2201      	movs	r2, #1
 80065c6:	2110      	movs	r1, #16
 80065c8:	4805      	ldr	r0, [pc, #20]	; (80065e0 <GO_ApplyPresetToSignal+0x160>)
 80065ca:	f005 ff19 	bl	800c400 <HAL_GPIO_WritePin>
			break;
 80065ce:	bf00      	nop
	}

}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd90      	pop	{r4, r7, pc}
 80065d8:	20000164 	.word	0x20000164
 80065dc:	48000400 	.word	0x48000400
 80065e0:	48000800 	.word	0x48000800

080065e4 <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	af00      	add	r7, sp, #0
	if(IT_GetTriggerStatus())
 80065e8:	f000 f8c0 	bl	800676c <IT_GetTriggerStatus>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d020      	beq.n	8006634 <IT_ArbitrateInputTrigger+0x50>
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
		// set status to disabled
*/

		// disable freq count timer
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80065f2:	2100      	movs	r1, #0
 80065f4:	483d      	ldr	r0, [pc, #244]	; (80066ec <IT_ArbitrateInputTrigger+0x108>)
 80065f6:	f007 fc7f 	bl	800def8 <HAL_TIM_IC_Stop_DMA>
//		INPUT_TIMER->DIER &= ~TIM_DIER_UDE;
//		INPUT_TIMER->CR1 &= ~TIM_CR1_CEN;

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 80065fa:	483d      	ldr	r0, [pc, #244]	; (80066f0 <IT_ArbitrateInputTrigger+0x10c>)
 80065fc:	f004 fb56 	bl	800acac <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 8006600:	483c      	ldr	r0, [pc, #240]	; (80066f4 <IT_ArbitrateInputTrigger+0x110>)
 8006602:	f003 f9fb 	bl	80099fc <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 8006606:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8006616:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006620:	f023 0308 	bic.w	r3, r3, #8
 8006624:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 8006626:	2000      	movs	r0, #0
 8006628:	f000 f8ac 	bl	8006784 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 800662c:	2000      	movs	r0, #0
 800662e:	f7ff fd25 	bl	800607c <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 8006632:	e059      	b.n	80066e8 <IT_ArbitrateInputTrigger+0x104>
		switch(IT_GetActiveTriggerMode())
 8006634:	f000 f87e 	bl	8006734 <IT_GetActiveTriggerMode>
 8006638:	4603      	mov	r3, r0
 800663a:	2b01      	cmp	r3, #1
 800663c:	d037      	beq.n	80066ae <IT_ArbitrateInputTrigger+0xca>
 800663e:	2b02      	cmp	r3, #2
 8006640:	d042      	beq.n	80066c8 <IT_ArbitrateInputTrigger+0xe4>
 8006642:	2b00      	cmp	r3, #0
 8006644:	d000      	beq.n	8006648 <IT_ArbitrateInputTrigger+0x64>
				break;
 8006646:	e04c      	b.n	80066e2 <IT_ArbitrateInputTrigger+0xfe>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006648:	2201      	movs	r2, #1
 800664a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800664e:	482a      	ldr	r0, [pc, #168]	; (80066f8 <IT_ArbitrateInputTrigger+0x114>)
 8006650:	f005 fed6 	bl	800c400 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 8006654:	2200      	movs	r2, #0
 8006656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800665a:	4827      	ldr	r0, [pc, #156]	; (80066f8 <IT_ArbitrateInputTrigger+0x114>)
 800665c:	f005 fed0 	bl	800c400 <HAL_GPIO_WritePin>
				HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, freq_count_store, MAX_FREQ_COUNT_STORE);
 8006660:	2308      	movs	r3, #8
 8006662:	4a26      	ldr	r2, [pc, #152]	; (80066fc <IT_ArbitrateInputTrigger+0x118>)
 8006664:	2100      	movs	r1, #0
 8006666:	4821      	ldr	r0, [pc, #132]	; (80066ec <IT_ArbitrateInputTrigger+0x108>)
 8006668:	f007 fab8 	bl	800dbdc <HAL_TIM_IC_Start_DMA>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset mode registers
 800666c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006676:	f023 0303 	bic.w	r3, r3, #3
 800667a:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 800667c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006686:	f043 0302 	orr.w	r3, r3, #2
 800668a:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset AF registers - See Table 13 "Alternate Functions" in STM32G474 datasheet
 800668c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006690:	6a1b      	ldr	r3, [r3, #32]
 8006692:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006696:	f023 031e 	bic.w	r3, r3, #30
 800669a:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF1_TIM2;		// set AF to TIM2_CH1
 800669c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80066a6:	f043 0301 	orr.w	r3, r3, #1
 80066aa:	6213      	str	r3, [r2, #32]
				break;
 80066ac:	e019      	b.n	80066e2 <IT_ArbitrateInputTrigger+0xfe>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80066ae:	2200      	movs	r2, #0
 80066b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066b4:	4810      	ldr	r0, [pc, #64]	; (80066f8 <IT_ArbitrateInputTrigger+0x114>)
 80066b6:	f005 fea3 	bl	800c400 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 80066ba:	2201      	movs	r2, #1
 80066bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066c0:	480d      	ldr	r0, [pc, #52]	; (80066f8 <IT_ArbitrateInputTrigger+0x114>)
 80066c2:	f005 fe9d 	bl	800c400 <HAL_GPIO_WritePin>
				break;
 80066c6:	e00c      	b.n	80066e2 <IT_ArbitrateInputTrigger+0xfe>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80066c8:	2201      	movs	r2, #1
 80066ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066ce:	480a      	ldr	r0, [pc, #40]	; (80066f8 <IT_ArbitrateInputTrigger+0x114>)
 80066d0:	f005 fe96 	bl	800c400 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 80066d4:	2201      	movs	r2, #1
 80066d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80066da:	4807      	ldr	r0, [pc, #28]	; (80066f8 <IT_ArbitrateInputTrigger+0x114>)
 80066dc:	f005 fe90 	bl	800c400 <HAL_GPIO_WritePin>
				break;
 80066e0:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 80066e2:	2001      	movs	r0, #1
 80066e4:	f000 f84e 	bl	8006784 <IT_SetTriggerStatus>
}
 80066e8:	bf00      	nop
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	2000296c 	.word	0x2000296c
 80066f0:	20002634 	.word	0x20002634
 80066f4:	20002568 	.word	0x20002568
 80066f8:	48000800 	.word	0x48000800
 80066fc:	20001f78 	.word	0x20001f78

08006700 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 8006704:	f000 f816 	bl	8006734 <IT_GetActiveTriggerMode>
 8006708:	4603      	mov	r3, r0
 800670a:	2b01      	cmp	r3, #1
 800670c:	d008      	beq.n	8006720 <IT_CycleInputTriggerMode+0x20>
 800670e:	2b02      	cmp	r3, #2
 8006710:	d00a      	beq.n	8006728 <IT_CycleInputTriggerMode+0x28>
 8006712:	2b00      	cmp	r3, #0
 8006714:	d000      	beq.n	8006718 <IT_CycleInputTriggerMode+0x18>
		case INPUT_TIMER_ADC:
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
			break;

		default:
			break;
 8006716:	e00b      	b.n	8006730 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_COMP);
 8006718:	2001      	movs	r0, #1
 800671a:	f000 f817 	bl	800674c <IT_SetActiveTriggerMode>
			break;
 800671e:	e007      	b.n	8006730 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_ADC);
 8006720:	2002      	movs	r0, #2
 8006722:	f000 f813 	bl	800674c <IT_SetActiveTriggerMode>
			break;
 8006726:	e003      	b.n	8006730 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TIMER_TIM);
 8006728:	2000      	movs	r0, #0
 800672a:	f000 f80f 	bl	800674c <IT_SetActiveTriggerMode>
			break;
 800672e:	bf00      	nop
	}
}
 8006730:	bf00      	nop
 8006732:	bd80      	pop	{r7, pc}

08006734 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 8006738:	4b03      	ldr	r3, [pc, #12]	; (8006748 <IT_GetActiveTriggerMode+0x14>)
 800673a:	781b      	ldrb	r3, [r3, #0]
}
 800673c:	4618      	mov	r0, r3
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	20001e9a 	.word	0x20001e9a

0800674c <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 8006756:	4a04      	ldr	r2, [pc, #16]	; (8006768 <IT_SetActiveTriggerMode+0x1c>)
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	7013      	strb	r3, [r2, #0]
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr
 8006768:	20001e9a 	.word	0x20001e9a

0800676c <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 800676c:	b480      	push	{r7}
 800676e:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 8006770:	4b03      	ldr	r3, [pc, #12]	; (8006780 <IT_GetTriggerStatus+0x14>)
 8006772:	781b      	ldrb	r3, [r3, #0]
}
 8006774:	4618      	mov	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	20001e9b 	.word	0x20001e9b

08006784 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 800678e:	4a04      	ldr	r2, [pc, #16]	; (80067a0 <IT_SetTriggerStatus+0x1c>)
 8006790:	79fb      	ldrb	r3, [r7, #7]
 8006792:	7013      	strb	r3, [r2, #0]
}
 8006794:	bf00      	nop
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr
 80067a0:	20001e9b 	.word	0x20001e9b

080067a4 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 80067ac:	4808      	ldr	r0, [pc, #32]	; (80067d0 <HAL_COMP_TriggerCallback+0x2c>)
 80067ae:	f004 fb23 	bl	800adf8 <HAL_COMP_GetOutputLevel>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d004      	beq.n	80067c2 <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <HAL_COMP_TriggerCallback+0x30>)
 80067ba:	f640 72ff 	movw	r2, #4095	; 0xfff
 80067be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 80067c0:	e002      	b.n	80067c8 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 80067c2:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <HAL_COMP_TriggerCallback+0x30>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]
}
 80067c8:	bf00      	nop
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	20002634 	.word	0x20002634
 80067d4:	20001f70 	.word	0x20001f70

080067d8 <HAL_TIM_IC_CaptureCallback>:
		OUTPUT_TIMER->ARR = trigger_input[0];
	printf("%lu\n", trigger_input[0]);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]

	// mean average the DMA data set
	avg_freq_count_period = 0;
 80067e0:	4b29      	ldr	r3, [pc, #164]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e00b      	b.n	8006804 <HAL_TIM_IC_CaptureCallback+0x2c>
	{
		avg_freq_count_period += freq_count_store[x];
 80067ec:	4a27      	ldr	r2, [pc, #156]	; (800688c <HAL_TIM_IC_CaptureCallback+0xb4>)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80067f4:	4b24      	ldr	r3, [pc, #144]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4413      	add	r3, r2
 80067fa:	4a23      	ldr	r2, [pc, #140]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xb0>)
 80067fc:	6013      	str	r3, [r2, #0]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3301      	adds	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	2b07      	cmp	r3, #7
 8006808:	ddf0      	ble.n	80067ec <HAL_TIM_IC_CaptureCallback+0x14>
	}
	avg_freq_count_period /= MAX_FREQ_COUNT_STORE;
 800680a:	4b1f      	ldr	r3, [pc, #124]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xb0>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	08db      	lsrs	r3, r3, #3
 8006810:	4a1d      	ldr	r2, [pc, #116]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006812:	6013      	str	r3, [r2, #0]

	// convert period to hertz
	avg_freq_count_hertz = (float)SM_MCLK / ((float)INPUT_TIMER->PSC * (float)avg_freq_count_period);
 8006814:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681a:	ee07 3a90 	vmov	s15, r3
 800681e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006822:	4b19      	ldr	r3, [pc, #100]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	ee07 3a90 	vmov	s15, r3
 800682a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006832:	eddf 6a17 	vldr	s13, [pc, #92]	; 8006890 <HAL_TIM_IC_CaptureCallback+0xb8>
 8006836:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800683a:	4b16      	ldr	r3, [pc, #88]	; (8006894 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800683c:	edc3 7a00 	vstr	s15, [r3]

	// sync the output timer (DAC) with the input timer
	OUTPUT_TIMER->ARR = avg_freq_count_period;
 8006840:	4a15      	ldr	r2, [pc, #84]	; (8006898 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006842:	4b11      	ldr	r3, [pc, #68]	; (8006888 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	62d3      	str	r3, [r2, #44]	; 0x2c

	// auto toggle "LF" mode
	if(avg_freq_count_hertz < 50)
 8006848:	4b12      	ldr	r3, [pc, #72]	; (8006894 <HAL_TIM_IC_CaptureCallback+0xbc>)
 800684a:	edd3 7a00 	vldr	s15, [r3]
 800684e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800689c <HAL_TIM_IC_CaptureCallback+0xc4>
 8006852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800685a:	d508      	bpl.n	800686e <HAL_TIM_IC_CaptureCallback+0x96>
	{
		INPUT_TIMER->PSC = 8000;
 800685c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006860:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006864:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 48;
 8006866:	4b0c      	ldr	r3, [pc, #48]	; (8006898 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006868:	2230      	movs	r2, #48	; 0x30
 800686a:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 0;
	}

	//printf("ARR %lu = %4.2fHz\n",avg_freq_count_period, avg_freq_count_hertz);

}
 800686c:	e006      	b.n	800687c <HAL_TIM_IC_CaptureCallback+0xa4>
		INPUT_TIMER->PSC = 128;
 800686e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006872:	2280      	movs	r2, #128	; 0x80
 8006874:	629a      	str	r2, [r3, #40]	; 0x28
		OUTPUT_TIMER->PSC = 0;
 8006876:	4b08      	ldr	r3, [pc, #32]	; (8006898 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8006878:	2200      	movs	r2, #0
 800687a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20001f98 	.word	0x20001f98
 800688c:	20001f78 	.word	0x20001f78
 8006890:	4d2037a0 	.word	0x4d2037a0
 8006894:	20001f9c 	.word	0x20001f9c
 8006898:	40013400 	.word	0x40013400
 800689c:	42480000 	.word	0x42480000

080068a0 <IT_GetAverageFreqCountHertz>:
 *	@param None
 *	@retval None
 *
 */
float IT_GetAverageFreqCountHertz()
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
	return avg_freq_count_hertz;
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <IT_GetAverageFreqCountHertz+0x18>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	ee07 3a90 	vmov	s15, r3
}
 80068ac:	eeb0 0a67 	vmov.f32	s0, s15
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20001f9c 	.word	0x20001f9c

080068bc <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 80068c0:	f7ff f83c 	bl	800593c <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 80068c4:	f000 f8ae 	bl	8006a24 <_InitOutputChannels>
	_InitAmpProfiles();
 80068c8:	f000 f824 	bl	8006914 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80068cc:	2110      	movs	r1, #16
 80068ce:	480f      	ldr	r0, [pc, #60]	; (800690c <SM_Init+0x50>)
 80068d0:	f004 fc03 	bl	800b0da <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 80068d4:	2201      	movs	r2, #1
 80068d6:	2108      	movs	r1, #8
 80068d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068dc:	f005 fd90 	bl	800c400 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <SM_Init+0x54>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <SM_Init+0x54>)
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7ff fbc5 	bl	800607c <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 80068f2:	2059      	movs	r0, #89	; 0x59
 80068f4:	f000 fc2c 	bl	8007150 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 80068f8:	2000      	movs	r0, #0
 80068fa:	f7ff fc23 	bl	8006144 <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 80068fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006902:	f7ff f92b 	bl	8005b5c <FreqO_ApplyProfile>

}
 8006906:	bf00      	nop
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	2000266c 	.word	0x2000266c
 8006910:	40013400 	.word	0x40013400

08006914 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8006914:	b590      	push	{r4, r7, lr}
 8006916:	b08b      	sub	sp, #44	; 0x2c
 8006918:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800691a:	2300      	movs	r3, #0
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
 800691e:	e033      	b.n	8006988 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006920:	493c      	ldr	r1, [pc, #240]	; (8006a14 <_InitAmpProfiles+0x100>)
 8006922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006924:	4613      	mov	r3, r2
 8006926:	00db      	lsls	r3, r3, #3
 8006928:	1a9b      	subs	r3, r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	440b      	add	r3, r1
 800692e:	3304      	adds	r3, #4
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8006934:	4b38      	ldr	r3, [pc, #224]	; (8006a18 <_InitAmpProfiles+0x104>)
 8006936:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8006938:	4936      	ldr	r1, [pc, #216]	; (8006a14 <_InitAmpProfiles+0x100>)
 800693a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	1a9b      	subs	r3, r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	440b      	add	r3, r1
 8006946:	3308      	adds	r3, #8
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	ee07 3a90 	vmov	s15, r3
 800694e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006952:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8006956:	ed97 7a04 	vldr	s14, [r7, #16]
 800695a:	edd7 7a03 	vldr	s15, [r7, #12]
 800695e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006962:	ed97 7a02 	vldr	s14, [r7, #8]
 8006966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800696a:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 800696e:	4929      	ldr	r1, [pc, #164]	; (8006a14 <_InitAmpProfiles+0x100>)
 8006970:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006972:	4613      	mov	r3, r2
 8006974:	00db      	lsls	r3, r3, #3
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	440b      	add	r3, r1
 800697c:	3310      	adds	r3, #16
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	3301      	adds	r3, #1
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
 8006988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698a:	2b61      	cmp	r3, #97	; 0x61
 800698c:	ddc8      	ble.n	8006920 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800698e:	2300      	movs	r3, #0
 8006990:	623b      	str	r3, [r7, #32]
 8006992:	e037      	b.n	8006a04 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8006994:	4b21      	ldr	r3, [pc, #132]	; (8006a1c <_InitAmpProfiles+0x108>)
 8006996:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006998:	491e      	ldr	r1, [pc, #120]	; (8006a14 <_InitAmpProfiles+0x100>)
 800699a:	6a3a      	ldr	r2, [r7, #32]
 800699c:	4613      	mov	r3, r2
 800699e:	00db      	lsls	r3, r3, #3
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	440b      	add	r3, r1
 80069a6:	3304      	adds	r3, #4
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80069ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80069b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80069b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80069b8:	ee16 0a90 	vmov	r0, s13
 80069bc:	f7f9 fdec 	bl	8000598 <__aeabi_f2d>
 80069c0:	4603      	mov	r3, r0
 80069c2:	460c      	mov	r4, r1
 80069c4:	ec44 3b10 	vmov	d0, r3, r4
 80069c8:	f00d fb06 	bl	8013fd8 <log10>
 80069cc:	ec51 0b10 	vmov	r0, r1, d0
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <_InitAmpProfiles+0x10c>)
 80069d6:	f7f9 fe37 	bl	8000648 <__aeabi_dmul>
 80069da:	4603      	mov	r3, r0
 80069dc:	460c      	mov	r4, r1
 80069de:	4618      	mov	r0, r3
 80069e0:	4621      	mov	r1, r4
 80069e2:	f7fa f929 	bl	8000c38 <__aeabi_d2f>
 80069e6:	4603      	mov	r3, r0
 80069e8:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80069ea:	490a      	ldr	r1, [pc, #40]	; (8006a14 <_InitAmpProfiles+0x100>)
 80069ec:	6a3a      	ldr	r2, [r7, #32]
 80069ee:	4613      	mov	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	1a9b      	subs	r3, r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	440b      	add	r3, r1
 80069f8:	330c      	adds	r3, #12
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80069fe:	6a3b      	ldr	r3, [r7, #32]
 8006a00:	3301      	adds	r3, #1
 8006a02:	623b      	str	r3, [r7, #32]
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	2b61      	cmp	r3, #97	; 0x61
 8006a08:	ddc4      	ble.n	8006994 <_InitAmpProfiles+0x80>

	}
}
 8006a0a:	bf00      	nop
 8006a0c:	372c      	adds	r7, #44	; 0x2c
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd90      	pop	{r4, r7, pc}
 8006a12:	bf00      	nop
 8006a14:	2000017c 	.word	0x2000017c
 8006a18:	402ccccd 	.word	0x402ccccd
 8006a1c:	3a83126f 	.word	0x3a83126f
 8006a20:	40340000 	.word	0x40340000

08006a24 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 8006a2a:	4b28      	ldr	r3, [pc, #160]	; (8006acc <_InitOutputChannels+0xa8>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006a30:	4b27      	ldr	r3, [pc, #156]	; (8006ad0 <_InitOutputChannels+0xac>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4a25      	ldr	r2, [pc, #148]	; (8006acc <_InitOutputChannels+0xa8>)
 8006a36:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006a38:	4b24      	ldr	r3, [pc, #144]	; (8006acc <_InitOutputChannels+0xa8>)
 8006a3a:	4a25      	ldr	r2, [pc, #148]	; (8006ad0 <_InitOutputChannels+0xac>)
 8006a3c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a40:	2300      	movs	r3, #0
 8006a42:	607b      	str	r3, [r7, #4]
 8006a44:	e00b      	b.n	8006a5e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006a46:	4a23      	ldr	r2, [pc, #140]	; (8006ad4 <_InitOutputChannels+0xb0>)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a4e:	491f      	ldr	r1, [pc, #124]	; (8006acc <_InitOutputChannels+0xa8>)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	3302      	adds	r3, #2
 8006a54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b77      	cmp	r3, #119	; 0x77
 8006a62:	ddf0      	ble.n	8006a46 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006a64:	4b19      	ldr	r3, [pc, #100]	; (8006acc <_InitOutputChannels+0xa8>)
 8006a66:	4a1c      	ldr	r2, [pc, #112]	; (8006ad8 <_InitOutputChannels+0xb4>)
 8006a68:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006a6c:	4b17      	ldr	r3, [pc, #92]	; (8006acc <_InitOutputChannels+0xa8>)
 8006a6e:	4a1b      	ldr	r2, [pc, #108]	; (8006adc <_InitOutputChannels+0xb8>)
 8006a70:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006a74:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <_InitOutputChannels+0xbc>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006a7a:	4b15      	ldr	r3, [pc, #84]	; (8006ad0 <_InitOutputChannels+0xac>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4a18      	ldr	r2, [pc, #96]	; (8006ae0 <_InitOutputChannels+0xbc>)
 8006a80:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006a82:	4b17      	ldr	r3, [pc, #92]	; (8006ae0 <_InitOutputChannels+0xbc>)
 8006a84:	4a12      	ldr	r2, [pc, #72]	; (8006ad0 <_InitOutputChannels+0xac>)
 8006a86:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	e00b      	b.n	8006aa8 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006a90:	4a10      	ldr	r2, [pc, #64]	; (8006ad4 <_InitOutputChannels+0xb0>)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006a98:	4911      	ldr	r1, [pc, #68]	; (8006ae0 <_InitOutputChannels+0xbc>)
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	3301      	adds	r3, #1
 8006aa6:	603b      	str	r3, [r7, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b77      	cmp	r3, #119	; 0x77
 8006aac:	ddf0      	ble.n	8006a90 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006aae:	4b0c      	ldr	r3, [pc, #48]	; (8006ae0 <_InitOutputChannels+0xbc>)
 8006ab0:	4a09      	ldr	r2, [pc, #36]	; (8006ad8 <_InitOutputChannels+0xb4>)
 8006ab2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <_InitOutputChannels+0xbc>)
 8006ab8:	4a08      	ldr	r2, [pc, #32]	; (8006adc <_InitOutputChannels+0xb8>)
 8006aba:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	20001fa0 	.word	0x20001fa0
 8006ad0:	2000012c 	.word	0x2000012c
 8006ad4:	200014b8 	.word	0x200014b8
 8006ad8:	20000b38 	.word	0x20000b38
 8006adc:	20000179 	.word	0x20000179
 8006ae0:	20002194 	.word	0x20002194

08006ae4 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	4603      	mov	r3, r0
 8006aec:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 8006aee:	79fb      	ldrb	r3, [r7, #7]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8006af4:	4b04      	ldr	r3, [pc, #16]	; (8006b08 <SM_GetOutputChannel+0x24>)
 8006af6:	e000      	b.n	8006afa <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006af8:	4b04      	ldr	r3, [pc, #16]	; (8006b0c <SM_GetOutputChannel+0x28>)
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20001fa0 	.word	0x20001fa0
 8006b0c:	20002194 	.word	0x20002194

08006b10 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b096      	sub	sp, #88	; 0x58
 8006b14:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8006b16:	4889      	ldr	r0, [pc, #548]	; (8006d3c <SM_EnablePwmToAux+0x22c>)
 8006b18:	f00b f9c6 	bl	8011ea8 <puts>

	HAL_StatusTypeDef res = 0;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006b26:	2200      	movs	r2, #0
 8006b28:	601a      	str	r2, [r3, #0]
 8006b2a:	605a      	str	r2, [r3, #4]
 8006b2c:	609a      	str	r2, [r3, #8]
 8006b2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006b3c:	f107 031c 	add.w	r3, r7, #28
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	609a      	str	r2, [r3, #8]
 8006b48:	60da      	str	r2, [r3, #12]
 8006b4a:	611a      	str	r2, [r3, #16]
 8006b4c:	615a      	str	r2, [r3, #20]
 8006b4e:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b50:	f107 0308 	add.w	r3, r7, #8
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	609a      	str	r2, [r3, #8]
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006b60:	4b77      	ldr	r3, [pc, #476]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006b62:	4a78      	ldr	r2, [pc, #480]	; (8006d44 <SM_EnablePwmToAux+0x234>)
 8006b64:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006b66:	4b76      	ldr	r3, [pc, #472]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006b6c:	4b74      	ldr	r3, [pc, #464]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006b6e:	2210      	movs	r2, #16
 8006b70:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006b72:	4b73      	ldr	r3, [pc, #460]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006b74:	2201      	movs	r2, #1
 8006b76:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006b78:	4b71      	ldr	r3, [pc, #452]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006b7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b7e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006b80:	4b6f      	ldr	r3, [pc, #444]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006b82:	2280      	movs	r2, #128	; 0x80
 8006b84:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006b86:	486e      	ldr	r0, [pc, #440]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006b88:	f006 fcdc 	bl	800d544 <HAL_TIM_Base_Init>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d107      	bne.n	8006ba8 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 8006b98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b9c:	4619      	mov	r1, r3
 8006b9e:	486a      	ldr	r0, [pc, #424]	; (8006d48 <SM_EnablePwmToAux+0x238>)
 8006ba0:	f00b f90e 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006ba4:	f001 fb9c 	bl	80082e0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006bac:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 8006bae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	4862      	ldr	r0, [pc, #392]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006bb6:	f007 fe35 	bl	800e824 <HAL_TIM_ConfigClockSource>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d107      	bne.n	8006bd6 <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 8006bc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bca:	4619      	mov	r1, r3
 8006bcc:	485f      	ldr	r0, [pc, #380]	; (8006d4c <SM_EnablePwmToAux+0x23c>)
 8006bce:	f00b f8f7 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006bd2:	f001 fb85 	bl	80082e0 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 8006bd6:	485a      	ldr	r0, [pc, #360]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006bd8:	f006 fdc7 	bl	800d76a <HAL_TIM_PWM_Init>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	461a      	mov	r2, r3
 8006be0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d107      	bne.n	8006bf8 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 8006be8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bec:	4619      	mov	r1, r3
 8006bee:	4858      	ldr	r0, [pc, #352]	; (8006d50 <SM_EnablePwmToAux+0x240>)
 8006bf0:	f00b f8e6 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006bf4:	f001 fb74 	bl	80082e0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006c00:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006c04:	4619      	mov	r1, r3
 8006c06:	484e      	ldr	r0, [pc, #312]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006c08:	f008 fed6 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d107      	bne.n	8006c28 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006c18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	484d      	ldr	r0, [pc, #308]	; (8006d54 <SM_EnablePwmToAux+0x244>)
 8006c20:	f00b f8ce 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006c24:	f001 fb5c 	bl	80082e0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006c28:	2360      	movs	r3, #96	; 0x60
 8006c2a:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006c30:	2300      	movs	r3, #0
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006c34:	2300      	movs	r3, #0
 8006c36:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006c38:	f107 031c 	add.w	r3, r7, #28
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	4619      	mov	r1, r3
 8006c40:	483f      	ldr	r0, [pc, #252]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006c42:	f007 fcdf 	bl	800e604 <HAL_TIM_PWM_ConfigChannel>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d107      	bne.n	8006c62 <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006c52:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c56:	4619      	mov	r1, r3
 8006c58:	483f      	ldr	r0, [pc, #252]	; (8006d58 <SM_EnablePwmToAux+0x248>)
 8006c5a:	f00b f8b1 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006c5e:	f001 fb3f 	bl	80082e0 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006c62:	483e      	ldr	r0, [pc, #248]	; (8006d5c <SM_EnablePwmToAux+0x24c>)
 8006c64:	f00b f920 	bl	8011ea8 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006c68:	4b3d      	ldr	r3, [pc, #244]	; (8006d60 <SM_EnablePwmToAux+0x250>)
 8006c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6c:	4a3c      	ldr	r2, [pc, #240]	; (8006d60 <SM_EnablePwmToAux+0x250>)
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c74:	4b3a      	ldr	r3, [pc, #232]	; (8006d60 <SM_EnablePwmToAux+0x250>)
 8006c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006c80:	2340      	movs	r3, #64	; 0x40
 8006c82:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c84:	2302      	movs	r3, #2
 8006c86:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006c90:	2302      	movs	r3, #2
 8006c92:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006c94:	4833      	ldr	r0, [pc, #204]	; (8006d64 <SM_EnablePwmToAux+0x254>)
 8006c96:	f00b f907 	bl	8011ea8 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c9a:	f107 0308 	add.w	r3, r7, #8
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ca4:	f005 f948 	bl	800bf38 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 8006ca8:	482f      	ldr	r0, [pc, #188]	; (8006d68 <SM_EnablePwmToAux+0x258>)
 8006caa:	f00b f8fd 	bl	8011ea8 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 8006cae:	4b2c      	ldr	r3, [pc, #176]	; (8006d60 <SM_EnablePwmToAux+0x250>)
 8006cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cb2:	4a2b      	ldr	r2, [pc, #172]	; (8006d60 <SM_EnablePwmToAux+0x250>)
 8006cb4:	f043 0302 	orr.w	r3, r3, #2
 8006cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8006cba:	4b29      	ldr	r3, [pc, #164]	; (8006d60 <SM_EnablePwmToAux+0x250>)
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 8006cc6:	4829      	ldr	r0, [pc, #164]	; (8006d6c <SM_EnablePwmToAux+0x25c>)
 8006cc8:	f00b f8ee 	bl	8011ea8 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	201d      	movs	r0, #29
 8006cd2:	f004 f99e 	bl	800b012 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 8006cd6:	4826      	ldr	r0, [pc, #152]	; (8006d70 <SM_EnablePwmToAux+0x260>)
 8006cd8:	f00b f8e6 	bl	8011ea8 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006cdc:	201d      	movs	r0, #29
 8006cde:	f004 f9b2 	bl	800b046 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 8006ce2:	4824      	ldr	r0, [pc, #144]	; (8006d74 <SM_EnablePwmToAux+0x264>)
 8006ce4:	f00b f8e0 	bl	8011ea8 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4815      	ldr	r0, [pc, #84]	; (8006d40 <SM_EnablePwmToAux+0x230>)
 8006cec:	f006 fd9e 	bl	800d82c <HAL_TIM_PWM_Start>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d107      	bne.n	8006d0c <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 8006cfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d00:	4619      	mov	r1, r3
 8006d02:	481d      	ldr	r0, [pc, #116]	; (8006d78 <SM_EnablePwmToAux+0x268>)
 8006d04:	f00b f85c 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006d08:	f001 faea 	bl	80082e0 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006d0c:	481b      	ldr	r0, [pc, #108]	; (8006d7c <SM_EnablePwmToAux+0x26c>)
 8006d0e:	f00b f8cb 	bl	8011ea8 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006d12:	2007      	movs	r0, #7
 8006d14:	f7ff fbb4 	bl	8006480 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006d18:	4819      	ldr	r0, [pc, #100]	; (8006d80 <SM_EnablePwmToAux+0x270>)
 8006d1a:	f00b f8c5 	bl	8011ea8 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <SM_EnablePwmToAux+0x234>)
 8006d20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006d24:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006d26:	4817      	ldr	r0, [pc, #92]	; (8006d84 <SM_EnablePwmToAux+0x274>)
 8006d28:	f00b f8be 	bl	8011ea8 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <SM_EnablePwmToAux+0x234>)
 8006d2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d32:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006d34:	bf00      	nop
 8006d36:	3758      	adds	r7, #88	; 0x58
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	08015f98 	.word	0x08015f98
 8006d40:	20001f20 	.word	0x20001f20
 8006d44:	40000400 	.word	0x40000400
 8006d48:	08015fac 	.word	0x08015fac
 8006d4c:	08015fe0 	.word	0x08015fe0
 8006d50:	0801601c 	.word	0x0801601c
 8006d54:	0801604c 	.word	0x0801604c
 8006d58:	08016094 	.word	0x08016094
 8006d5c:	080160d0 	.word	0x080160d0
 8006d60:	40021000 	.word	0x40021000
 8006d64:	08016100 	.word	0x08016100
 8006d68:	08016124 	.word	0x08016124
 8006d6c:	0801615c 	.word	0x0801615c
 8006d70:	08016184 	.word	0x08016184
 8006d74:	080161ac 	.word	0x080161ac
 8006d78:	080161d4 	.word	0x080161d4
 8006d7c:	08016208 	.word	0x08016208
 8006d80:	08016234 	.word	0x08016234
 8006d84:	08016268 	.word	0x08016268

08006d88 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8006d8e:	4815      	ldr	r0, [pc, #84]	; (8006de4 <SM_DisablePwmToAux+0x5c>)
 8006d90:	f00b f816 	bl	8011dc0 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006d94:	2300      	movs	r3, #0
 8006d96:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 8006d98:	4813      	ldr	r0, [pc, #76]	; (8006de8 <SM_DisablePwmToAux+0x60>)
 8006d9a:	f00b f885 	bl	8011ea8 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4812      	ldr	r0, [pc, #72]	; (8006dec <SM_DisablePwmToAux+0x64>)
 8006da2:	f006 fe1d 	bl	800d9e0 <HAL_TIM_PWM_Stop>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	79fb      	ldrb	r3, [r7, #7]
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d106      	bne.n	8006dbe <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 8006db0:	79fb      	ldrb	r3, [r7, #7]
 8006db2:	4619      	mov	r1, r3
 8006db4:	480e      	ldr	r0, [pc, #56]	; (8006df0 <SM_DisablePwmToAux+0x68>)
 8006db6:	f00b f803 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006dba:	f001 fa91 	bl	80082e0 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 8006dbe:	480d      	ldr	r0, [pc, #52]	; (8006df4 <SM_DisablePwmToAux+0x6c>)
 8006dc0:	f00b f872 	bl	8011ea8 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 8006dc4:	4b0c      	ldr	r3, [pc, #48]	; (8006df8 <SM_DisablePwmToAux+0x70>)
 8006dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc8:	4a0b      	ldr	r2, [pc, #44]	; (8006df8 <SM_DisablePwmToAux+0x70>)
 8006dca:	f023 0302 	bic.w	r3, r3, #2
 8006dce:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 8006dd0:	480a      	ldr	r0, [pc, #40]	; (8006dfc <SM_DisablePwmToAux+0x74>)
 8006dd2:	f00b f869 	bl	8011ea8 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8006dd6:	201d      	movs	r0, #29
 8006dd8:	f004 f943 	bl	800b062 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 8006ddc:	bf00      	nop
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	08016298 	.word	0x08016298
 8006de8:	080162ac 	.word	0x080162ac
 8006dec:	20001f20 	.word	0x20001f20
 8006df0:	080162d4 	.word	0x080162d4
 8006df4:	08016308 	.word	0x08016308
 8006df8:	40021000 	.word	0x40021000
 8006dfc:	08016344 	.word	0x08016344

08006e00 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b0b2      	sub	sp, #200	; 0xc8
 8006e04:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006e06:	4860      	ldr	r0, [pc, #384]	; (8006f88 <SM_EnableDacToAux+0x188>)
 8006e08:	f00a ffda 	bl	8011dc0 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006e12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006e16:	2230      	movs	r2, #48	; 0x30
 8006e18:	2100      	movs	r1, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f00a fb6c 	bl	80114f8 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e20:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006e24:	2200      	movs	r2, #0
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	605a      	str	r2, [r3, #4]
 8006e2a:	609a      	str	r2, [r3, #8]
 8006e2c:	60da      	str	r2, [r3, #12]
 8006e2e:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006e30:	4b56      	ldr	r3, [pc, #344]	; (8006f8c <SM_EnableDacToAux+0x18c>)
 8006e32:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006e34:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f004 f92c 	bl	800b096 <HAL_DAC_Init>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d107      	bne.n	8006e5a <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006e4a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006e4e:	4619      	mov	r1, r3
 8006e50:	484f      	ldr	r0, [pc, #316]	; (8006f90 <SM_EnableDacToAux+0x190>)
 8006e52:	f00a ffb5 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006e56:	f001 fa43 	bl	80082e0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006e5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006e62:	2300      	movs	r3, #0
 8006e64:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006e74:	2306      	movs	r3, #6
 8006e76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006e80:	2300      	movs	r3, #0
 8006e82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006e92:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006e96:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f004 fae3 	bl	800b468 <HAL_DAC_ConfigChannel>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d107      	bne.n	8006ebe <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006eae:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	4837      	ldr	r0, [pc, #220]	; (8006f94 <SM_EnableDacToAux+0x194>)
 8006eb6:	f00a ff83 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006eba:	f001 fa11 	bl	80082e0 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006ebe:	4836      	ldr	r0, [pc, #216]	; (8006f98 <SM_EnableDacToAux+0x198>)
 8006ec0:	f00a fff2 	bl	8011ea8 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006ec4:	4b35      	ldr	r3, [pc, #212]	; (8006f9c <SM_EnableDacToAux+0x19c>)
 8006ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec8:	4a34      	ldr	r2, [pc, #208]	; (8006f9c <SM_EnableDacToAux+0x19c>)
 8006eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ece:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ed0:	4b32      	ldr	r3, [pc, #200]	; (8006f9c <SM_EnableDacToAux+0x19c>)
 8006ed2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed8:	60bb      	str	r3, [r7, #8]
 8006eda:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006edc:	4830      	ldr	r0, [pc, #192]	; (8006fa0 <SM_EnableDacToAux+0x1a0>)
 8006ede:	f00a ffe3 	bl	8011ea8 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006ee2:	4b2e      	ldr	r3, [pc, #184]	; (8006f9c <SM_EnableDacToAux+0x19c>)
 8006ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ee6:	4a2d      	ldr	r2, [pc, #180]	; (8006f9c <SM_EnableDacToAux+0x19c>)
 8006ee8:	f043 0301 	orr.w	r3, r3, #1
 8006eec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006eee:	4b2b      	ldr	r3, [pc, #172]	; (8006f9c <SM_EnableDacToAux+0x19c>)
 8006ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	607b      	str	r3, [r7, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006efa:	2340      	movs	r3, #64	; 0x40
 8006efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f00:	2303      	movs	r3, #3
 8006f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006f0c:	4825      	ldr	r0, [pc, #148]	; (8006fa4 <SM_EnableDacToAux+0x1a4>)
 8006f0e:	f00a ffcb 	bl	8011ea8 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f12:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006f16:	4619      	mov	r1, r3
 8006f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f1c:	f005 f80c 	bl	800bf38 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006f20:	4b21      	ldr	r3, [pc, #132]	; (8006fa8 <SM_EnableDacToAux+0x1a8>)
 8006f22:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006f24:	2329      	movs	r3, #41	; 0x29
 8006f26:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f28:	2310      	movs	r3, #16
 8006f2a:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006f30:	2380      	movs	r3, #128	; 0x80
 8006f32:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f38:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006f40:	2320      	movs	r3, #32
 8006f42:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006f44:	2300      	movs	r3, #0
 8006f46:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006f48:	f107 030c 	add.w	r3, r7, #12
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f004 fcc1 	bl	800b8d4 <HAL_DMA_Init>
 8006f52:	4603      	mov	r3, r0
 8006f54:	461a      	mov	r2, r3
 8006f56:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d107      	bne.n	8006f6e <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006f5e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006f62:	4619      	mov	r1, r3
 8006f64:	4811      	ldr	r0, [pc, #68]	; (8006fac <SM_EnableDacToAux+0x1ac>)
 8006f66:	f00a ff2b 	bl	8011dc0 <iprintf>
		Error_Handler();
 8006f6a:	f001 f9b9 	bl	80082e0 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006f6e:	4810      	ldr	r0, [pc, #64]	; (8006fb0 <SM_EnableDacToAux+0x1b0>)
 8006f70:	f00a ff9a 	bl	8011ea8 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006f74:	f107 030c 	add.w	r3, r7, #12
 8006f78:	677b      	str	r3, [r7, #116]	; 0x74
 8006f7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006f80:	bf00      	nop
 8006f82:	37c8      	adds	r7, #200	; 0xc8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	0801636c 	.word	0x0801636c
 8006f8c:	50000c00 	.word	0x50000c00
 8006f90:	08016380 	.word	0x08016380
 8006f94:	080163ac 	.word	0x080163ac
 8006f98:	080163e4 	.word	0x080163e4
 8006f9c:	40021000 	.word	0x40021000
 8006fa0:	08016414 	.word	0x08016414
 8006fa4:	08016444 	.word	0x08016444
 8006fa8:	40020030 	.word	0x40020030
 8006fac:	08016468 	.word	0x08016468
 8006fb0:	08016494 	.word	0x08016494

08006fb4 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006fb8:	4806      	ldr	r0, [pc, #24]	; (8006fd4 <SM_DisableDacToAux+0x20>)
 8006fba:	f00a ff75 	bl	8011ea8 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006fbe:	4806      	ldr	r0, [pc, #24]	; (8006fd8 <SM_DisableDacToAux+0x24>)
 8006fc0:	f00a ff72 	bl	8011ea8 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006fc4:	2140      	movs	r1, #64	; 0x40
 8006fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fca:	f005 f937 	bl	800c23c <HAL_GPIO_DeInit>

}
 8006fce:	bf00      	nop
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	080164b8 	.word	0x080164b8
 8006fd8:	080164cc 	.word	0x080164cc

08006fdc <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006fe6:	79fb      	ldrb	r3, [r7, #7]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d008      	beq.n	8006ffe <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006fec:	4b08      	ldr	r3, [pc, #32]	; (8007010 <SM_GetEncoderValue+0x34>)
 8006fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff0:	b29a      	uxth	r2, r3
 8006ff2:	4b07      	ldr	r3, [pc, #28]	; (8007010 <SM_GetEncoderValue+0x34>)
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	b29b      	uxth	r3, r3
 8006ff8:	1ad3      	subs	r3, r2, r3
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	e002      	b.n	8007004 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006ffe:	4b04      	ldr	r3, [pc, #16]	; (8007010 <SM_GetEncoderValue+0x34>)
 8007000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007002:	b29b      	uxth	r3, r3
	}
}
 8007004:	4618      	mov	r0, r3
 8007006:	370c      	adds	r7, #12
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	40012c00 	.word	0x40012c00

08007014 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 800701a:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <SM_GetOutputInHertz+0x7c>)
 800701c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800701e:	2b00      	cmp	r3, #0
 8007020:	d103      	bne.n	800702a <SM_GetOutputInHertz+0x16>
 8007022:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007026:	60bb      	str	r3, [r7, #8]
 8007028:	e007      	b.n	800703a <SM_GetOutputInHertz+0x26>
 800702a:	4b19      	ldr	r3, [pc, #100]	; (8007090 <SM_GetOutputInHertz+0x7c>)
 800702c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702e:	ee07 3a90 	vmov	s15, r3
 8007032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007036:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800703a:	4b15      	ldr	r3, [pc, #84]	; (8007090 <SM_GetOutputInHertz+0x7c>)
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	2b00      	cmp	r3, #0
 8007040:	d103      	bne.n	800704a <SM_GetOutputInHertz+0x36>
 8007042:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007046:	607b      	str	r3, [r7, #4]
 8007048:	e007      	b.n	800705a <SM_GetOutputInHertz+0x46>
 800704a:	4b11      	ldr	r3, [pc, #68]	; (8007090 <SM_GetOutputInHertz+0x7c>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007056:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 800705a:	ed97 7a02 	vldr	s14, [r7, #8]
 800705e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007062:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007066:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8007094 <SM_GetOutputInHertz+0x80>
 800706a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800706e:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8007072:	edd7 7a03 	vldr	s15, [r7, #12]
 8007076:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007098 <SM_GetOutputInHertz+0x84>
 800707a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800707e:	eef0 7a66 	vmov.f32	s15, s13
}
 8007082:	eeb0 0a67 	vmov.f32	s0, s15
 8007086:	3714      	adds	r7, #20
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr
 8007090:	40013400 	.word	0x40013400
 8007094:	4d2037a0 	.word	0x4d2037a0
 8007098:	42f00000 	.word	0x42f00000

0800709c <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	460b      	mov	r3, r1
 80070a6:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 80070a8:	887b      	ldrh	r3, [r7, #2]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <SM_ConvertPeriodToHertz+0x16>
 80070ae:	2301      	movs	r3, #1
 80070b0:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 80070b2:	887b      	ldrh	r3, [r7, #2]
 80070b4:	ee07 3a90 	vmov	s15, r3
 80070b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	ee07 3a90 	vmov	s15, r3
 80070c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ca:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80070e4 <SM_ConvertPeriodToHertz+0x48>
 80070ce:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80070d2:	eef0 7a66 	vmov.f32	s15, s13
}
 80070d6:	eeb0 0a67 	vmov.f32	s0, s15
 80070da:	370c      	adds	r7, #12
 80070dc:	46bd      	mov	sp, r7
 80070de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e2:	4770      	bx	lr
 80070e4:	4d2037a0 	.word	0x4d2037a0

080070e8 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 80070ec:	4b03      	ldr	r3, [pc, #12]	; (80070fc <SM_IsFuncPwmDutyMode+0x14>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	20001e9c 	.word	0x20001e9c

08007100 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8007104:	4b05      	ldr	r3, [pc, #20]	; (800711c <SM_ToggleFuncPwmDutyMode+0x1c>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	f083 0301 	eor.w	r3, r3, #1
 800710c:	b2da      	uxtb	r2, r3
 800710e:	4b03      	ldr	r3, [pc, #12]	; (800711c <SM_ToggleFuncPwmDutyMode+0x1c>)
 8007110:	701a      	strb	r2, [r3, #0]
}
 8007112:	bf00      	nop
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	20001e9c 	.word	0x20001e9c

08007120 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8007120:	b480      	push	{r7}
 8007122:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8007124:	4b03      	ldr	r3, [pc, #12]	; (8007134 <SM_ResetFuncPwmDutyMode+0x14>)
 8007126:	2200      	movs	r2, #0
 8007128:	701a      	strb	r2, [r3, #0]

}
 800712a:	bf00      	nop
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	20001e9c 	.word	0x20001e9c

08007138 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8007138:	b480      	push	{r7}
 800713a:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 800713c:	4b03      	ldr	r3, [pc, #12]	; (800714c <VPP_ResetLastEncoderValue+0x14>)
 800713e:	2200      	movs	r2, #0
 8007140:	801a      	strh	r2, [r3, #0]
}
 8007142:	bf00      	nop
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	20001e9e 	.word	0x20001e9e

08007150 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800715a:	79fa      	ldrb	r2, [r7, #7]
 800715c:	4613      	mov	r3, r2
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	1a9b      	subs	r3, r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4a10      	ldr	r2, [pc, #64]	; (80071a8 <VPP_ApplyProfileToSignal+0x58>)
 8007166:	4413      	add	r3, r2
 8007168:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 800716a:	2000      	movs	r0, #0
 800716c:	f7ff fcba 	bl	8006ae4 <SM_GetOutputChannel>
 8007170:	4602      	mov	r2, r0
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	7a1b      	ldrb	r3, [r3, #8]
 800717c:	4618      	mov	r0, r3
 800717e:	f7ff f97f 	bl	8006480 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	edd3 7a04 	vldr	s15, [r3, #16]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	ed93 7a05 	vldr	s14, [r3, #20]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8b1b      	ldrh	r3, [r3, #24]
 8007192:	4618      	mov	r0, r3
 8007194:	eef0 0a47 	vmov.f32	s1, s14
 8007198:	eeb0 0a67 	vmov.f32	s0, s15
 800719c:	f000 f830 	bl	8007200 <_ProcessSignalDataTable>


}
 80071a0:	bf00      	nop
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	2000017c 	.word	0x2000017c

080071ac <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	4603      	mov	r3, r0
 80071b4:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80071b6:	79fa      	ldrb	r2, [r7, #7]
 80071b8:	4613      	mov	r3, r2
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	1a9b      	subs	r3, r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4a0e      	ldr	r2, [pc, #56]	; (80071fc <VPP_ApplyProfileToAux+0x50>)
 80071c2:	4413      	add	r3, r2
 80071c4:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 80071c6:	2001      	movs	r0, #1
 80071c8:	f7ff fc8c 	bl	8006ae4 <SM_GetOutputChannel>
 80071cc:	4602      	mov	r2, r0
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	ed93 7a05 	vldr	s14, [r3, #20]
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8b1b      	ldrh	r3, [r3, #24]
 80071e4:	4618      	mov	r0, r3
 80071e6:	eef0 0a47 	vmov.f32	s1, s14
 80071ea:	eeb0 0a67 	vmov.f32	s0, s15
 80071ee:	f000 f88d 	bl	800730c <_ProcessAuxDataTable>



}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2000017c 	.word	0x2000017c

08007200 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b08a      	sub	sp, #40	; 0x28
 8007204:	af00      	add	r7, sp, #0
 8007206:	ed87 0a03 	vstr	s0, [r7, #12]
 800720a:	edc7 0a02 	vstr	s1, [r7, #8]
 800720e:	4603      	mov	r3, r0
 8007210:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8007212:	2000      	movs	r0, #0
 8007214:	f7ff fc66 	bl	8006ae4 <SM_GetOutputChannel>
 8007218:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b06      	cmp	r3, #6
 8007224:	d06b      	beq.n	80072fe <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007226:	2300      	movs	r3, #0
 8007228:	627b      	str	r3, [r7, #36]	; 0x24
 800722a:	e00c      	b.n	8007246 <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	685a      	ldr	r2, [r3, #4]
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4933      	ldr	r1, [pc, #204]	; (8007308 <_ProcessSignalDataTable+0x108>)
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	3301      	adds	r3, #1
 8007244:	627b      	str	r3, [r7, #36]	; 0x24
 8007246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007248:	2b77      	cmp	r3, #119	; 0x77
 800724a:	ddef      	ble.n	800722c <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 800724c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007250:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d008      	beq.n	800726a <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	089b      	lsrs	r3, r3, #2
 800725c:	b29b      	uxth	r3, r3
 800725e:	ee07 3a90 	vmov	s15, r3
 8007262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007266:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800726a:	2300      	movs	r3, #0
 800726c:	61fb      	str	r3, [r7, #28]
 800726e:	e02e      	b.n	80072ce <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8007270:	4a25      	ldr	r2, [pc, #148]	; (8007308 <_ProcessSignalDataTable+0x108>)
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007278:	ee07 3a90 	vmov	s15, r3
 800727c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007280:	edd7 7a03 	vldr	s15, [r7, #12]
 8007284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800728c:	ee17 1a90 	vmov	r1, s15
 8007290:	4a1d      	ldr	r2, [pc, #116]	; (8007308 <_ProcessSignalDataTable+0x108>)
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8007298:	4a1b      	ldr	r2, [pc, #108]	; (8007308 <_ProcessSignalDataTable+0x108>)
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a0:	ee07 3a90 	vmov	s15, r3
 80072a4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80072a8:	edd7 7a08 	vldr	s15, [r7, #32]
 80072ac:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80072b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80072b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072bc:	ee17 1a90 	vmov	r1, s15
 80072c0:	4a11      	ldr	r2, [pc, #68]	; (8007308 <_ProcessSignalDataTable+0x108>)
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	3301      	adds	r3, #1
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	2b77      	cmp	r3, #119	; 0x77
 80072d2:	ddcd      	ble.n	8007270 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072d4:	2300      	movs	r3, #0
 80072d6:	61bb      	str	r3, [r7, #24]
 80072d8:	e00e      	b.n	80072f8 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80072da:	2000      	movs	r0, #0
 80072dc:	f7ff fc02 	bl	8006ae4 <SM_GetOutputChannel>
 80072e0:	4601      	mov	r1, r0
 80072e2:	4a09      	ldr	r2, [pc, #36]	; (8007308 <_ProcessSignalDataTable+0x108>)
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	3302      	adds	r3, #2
 80072ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	3301      	adds	r3, #1
 80072f6:	61bb      	str	r3, [r7, #24]
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	2b77      	cmp	r3, #119	; 0x77
 80072fc:	dded      	ble.n	80072da <_ProcessSignalDataTable+0xda>
		}
	}

}
 80072fe:	bf00      	nop
 8007300:	3728      	adds	r7, #40	; 0x28
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20002388 	.word	0x20002388

0800730c <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b088      	sub	sp, #32
 8007310:	af00      	add	r7, sp, #0
 8007312:	ed87 0a03 	vstr	s0, [r7, #12]
 8007316:	edc7 0a02 	vstr	s1, [r7, #8]
 800731a:	4603      	mov	r3, r0
 800731c:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 800731e:	2001      	movs	r0, #1
 8007320:	f7ff fbe0 	bl	8006ae4 <SM_GetOutputChannel>
 8007324:	4603      	mov	r3, r0
 8007326:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b06      	cmp	r3, #6
 800732e:	d059      	beq.n	80073e4 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007330:	2300      	movs	r3, #0
 8007332:	61fb      	str	r3, [r7, #28]
 8007334:	e00f      	b.n	8007356 <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8007336:	2001      	movs	r0, #1
 8007338:	f7ff fbd4 	bl	8006ae4 <SM_GetOutputChannel>
 800733c:	4603      	mov	r3, r0
 800733e:	685a      	ldr	r2, [r3, #4]
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	4413      	add	r3, r2
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	4933      	ldr	r1, [pc, #204]	; (8007418 <_ProcessAuxDataTable+0x10c>)
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	3301      	adds	r3, #1
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	2b77      	cmp	r3, #119	; 0x77
 800735a:	ddec      	ble.n	8007336 <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 800735c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007360:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8007362:	88fb      	ldrh	r3, [r7, #6]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d008      	beq.n	800737a <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8007368:	88fb      	ldrh	r3, [r7, #6]
 800736a:	089b      	lsrs	r3, r3, #2
 800736c:	b29b      	uxth	r3, r3
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007376:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	e02e      	b.n	80073de <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8007380:	4a25      	ldr	r2, [pc, #148]	; (8007418 <_ProcessAuxDataTable+0x10c>)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007388:	ee07 3a90 	vmov	s15, r3
 800738c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007390:	edd7 7a03 	vldr	s15, [r7, #12]
 8007394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800739c:	ee17 1a90 	vmov	r1, s15
 80073a0:	4a1d      	ldr	r2, [pc, #116]	; (8007418 <_ProcessAuxDataTable+0x10c>)
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 80073a8:	4a1b      	ldr	r2, [pc, #108]	; (8007418 <_ProcessAuxDataTable+0x10c>)
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b0:	ee07 3a90 	vmov	s15, r3
 80073b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80073b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80073bc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 80073c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80073c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073cc:	ee17 1a90 	vmov	r1, s15
 80073d0:	4a11      	ldr	r2, [pc, #68]	; (8007418 <_ProcessAuxDataTable+0x10c>)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	3301      	adds	r3, #1
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2b77      	cmp	r3, #119	; 0x77
 80073e2:	ddcd      	ble.n	8007380 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80073e4:	2300      	movs	r3, #0
 80073e6:	613b      	str	r3, [r7, #16]
 80073e8:	e00e      	b.n	8007408 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 80073ea:	2001      	movs	r0, #1
 80073ec:	f7ff fb7a 	bl	8006ae4 <SM_GetOutputChannel>
 80073f0:	4601      	mov	r1, r0
 80073f2:	4a09      	ldr	r2, [pc, #36]	; (8007418 <_ProcessAuxDataTable+0x10c>)
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	3302      	adds	r3, #2
 80073fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	3301      	adds	r3, #1
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2b77      	cmp	r3, #119	; 0x77
 800740c:	dded      	ble.n	80073ea <_ProcessAuxDataTable+0xde>
	}
}
 800740e:	bf00      	nop
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20002388 	.word	0x20002388

0800741c <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8007426:	2000      	movs	r0, #0
 8007428:	f7ff fb5c 	bl	8006ae4 <SM_GetOutputChannel>
 800742c:	4603      	mov	r3, r0
 800742e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8007436:	4b15      	ldr	r3, [pc, #84]	; (800748c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007438:	881b      	ldrh	r3, [r3, #0]
 800743a:	88fa      	ldrh	r2, [r7, #6]
 800743c:	429a      	cmp	r2, r3
 800743e:	d90c      	bls.n	800745a <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
 8007442:	3301      	adds	r3, #1
 8007444:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8007446:	7bfb      	ldrb	r3, [r7, #15]
 8007448:	2b61      	cmp	r3, #97	; 0x61
 800744a:	d901      	bls.n	8007450 <VPP_MapEncoderPositionToSignalOutput+0x34>
 800744c:	2361      	movs	r3, #97	; 0x61
 800744e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007450:	7bfb      	ldrb	r3, [r7, #15]
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff fe7c 	bl	8007150 <VPP_ApplyProfileToSignal>
 8007458:	e010      	b.n	800747c <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 800745a:	4b0c      	ldr	r3, [pc, #48]	; (800748c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	429a      	cmp	r2, r3
 8007462:	d20b      	bcs.n	800747c <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8007464:	7bfb      	ldrb	r3, [r7, #15]
 8007466:	3b01      	subs	r3, #1
 8007468:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 800746a:	7bfb      	ldrb	r3, [r7, #15]
 800746c:	2b61      	cmp	r3, #97	; 0x61
 800746e:	d901      	bls.n	8007474 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8007470:	2300      	movs	r3, #0
 8007472:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	4618      	mov	r0, r3
 8007478:	f7ff fe6a 	bl	8007150 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 800747c:	4a03      	ldr	r2, [pc, #12]	; (800748c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800747e:	88fb      	ldrh	r3, [r7, #6]
 8007480:	8013      	strh	r3, [r2, #0]

}
 8007482:	bf00      	nop
 8007484:	3710      	adds	r7, #16
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	20001e9e 	.word	0x20001e9e

08007490 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b084      	sub	sp, #16
 8007494:	af00      	add	r7, sp, #0
 8007496:	4603      	mov	r3, r0
 8007498:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 800749a:	2001      	movs	r0, #1
 800749c:	f7ff fb22 	bl	8006ae4 <SM_GetOutputChannel>
 80074a0:	4603      	mov	r3, r0
 80074a2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80074aa:	4b15      	ldr	r3, [pc, #84]	; (8007500 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80074ac:	881b      	ldrh	r3, [r3, #0]
 80074ae:	88fa      	ldrh	r2, [r7, #6]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d90c      	bls.n	80074ce <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	3301      	adds	r3, #1
 80074b8:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80074ba:	7bfb      	ldrb	r3, [r7, #15]
 80074bc:	2b61      	cmp	r3, #97	; 0x61
 80074be:	d901      	bls.n	80074c4 <VPP_MapEncoderPositionToAuxOutput+0x34>
 80074c0:	2361      	movs	r3, #97	; 0x61
 80074c2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7ff fe70 	bl	80071ac <VPP_ApplyProfileToAux>
 80074cc:	e010      	b.n	80074f0 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80074ce:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80074d0:	881b      	ldrh	r3, [r3, #0]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d20b      	bcs.n	80074f0 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
 80074da:	3b01      	subs	r3, #1
 80074dc:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80074de:	7bfb      	ldrb	r3, [r7, #15]
 80074e0:	2b61      	cmp	r3, #97	; 0x61
 80074e2:	d901      	bls.n	80074e8 <VPP_MapEncoderPositionToAuxOutput+0x58>
 80074e4:	2300      	movs	r3, #0
 80074e6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7ff fe5e 	bl	80071ac <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 80074f0:	4a03      	ldr	r2, [pc, #12]	; (8007500 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	8013      	strh	r3, [r2, #0]

}
 80074f6:	bf00      	nop
 80074f8:	3710      	adds	r7, #16
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20001e9e 	.word	0x20001e9e

08007504 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08c      	sub	sp, #48	; 0x30
 8007508:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800750a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750e:	2200      	movs	r2, #0
 8007510:	601a      	str	r2, [r3, #0]
 8007512:	605a      	str	r2, [r3, #4]
 8007514:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007516:	1d3b      	adds	r3, r7, #4
 8007518:	2220      	movs	r2, #32
 800751a:	2100      	movs	r1, #0
 800751c:	4618      	mov	r0, r3
 800751e:	f009 ffeb 	bl	80114f8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007522:	4b32      	ldr	r3, [pc, #200]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007524:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007528:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800752a:	4b30      	ldr	r3, [pc, #192]	; (80075ec <MX_ADC1_Init+0xe8>)
 800752c:	2200      	movs	r2, #0
 800752e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007530:	4b2e      	ldr	r3, [pc, #184]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007532:	2200      	movs	r2, #0
 8007534:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007536:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007538:	2200      	movs	r2, #0
 800753a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800753c:	4b2b      	ldr	r3, [pc, #172]	; (80075ec <MX_ADC1_Init+0xe8>)
 800753e:	2200      	movs	r2, #0
 8007540:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007542:	4b2a      	ldr	r3, [pc, #168]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007544:	2200      	movs	r2, #0
 8007546:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007548:	4b28      	ldr	r3, [pc, #160]	; (80075ec <MX_ADC1_Init+0xe8>)
 800754a:	2204      	movs	r2, #4
 800754c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800754e:	4b27      	ldr	r3, [pc, #156]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007550:	2200      	movs	r2, #0
 8007552:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007554:	4b25      	ldr	r3, [pc, #148]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007556:	2201      	movs	r2, #1
 8007558:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800755a:	4b24      	ldr	r3, [pc, #144]	; (80075ec <MX_ADC1_Init+0xe8>)
 800755c:	2201      	movs	r2, #1
 800755e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007560:	4b22      	ldr	r3, [pc, #136]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007568:	4b20      	ldr	r3, [pc, #128]	; (80075ec <MX_ADC1_Init+0xe8>)
 800756a:	2200      	movs	r2, #0
 800756c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800756e:	4b1f      	ldr	r3, [pc, #124]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007570:	2200      	movs	r2, #0
 8007572:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007574:	4b1d      	ldr	r3, [pc, #116]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800757c:	4b1b      	ldr	r3, [pc, #108]	; (80075ec <MX_ADC1_Init+0xe8>)
 800757e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007582:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007584:	4b19      	ldr	r3, [pc, #100]	; (80075ec <MX_ADC1_Init+0xe8>)
 8007586:	2200      	movs	r2, #0
 8007588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800758c:	4817      	ldr	r0, [pc, #92]	; (80075ec <MX_ADC1_Init+0xe8>)
 800758e:	f002 f875 	bl	800967c <HAL_ADC_Init>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8007598:	f000 fea2 	bl	80082e0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800759c:	2300      	movs	r3, #0
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80075a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075a4:	4619      	mov	r1, r3
 80075a6:	4811      	ldr	r0, [pc, #68]	; (80075ec <MX_ADC1_Init+0xe8>)
 80075a8:	f002 ff6c 	bl	800a484 <HAL_ADCEx_MultiModeConfigChannel>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80075b2:	f000 fe95 	bl	80082e0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80075b6:	4b0e      	ldr	r3, [pc, #56]	; (80075f0 <MX_ADC1_Init+0xec>)
 80075b8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80075ba:	2306      	movs	r3, #6
 80075bc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80075be:	2300      	movs	r3, #0
 80075c0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80075c2:	237f      	movs	r3, #127	; 0x7f
 80075c4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80075c6:	2304      	movs	r3, #4
 80075c8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80075ca:	2300      	movs	r3, #0
 80075cc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80075ce:	1d3b      	adds	r3, r7, #4
 80075d0:	4619      	mov	r1, r3
 80075d2:	4806      	ldr	r0, [pc, #24]	; (80075ec <MX_ADC1_Init+0xe8>)
 80075d4:	f002 fa74 	bl	8009ac0 <HAL_ADC_ConfigChannel>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80075de:	f000 fe7f 	bl	80082e0 <Error_Handler>
  }

}
 80075e2:	bf00      	nop
 80075e4:	3730      	adds	r7, #48	; 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	20002568 	.word	0x20002568
 80075f0:	0c900008 	.word	0x0c900008

080075f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075fc:	f107 0314 	add.w	r3, r7, #20
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	605a      	str	r2, [r3, #4]
 8007606:	609a      	str	r2, [r3, #8]
 8007608:	60da      	str	r2, [r3, #12]
 800760a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007614:	d14f      	bne.n	80076b6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007616:	4b2a      	ldr	r3, [pc, #168]	; (80076c0 <HAL_ADC_MspInit+0xcc>)
 8007618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761a:	4a29      	ldr	r2, [pc, #164]	; (80076c0 <HAL_ADC_MspInit+0xcc>)
 800761c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007622:	4b27      	ldr	r3, [pc, #156]	; (80076c0 <HAL_ADC_MspInit+0xcc>)
 8007624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800762e:	4b24      	ldr	r3, [pc, #144]	; (80076c0 <HAL_ADC_MspInit+0xcc>)
 8007630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007632:	4a23      	ldr	r2, [pc, #140]	; (80076c0 <HAL_ADC_MspInit+0xcc>)
 8007634:	f043 0301 	orr.w	r3, r3, #1
 8007638:	64d3      	str	r3, [r2, #76]	; 0x4c
 800763a:	4b21      	ldr	r3, [pc, #132]	; (80076c0 <HAL_ADC_MspInit+0xcc>)
 800763c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763e:	f003 0301 	and.w	r3, r3, #1
 8007642:	60fb      	str	r3, [r7, #12]
 8007644:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007646:	2304      	movs	r3, #4
 8007648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800764a:	2303      	movs	r3, #3
 800764c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007652:	f107 0314 	add.w	r3, r7, #20
 8007656:	4619      	mov	r1, r3
 8007658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800765c:	f004 fc6c 	bl	800bf38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007660:	4b18      	ldr	r3, [pc, #96]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 8007662:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <HAL_ADC_MspInit+0xd4>)
 8007664:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007666:	4b17      	ldr	r3, [pc, #92]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 8007668:	2205      	movs	r2, #5
 800766a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800766c:	4b15      	ldr	r3, [pc, #84]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007672:	4b14      	ldr	r3, [pc, #80]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 8007674:	2200      	movs	r2, #0
 8007676:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007678:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 800767a:	2280      	movs	r2, #128	; 0x80
 800767c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800767e:	4b11      	ldr	r3, [pc, #68]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 8007680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007684:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007686:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 8007688:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800768c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800768e:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 8007690:	2220      	movs	r2, #32
 8007692:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007694:	4b0b      	ldr	r3, [pc, #44]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 8007696:	2200      	movs	r2, #0
 8007698:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800769a:	480a      	ldr	r0, [pc, #40]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 800769c:	f004 f91a 	bl	800b8d4 <HAL_DMA_Init>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80076a6:	f000 fe1b 	bl	80082e0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	4a05      	ldr	r2, [pc, #20]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 80076ae:	655a      	str	r2, [r3, #84]	; 0x54
 80076b0:	4a04      	ldr	r2, [pc, #16]	; (80076c4 <HAL_ADC_MspInit+0xd0>)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80076b6:	bf00      	nop
 80076b8:	3728      	adds	r7, #40	; 0x28
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	40021000 	.word	0x40021000
 80076c4:	200025d4 	.word	0x200025d4
 80076c8:	40020008 	.word	0x40020008

080076cc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80076d0:	4b0f      	ldr	r3, [pc, #60]	; (8007710 <MX_COMP1_Init+0x44>)
 80076d2:	4a10      	ldr	r2, [pc, #64]	; (8007714 <MX_COMP1_Init+0x48>)
 80076d4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80076d6:	4b0e      	ldr	r3, [pc, #56]	; (8007710 <MX_COMP1_Init+0x44>)
 80076d8:	2200      	movs	r2, #0
 80076da:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80076dc:	4b0c      	ldr	r3, [pc, #48]	; (8007710 <MX_COMP1_Init+0x44>)
 80076de:	4a0e      	ldr	r2, [pc, #56]	; (8007718 <MX_COMP1_Init+0x4c>)
 80076e0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80076e2:	4b0b      	ldr	r3, [pc, #44]	; (8007710 <MX_COMP1_Init+0x44>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80076e8:	4b09      	ldr	r3, [pc, #36]	; (8007710 <MX_COMP1_Init+0x44>)
 80076ea:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80076ee:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80076f0:	4b07      	ldr	r3, [pc, #28]	; (8007710 <MX_COMP1_Init+0x44>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80076f6:	4b06      	ldr	r3, [pc, #24]	; (8007710 <MX_COMP1_Init+0x44>)
 80076f8:	2231      	movs	r2, #49	; 0x31
 80076fa:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80076fc:	4804      	ldr	r0, [pc, #16]	; (8007710 <MX_COMP1_Init+0x44>)
 80076fe:	f003 f941 	bl	800a984 <HAL_COMP_Init>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8007708:	f000 fdea 	bl	80082e0 <Error_Handler>
  }

}
 800770c:	bf00      	nop
 800770e:	bd80      	pop	{r7, pc}
 8007710:	20002634 	.word	0x20002634
 8007714:	40010200 	.word	0x40010200
 8007718:	00800030 	.word	0x00800030

0800771c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007724:	f107 030c 	add.w	r3, r7, #12
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	605a      	str	r2, [r3, #4]
 800772e:	609a      	str	r2, [r3, #8]
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a13      	ldr	r2, [pc, #76]	; (8007788 <HAL_COMP_MspInit+0x6c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d120      	bne.n	8007780 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800773e:	4b13      	ldr	r3, [pc, #76]	; (800778c <HAL_COMP_MspInit+0x70>)
 8007740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007742:	4a12      	ldr	r2, [pc, #72]	; (800778c <HAL_COMP_MspInit+0x70>)
 8007744:	f043 0301 	orr.w	r3, r3, #1
 8007748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800774a:	4b10      	ldr	r3, [pc, #64]	; (800778c <HAL_COMP_MspInit+0x70>)
 800774c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	60bb      	str	r3, [r7, #8]
 8007754:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007756:	2302      	movs	r3, #2
 8007758:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800775a:	2303      	movs	r3, #3
 800775c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007762:	f107 030c 	add.w	r3, r7, #12
 8007766:	4619      	mov	r1, r3
 8007768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800776c:	f004 fbe4 	bl	800bf38 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	2100      	movs	r1, #0
 8007774:	2040      	movs	r0, #64	; 0x40
 8007776:	f003 fc4c 	bl	800b012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800777a:	2040      	movs	r0, #64	; 0x40
 800777c:	f003 fc63 	bl	800b046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007780:	bf00      	nop
 8007782:	3720      	adds	r7, #32
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	40010200 	.word	0x40010200
 800778c:	40021000 	.word	0x40021000

08007790 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b08c      	sub	sp, #48	; 0x30
 8007794:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8007796:	463b      	mov	r3, r7
 8007798:	2230      	movs	r2, #48	; 0x30
 800779a:	2100      	movs	r1, #0
 800779c:	4618      	mov	r0, r3
 800779e:	f009 feab 	bl	80114f8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80077a2:	4b1e      	ldr	r3, [pc, #120]	; (800781c <MX_DAC1_Init+0x8c>)
 80077a4:	4a1e      	ldr	r2, [pc, #120]	; (8007820 <MX_DAC1_Init+0x90>)
 80077a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80077a8:	481c      	ldr	r0, [pc, #112]	; (800781c <MX_DAC1_Init+0x8c>)
 80077aa:	f003 fc74 	bl	800b096 <HAL_DAC_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80077b4:	f000 fd94 	bl	80082e0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80077b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077bc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80077be:	2300      	movs	r3, #0
 80077c0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80077c2:	2300      	movs	r3, #0
 80077c4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80077c6:	2300      	movs	r3, #0
 80077c8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80077ca:	2306      	movs	r3, #6
 80077cc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80077ce:	2300      	movs	r3, #0
 80077d0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80077d2:	2300      	movs	r3, #0
 80077d4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80077d6:	2301      	movs	r3, #1
 80077d8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80077da:	2300      	movs	r3, #0
 80077dc:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80077de:	463b      	mov	r3, r7
 80077e0:	2200      	movs	r2, #0
 80077e2:	4619      	mov	r1, r3
 80077e4:	480d      	ldr	r0, [pc, #52]	; (800781c <MX_DAC1_Init+0x8c>)
 80077e6:	f003 fe3f 	bl	800b468 <HAL_DAC_ConfigChannel>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80077f0:	f000 fd76 	bl	80082e0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80077f8:	2301      	movs	r3, #1
 80077fa:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80077fc:	463b      	mov	r3, r7
 80077fe:	2210      	movs	r2, #16
 8007800:	4619      	mov	r1, r3
 8007802:	4806      	ldr	r0, [pc, #24]	; (800781c <MX_DAC1_Init+0x8c>)
 8007804:	f003 fe30 	bl	800b468 <HAL_DAC_ConfigChannel>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800780e:	f000 fd67 	bl	80082e0 <Error_Handler>
  }

}
 8007812:	bf00      	nop
 8007814:	3730      	adds	r7, #48	; 0x30
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}
 800781a:	bf00      	nop
 800781c:	2000266c 	.word	0x2000266c
 8007820:	50000800 	.word	0x50000800

08007824 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08c      	sub	sp, #48	; 0x30
 8007828:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800782a:	463b      	mov	r3, r7
 800782c:	2230      	movs	r2, #48	; 0x30
 800782e:	2100      	movs	r1, #0
 8007830:	4618      	mov	r0, r3
 8007832:	f009 fe61 	bl	80114f8 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8007836:	4b16      	ldr	r3, [pc, #88]	; (8007890 <MX_DAC2_Init+0x6c>)
 8007838:	4a16      	ldr	r2, [pc, #88]	; (8007894 <MX_DAC2_Init+0x70>)
 800783a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800783c:	4814      	ldr	r0, [pc, #80]	; (8007890 <MX_DAC2_Init+0x6c>)
 800783e:	f003 fc2a 	bl	800b096 <HAL_DAC_Init>
 8007842:	4603      	mov	r3, r0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d001      	beq.n	800784c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8007848:	f000 fd4a 	bl	80082e0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800784c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007850:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007852:	2300      	movs	r3, #0
 8007854:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8007856:	2300      	movs	r3, #0
 8007858:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800785e:	2306      	movs	r3, #6
 8007860:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007862:	2300      	movs	r3, #0
 8007864:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007866:	2300      	movs	r3, #0
 8007868:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800786a:	2301      	movs	r3, #1
 800786c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007872:	463b      	mov	r3, r7
 8007874:	2200      	movs	r2, #0
 8007876:	4619      	mov	r1, r3
 8007878:	4805      	ldr	r0, [pc, #20]	; (8007890 <MX_DAC2_Init+0x6c>)
 800787a:	f003 fdf5 	bl	800b468 <HAL_DAC_ConfigChannel>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d001      	beq.n	8007888 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007884:	f000 fd2c 	bl	80082e0 <Error_Handler>
  }

}
 8007888:	bf00      	nop
 800788a:	3730      	adds	r7, #48	; 0x30
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}
 8007890:	20002658 	.word	0x20002658
 8007894:	50000c00 	.word	0x50000c00

08007898 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b08c      	sub	sp, #48	; 0x30
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078a0:	f107 031c 	add.w	r3, r7, #28
 80078a4:	2200      	movs	r2, #0
 80078a6:	601a      	str	r2, [r3, #0]
 80078a8:	605a      	str	r2, [r3, #4]
 80078aa:	609a      	str	r2, [r3, #8]
 80078ac:	60da      	str	r2, [r3, #12]
 80078ae:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4a56      	ldr	r2, [pc, #344]	; (8007a10 <HAL_DAC_MspInit+0x178>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d150      	bne.n	800795c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80078ba:	4b56      	ldr	r3, [pc, #344]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	4a55      	ldr	r2, [pc, #340]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 80078c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078c6:	4b53      	ldr	r3, [pc, #332]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 80078c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078ce:	61bb      	str	r3, [r7, #24]
 80078d0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078d2:	4b50      	ldr	r3, [pc, #320]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 80078d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d6:	4a4f      	ldr	r2, [pc, #316]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 80078d8:	f043 0301 	orr.w	r3, r3, #1
 80078dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80078de:	4b4d      	ldr	r3, [pc, #308]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 80078e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e2:	f003 0301 	and.w	r3, r3, #1
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80078ea:	2330      	movs	r3, #48	; 0x30
 80078ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80078ee:	2303      	movs	r3, #3
 80078f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078f6:	f107 031c 	add.w	r3, r7, #28
 80078fa:	4619      	mov	r1, r3
 80078fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007900:	f004 fb1a 	bl	800bf38 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007904:	4b44      	ldr	r3, [pc, #272]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 8007906:	4a45      	ldr	r2, [pc, #276]	; (8007a1c <HAL_DAC_MspInit+0x184>)
 8007908:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800790a:	4b43      	ldr	r3, [pc, #268]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 800790c:	2206      	movs	r2, #6
 800790e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007910:	4b41      	ldr	r3, [pc, #260]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 8007912:	2210      	movs	r2, #16
 8007914:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007916:	4b40      	ldr	r3, [pc, #256]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 8007918:	2200      	movs	r2, #0
 800791a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800791c:	4b3e      	ldr	r3, [pc, #248]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 800791e:	2280      	movs	r2, #128	; 0x80
 8007920:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007922:	4b3d      	ldr	r3, [pc, #244]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 8007924:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007928:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800792a:	4b3b      	ldr	r3, [pc, #236]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 800792c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007930:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007932:	4b39      	ldr	r3, [pc, #228]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 8007934:	2220      	movs	r2, #32
 8007936:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007938:	4b37      	ldr	r3, [pc, #220]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 800793a:	2200      	movs	r2, #0
 800793c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800793e:	4836      	ldr	r0, [pc, #216]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 8007940:	f003 ffc8 	bl	800b8d4 <HAL_DMA_Init>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800794a:	f000 fcc9 	bl	80082e0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a31      	ldr	r2, [pc, #196]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 8007952:	609a      	str	r2, [r3, #8]
 8007954:	4a30      	ldr	r2, [pc, #192]	; (8007a18 <HAL_DAC_MspInit+0x180>)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800795a:	e054      	b.n	8007a06 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a2f      	ldr	r2, [pc, #188]	; (8007a20 <HAL_DAC_MspInit+0x188>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d14f      	bne.n	8007a06 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8007966:	4b2b      	ldr	r3, [pc, #172]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 8007968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796a:	4a2a      	ldr	r2, [pc, #168]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 800796c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007972:	4b28      	ldr	r3, [pc, #160]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 8007974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800797a:	613b      	str	r3, [r7, #16]
 800797c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800797e:	4b25      	ldr	r3, [pc, #148]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 8007980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007982:	4a24      	ldr	r2, [pc, #144]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 8007984:	f043 0301 	orr.w	r3, r3, #1
 8007988:	64d3      	str	r3, [r2, #76]	; 0x4c
 800798a:	4b22      	ldr	r3, [pc, #136]	; (8007a14 <HAL_DAC_MspInit+0x17c>)
 800798c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
 8007994:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8007996:	2340      	movs	r3, #64	; 0x40
 8007998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800799a:	2303      	movs	r3, #3
 800799c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800799e:	2300      	movs	r3, #0
 80079a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079a2:	f107 031c 	add.w	r3, r7, #28
 80079a6:	4619      	mov	r1, r3
 80079a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80079ac:	f004 fac4 	bl	800bf38 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80079b0:	4b1c      	ldr	r3, [pc, #112]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079b2:	4a1d      	ldr	r2, [pc, #116]	; (8007a28 <HAL_DAC_MspInit+0x190>)
 80079b4:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80079b6:	4b1b      	ldr	r3, [pc, #108]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079b8:	2229      	movs	r2, #41	; 0x29
 80079ba:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80079bc:	4b19      	ldr	r3, [pc, #100]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079be:	2210      	movs	r2, #16
 80079c0:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80079c2:	4b18      	ldr	r3, [pc, #96]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80079c8:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079ca:	2280      	movs	r2, #128	; 0x80
 80079cc:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80079ce:	4b15      	ldr	r3, [pc, #84]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80079d4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80079d6:	4b13      	ldr	r3, [pc, #76]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079dc:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80079de:	4b11      	ldr	r3, [pc, #68]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079e0:	2220      	movs	r2, #32
 80079e2:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80079e4:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079e6:	2200      	movs	r2, #0
 80079e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80079ea:	480e      	ldr	r0, [pc, #56]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079ec:	f003 ff72 	bl	800b8d4 <HAL_DMA_Init>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80079f6:	f000 fc73 	bl	80082e0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a09      	ldr	r2, [pc, #36]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 80079fe:	609a      	str	r2, [r3, #8]
 8007a00:	4a08      	ldr	r2, [pc, #32]	; (8007a24 <HAL_DAC_MspInit+0x18c>)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007a06:	bf00      	nop
 8007a08:	3730      	adds	r7, #48	; 0x30
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	50000800 	.word	0x50000800
 8007a14:	40021000 	.word	0x40021000
 8007a18:	20001eb4 	.word	0x20001eb4
 8007a1c:	4002001c 	.word	0x4002001c
 8007a20:	50000c00 	.word	0x50000c00
 8007a24:	20002680 	.word	0x20002680
 8007a28:	40020030 	.word	0x40020030

08007a2c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007a32:	4b1e      	ldr	r3, [pc, #120]	; (8007aac <MX_DMA_Init+0x80>)
 8007a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a36:	4a1d      	ldr	r2, [pc, #116]	; (8007aac <MX_DMA_Init+0x80>)
 8007a38:	f043 0304 	orr.w	r3, r3, #4
 8007a3c:	6493      	str	r3, [r2, #72]	; 0x48
 8007a3e:	4b1b      	ldr	r3, [pc, #108]	; (8007aac <MX_DMA_Init+0x80>)
 8007a40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a42:	f003 0304 	and.w	r3, r3, #4
 8007a46:	607b      	str	r3, [r7, #4]
 8007a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007a4a:	4b18      	ldr	r3, [pc, #96]	; (8007aac <MX_DMA_Init+0x80>)
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a4e:	4a17      	ldr	r2, [pc, #92]	; (8007aac <MX_DMA_Init+0x80>)
 8007a50:	f043 0301 	orr.w	r3, r3, #1
 8007a54:	6493      	str	r3, [r2, #72]	; 0x48
 8007a56:	4b15      	ldr	r3, [pc, #84]	; (8007aac <MX_DMA_Init+0x80>)
 8007a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007a62:	2200      	movs	r2, #0
 8007a64:	2101      	movs	r1, #1
 8007a66:	200b      	movs	r0, #11
 8007a68:	f003 fad3 	bl	800b012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007a6c:	200b      	movs	r0, #11
 8007a6e:	f003 faea 	bl	800b046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007a72:	2200      	movs	r2, #0
 8007a74:	2100      	movs	r1, #0
 8007a76:	200c      	movs	r0, #12
 8007a78:	f003 facb 	bl	800b012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007a7c:	200c      	movs	r0, #12
 8007a7e:	f003 fae2 	bl	800b046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007a82:	2200      	movs	r2, #0
 8007a84:	2100      	movs	r1, #0
 8007a86:	200d      	movs	r0, #13
 8007a88:	f003 fac3 	bl	800b012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007a8c:	200d      	movs	r0, #13
 8007a8e:	f003 fada 	bl	800b046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8007a92:	2200      	movs	r2, #0
 8007a94:	2100      	movs	r1, #0
 8007a96:	200e      	movs	r0, #14
 8007a98:	f003 fabb 	bl	800b012 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8007a9c:	200e      	movs	r0, #14
 8007a9e:	f003 fad2 	bl	800b046 <HAL_NVIC_EnableIRQ>

}
 8007aa2:	bf00      	nop
 8007aa4:	3708      	adds	r7, #8
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40021000 	.word	0x40021000

08007ab0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ab4:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <__NVIC_GetPriorityGrouping+0x18>)
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	0a1b      	lsrs	r3, r3, #8
 8007aba:	f003 0307 	and.w	r3, r3, #7
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	e000ed00 	.word	0xe000ed00

08007acc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	db0b      	blt.n	8007af6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ade:	79fb      	ldrb	r3, [r7, #7]
 8007ae0:	f003 021f 	and.w	r2, r3, #31
 8007ae4:	4907      	ldr	r1, [pc, #28]	; (8007b04 <__NVIC_EnableIRQ+0x38>)
 8007ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aea:	095b      	lsrs	r3, r3, #5
 8007aec:	2001      	movs	r0, #1
 8007aee:	fa00 f202 	lsl.w	r2, r0, r2
 8007af2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007af6:	bf00      	nop
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	e000e100 	.word	0xe000e100

08007b08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	6039      	str	r1, [r7, #0]
 8007b12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	db0a      	blt.n	8007b32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	b2da      	uxtb	r2, r3
 8007b20:	490c      	ldr	r1, [pc, #48]	; (8007b54 <__NVIC_SetPriority+0x4c>)
 8007b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b26:	0112      	lsls	r2, r2, #4
 8007b28:	b2d2      	uxtb	r2, r2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007b30:	e00a      	b.n	8007b48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	4908      	ldr	r1, [pc, #32]	; (8007b58 <__NVIC_SetPriority+0x50>)
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	3b04      	subs	r3, #4
 8007b40:	0112      	lsls	r2, r2, #4
 8007b42:	b2d2      	uxtb	r2, r2
 8007b44:	440b      	add	r3, r1
 8007b46:	761a      	strb	r2, [r3, #24]
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	e000e100 	.word	0xe000e100
 8007b58:	e000ed00 	.word	0xe000ed00

08007b5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b089      	sub	sp, #36	; 0x24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 0307 	and.w	r3, r3, #7
 8007b6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b70:	69fb      	ldr	r3, [r7, #28]
 8007b72:	f1c3 0307 	rsb	r3, r3, #7
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	bf28      	it	cs
 8007b7a:	2304      	movcs	r3, #4
 8007b7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	3304      	adds	r3, #4
 8007b82:	2b06      	cmp	r3, #6
 8007b84:	d902      	bls.n	8007b8c <NVIC_EncodePriority+0x30>
 8007b86:	69fb      	ldr	r3, [r7, #28]
 8007b88:	3b03      	subs	r3, #3
 8007b8a:	e000      	b.n	8007b8e <NVIC_EncodePriority+0x32>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9a:	43da      	mvns	r2, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	401a      	ands	r2, r3
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007ba4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	fa01 f303 	lsl.w	r3, r1, r3
 8007bae:	43d9      	mvns	r1, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bb4:	4313      	orrs	r3, r2
         );
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3724      	adds	r7, #36	; 0x24
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8007bce:	4a14      	ldr	r2, [pc, #80]	; (8007c20 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	3302      	adds	r3, #2
 8007bd8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	0c1b      	lsrs	r3, r3, #16
 8007be0:	43db      	mvns	r3, r3
 8007be2:	ea02 0103 	and.w	r1, r2, r3
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	0c1b      	lsrs	r3, r3, #16
 8007bea:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	fa93 f3a3 	rbit	r3, r3
 8007bf2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	fab3 f383 	clz	r3, r3
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	f003 031f 	and.w	r3, r3, #31
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	409a      	lsls	r2, r3
 8007c04:	4806      	ldr	r0, [pc, #24]	; (8007c20 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	3302      	adds	r3, #2
 8007c10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007c14:	bf00      	nop
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr
 8007c20:	40010000 	.word	0x40010000

08007c24 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b089      	sub	sp, #36	; 0x24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	fa93 f3a3 	rbit	r3, r3
 8007c3e:	613b      	str	r3, [r7, #16]
  return result;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	fab3 f383 	clz	r3, r3
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	2103      	movs	r1, #3
 8007c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c50:	43db      	mvns	r3, r3
 8007c52:	401a      	ands	r2, r3
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	fa93 f3a3 	rbit	r3, r3
 8007c5e:	61bb      	str	r3, [r7, #24]
  return result;
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	fab3 f383 	clz	r3, r3
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	005b      	lsls	r3, r3, #1
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c70:	431a      	orrs	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	601a      	str	r2, [r3, #0]
}
 8007c76:	bf00      	nop
 8007c78:	3724      	adds	r7, #36	; 0x24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b089      	sub	sp, #36	; 0x24
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	60f8      	str	r0, [r7, #12]
 8007c8a:	60b9      	str	r1, [r7, #8]
 8007c8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	68da      	ldr	r2, [r3, #12]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	fa93 f3a3 	rbit	r3, r3
 8007c9c:	613b      	str	r3, [r7, #16]
  return result;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	fab3 f383 	clz	r3, r3
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	005b      	lsls	r3, r3, #1
 8007ca8:	2103      	movs	r1, #3
 8007caa:	fa01 f303 	lsl.w	r3, r1, r3
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	401a      	ands	r2, r3
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	fa93 f3a3 	rbit	r3, r3
 8007cbc:	61bb      	str	r3, [r7, #24]
  return result;
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	fab3 f383 	clz	r3, r3
 8007cc4:	b2db      	uxtb	r3, r3
 8007cc6:	005b      	lsls	r3, r3, #1
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	fa01 f303 	lsl.w	r3, r1, r3
 8007cce:	431a      	orrs	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	60da      	str	r2, [r3, #12]
}
 8007cd4:	bf00      	nop
 8007cd6:	3724      	adds	r7, #36	; 0x24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b085      	sub	sp, #20
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007d04:	4b08      	ldr	r3, [pc, #32]	; (8007d28 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d08:	4907      	ldr	r1, [pc, #28]	; (8007d28 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007d10:	4b05      	ldr	r3, [pc, #20]	; (8007d28 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	4013      	ands	r3, r2
 8007d18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40021000 	.word	0x40021000

08007d2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08a      	sub	sp, #40	; 0x28
 8007d30:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007d32:	f107 031c 	add.w	r3, r7, #28
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	605a      	str	r2, [r3, #4]
 8007d3c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d3e:	1d3b      	adds	r3, r7, #4
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]
 8007d44:	605a      	str	r2, [r3, #4]
 8007d46:	609a      	str	r2, [r3, #8]
 8007d48:	60da      	str	r2, [r3, #12]
 8007d4a:	611a      	str	r2, [r3, #16]
 8007d4c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007d4e:	2004      	movs	r0, #4
 8007d50:	f7ff ffd4 	bl	8007cfc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007d54:	2020      	movs	r0, #32
 8007d56:	f7ff ffd1 	bl	8007cfc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007d5a:	2001      	movs	r0, #1
 8007d5c:	f7ff ffce 	bl	8007cfc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007d60:	2002      	movs	r0, #2
 8007d62:	f7ff ffcb 	bl	8007cfc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007d66:	2108      	movs	r1, #8
 8007d68:	48d3      	ldr	r0, [pc, #844]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007d6a:	f7ff ffb9 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007d6e:	2108      	movs	r1, #8
 8007d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d74:	f7ff ffb4 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007d78:	2110      	movs	r1, #16
 8007d7a:	48cf      	ldr	r0, [pc, #828]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007d7c:	f7ff ffb0 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007d80:	2120      	movs	r1, #32
 8007d82:	48cd      	ldr	r0, [pc, #820]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007d84:	f7ff ffac 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 8007d88:	2101      	movs	r1, #1
 8007d8a:	48cc      	ldr	r0, [pc, #816]	; (80080bc <MX_GPIO_Init+0x390>)
 8007d8c:	f7ff ffa8 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d94:	48c8      	ldr	r0, [pc, #800]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007d96:	f7ff ffa3 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d9e:	48c6      	ldr	r0, [pc, #792]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007da0:	f7ff ff9e 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007da4:	2140      	movs	r1, #64	; 0x40
 8007da6:	48c5      	ldr	r0, [pc, #788]	; (80080bc <MX_GPIO_Init+0x390>)
 8007da8:	f7ff ff9a 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007dac:	2180      	movs	r1, #128	; 0x80
 8007dae:	48c3      	ldr	r0, [pc, #780]	; (80080bc <MX_GPIO_Init+0x390>)
 8007db0:	f7ff ff96 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007db4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007db8:	48c0      	ldr	r0, [pc, #768]	; (80080bc <MX_GPIO_Init+0x390>)
 8007dba:	f7ff ff91 	bl	8007ce0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 8007dbe:	49c0      	ldr	r1, [pc, #768]	; (80080c0 <MX_GPIO_Init+0x394>)
 8007dc0:	2002      	movs	r0, #2
 8007dc2:	f7ff feff 	bl	8007bc4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8007dc6:	49bf      	ldr	r1, [pc, #764]	; (80080c4 <MX_GPIO_Init+0x398>)
 8007dc8:	2002      	movs	r0, #2
 8007dca:	f7ff fefb 	bl	8007bc4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 8007dce:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8007dd2:	2005      	movs	r0, #5
 8007dd4:	f7ff fef6 	bl	8007bc4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8007dd8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8007ddc:	2005      	movs	r0, #5
 8007dde:	f7ff fef1 	bl	8007bc4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8007de2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8007de6:	2002      	movs	r0, #2
 8007de8:	f7ff feec 	bl	8007bc4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8007dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007df0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007dfe:	2302      	movs	r3, #2
 8007e00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e04:	f107 031c 	add.w	r3, r7, #28
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f008 f893 	bl	800ff34 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e12:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e20:	2302      	movs	r3, #2
 8007e22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e26:	f107 031c 	add.w	r3, r7, #28
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f008 f882 	bl	800ff34 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007e30:	2301      	movs	r3, #1
 8007e32:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e34:	2301      	movs	r3, #1
 8007e36:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e40:	2302      	movs	r3, #2
 8007e42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e46:	f107 031c 	add.w	r3, r7, #28
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f008 f872 	bl	800ff34 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007e50:	2302      	movs	r3, #2
 8007e52:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e60:	2302      	movs	r3, #2
 8007e62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e66:	f107 031c 	add.w	r3, r7, #28
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f008 f862 	bl	800ff34 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007e70:	2304      	movs	r3, #4
 8007e72:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007e74:	2301      	movs	r3, #1
 8007e76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007e80:	2302      	movs	r3, #2
 8007e82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007e86:	f107 031c 	add.w	r3, r7, #28
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f008 f852 	bl	800ff34 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007e90:	2201      	movs	r2, #1
 8007e92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e96:	4888      	ldr	r0, [pc, #544]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007e98:	f7ff fef3 	bl	8007c82 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ea2:	4885      	ldr	r0, [pc, #532]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007ea4:	f7ff feed 	bl	8007c82 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	2101      	movs	r1, #1
 8007eac:	4886      	ldr	r0, [pc, #536]	; (80080c8 <MX_GPIO_Init+0x39c>)
 8007eae:	f7ff fee8 	bl	8007c82 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	2102      	movs	r1, #2
 8007eb6:	4884      	ldr	r0, [pc, #528]	; (80080c8 <MX_GPIO_Init+0x39c>)
 8007eb8:	f7ff fee3 	bl	8007c82 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	2104      	movs	r1, #4
 8007ec0:	487d      	ldr	r0, [pc, #500]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007ec2:	f7ff fede 	bl	8007c82 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ecc:	487a      	ldr	r0, [pc, #488]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007ece:	f7ff fea9 	bl	8007c24 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ed8:	4877      	ldr	r0, [pc, #476]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007eda:	f7ff fea3 	bl	8007c24 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	4879      	ldr	r0, [pc, #484]	; (80080c8 <MX_GPIO_Init+0x39c>)
 8007ee4:	f7ff fe9e 	bl	8007c24 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007ee8:	2200      	movs	r2, #0
 8007eea:	2102      	movs	r1, #2
 8007eec:	4876      	ldr	r0, [pc, #472]	; (80080c8 <MX_GPIO_Init+0x39c>)
 8007eee:	f7ff fe99 	bl	8007c24 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2104      	movs	r1, #4
 8007ef6:	4870      	ldr	r0, [pc, #448]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007ef8:	f7ff fe94 	bl	8007c24 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007efc:	2308      	movs	r3, #8
 8007efe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f00:	2301      	movs	r3, #1
 8007f02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007f10:	1d3b      	adds	r3, r7, #4
 8007f12:	4619      	mov	r1, r3
 8007f14:	4868      	ldr	r0, [pc, #416]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007f16:	f008 fa00 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007f1a:	2308      	movs	r3, #8
 8007f1c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f22:	2300      	movs	r3, #0
 8007f24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007f2e:	1d3b      	adds	r3, r7, #4
 8007f30:	4619      	mov	r1, r3
 8007f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007f36:	f008 f9f0 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007f3a:	2310      	movs	r3, #16
 8007f3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f42:	2300      	movs	r3, #0
 8007f44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007f4e:	1d3b      	adds	r3, r7, #4
 8007f50:	4619      	mov	r1, r3
 8007f52:	4859      	ldr	r0, [pc, #356]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007f54:	f008 f9e1 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007f58:	2320      	movs	r3, #32
 8007f5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007f6c:	1d3b      	adds	r3, r7, #4
 8007f6e:	4619      	mov	r1, r3
 8007f70:	4851      	ldr	r0, [pc, #324]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007f72:	f008 f9d2 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007f76:	2301      	movs	r3, #1
 8007f78:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007f82:	2300      	movs	r3, #0
 8007f84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007f8a:	1d3b      	adds	r3, r7, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	484b      	ldr	r0, [pc, #300]	; (80080bc <MX_GPIO_Init+0x390>)
 8007f90:	f008 f9c3 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007faa:	1d3b      	adds	r3, r7, #4
 8007fac:	4619      	mov	r1, r3
 8007fae:	4842      	ldr	r0, [pc, #264]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007fb0:	f008 f9b3 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007fca:	1d3b      	adds	r3, r7, #4
 8007fcc:	4619      	mov	r1, r3
 8007fce:	483a      	ldr	r0, [pc, #232]	; (80080b8 <MX_GPIO_Init+0x38c>)
 8007fd0:	f008 f9a3 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007fd4:	2340      	movs	r3, #64	; 0x40
 8007fd6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007fdc:	2303      	movs	r3, #3
 8007fde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007fe8:	1d3b      	adds	r3, r7, #4
 8007fea:	4619      	mov	r1, r3
 8007fec:	4833      	ldr	r0, [pc, #204]	; (80080bc <MX_GPIO_Init+0x390>)
 8007fee:	f008 f994 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007ff2:	2380      	movs	r3, #128	; 0x80
 8007ff4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8008006:	1d3b      	adds	r3, r7, #4
 8008008:	4619      	mov	r1, r3
 800800a:	482c      	ldr	r0, [pc, #176]	; (80080bc <MX_GPIO_Init+0x390>)
 800800c:	f008 f985 	bl	801031a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8008010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008014:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8008016:	2301      	movs	r3, #1
 8008018:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800801a:	2303      	movs	r3, #3
 800801c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800801e:	2300      	movs	r3, #0
 8008020:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8008022:	2300      	movs	r3, #0
 8008024:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8008026:	1d3b      	adds	r3, r7, #4
 8008028:	4619      	mov	r1, r3
 800802a:	4824      	ldr	r0, [pc, #144]	; (80080bc <MX_GPIO_Init+0x390>)
 800802c:	f008 f975 	bl	801031a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008030:	f7ff fd3e 	bl	8007ab0 <__NVIC_GetPriorityGrouping>
 8008034:	4603      	mov	r3, r0
 8008036:	2200      	movs	r2, #0
 8008038:	2100      	movs	r1, #0
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fd8e 	bl	8007b5c <NVIC_EncodePriority>
 8008040:	4603      	mov	r3, r0
 8008042:	4619      	mov	r1, r3
 8008044:	2006      	movs	r0, #6
 8008046:	f7ff fd5f 	bl	8007b08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800804a:	2006      	movs	r0, #6
 800804c:	f7ff fd3e 	bl	8007acc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008050:	f7ff fd2e 	bl	8007ab0 <__NVIC_GetPriorityGrouping>
 8008054:	4603      	mov	r3, r0
 8008056:	2200      	movs	r2, #0
 8008058:	2100      	movs	r1, #0
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff fd7e 	bl	8007b5c <NVIC_EncodePriority>
 8008060:	4603      	mov	r3, r0
 8008062:	4619      	mov	r1, r3
 8008064:	2007      	movs	r0, #7
 8008066:	f7ff fd4f 	bl	8007b08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800806a:	2007      	movs	r0, #7
 800806c:	f7ff fd2e 	bl	8007acc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008070:	f7ff fd1e 	bl	8007ab0 <__NVIC_GetPriorityGrouping>
 8008074:	4603      	mov	r3, r0
 8008076:	2200      	movs	r2, #0
 8008078:	2100      	movs	r1, #0
 800807a:	4618      	mov	r0, r3
 800807c:	f7ff fd6e 	bl	8007b5c <NVIC_EncodePriority>
 8008080:	4603      	mov	r3, r0
 8008082:	4619      	mov	r1, r3
 8008084:	2008      	movs	r0, #8
 8008086:	f7ff fd3f 	bl	8007b08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800808a:	2008      	movs	r0, #8
 800808c:	f7ff fd1e 	bl	8007acc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8008090:	f7ff fd0e 	bl	8007ab0 <__NVIC_GetPriorityGrouping>
 8008094:	4603      	mov	r3, r0
 8008096:	2200      	movs	r2, #0
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f7ff fd5e 	bl	8007b5c <NVIC_EncodePriority>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4619      	mov	r1, r3
 80080a4:	2028      	movs	r0, #40	; 0x28
 80080a6:	f7ff fd2f 	bl	8007b08 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80080aa:	2028      	movs	r0, #40	; 0x28
 80080ac:	f7ff fd0e 	bl	8007acc <__NVIC_EnableIRQ>

}
 80080b0:	bf00      	nop
 80080b2:	3728      	adds	r7, #40	; 0x28
 80080b4:	46bd      	mov	sp, r7
 80080b6:	e009      	b.n	80080cc <MX_GPIO_Init+0x3a0>
 80080b8:	48000800 	.word	0x48000800
 80080bc:	48000400 	.word	0x48000400
 80080c0:	0f000003 	.word	0x0f000003
 80080c4:	f0000003 	.word	0xf0000003
 80080c8:	48001400 	.word	0x48001400
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop

080080d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80080d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80080dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d013      	beq.n	8008110 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80080e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80080ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80080f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d00b      	beq.n	8008110 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80080f8:	e000      	b.n	80080fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80080fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80080fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0f9      	beq.n	80080fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8008106:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	b2d2      	uxtb	r2, r2
 800810e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8008110:	687b      	ldr	r3, [r7, #4]
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b086      	sub	sp, #24
 8008122:	af00      	add	r7, sp, #0
 8008124:	60f8      	str	r0, [r7, #12]
 8008126:	60b9      	str	r1, [r7, #8]
 8008128:	607a      	str	r2, [r7, #4]
  int i=0;
 800812a:	2300      	movs	r3, #0
 800812c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
 8008132:	e009      	b.n	8008148 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	60ba      	str	r2, [r7, #8]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	4618      	mov	r0, r3
 800813e:	f7ff ffc7 	bl	80080d0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	3301      	adds	r3, #1
 8008146:	617b      	str	r3, [r7, #20]
 8008148:	697a      	ldr	r2, [r7, #20]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	429a      	cmp	r2, r3
 800814e:	dbf1      	blt.n	8008134 <_write+0x16>
  return len;
 8008150:	687b      	ldr	r3, [r7, #4]
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
	...

0800815c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008160:	f000 ffe9 	bl	8009136 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008164:	f000 f84e 	bl	8008204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008168:	f7ff fde0 	bl	8007d2c <MX_GPIO_Init>
  MX_DMA_Init();
 800816c:	f7ff fc5e 	bl	8007a2c <MX_DMA_Init>
  MX_DAC1_Init();
 8008170:	f7ff fb0e 	bl	8007790 <MX_DAC1_Init>
  MX_ADC1_Init();
 8008174:	f7ff f9c6 	bl	8007504 <MX_ADC1_Init>
  MX_COMP1_Init();
 8008178:	f7ff faa8 	bl	80076cc <MX_COMP1_Init>
  MX_SPI3_Init();
 800817c:	f000 f8ee 	bl	800835c <MX_SPI3_Init>
  MX_RNG_Init();
 8008180:	f000 f8de 	bl	8008340 <MX_RNG_Init>
  MX_TIM1_Init();
 8008184:	f000 fb5c 	bl	8008840 <MX_TIM1_Init>
  MX_TIM8_Init();
 8008188:	f000 fd2a 	bl	8008be0 <MX_TIM8_Init>
  MX_TIM16_Init();
 800818c:	f000 fde2 	bl	8008d54 <MX_TIM16_Init>
  MX_TIM15_Init();
 8008190:	f000 fd8e 	bl	8008cb0 <MX_TIM15_Init>
  MX_TIM5_Init();
 8008194:	f000 fcd6 	bl	8008b44 <MX_TIM5_Init>
  MX_TIM3_Init();
 8008198:	f000 fc38 	bl	8008a0c <MX_TIM3_Init>
  MX_DAC2_Init();
 800819c:	f7ff fb42 	bl	8007824 <MX_DAC2_Init>
  MX_TIM17_Init();
 80081a0:	f000 fe00 	bl	8008da4 <MX_TIM17_Init>
  MX_TIM2_Init();
 80081a4:	f000 fbbc 	bl	8008920 <MX_TIM2_Init>
  MX_TIM4_Init();
 80081a8:	f000 fc7e 	bl	8008aa8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 80081ac:	f7fe fb86 	bl	80068bc <SM_Init>

  HAL_TIM_Base_Start_IT(&htim17);
 80081b0:	4810      	ldr	r0, [pc, #64]	; (80081f4 <main+0x98>)
 80081b2:	f005 fa75 	bl	800d6a0 <HAL_TIM_Base_Start_IT>

  // http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80081b6:	2200      	movs	r2, #0
 80081b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80081bc:	480e      	ldr	r0, [pc, #56]	; (80081f8 <main+0x9c>)
 80081be:	f004 f91f 	bl	800c400 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80081c2:	2200      	movs	r2, #0
 80081c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80081c8:	480b      	ldr	r0, [pc, #44]	; (80081f8 <main+0x9c>)
 80081ca:	f004 f919 	bl	800c400 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80081ce:	480b      	ldr	r0, [pc, #44]	; (80081fc <main+0xa0>)
 80081d0:	f005 fa10 	bl	800d5f4 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80081d4:	4b0a      	ldr	r3, [pc, #40]	; (8008200 <main+0xa4>)
 80081d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081da:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80081dc:	4b08      	ldr	r3, [pc, #32]	; (8008200 <main+0xa4>)
 80081de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081e2:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 80081e4:	f7f8 fdc4 	bl	8000d70 <DM_Init>
  DM_PostInit();
 80081e8:	f7f8 fdd0 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 80081ec:	f7fd f9e2 	bl	80055b4 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80081f0:	e7fe      	b.n	80081f0 <main+0x94>
 80081f2:	bf00      	nop
 80081f4:	20002888 	.word	0x20002888
 80081f8:	48000800 	.word	0x48000800
 80081fc:	20002920 	.word	0x20002920
 8008200:	40001000 	.word	0x40001000

08008204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b0a8      	sub	sp, #160	; 0xa0
 8008208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800820a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800820e:	2238      	movs	r2, #56	; 0x38
 8008210:	2100      	movs	r1, #0
 8008212:	4618      	mov	r0, r3
 8008214:	f009 f970 	bl	80114f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008218:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]
 8008220:	605a      	str	r2, [r3, #4]
 8008222:	609a      	str	r2, [r3, #8]
 8008224:	60da      	str	r2, [r3, #12]
 8008226:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008228:	463b      	mov	r3, r7
 800822a:	2254      	movs	r2, #84	; 0x54
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f009 f962 	bl	80114f8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8008234:	2000      	movs	r0, #0
 8008236:	f004 f8fb 	bl	800c430 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800823a:	2322      	movs	r3, #34	; 0x22
 800823c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800823e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008242:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008244:	2340      	movs	r3, #64	; 0x40
 8008246:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8008248:	2301      	movs	r3, #1
 800824a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800824e:	2302      	movs	r3, #2
 8008250:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008254:	2302      	movs	r3, #2
 8008256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800825a:	2302      	movs	r3, #2
 800825c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8008260:	232a      	movs	r3, #42	; 0x2a
 8008262:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008266:	2302      	movs	r3, #2
 8008268:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800826c:	2304      	movs	r3, #4
 800826e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008272:	2302      	movs	r3, #2
 8008274:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008278:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800827c:	4618      	mov	r0, r3
 800827e:	f004 f97b 	bl	800c578 <HAL_RCC_OscConfig>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8008288:	f000 f82a 	bl	80082e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800828c:	230f      	movs	r3, #15
 800828e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008290:	2303      	movs	r3, #3
 8008292:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008294:	2300      	movs	r3, #0
 8008296:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008298:	2300      	movs	r3, #0
 800829a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800829c:	2300      	movs	r3, #0
 800829e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80082a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80082a4:	2108      	movs	r1, #8
 80082a6:	4618      	mov	r0, r3
 80082a8:	f004 fc7e 	bl	800cba8 <HAL_RCC_ClockConfig>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d001      	beq.n	80082b6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80082b2:	f000 f815 	bl	80082e0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80082b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80082ba:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80082bc:	2300      	movs	r3, #0
 80082be:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80082c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80082c4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80082c6:	463b      	mov	r3, r7
 80082c8:	4618      	mov	r0, r3
 80082ca:	f004 fe5d 	bl	800cf88 <HAL_RCCEx_PeriphCLKConfig>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80082d4:	f000 f804 	bl	80082e0 <Error_Handler>
  }
}
 80082d8:	bf00      	nop
 80082da:	37a0      	adds	r7, #160	; 0xa0
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80082e4:	bf00      	nop
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b083      	sub	sp, #12
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f043 0204 	orr.w	r2, r3, #4
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	601a      	str	r2, [r3, #0]
}
 8008302:	bf00      	nop
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
	...

08008310 <LL_AHB2_GRP1_EnableClock>:
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008318:	4b08      	ldr	r3, [pc, #32]	; (800833c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800831a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800831c:	4907      	ldr	r1, [pc, #28]	; (800833c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4313      	orrs	r3, r2
 8008322:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008324:	4b05      	ldr	r3, [pc, #20]	; (800833c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8008326:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	4013      	ands	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800832e:	68fb      	ldr	r3, [r7, #12]
}
 8008330:	bf00      	nop
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40021000 	.word	0x40021000

08008340 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8008344:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8008348:	f7ff ffe2 	bl	8008310 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 800834c:	4802      	ldr	r0, [pc, #8]	; (8008358 <MX_RNG_Init+0x18>)
 800834e:	f7ff ffce 	bl	80082ee <LL_RNG_Enable>

}
 8008352:	bf00      	nop
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	50060800 	.word	0x50060800

0800835c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8008360:	4b1b      	ldr	r3, [pc, #108]	; (80083d0 <MX_SPI3_Init+0x74>)
 8008362:	4a1c      	ldr	r2, [pc, #112]	; (80083d4 <MX_SPI3_Init+0x78>)
 8008364:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008366:	4b1a      	ldr	r3, [pc, #104]	; (80083d0 <MX_SPI3_Init+0x74>)
 8008368:	f44f 7282 	mov.w	r2, #260	; 0x104
 800836c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800836e:	4b18      	ldr	r3, [pc, #96]	; (80083d0 <MX_SPI3_Init+0x74>)
 8008370:	2200      	movs	r2, #0
 8008372:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008374:	4b16      	ldr	r3, [pc, #88]	; (80083d0 <MX_SPI3_Init+0x74>)
 8008376:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800837a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800837c:	4b14      	ldr	r3, [pc, #80]	; (80083d0 <MX_SPI3_Init+0x74>)
 800837e:	2200      	movs	r2, #0
 8008380:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008382:	4b13      	ldr	r3, [pc, #76]	; (80083d0 <MX_SPI3_Init+0x74>)
 8008384:	2200      	movs	r2, #0
 8008386:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008388:	4b11      	ldr	r3, [pc, #68]	; (80083d0 <MX_SPI3_Init+0x74>)
 800838a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800838e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8008390:	4b0f      	ldr	r3, [pc, #60]	; (80083d0 <MX_SPI3_Init+0x74>)
 8008392:	2210      	movs	r2, #16
 8008394:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008396:	4b0e      	ldr	r3, [pc, #56]	; (80083d0 <MX_SPI3_Init+0x74>)
 8008398:	2200      	movs	r2, #0
 800839a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800839c:	4b0c      	ldr	r3, [pc, #48]	; (80083d0 <MX_SPI3_Init+0x74>)
 800839e:	2200      	movs	r2, #0
 80083a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80083a2:	4b0b      	ldr	r3, [pc, #44]	; (80083d0 <MX_SPI3_Init+0x74>)
 80083a4:	2200      	movs	r2, #0
 80083a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80083a8:	4b09      	ldr	r3, [pc, #36]	; (80083d0 <MX_SPI3_Init+0x74>)
 80083aa:	2207      	movs	r2, #7
 80083ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80083ae:	4b08      	ldr	r3, [pc, #32]	; (80083d0 <MX_SPI3_Init+0x74>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <MX_SPI3_Init+0x74>)
 80083b6:	2208      	movs	r2, #8
 80083b8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80083ba:	4805      	ldr	r0, [pc, #20]	; (80083d0 <MX_SPI3_Init+0x74>)
 80083bc:	f005 f830 	bl	800d420 <HAL_SPI_Init>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d001      	beq.n	80083ca <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80083c6:	f7ff ff8b 	bl	80082e0 <Error_Handler>
  }

}
 80083ca:	bf00      	nop
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	200026e0 	.word	0x200026e0
 80083d4:	40003c00 	.word	0x40003c00

080083d8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b08a      	sub	sp, #40	; 0x28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e0:	f107 0314 	add.w	r3, r7, #20
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]
 80083e8:	605a      	str	r2, [r3, #4]
 80083ea:	609a      	str	r2, [r3, #8]
 80083ec:	60da      	str	r2, [r3, #12]
 80083ee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a17      	ldr	r2, [pc, #92]	; (8008454 <HAL_SPI_MspInit+0x7c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d128      	bne.n	800844c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80083fa:	4b17      	ldr	r3, [pc, #92]	; (8008458 <HAL_SPI_MspInit+0x80>)
 80083fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083fe:	4a16      	ldr	r2, [pc, #88]	; (8008458 <HAL_SPI_MspInit+0x80>)
 8008400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008404:	6593      	str	r3, [r2, #88]	; 0x58
 8008406:	4b14      	ldr	r3, [pc, #80]	; (8008458 <HAL_SPI_MspInit+0x80>)
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800840e:	613b      	str	r3, [r7, #16]
 8008410:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <HAL_SPI_MspInit+0x80>)
 8008414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008416:	4a10      	ldr	r2, [pc, #64]	; (8008458 <HAL_SPI_MspInit+0x80>)
 8008418:	f043 0304 	orr.w	r3, r3, #4
 800841c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800841e:	4b0e      	ldr	r3, [pc, #56]	; (8008458 <HAL_SPI_MspInit+0x80>)
 8008420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008422:	f003 0304 	and.w	r3, r3, #4
 8008426:	60fb      	str	r3, [r7, #12]
 8008428:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800842a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800842e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008430:	2302      	movs	r3, #2
 8008432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008434:	2300      	movs	r3, #0
 8008436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008438:	2300      	movs	r3, #0
 800843a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800843c:	2306      	movs	r3, #6
 800843e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008440:	f107 0314 	add.w	r3, r7, #20
 8008444:	4619      	mov	r1, r3
 8008446:	4805      	ldr	r0, [pc, #20]	; (800845c <HAL_SPI_MspInit+0x84>)
 8008448:	f003 fd76 	bl	800bf38 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800844c:	bf00      	nop
 800844e:	3728      	adds	r7, #40	; 0x28
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}
 8008454:	40003c00 	.word	0x40003c00
 8008458:	40021000 	.word	0x40021000
 800845c:	48000800 	.word	0x48000800

08008460 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8008460:	b480      	push	{r7}
 8008462:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008464:	4b05      	ldr	r3, [pc, #20]	; (800847c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8008466:	689b      	ldr	r3, [r3, #8]
 8008468:	4a04      	ldr	r2, [pc, #16]	; (800847c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800846a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800846e:	6093      	str	r3, [r2, #8]
}
 8008470:	bf00      	nop
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40007000 	.word	0x40007000

08008480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008486:	4b0f      	ldr	r3, [pc, #60]	; (80084c4 <HAL_MspInit+0x44>)
 8008488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800848a:	4a0e      	ldr	r2, [pc, #56]	; (80084c4 <HAL_MspInit+0x44>)
 800848c:	f043 0301 	orr.w	r3, r3, #1
 8008490:	6613      	str	r3, [r2, #96]	; 0x60
 8008492:	4b0c      	ldr	r3, [pc, #48]	; (80084c4 <HAL_MspInit+0x44>)
 8008494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	607b      	str	r3, [r7, #4]
 800849c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800849e:	4b09      	ldr	r3, [pc, #36]	; (80084c4 <HAL_MspInit+0x44>)
 80084a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084a2:	4a08      	ldr	r2, [pc, #32]	; (80084c4 <HAL_MspInit+0x44>)
 80084a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a8:	6593      	str	r3, [r2, #88]	; 0x58
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <HAL_MspInit+0x44>)
 80084ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b2:	603b      	str	r3, [r7, #0]
 80084b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80084b6:	f7ff ffd3 	bl	8008460 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084ba:	bf00      	nop
 80084bc:	3708      	adds	r7, #8
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	40021000 	.word	0x40021000

080084c8 <LL_EXTI_IsActiveFlag_0_31>:
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80084d0:	4b07      	ldr	r3, [pc, #28]	; (80084f0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80084d2:	695a      	ldr	r2, [r3, #20]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4013      	ands	r3, r2
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d101      	bne.n	80084e2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80084de:	2301      	movs	r3, #1
 80084e0:	e000      	b.n	80084e4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr
 80084f0:	40010400 	.word	0x40010400

080084f4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80084fc:	4a04      	ldr	r2, [pc, #16]	; (8008510 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6153      	str	r3, [r2, #20]
}
 8008502:	bf00      	nop
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	40010400 	.word	0x40010400

08008514 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008514:	b480      	push	{r7}
 8008516:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008518:	bf00      	nop
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
	...

08008524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8008528:	4801      	ldr	r0, [pc, #4]	; (8008530 <HardFault_Handler+0xc>)
 800852a:	f7f9 f9df 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800852e:	e7fe      	b.n	800852e <HardFault_Handler+0xa>
 8008530:	080164f0 	.word	0x080164f0

08008534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8008538:	4801      	ldr	r0, [pc, #4]	; (8008540 <MemManage_Handler+0xc>)
 800853a:	f7f9 f9d7 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800853e:	e7fe      	b.n	800853e <MemManage_Handler+0xa>
 8008540:	080164fc 	.word	0x080164fc

08008544 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8008548:	4801      	ldr	r0, [pc, #4]	; (8008550 <BusFault_Handler+0xc>)
 800854a:	f7f9 f9cf 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800854e:	e7fe      	b.n	800854e <BusFault_Handler+0xa>
 8008550:	0801650c 	.word	0x0801650c

08008554 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8008558:	4801      	ldr	r0, [pc, #4]	; (8008560 <UsageFault_Handler+0xc>)
 800855a:	f7f9 f9c7 	bl	80018ec <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800855e:	e7fe      	b.n	800855e <UsageFault_Handler+0xa>
 8008560:	08016518 	.word	0x08016518

08008564 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008568:	bf00      	nop
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008572:	b480      	push	{r7}
 8008574:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008576:	bf00      	nop
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008584:	bf00      	nop
 8008586:	46bd      	mov	sp, r7
 8008588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858c:	4770      	bx	lr

0800858e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800858e:	b580      	push	{r7, lr}
 8008590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008592:	f000 fe23 	bl	80091dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008596:	bf00      	nop
 8008598:	bd80      	pop	{r7, pc}

0800859a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800859a:	b580      	push	{r7, lr}
 800859c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 800859e:	f7fd f8c1 	bl	8005724 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80085a2:	2001      	movs	r0, #1
 80085a4:	f7ff ff90 	bl	80084c8 <LL_EXTI_IsActiveFlag_0_31>
 80085a8:	4603      	mov	r3, r0
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80085ae:	2001      	movs	r0, #1
 80085b0:	f7ff ffa0 	bl	80084f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80085b4:	bf00      	nop
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80085bc:	f7fd f8d8 	bl	8005770 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80085c0:	2002      	movs	r0, #2
 80085c2:	f7ff ff81 	bl	80084c8 <LL_EXTI_IsActiveFlag_0_31>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d002      	beq.n	80085d2 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80085cc:	2002      	movs	r0, #2
 80085ce:	f7ff ff91 	bl	80084f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80085d2:	bf00      	nop
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80085d6:	b580      	push	{r7, lr}
 80085d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80085da:	f7fd f8ef 	bl	80057bc <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80085de:	2004      	movs	r0, #4
 80085e0:	f7ff ff72 	bl	80084c8 <LL_EXTI_IsActiveFlag_0_31>
 80085e4:	4603      	mov	r3, r0
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d002      	beq.n	80085f0 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80085ea:	2004      	movs	r0, #4
 80085ec:	f7ff ff82 	bl	80084f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80085f0:	bf00      	nop
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80085f8:	4802      	ldr	r0, [pc, #8]	; (8008604 <DMA1_Channel1_IRQHandler+0x10>)
 80085fa:	f003 fb4e 	bl	800bc9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80085fe:	bf00      	nop
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	200025d4 	.word	0x200025d4

08008608 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800860c:	4802      	ldr	r0, [pc, #8]	; (8008618 <DMA1_Channel2_IRQHandler+0x10>)
 800860e:	f003 fb44 	bl	800bc9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008612:	bf00      	nop
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20001eb4 	.word	0x20001eb4

0800861c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8008620:	4802      	ldr	r0, [pc, #8]	; (800862c <DMA1_Channel3_IRQHandler+0x10>)
 8008622:	f003 fb3a 	bl	800bc9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008626:	bf00      	nop
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	20002680 	.word	0x20002680

08008630 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8008634:	4802      	ldr	r0, [pc, #8]	; (8008640 <DMA1_Channel4_IRQHandler+0x10>)
 8008636:	f003 fb30 	bl	800bc9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800863a:	bf00      	nop
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	20002744 	.word	0x20002744

08008644 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8008648:	f7f8 fbba 	bl	8000dc0 <DM_UpdateDisplay>


	IM_ENC_DIRF_Handler();
 800864c:	f7fd f8dc 	bl	8005808 <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008650:	4803      	ldr	r0, [pc, #12]	; (8008660 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8008652:	f005 fdc3 	bl	800e1dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8008656:	4803      	ldr	r0, [pc, #12]	; (8008664 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8008658:	f005 fdc0 	bl	800e1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800865c:	bf00      	nop
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20002920 	.word	0x20002920
 8008664:	2000283c 	.word	0x2000283c

08008668 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 800866c:	f7fb ff92 	bl	8004594 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008670:	4803      	ldr	r0, [pc, #12]	; (8008680 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8008672:	f005 fdb3 	bl	800e1dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8008676:	4803      	ldr	r0, [pc, #12]	; (8008684 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8008678:	f005 fdb0 	bl	800e1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800867c:	bf00      	nop
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20002920 	.word	0x20002920
 8008684:	20002888 	.word	0x20002888

08008688 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800868c:	4802      	ldr	r0, [pc, #8]	; (8008698 <TIM3_IRQHandler+0x10>)
 800868e:	f005 fda5 	bl	800e1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008692:	bf00      	nop
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20001f20 	.word	0x20001f20

0800869c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	//IM_RECIP_COUNT_Handler();
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80086a0:	4802      	ldr	r0, [pc, #8]	; (80086ac <TIM4_IRQHandler+0x10>)
 80086a2:	f005 fd9b 	bl	800e1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80086a6:	bf00      	nop
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	200027f0 	.word	0x200027f0

080086b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 80086b4:	f7fc ffe6 	bl	8005684 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 80086b8:	f7fd f80c 	bl	80056d4 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80086bc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80086c0:	f7ff ff02 	bl	80084c8 <LL_EXTI_IsActiveFlag_0_31>
 80086c4:	4603      	mov	r3, r0
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80086ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80086ce:	f7ff ff11 	bl	80084f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80086d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80086d6:	f7ff fef7 	bl	80084c8 <LL_EXTI_IsActiveFlag_0_31>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d003      	beq.n	80086e8 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80086e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80086e4:	f7ff ff06 	bl	80084f4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80086e8:	bf00      	nop
 80086ea:	bd80      	pop	{r7, pc}

080086ec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 80086f0:	f7fc ff70 	bl	80055d4 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80086f4:	4802      	ldr	r0, [pc, #8]	; (8008700 <TIM5_IRQHandler+0x14>)
 80086f6:	f005 fd71 	bl	800e1dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80086fa:	bf00      	nop
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	bf00      	nop
 8008700:	200028d4 	.word	0x200028d4

08008704 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8008708:	4802      	ldr	r0, [pc, #8]	; (8008714 <COMP1_2_3_IRQHandler+0x10>)
 800870a:	f002 fb01 	bl	800ad10 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 800870e:	bf00      	nop
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop
 8008714:	20002634 	.word	0x20002634

08008718 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b086      	sub	sp, #24
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	e00a      	b.n	8008740 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800872a:	f3af 8000 	nop.w
 800872e:	4601      	mov	r1, r0
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	60ba      	str	r2, [r7, #8]
 8008736:	b2ca      	uxtb	r2, r1
 8008738:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	3301      	adds	r3, #1
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	429a      	cmp	r2, r3
 8008746:	dbf0      	blt.n	800872a <_read+0x12>
	}

return len;
 8008748:	687b      	ldr	r3, [r7, #4]
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008752:	b480      	push	{r7}
 8008754:	b083      	sub	sp, #12
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
	return -1;
 800875a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800877a:	605a      	str	r2, [r3, #4]
	return 0;
 800877c:	2300      	movs	r3, #0
}
 800877e:	4618      	mov	r0, r3
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <_isatty>:

int _isatty(int file)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
	return 1;
 8008792:	2301      	movs	r3, #1
}
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
	return 0;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80087c4:	4b11      	ldr	r3, [pc, #68]	; (800880c <_sbrk+0x50>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d102      	bne.n	80087d2 <_sbrk+0x16>
		heap_end = &end;
 80087cc:	4b0f      	ldr	r3, [pc, #60]	; (800880c <_sbrk+0x50>)
 80087ce:	4a10      	ldr	r2, [pc, #64]	; (8008810 <_sbrk+0x54>)
 80087d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80087d2:	4b0e      	ldr	r3, [pc, #56]	; (800880c <_sbrk+0x50>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80087d8:	4b0c      	ldr	r3, [pc, #48]	; (800880c <_sbrk+0x50>)
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4413      	add	r3, r2
 80087e0:	466a      	mov	r2, sp
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d907      	bls.n	80087f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80087e6:	f008 fe5d 	bl	80114a4 <__errno>
 80087ea:	4602      	mov	r2, r0
 80087ec:	230c      	movs	r3, #12
 80087ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80087f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087f4:	e006      	b.n	8008804 <_sbrk+0x48>
	}

	heap_end += incr;
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <_sbrk+0x50>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4413      	add	r3, r2
 80087fe:	4a03      	ldr	r2, [pc, #12]	; (800880c <_sbrk+0x50>)
 8008800:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008802:	68fb      	ldr	r3, [r7, #12]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3710      	adds	r7, #16
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}
 800880c:	20001ea0 	.word	0x20001ea0
 8008810:	20002a10 	.word	0x20002a10

08008814 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008814:	b480      	push	{r7}
 8008816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008818:	4b08      	ldr	r3, [pc, #32]	; (800883c <SystemInit+0x28>)
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881e:	4a07      	ldr	r2, [pc, #28]	; (800883c <SystemInit+0x28>)
 8008820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008828:	4b04      	ldr	r3, [pc, #16]	; (800883c <SystemInit+0x28>)
 800882a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800882e:	609a      	str	r2, [r3, #8]
#endif
}
 8008830:	bf00      	nop
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	e000ed00 	.word	0xe000ed00

08008840 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b09a      	sub	sp, #104	; 0x68
 8008844:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8008846:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800884a:	2224      	movs	r2, #36	; 0x24
 800884c:	2100      	movs	r1, #0
 800884e:	4618      	mov	r0, r3
 8008850:	f008 fe52 	bl	80114f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008854:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008860:	1d3b      	adds	r3, r7, #4
 8008862:	2234      	movs	r2, #52	; 0x34
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f008 fe46 	bl	80114f8 <memset>

  htim1.Instance = TIM1;
 800886c:	4b2a      	ldr	r3, [pc, #168]	; (8008918 <MX_TIM1_Init+0xd8>)
 800886e:	4a2b      	ldr	r2, [pc, #172]	; (800891c <MX_TIM1_Init+0xdc>)
 8008870:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008872:	4b29      	ldr	r3, [pc, #164]	; (8008918 <MX_TIM1_Init+0xd8>)
 8008874:	2200      	movs	r2, #0
 8008876:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8008878:	4b27      	ldr	r3, [pc, #156]	; (8008918 <MX_TIM1_Init+0xd8>)
 800887a:	2260      	movs	r2, #96	; 0x60
 800887c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800887e:	4b26      	ldr	r3, [pc, #152]	; (8008918 <MX_TIM1_Init+0xd8>)
 8008880:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008884:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008886:	4b24      	ldr	r3, [pc, #144]	; (8008918 <MX_TIM1_Init+0xd8>)
 8008888:	2200      	movs	r2, #0
 800888a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800888c:	4b22      	ldr	r3, [pc, #136]	; (8008918 <MX_TIM1_Init+0xd8>)
 800888e:	2200      	movs	r2, #0
 8008890:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008892:	4b21      	ldr	r3, [pc, #132]	; (8008918 <MX_TIM1_Init+0xd8>)
 8008894:	2280      	movs	r2, #128	; 0x80
 8008896:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8008898:	2302      	movs	r3, #2
 800889a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800889c:	2300      	movs	r3, #0
 800889e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80088a0:	2301      	movs	r3, #1
 80088a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80088a4:	2300      	movs	r3, #0
 80088a6:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80088a8:	2300      	movs	r3, #0
 80088aa:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80088ac:	2300      	movs	r3, #0
 80088ae:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80088b0:	2301      	movs	r3, #1
 80088b2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80088b4:	2300      	movs	r3, #0
 80088b6:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80088bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80088c0:	4619      	mov	r1, r3
 80088c2:	4815      	ldr	r0, [pc, #84]	; (8008918 <MX_TIM1_Init+0xd8>)
 80088c4:	f005 fbe4 	bl	800e090 <HAL_TIM_Encoder_Init>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d001      	beq.n	80088d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80088ce:	f7ff fd07 	bl	80082e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80088d2:	2320      	movs	r3, #32
 80088d4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80088d6:	2300      	movs	r3, #0
 80088d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088da:	2300      	movs	r3, #0
 80088dc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80088de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80088e2:	4619      	mov	r1, r3
 80088e4:	480c      	ldr	r0, [pc, #48]	; (8008918 <MX_TIM1_Init+0xd8>)
 80088e6:	f007 f867 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80088f0:	f7ff fcf6 	bl	80082e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80088f4:	2300      	movs	r3, #0
 80088f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80088f8:	2300      	movs	r3, #0
 80088fa:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80088fc:	1d3b      	adds	r3, r7, #4
 80088fe:	4619      	mov	r1, r3
 8008900:	4805      	ldr	r0, [pc, #20]	; (8008918 <MX_TIM1_Init+0xd8>)
 8008902:	f007 f8ef 	bl	800fae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8008906:	4603      	mov	r3, r0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d001      	beq.n	8008910 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800890c:	f7ff fce8 	bl	80082e0 <Error_Handler>
  }

}
 8008910:	bf00      	nop
 8008912:	3768      	adds	r7, #104	; 0x68
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	20002920 	.word	0x20002920
 800891c:	40012c00 	.word	0x40012c00

08008920 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b08c      	sub	sp, #48	; 0x30
 8008924:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8008926:	f107 031c 	add.w	r3, r7, #28
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]
 800892e:	605a      	str	r2, [r3, #4]
 8008930:	609a      	str	r2, [r3, #8]
 8008932:	60da      	str	r2, [r3, #12]
 8008934:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008936:	f107 0310 	add.w	r3, r7, #16
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	605a      	str	r2, [r3, #4]
 8008940:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008942:	463b      	mov	r3, r7
 8008944:	2200      	movs	r2, #0
 8008946:	601a      	str	r2, [r3, #0]
 8008948:	605a      	str	r2, [r3, #4]
 800894a:	609a      	str	r2, [r3, #8]
 800894c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800894e:	4b2e      	ldr	r3, [pc, #184]	; (8008a08 <MX_TIM2_Init+0xe8>)
 8008950:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008954:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 128;
 8008956:	4b2c      	ldr	r3, [pc, #176]	; (8008a08 <MX_TIM2_Init+0xe8>)
 8008958:	2280      	movs	r2, #128	; 0x80
 800895a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800895c:	4b2a      	ldr	r3, [pc, #168]	; (8008a08 <MX_TIM2_Init+0xe8>)
 800895e:	2200      	movs	r2, #0
 8008960:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008962:	4b29      	ldr	r3, [pc, #164]	; (8008a08 <MX_TIM2_Init+0xe8>)
 8008964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008968:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800896a:	4b27      	ldr	r3, [pc, #156]	; (8008a08 <MX_TIM2_Init+0xe8>)
 800896c:	2200      	movs	r2, #0
 800896e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008970:	4b25      	ldr	r3, [pc, #148]	; (8008a08 <MX_TIM2_Init+0xe8>)
 8008972:	2280      	movs	r2, #128	; 0x80
 8008974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008976:	4824      	ldr	r0, [pc, #144]	; (8008a08 <MX_TIM2_Init+0xe8>)
 8008978:	f004 fde4 	bl	800d544 <HAL_TIM_Base_Init>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d001      	beq.n	8008986 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8008982:	f7ff fcad 	bl	80082e0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008986:	4820      	ldr	r0, [pc, #128]	; (8008a08 <MX_TIM2_Init+0xe8>)
 8008988:	f005 f8c6 	bl	800db18 <HAL_TIM_IC_Init>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8008992:	f7ff fca5 	bl	80082e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8008996:	2304      	movs	r3, #4
 8008998:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800899a:	2350      	movs	r3, #80	; 0x50
 800899c:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800899e:	2300      	movs	r3, #0
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80089a6:	f107 031c 	add.w	r3, r7, #28
 80089aa:	4619      	mov	r1, r3
 80089ac:	4816      	ldr	r0, [pc, #88]	; (8008a08 <MX_TIM2_Init+0xe8>)
 80089ae:	f006 f829 	bl	800ea04 <HAL_TIM_SlaveConfigSynchro>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80089b8:	f7ff fc92 	bl	80082e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80089bc:	2320      	movs	r3, #32
 80089be:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80089c0:	2300      	movs	r3, #0
 80089c2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80089c4:	f107 0310 	add.w	r3, r7, #16
 80089c8:	4619      	mov	r1, r3
 80089ca:	480f      	ldr	r0, [pc, #60]	; (8008a08 <MX_TIM2_Init+0xe8>)
 80089cc:	f006 fff4 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 80089d0:	4603      	mov	r3, r0
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d001      	beq.n	80089da <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80089d6:	f7ff fc83 	bl	80082e0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80089da:	2300      	movs	r3, #0
 80089dc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80089de:	2301      	movs	r3, #1
 80089e0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80089e2:	2300      	movs	r3, #0
 80089e4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80089ea:	463b      	mov	r3, r7
 80089ec:	2200      	movs	r2, #0
 80089ee:	4619      	mov	r1, r3
 80089f0:	4805      	ldr	r0, [pc, #20]	; (8008a08 <MX_TIM2_Init+0xe8>)
 80089f2:	f005 fd72 	bl	800e4da <HAL_TIM_IC_ConfigChannel>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 80089fc:	f7ff fc70 	bl	80082e0 <Error_Handler>
  }

}
 8008a00:	bf00      	nop
 8008a02:	3730      	adds	r7, #48	; 0x30
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	2000296c 	.word	0x2000296c

08008a0c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b088      	sub	sp, #32
 8008a10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008a12:	f107 0310 	add.w	r3, r7, #16
 8008a16:	2200      	movs	r2, #0
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	605a      	str	r2, [r3, #4]
 8008a1c:	609a      	str	r2, [r3, #8]
 8008a1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008a20:	1d3b      	adds	r3, r7, #4
 8008a22:	2200      	movs	r2, #0
 8008a24:	601a      	str	r2, [r3, #0]
 8008a26:	605a      	str	r2, [r3, #4]
 8008a28:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8008a2a:	4b1d      	ldr	r3, [pc, #116]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <MX_TIM3_Init+0x98>)
 8008a2e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008a30:	4b1b      	ldr	r3, [pc, #108]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8008a36:	4b1a      	ldr	r3, [pc, #104]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a38:	2210      	movs	r2, #16
 8008a3a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008a3c:	4b18      	ldr	r3, [pc, #96]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008a42:	4b17      	ldr	r3, [pc, #92]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008a4a:	4b15      	ldr	r3, [pc, #84]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a4c:	2280      	movs	r2, #128	; 0x80
 8008a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008a50:	4813      	ldr	r0, [pc, #76]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a52:	f004 fd77 	bl	800d544 <HAL_TIM_Base_Init>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008a5c:	f7ff fc40 	bl	80082e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008a66:	f107 0310 	add.w	r3, r7, #16
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	480c      	ldr	r0, [pc, #48]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a6e:	f005 fed9 	bl	800e824 <HAL_TIM_ConfigClockSource>
 8008a72:	4603      	mov	r3, r0
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d001      	beq.n	8008a7c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8008a78:	f7ff fc32 	bl	80082e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008a7c:	2320      	movs	r3, #32
 8008a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008a84:	1d3b      	adds	r3, r7, #4
 8008a86:	4619      	mov	r1, r3
 8008a88:	4805      	ldr	r0, [pc, #20]	; (8008aa0 <MX_TIM3_Init+0x94>)
 8008a8a:	f006 ff95 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d001      	beq.n	8008a98 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008a94:	f7ff fc24 	bl	80082e0 <Error_Handler>
  }

}
 8008a98:	bf00      	nop
 8008a9a:	3720      	adds	r7, #32
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	20001f20 	.word	0x20001f20
 8008aa4:	40000400 	.word	0x40000400

08008aa8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b088      	sub	sp, #32
 8008aac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008aae:	f107 0310 	add.w	r3, r7, #16
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	601a      	str	r2, [r3, #0]
 8008ab6:	605a      	str	r2, [r3, #4]
 8008ab8:	609a      	str	r2, [r3, #8]
 8008aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008abc:	1d3b      	adds	r3, r7, #4
 8008abe:	2200      	movs	r2, #0
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	605a      	str	r2, [r3, #4]
 8008ac4:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 8008ac6:	4b1d      	ldr	r3, [pc, #116]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	; (8008b40 <MX_TIM4_Init+0x98>)
 8008aca:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8008acc:	4b1b      	ldr	r3, [pc, #108]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ad2:	4b1a      	ldr	r3, [pc, #104]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8008ad8:	4b18      	ldr	r3, [pc, #96]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008ada:	2201      	movs	r2, #1
 8008adc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ade:	4b17      	ldr	r3, [pc, #92]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008ae4:	4b15      	ldr	r3, [pc, #84]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008aea:	4814      	ldr	r0, [pc, #80]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008aec:	f004 fd2a 	bl	800d544 <HAL_TIM_Base_Init>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8008af6:	f7ff fbf3 	bl	80082e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008afe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008b00:	f107 0310 	add.w	r3, r7, #16
 8008b04:	4619      	mov	r1, r3
 8008b06:	480d      	ldr	r0, [pc, #52]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008b08:	f005 fe8c 	bl	800e824 <HAL_TIM_ConfigClockSource>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8008b12:	f7ff fbe5 	bl	80082e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008b16:	2300      	movs	r3, #0
 8008b18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008b1e:	1d3b      	adds	r3, r7, #4
 8008b20:	4619      	mov	r1, r3
 8008b22:	4806      	ldr	r0, [pc, #24]	; (8008b3c <MX_TIM4_Init+0x94>)
 8008b24:	f006 ff48 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8008b2e:	f7ff fbd7 	bl	80082e0 <Error_Handler>
  }

}
 8008b32:	bf00      	nop
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	200027f0 	.word	0x200027f0
 8008b40:	40000800 	.word	0x40000800

08008b44 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b088      	sub	sp, #32
 8008b48:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b4a:	f107 0310 	add.w	r3, r7, #16
 8008b4e:	2200      	movs	r2, #0
 8008b50:	601a      	str	r2, [r3, #0]
 8008b52:	605a      	str	r2, [r3, #4]
 8008b54:	609a      	str	r2, [r3, #8]
 8008b56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b58:	1d3b      	adds	r3, r7, #4
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
 8008b5e:	605a      	str	r2, [r3, #4]
 8008b60:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8008b62:	4b1d      	ldr	r3, [pc, #116]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008b64:	4a1d      	ldr	r2, [pc, #116]	; (8008bdc <MX_TIM5_Init+0x98>)
 8008b66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008b68:	4b1b      	ldr	r3, [pc, #108]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008b6e:	4b1a      	ldr	r3, [pc, #104]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008b74:	4b18      	ldr	r3, [pc, #96]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008b76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008b7c:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008b82:	4b15      	ldr	r3, [pc, #84]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008b88:	4813      	ldr	r0, [pc, #76]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008b8a:	f004 fcdb 	bl	800d544 <HAL_TIM_Base_Init>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008b94:	f7ff fba4 	bl	80082e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8008b9e:	f107 0310 	add.w	r3, r7, #16
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	480c      	ldr	r0, [pc, #48]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008ba6:	f005 fe3d 	bl	800e824 <HAL_TIM_ConfigClockSource>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8008bb0:	f7ff fb96 	bl	80082e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bb8:	2300      	movs	r3, #0
 8008bba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008bbc:	1d3b      	adds	r3, r7, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4805      	ldr	r0, [pc, #20]	; (8008bd8 <MX_TIM5_Init+0x94>)
 8008bc2:	f006 fef9 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d001      	beq.n	8008bd0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8008bcc:	f7ff fb88 	bl	80082e0 <Error_Handler>
  }

}
 8008bd0:	bf00      	nop
 8008bd2:	3720      	adds	r7, #32
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	200028d4 	.word	0x200028d4
 8008bdc:	40000c00 	.word	0x40000c00

08008be0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b094      	sub	sp, #80	; 0x50
 8008be4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008be6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	605a      	str	r2, [r3, #4]
 8008bf0:	609a      	str	r2, [r3, #8]
 8008bf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008bf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008c00:	463b      	mov	r3, r7
 8008c02:	2234      	movs	r2, #52	; 0x34
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f008 fc76 	bl	80114f8 <memset>

  htim8.Instance = TIM8;
 8008c0c:	4b26      	ldr	r3, [pc, #152]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c0e:	4a27      	ldr	r2, [pc, #156]	; (8008cac <MX_TIM8_Init+0xcc>)
 8008c10:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008c12:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c18:	4b23      	ldr	r3, [pc, #140]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008c1e:	4b22      	ldr	r3, [pc, #136]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008c24:	4b20      	ldr	r3, [pc, #128]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008c2a:	4b1f      	ldr	r3, [pc, #124]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008c30:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c32:	2280      	movs	r2, #128	; 0x80
 8008c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008c36:	481c      	ldr	r0, [pc, #112]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c38:	f004 fc84 	bl	800d544 <HAL_TIM_Base_Init>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8008c42:	f7ff fb4d 	bl	80082e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008c4a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008c4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c50:	4619      	mov	r1, r3
 8008c52:	4815      	ldr	r0, [pc, #84]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c54:	f005 fde6 	bl	800e824 <HAL_TIM_ConfigClockSource>
 8008c58:	4603      	mov	r3, r0
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d001      	beq.n	8008c62 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008c5e:	f7ff fb3f 	bl	80082e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008c62:	2320      	movs	r3, #32
 8008c64:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008c66:	2300      	movs	r3, #0
 8008c68:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008c6e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008c72:	4619      	mov	r1, r3
 8008c74:	480c      	ldr	r0, [pc, #48]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c76:	f006 fe9f 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d001      	beq.n	8008c84 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008c80:	f7ff fb2e 	bl	80082e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008c84:	2300      	movs	r3, #0
 8008c86:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008c8c:	463b      	mov	r3, r7
 8008c8e:	4619      	mov	r1, r3
 8008c90:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <MX_TIM8_Init+0xc8>)
 8008c92:	f006 ff27 	bl	800fae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d001      	beq.n	8008ca0 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008c9c:	f7ff fb20 	bl	80082e0 <Error_Handler>
  }

}
 8008ca0:	bf00      	nop
 8008ca2:	3750      	adds	r7, #80	; 0x50
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	200027a4 	.word	0x200027a4
 8008cac:	40013400 	.word	0x40013400

08008cb0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b088      	sub	sp, #32
 8008cb4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008cb6:	f107 0310 	add.w	r3, r7, #16
 8008cba:	2200      	movs	r2, #0
 8008cbc:	601a      	str	r2, [r3, #0]
 8008cbe:	605a      	str	r2, [r3, #4]
 8008cc0:	609a      	str	r2, [r3, #8]
 8008cc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008cc4:	1d3b      	adds	r3, r7, #4
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]
 8008cca:	605a      	str	r2, [r3, #4]
 8008ccc:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008cce:	4b1f      	ldr	r3, [pc, #124]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008cd0:	4a1f      	ldr	r2, [pc, #124]	; (8008d50 <MX_TIM15_Init+0xa0>)
 8008cd2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008cd4:	4b1d      	ldr	r3, [pc, #116]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008cd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008cda:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008cdc:	4b1b      	ldr	r3, [pc, #108]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8008ce2:	4b1a      	ldr	r3, [pc, #104]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008ce4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ce8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008cea:	4b18      	ldr	r3, [pc, #96]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008cf0:	4b16      	ldr	r3, [pc, #88]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cf6:	4b15      	ldr	r3, [pc, #84]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008cfc:	4813      	ldr	r0, [pc, #76]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008cfe:	f004 fc21 	bl	800d544 <HAL_TIM_Base_Init>
 8008d02:	4603      	mov	r3, r0
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d001      	beq.n	8008d0c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8008d08:	f7ff faea 	bl	80082e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008d0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008d12:	f107 0310 	add.w	r3, r7, #16
 8008d16:	4619      	mov	r1, r3
 8008d18:	480c      	ldr	r0, [pc, #48]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008d1a:	f005 fd83 	bl	800e824 <HAL_TIM_ConfigClockSource>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008d24:	f7ff fadc 	bl	80082e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008d30:	1d3b      	adds	r3, r7, #4
 8008d32:	4619      	mov	r1, r3
 8008d34:	4805      	ldr	r0, [pc, #20]	; (8008d4c <MX_TIM15_Init+0x9c>)
 8008d36:	f006 fe3f 	bl	800f9b8 <HAL_TIMEx_MasterConfigSynchronization>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d001      	beq.n	8008d44 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008d40:	f7ff face 	bl	80082e0 <Error_Handler>
  }

}
 8008d44:	bf00      	nop
 8008d46:	3720      	adds	r7, #32
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}
 8008d4c:	2000283c 	.word	0x2000283c
 8008d50:	40014000 	.word	0x40014000

08008d54 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008d58:	4b10      	ldr	r3, [pc, #64]	; (8008d9c <MX_TIM16_Init+0x48>)
 8008d5a:	4a11      	ldr	r2, [pc, #68]	; (8008da0 <MX_TIM16_Init+0x4c>)
 8008d5c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008d5e:	4b0f      	ldr	r3, [pc, #60]	; (8008d9c <MX_TIM16_Init+0x48>)
 8008d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d64:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008d66:	4b0d      	ldr	r3, [pc, #52]	; (8008d9c <MX_TIM16_Init+0x48>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <MX_TIM16_Init+0x48>)
 8008d6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008d72:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008d74:	4b09      	ldr	r3, [pc, #36]	; (8008d9c <MX_TIM16_Init+0x48>)
 8008d76:	2200      	movs	r2, #0
 8008d78:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008d7a:	4b08      	ldr	r3, [pc, #32]	; (8008d9c <MX_TIM16_Init+0x48>)
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008d80:	4b06      	ldr	r3, [pc, #24]	; (8008d9c <MX_TIM16_Init+0x48>)
 8008d82:	2200      	movs	r2, #0
 8008d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008d86:	4805      	ldr	r0, [pc, #20]	; (8008d9c <MX_TIM16_Init+0x48>)
 8008d88:	f004 fbdc 	bl	800d544 <HAL_TIM_Base_Init>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d001      	beq.n	8008d96 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008d92:	f7ff faa5 	bl	80082e0 <Error_Handler>
  }

}
 8008d96:	bf00      	nop
 8008d98:	bd80      	pop	{r7, pc}
 8008d9a:	bf00      	nop
 8008d9c:	200029b8 	.word	0x200029b8
 8008da0:	40014400 	.word	0x40014400

08008da4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008da8:	4b10      	ldr	r3, [pc, #64]	; (8008dec <MX_TIM17_Init+0x48>)
 8008daa:	4a11      	ldr	r2, [pc, #68]	; (8008df0 <MX_TIM17_Init+0x4c>)
 8008dac:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 8008dae:	4b0f      	ldr	r3, [pc, #60]	; (8008dec <MX_TIM17_Init+0x48>)
 8008db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008db4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008db6:	4b0d      	ldr	r3, [pc, #52]	; (8008dec <MX_TIM17_Init+0x48>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008dbc:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <MX_TIM17_Init+0x48>)
 8008dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008dc2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dc4:	4b09      	ldr	r3, [pc, #36]	; (8008dec <MX_TIM17_Init+0x48>)
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8008dca:	4b08      	ldr	r3, [pc, #32]	; (8008dec <MX_TIM17_Init+0x48>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dd0:	4b06      	ldr	r3, [pc, #24]	; (8008dec <MX_TIM17_Init+0x48>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8008dd6:	4805      	ldr	r0, [pc, #20]	; (8008dec <MX_TIM17_Init+0x48>)
 8008dd8:	f004 fbb4 	bl	800d544 <HAL_TIM_Base_Init>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8008de2:	f7ff fa7d 	bl	80082e0 <Error_Handler>
  }

}
 8008de6:	bf00      	nop
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	20002888 	.word	0x20002888
 8008df0:	40014800 	.word	0x40014800

08008df4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08a      	sub	sp, #40	; 0x28
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008dfc:	f107 0314 	add.w	r3, r7, #20
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	605a      	str	r2, [r3, #4]
 8008e06:	609a      	str	r2, [r3, #8]
 8008e08:	60da      	str	r2, [r3, #12]
 8008e0a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a1f      	ldr	r2, [pc, #124]	; (8008e90 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d137      	bne.n	8008e86 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008e16:	4b1f      	ldr	r3, [pc, #124]	; (8008e94 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e1a:	4a1e      	ldr	r2, [pc, #120]	; (8008e94 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e20:	6613      	str	r3, [r2, #96]	; 0x60
 8008e22:	4b1c      	ldr	r3, [pc, #112]	; (8008e94 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e2e:	4b19      	ldr	r3, [pc, #100]	; (8008e94 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e32:	4a18      	ldr	r2, [pc, #96]	; (8008e94 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e34:	f043 0304 	orr.w	r3, r3, #4
 8008e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e3a:	4b16      	ldr	r3, [pc, #88]	; (8008e94 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3e:	f003 0304 	and.w	r3, r3, #4
 8008e42:	60fb      	str	r3, [r7, #12]
 8008e44:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008e46:	2303      	movs	r3, #3
 8008e48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e52:	2300      	movs	r3, #0
 8008e54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008e56:	2302      	movs	r3, #2
 8008e58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008e5a:	f107 0314 	add.w	r3, r7, #20
 8008e5e:	4619      	mov	r1, r3
 8008e60:	480d      	ldr	r0, [pc, #52]	; (8008e98 <HAL_TIM_Encoder_MspInit+0xa4>)
 8008e62:	f003 f869 	bl	800bf38 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008e66:	2200      	movs	r2, #0
 8008e68:	2100      	movs	r1, #0
 8008e6a:	2018      	movs	r0, #24
 8008e6c:	f002 f8d1 	bl	800b012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008e70:	2018      	movs	r0, #24
 8008e72:	f002 f8e8 	bl	800b046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008e76:	2200      	movs	r2, #0
 8008e78:	2101      	movs	r1, #1
 8008e7a:	201a      	movs	r0, #26
 8008e7c:	f002 f8c9 	bl	800b012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008e80:	201a      	movs	r0, #26
 8008e82:	f002 f8e0 	bl	800b046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008e86:	bf00      	nop
 8008e88:	3728      	adds	r7, #40	; 0x28
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	40012c00 	.word	0x40012c00
 8008e94:	40021000 	.word	0x40021000
 8008e98:	48000800 	.word	0x48000800

08008e9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b090      	sub	sp, #64	; 0x40
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ea4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	605a      	str	r2, [r3, #4]
 8008eae:	609a      	str	r2, [r3, #8]
 8008eb0:	60da      	str	r2, [r3, #12]
 8008eb2:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ebc:	d154      	bne.n	8008f68 <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008ebe:	4b7f      	ldr	r3, [pc, #508]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ec2:	4a7e      	ldr	r2, [pc, #504]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008ec4:	f043 0301 	orr.w	r3, r3, #1
 8008ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8008eca:	4b7c      	ldr	r3, [pc, #496]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ece:	f003 0301 	and.w	r3, r3, #1
 8008ed2:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ed6:	4b79      	ldr	r3, [pc, #484]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eda:	4a78      	ldr	r2, [pc, #480]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008edc:	f043 0301 	orr.w	r3, r3, #1
 8008ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008ee2:	4b76      	ldr	r3, [pc, #472]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	627b      	str	r3, [r7, #36]	; 0x24
 8008eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008efa:	2300      	movs	r3, #0
 8008efc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008efe:	2301      	movs	r3, #1
 8008f00:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008f06:	4619      	mov	r1, r3
 8008f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f0c:	f003 f814 	bl	800bf38 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8008f10:	4b6b      	ldr	r3, [pc, #428]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f12:	4a6c      	ldr	r2, [pc, #432]	; (80090c4 <HAL_TIM_Base_MspInit+0x228>)
 8008f14:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8008f16:	4b6a      	ldr	r3, [pc, #424]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f18:	2238      	movs	r2, #56	; 0x38
 8008f1a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008f1c:	4b68      	ldr	r3, [pc, #416]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f1e:	2200      	movs	r2, #0
 8008f20:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008f22:	4b67      	ldr	r3, [pc, #412]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008f28:	4b65      	ldr	r3, [pc, #404]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f2a:	2280      	movs	r2, #128	; 0x80
 8008f2c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008f2e:	4b64      	ldr	r3, [pc, #400]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f34:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008f36:	4b62      	ldr	r3, [pc, #392]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f3c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8008f3e:	4b60      	ldr	r3, [pc, #384]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f40:	2220      	movs	r2, #32
 8008f42:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008f44:	4b5e      	ldr	r3, [pc, #376]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8008f4a:	485d      	ldr	r0, [pc, #372]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f4c:	f002 fcc2 	bl	800b8d4 <HAL_DMA_Init>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8008f56:	f7ff f9c3 	bl	80082e0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	4a58      	ldr	r2, [pc, #352]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f5e:	625a      	str	r2, [r3, #36]	; 0x24
 8008f60:	4a57      	ldr	r2, [pc, #348]	; (80090c0 <HAL_TIM_Base_MspInit+0x224>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8008f66:	e0a4      	b.n	80090b2 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM3)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a56      	ldr	r2, [pc, #344]	; (80090c8 <HAL_TIM_Base_MspInit+0x22c>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d114      	bne.n	8008f9c <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008f72:	4b52      	ldr	r3, [pc, #328]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f76:	4a51      	ldr	r2, [pc, #324]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008f78:	f043 0302 	orr.w	r3, r3, #2
 8008f7c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f7e:	4b4f      	ldr	r3, [pc, #316]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	623b      	str	r3, [r7, #32]
 8008f88:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	201d      	movs	r0, #29
 8008f90:	f002 f83f 	bl	800b012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008f94:	201d      	movs	r0, #29
 8008f96:	f002 f856 	bl	800b046 <HAL_NVIC_EnableIRQ>
}
 8008f9a:	e08a      	b.n	80090b2 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM4)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a4a      	ldr	r2, [pc, #296]	; (80090cc <HAL_TIM_Base_MspInit+0x230>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d114      	bne.n	8008fd0 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008fa6:	4b45      	ldr	r3, [pc, #276]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008faa:	4a44      	ldr	r2, [pc, #272]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008fac:	f043 0304 	orr.w	r3, r3, #4
 8008fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8008fb2:	4b42      	ldr	r3, [pc, #264]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fb6:	f003 0304 	and.w	r3, r3, #4
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2102      	movs	r1, #2
 8008fc2:	201e      	movs	r0, #30
 8008fc4:	f002 f825 	bl	800b012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008fc8:	201e      	movs	r0, #30
 8008fca:	f002 f83c 	bl	800b046 <HAL_NVIC_EnableIRQ>
}
 8008fce:	e070      	b.n	80090b2 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM5)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a3e      	ldr	r2, [pc, #248]	; (80090d0 <HAL_TIM_Base_MspInit+0x234>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d114      	bne.n	8009004 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008fda:	4b38      	ldr	r3, [pc, #224]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fde:	4a37      	ldr	r2, [pc, #220]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008fe0:	f043 0308 	orr.w	r3, r3, #8
 8008fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8008fe6:	4b35      	ldr	r3, [pc, #212]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8008fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fea:	f003 0308 	and.w	r3, r3, #8
 8008fee:	61bb      	str	r3, [r7, #24]
 8008ff0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2102      	movs	r1, #2
 8008ff6:	2032      	movs	r0, #50	; 0x32
 8008ff8:	f002 f80b 	bl	800b012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008ffc:	2032      	movs	r0, #50	; 0x32
 8008ffe:	f002 f822 	bl	800b046 <HAL_NVIC_EnableIRQ>
}
 8009002:	e056      	b.n	80090b2 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM8)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a32      	ldr	r2, [pc, #200]	; (80090d4 <HAL_TIM_Base_MspInit+0x238>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d10c      	bne.n	8009028 <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800900e:	4b2b      	ldr	r3, [pc, #172]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009012:	4a2a      	ldr	r2, [pc, #168]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009014:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009018:	6613      	str	r3, [r2, #96]	; 0x60
 800901a:	4b28      	ldr	r3, [pc, #160]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 800901c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800901e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009022:	617b      	str	r3, [r7, #20]
 8009024:	697b      	ldr	r3, [r7, #20]
}
 8009026:	e044      	b.n	80090b2 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM15)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a2a      	ldr	r2, [pc, #168]	; (80090d8 <HAL_TIM_Base_MspInit+0x23c>)
 800902e:	4293      	cmp	r3, r2
 8009030:	d114      	bne.n	800905c <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8009032:	4b22      	ldr	r3, [pc, #136]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009036:	4a21      	ldr	r2, [pc, #132]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800903c:	6613      	str	r3, [r2, #96]	; 0x60
 800903e:	4b1f      	ldr	r3, [pc, #124]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009040:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009046:	613b      	str	r3, [r7, #16]
 8009048:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800904a:	2200      	movs	r2, #0
 800904c:	2100      	movs	r1, #0
 800904e:	2018      	movs	r0, #24
 8009050:	f001 ffdf 	bl	800b012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8009054:	2018      	movs	r0, #24
 8009056:	f001 fff6 	bl	800b046 <HAL_NVIC_EnableIRQ>
}
 800905a:	e02a      	b.n	80090b2 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM16)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1e      	ldr	r2, [pc, #120]	; (80090dc <HAL_TIM_Base_MspInit+0x240>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d10c      	bne.n	8009080 <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009066:	4b15      	ldr	r3, [pc, #84]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800906a:	4a14      	ldr	r2, [pc, #80]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 800906c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009070:	6613      	str	r3, [r2, #96]	; 0x60
 8009072:	4b12      	ldr	r3, [pc, #72]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800907a:	60fb      	str	r3, [r7, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
}
 800907e:	e018      	b.n	80090b2 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM17)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	4a16      	ldr	r2, [pc, #88]	; (80090e0 <HAL_TIM_Base_MspInit+0x244>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d113      	bne.n	80090b2 <HAL_TIM_Base_MspInit+0x216>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800908a:	4b0c      	ldr	r3, [pc, #48]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 800908c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800908e:	4a0b      	ldr	r2, [pc, #44]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009094:	6613      	str	r3, [r2, #96]	; 0x60
 8009096:	4b09      	ldr	r3, [pc, #36]	; (80090bc <HAL_TIM_Base_MspInit+0x220>)
 8009098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800909a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800909e:	60bb      	str	r3, [r7, #8]
 80090a0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80090a2:	2200      	movs	r2, #0
 80090a4:	2101      	movs	r1, #1
 80090a6:	201a      	movs	r0, #26
 80090a8:	f001 ffb3 	bl	800b012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80090ac:	201a      	movs	r0, #26
 80090ae:	f001 ffca 	bl	800b046 <HAL_NVIC_EnableIRQ>
}
 80090b2:	bf00      	nop
 80090b4:	3740      	adds	r7, #64	; 0x40
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	40021000 	.word	0x40021000
 80090c0:	20002744 	.word	0x20002744
 80090c4:	40020044 	.word	0x40020044
 80090c8:	40000400 	.word	0x40000400
 80090cc:	40000800 	.word	0x40000800
 80090d0:	40000c00 	.word	0x40000c00
 80090d4:	40013400 	.word	0x40013400
 80090d8:	40014000 	.word	0x40014000
 80090dc:	40014400 	.word	0x40014400
 80090e0:	40014800 	.word	0x40014800

080090e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80090e4:	480d      	ldr	r0, [pc, #52]	; (800911c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80090e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80090e8:	480d      	ldr	r0, [pc, #52]	; (8009120 <LoopForever+0x6>)
  ldr r1, =_edata
 80090ea:	490e      	ldr	r1, [pc, #56]	; (8009124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80090ec:	4a0e      	ldr	r2, [pc, #56]	; (8009128 <LoopForever+0xe>)
  movs r3, #0
 80090ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80090f0:	e002      	b.n	80090f8 <LoopCopyDataInit>

080090f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80090f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80090f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80090f6:	3304      	adds	r3, #4

080090f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80090f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80090fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80090fc:	d3f9      	bcc.n	80090f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80090fe:	4a0b      	ldr	r2, [pc, #44]	; (800912c <LoopForever+0x12>)
  ldr r4, =_ebss
 8009100:	4c0b      	ldr	r4, [pc, #44]	; (8009130 <LoopForever+0x16>)
  movs r3, #0
 8009102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009104:	e001      	b.n	800910a <LoopFillZerobss>

08009106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009108:	3204      	adds	r2, #4

0800910a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800910a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800910c:	d3fb      	bcc.n	8009106 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800910e:	f7ff fb81 	bl	8008814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009112:	f008 f9cd 	bl	80114b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8009116:	f7ff f821 	bl	800815c <main>

0800911a <LoopForever>:

LoopForever:
    b LoopForever
 800911a:	e7fe      	b.n	800911a <LoopForever>
  ldr   r0, =_estack
 800911c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8009120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009124:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 8009128:	08016a88 	.word	0x08016a88
  ldr r2, =_sbss
 800912c:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 8009130:	20002a0c 	.word	0x20002a0c

08009134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8009134:	e7fe      	b.n	8009134 <ADC1_2_IRQHandler>

08009136 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009140:	2003      	movs	r0, #3
 8009142:	f001 ff5b 	bl	800affc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009146:	2000      	movs	r0, #0
 8009148:	f000 f80e 	bl	8009168 <HAL_InitTick>
 800914c:	4603      	mov	r3, r0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d002      	beq.n	8009158 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	71fb      	strb	r3, [r7, #7]
 8009156:	e001      	b.n	800915c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009158:	f7ff f992 	bl	8008480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800915c:	79fb      	ldrb	r3, [r7, #7]

}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
	...

08009168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009174:	4b16      	ldr	r3, [pc, #88]	; (80091d0 <HAL_InitTick+0x68>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d022      	beq.n	80091c2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800917c:	4b15      	ldr	r3, [pc, #84]	; (80091d4 <HAL_InitTick+0x6c>)
 800917e:	681a      	ldr	r2, [r3, #0]
 8009180:	4b13      	ldr	r3, [pc, #76]	; (80091d0 <HAL_InitTick+0x68>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009188:	fbb1 f3f3 	udiv	r3, r1, r3
 800918c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009190:	4618      	mov	r0, r3
 8009192:	f001 ff74 	bl	800b07e <HAL_SYSTICK_Config>
 8009196:	4603      	mov	r3, r0
 8009198:	2b00      	cmp	r3, #0
 800919a:	d10f      	bne.n	80091bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b0f      	cmp	r3, #15
 80091a0:	d809      	bhi.n	80091b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80091a2:	2200      	movs	r2, #0
 80091a4:	6879      	ldr	r1, [r7, #4]
 80091a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80091aa:	f001 ff32 	bl	800b012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80091ae:	4a0a      	ldr	r2, [pc, #40]	; (80091d8 <HAL_InitTick+0x70>)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	6013      	str	r3, [r2, #0]
 80091b4:	e007      	b.n	80091c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	73fb      	strb	r3, [r7, #15]
 80091ba:	e004      	b.n	80091c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	73fb      	strb	r3, [r7, #15]
 80091c0:	e001      	b.n	80091c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80091c2:	2301      	movs	r3, #1
 80091c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	20000c3c 	.word	0x20000c3c
 80091d4:	20000c34 	.word	0x20000c34
 80091d8:	20000c38 	.word	0x20000c38

080091dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80091dc:	b480      	push	{r7}
 80091de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80091e0:	4b05      	ldr	r3, [pc, #20]	; (80091f8 <HAL_IncTick+0x1c>)
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	4b05      	ldr	r3, [pc, #20]	; (80091fc <HAL_IncTick+0x20>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4413      	add	r3, r2
 80091ea:	4a03      	ldr	r2, [pc, #12]	; (80091f8 <HAL_IncTick+0x1c>)
 80091ec:	6013      	str	r3, [r2, #0]
}
 80091ee:	bf00      	nop
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr
 80091f8:	20002a04 	.word	0x20002a04
 80091fc:	20000c3c 	.word	0x20000c3c

08009200 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009200:	b480      	push	{r7}
 8009202:	af00      	add	r7, sp, #0
  return uwTick;
 8009204:	4b03      	ldr	r3, [pc, #12]	; (8009214 <HAL_GetTick+0x14>)
 8009206:	681b      	ldr	r3, [r3, #0]
}
 8009208:	4618      	mov	r0, r3
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
 8009212:	bf00      	nop
 8009214:	20002a04 	.word	0x20002a04

08009218 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009220:	f7ff ffee 	bl	8009200 <HAL_GetTick>
 8009224:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009230:	d004      	beq.n	800923c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <HAL_Delay+0x40>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	4413      	add	r3, r2
 800923a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800923c:	bf00      	nop
 800923e:	f7ff ffdf 	bl	8009200 <HAL_GetTick>
 8009242:	4602      	mov	r2, r0
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	1ad3      	subs	r3, r2, r3
 8009248:	68fa      	ldr	r2, [r7, #12]
 800924a:	429a      	cmp	r2, r3
 800924c:	d8f7      	bhi.n	800923e <HAL_Delay+0x26>
  {
  }
}
 800924e:	bf00      	nop
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	20000c3c 	.word	0x20000c3c

0800925c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	431a      	orrs	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	609a      	str	r2, [r3, #8]
}
 8009276:	bf00      	nop
 8009278:	370c      	adds	r7, #12
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	431a      	orrs	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	609a      	str	r2, [r3, #8]
}
 800929c:	bf00      	nop
 800929e:	370c      	adds	r7, #12
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	689b      	ldr	r3, [r3, #8]
 80092b4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80092c4:	b490      	push	{r4, r7}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
 80092d0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	3360      	adds	r3, #96	; 0x60
 80092d6:	461a      	mov	r2, r3
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80092e0:	6822      	ldr	r2, [r4, #0]
 80092e2:	4b08      	ldr	r3, [pc, #32]	; (8009304 <LL_ADC_SetOffset+0x40>)
 80092e4:	4013      	ands	r3, r2
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	4313      	orrs	r3, r2
 80092f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092f6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80092f8:	bf00      	nop
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bc90      	pop	{r4, r7}
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	03fff000 	.word	0x03fff000

08009308 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8009308:	b490      	push	{r4, r7}
 800930a:	b082      	sub	sp, #8
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3360      	adds	r3, #96	; 0x60
 8009316:	461a      	mov	r2, r3
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	4413      	add	r3, r2
 800931e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8009320:	6823      	ldr	r3, [r4, #0]
 8009322:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8009326:	4618      	mov	r0, r3
 8009328:	3708      	adds	r7, #8
 800932a:	46bd      	mov	sp, r7
 800932c:	bc90      	pop	{r4, r7}
 800932e:	4770      	bx	lr

08009330 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8009330:	b490      	push	{r4, r7}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	60f8      	str	r0, [r7, #12]
 8009338:	60b9      	str	r1, [r7, #8]
 800933a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	3360      	adds	r3, #96	; 0x60
 8009340:	461a      	mov	r2, r3
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	4413      	add	r3, r2
 8009348:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800934a:	6823      	ldr	r3, [r4, #0]
 800934c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4313      	orrs	r3, r2
 8009354:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8009356:	bf00      	nop
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bc90      	pop	{r4, r7}
 800935e:	4770      	bx	lr

08009360 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8009360:	b490      	push	{r4, r7}
 8009362:	b084      	sub	sp, #16
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3360      	adds	r3, #96	; 0x60
 8009370:	461a      	mov	r2, r3
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4313      	orrs	r3, r2
 8009384:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bc90      	pop	{r4, r7}
 800938e:	4770      	bx	lr

08009390 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8009390:	b490      	push	{r4, r7}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	60f8      	str	r0, [r7, #12]
 8009398:	60b9      	str	r1, [r7, #8]
 800939a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3360      	adds	r3, #96	; 0x60
 80093a0:	461a      	mov	r2, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	009b      	lsls	r3, r3, #2
 80093a6:	4413      	add	r3, r2
 80093a8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80093b6:	bf00      	nop
 80093b8:	3710      	adds	r7, #16
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bc90      	pop	{r4, r7}
 80093be:	4770      	bx	lr

080093c0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80093c0:	b480      	push	{r7}
 80093c2:	b083      	sub	sp, #12
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	431a      	orrs	r2, r3
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	615a      	str	r2, [r3, #20]
}
 80093da:	bf00      	nop
 80093dc:	370c      	adds	r7, #12
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr

080093e6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80093e6:	b490      	push	{r4, r7}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	60f8      	str	r0, [r7, #12]
 80093ee:	60b9      	str	r1, [r7, #8]
 80093f0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	3330      	adds	r3, #48	; 0x30
 80093f6:	461a      	mov	r2, r3
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	0a1b      	lsrs	r3, r3, #8
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	f003 030c 	and.w	r3, r3, #12
 8009402:	4413      	add	r3, r2
 8009404:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009406:	6822      	ldr	r2, [r4, #0]
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f003 031f 	and.w	r3, r3, #31
 800940e:	211f      	movs	r1, #31
 8009410:	fa01 f303 	lsl.w	r3, r1, r3
 8009414:	43db      	mvns	r3, r3
 8009416:	401a      	ands	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	0e9b      	lsrs	r3, r3, #26
 800941c:	f003 011f 	and.w	r1, r3, #31
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	f003 031f 	and.w	r3, r3, #31
 8009426:	fa01 f303 	lsl.w	r3, r1, r3
 800942a:	4313      	orrs	r3, r2
 800942c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bc90      	pop	{r4, r7}
 8009436:	4770      	bx	lr

08009438 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009438:	b490      	push	{r4, r7}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	3314      	adds	r3, #20
 8009448:	461a      	mov	r2, r3
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	0e5b      	lsrs	r3, r3, #25
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	f003 0304 	and.w	r3, r3, #4
 8009454:	4413      	add	r3, r2
 8009456:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009458:	6822      	ldr	r2, [r4, #0]
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	0d1b      	lsrs	r3, r3, #20
 800945e:	f003 031f 	and.w	r3, r3, #31
 8009462:	2107      	movs	r1, #7
 8009464:	fa01 f303 	lsl.w	r3, r1, r3
 8009468:	43db      	mvns	r3, r3
 800946a:	401a      	ands	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	0d1b      	lsrs	r3, r3, #20
 8009470:	f003 031f 	and.w	r3, r3, #31
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	fa01 f303 	lsl.w	r3, r1, r3
 800947a:	4313      	orrs	r3, r2
 800947c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800947e:	bf00      	nop
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bc90      	pop	{r4, r7}
 8009486:	4770      	bx	lr

08009488 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094a0:	43db      	mvns	r3, r3
 80094a2:	401a      	ands	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f003 0318 	and.w	r3, r3, #24
 80094aa:	4908      	ldr	r1, [pc, #32]	; (80094cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80094ac:	40d9      	lsrs	r1, r3
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	400b      	ands	r3, r1
 80094b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094b6:	431a      	orrs	r2, r3
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80094be:	bf00      	nop
 80094c0:	3714      	adds	r7, #20
 80094c2:	46bd      	mov	sp, r7
 80094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c8:	4770      	bx	lr
 80094ca:	bf00      	nop
 80094cc:	0007ffff 	.word	0x0007ffff

080094d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b083      	sub	sp, #12
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80094e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6093      	str	r3, [r2, #8]
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009504:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009508:	d101      	bne.n	800950e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800950a:	2301      	movs	r3, #1
 800950c:	e000      	b.n	8009510 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800952c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009530:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	689b      	ldr	r3, [r3, #8]
 8009550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009554:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009558:	d101      	bne.n	800955e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800955a:	2301      	movs	r3, #1
 800955c:	e000      	b.n	8009560 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800957c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009580:	f043 0202 	orr.w	r2, r3, #2
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009588:	bf00      	nop
 800958a:	370c      	adds	r7, #12
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f003 0301 	and.w	r3, r3, #1
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d101      	bne.n	80095ac <LL_ADC_IsEnabled+0x18>
 80095a8:	2301      	movs	r3, #1
 80095aa:	e000      	b.n	80095ae <LL_ADC_IsEnabled+0x1a>
 80095ac:	2300      	movs	r3, #0
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	370c      	adds	r7, #12
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 0302 	and.w	r3, r3, #2
 80095ca:	2b02      	cmp	r3, #2
 80095cc:	d101      	bne.n	80095d2 <LL_ADC_IsDisableOngoing+0x18>
 80095ce:	2301      	movs	r3, #1
 80095d0:	e000      	b.n	80095d4 <LL_ADC_IsDisableOngoing+0x1a>
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	370c      	adds	r7, #12
 80095d8:	46bd      	mov	sp, r7
 80095da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095de:	4770      	bx	lr

080095e0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80095f4:	f043 0210 	orr.w	r2, r3, #16
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80095fc:	bf00      	nop
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b04      	cmp	r3, #4
 800961a:	d101      	bne.n	8009620 <LL_ADC_REG_IsConversionOngoing+0x18>
 800961c:	2301      	movs	r3, #1
 800961e:	e000      	b.n	8009622 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	370c      	adds	r7, #12
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800963e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009642:	f043 0220 	orr.w	r2, r3, #32
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800964a:	bf00      	nop
 800964c:	370c      	adds	r7, #12
 800964e:	46bd      	mov	sp, r7
 8009650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009654:	4770      	bx	lr

08009656 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	f003 0308 	and.w	r3, r3, #8
 8009666:	2b08      	cmp	r3, #8
 8009668:	d101      	bne.n	800966e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800966a:	2301      	movs	r3, #1
 800966c:	e000      	b.n	8009670 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b089      	sub	sp, #36	; 0x24
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009688:	2300      	movs	r3, #0
 800968a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d101      	bne.n	8009696 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e1ad      	b.n	80099f2 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f7fd ffa5 	bl	80075f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4618      	mov	r0, r3
 80096be:	f7ff ff19 	bl	80094f4 <LL_ADC_IsDeepPowerDownEnabled>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4618      	mov	r0, r3
 80096ce:	f7ff feff 	bl	80094d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff ff34 	bl	8009544 <LL_ADC_IsInternalRegulatorEnabled>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d113      	bne.n	800970a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7ff ff18 	bl	800951c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80096ec:	4b9e      	ldr	r3, [pc, #632]	; (8009968 <HAL_ADC_Init+0x2ec>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	099b      	lsrs	r3, r3, #6
 80096f2:	4a9e      	ldr	r2, [pc, #632]	; (800996c <HAL_ADC_Init+0x2f0>)
 80096f4:	fba2 2303 	umull	r2, r3, r2, r3
 80096f8:	099b      	lsrs	r3, r3, #6
 80096fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80096fc:	e002      	b.n	8009704 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	3b01      	subs	r3, #1
 8009702:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1f9      	bne.n	80096fe <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4618      	mov	r0, r3
 8009710:	f7ff ff18 	bl	8009544 <LL_ADC_IsInternalRegulatorEnabled>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10d      	bne.n	8009736 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800971e:	f043 0210 	orr.w	r2, r3, #16
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800972a:	f043 0201 	orr.w	r2, r3, #1
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4618      	mov	r0, r3
 800973c:	f7ff ff64 	bl	8009608 <LL_ADC_REG_IsConversionOngoing>
 8009740:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	2b00      	cmp	r3, #0
 800974c:	f040 8148 	bne.w	80099e0 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f040 8144 	bne.w	80099e0 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800975c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009760:	f043 0202 	orr.w	r2, r3, #2
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	f7ff ff11 	bl	8009594 <LL_ADC_IsEnabled>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d141      	bne.n	80097fc <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009780:	d004      	beq.n	800978c <HAL_ADC_Init+0x110>
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a7a      	ldr	r2, [pc, #488]	; (8009970 <HAL_ADC_Init+0x2f4>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d10f      	bne.n	80097ac <HAL_ADC_Init+0x130>
 800978c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009790:	f7ff ff00 	bl	8009594 <LL_ADC_IsEnabled>
 8009794:	4604      	mov	r4, r0
 8009796:	4876      	ldr	r0, [pc, #472]	; (8009970 <HAL_ADC_Init+0x2f4>)
 8009798:	f7ff fefc 	bl	8009594 <LL_ADC_IsEnabled>
 800979c:	4603      	mov	r3, r0
 800979e:	4323      	orrs	r3, r4
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	bf0c      	ite	eq
 80097a4:	2301      	moveq	r3, #1
 80097a6:	2300      	movne	r3, #0
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	e012      	b.n	80097d2 <HAL_ADC_Init+0x156>
 80097ac:	4871      	ldr	r0, [pc, #452]	; (8009974 <HAL_ADC_Init+0x2f8>)
 80097ae:	f7ff fef1 	bl	8009594 <LL_ADC_IsEnabled>
 80097b2:	4604      	mov	r4, r0
 80097b4:	4870      	ldr	r0, [pc, #448]	; (8009978 <HAL_ADC_Init+0x2fc>)
 80097b6:	f7ff feed 	bl	8009594 <LL_ADC_IsEnabled>
 80097ba:	4603      	mov	r3, r0
 80097bc:	431c      	orrs	r4, r3
 80097be:	486f      	ldr	r0, [pc, #444]	; (800997c <HAL_ADC_Init+0x300>)
 80097c0:	f7ff fee8 	bl	8009594 <LL_ADC_IsEnabled>
 80097c4:	4603      	mov	r3, r0
 80097c6:	4323      	orrs	r3, r4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	bf0c      	ite	eq
 80097cc:	2301      	moveq	r3, #1
 80097ce:	2300      	movne	r3, #0
 80097d0:	b2db      	uxtb	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d012      	beq.n	80097fc <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097de:	d004      	beq.n	80097ea <HAL_ADC_Init+0x16e>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a62      	ldr	r2, [pc, #392]	; (8009970 <HAL_ADC_Init+0x2f4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d101      	bne.n	80097ee <HAL_ADC_Init+0x172>
 80097ea:	4a65      	ldr	r2, [pc, #404]	; (8009980 <HAL_ADC_Init+0x304>)
 80097ec:	e000      	b.n	80097f0 <HAL_ADC_Init+0x174>
 80097ee:	4a65      	ldr	r2, [pc, #404]	; (8009984 <HAL_ADC_Init+0x308>)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	4619      	mov	r1, r3
 80097f6:	4610      	mov	r0, r2
 80097f8:	f7ff fd30 	bl	800925c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	7f5b      	ldrb	r3, [r3, #29]
 8009800:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009806:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800980c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8009812:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800981a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800981c:	4313      	orrs	r3, r2
 800981e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009826:	2b01      	cmp	r3, #1
 8009828:	d106      	bne.n	8009838 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800982e:	3b01      	subs	r3, #1
 8009830:	045b      	lsls	r3, r3, #17
 8009832:	69ba      	ldr	r2, [r7, #24]
 8009834:	4313      	orrs	r3, r2
 8009836:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d009      	beq.n	8009854 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009844:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800984c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	4313      	orrs	r3, r2
 8009852:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	4b4b      	ldr	r3, [pc, #300]	; (8009988 <HAL_ADC_Init+0x30c>)
 800985c:	4013      	ands	r3, r2
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	69b9      	ldr	r1, [r7, #24]
 8009864:	430b      	orrs	r3, r1
 8009866:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	691b      	ldr	r3, [r3, #16]
 800986e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f7ff fec0 	bl	8009608 <LL_ADC_REG_IsConversionOngoing>
 8009888:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff fee1 	bl	8009656 <LL_ADC_INJ_IsConversionOngoing>
 8009894:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	2b00      	cmp	r3, #0
 800989a:	d17f      	bne.n	800999c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d17c      	bne.n	800999c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80098a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80098ae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	68db      	ldr	r3, [r3, #12]
 80098ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098be:	f023 0302 	bic.w	r3, r3, #2
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	6812      	ldr	r2, [r2, #0]
 80098c6:	69b9      	ldr	r1, [r7, #24]
 80098c8:	430b      	orrs	r3, r1
 80098ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d017      	beq.n	8009904 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	691a      	ldr	r2, [r3, #16]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80098e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80098ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80098f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80098f4:	687a      	ldr	r2, [r7, #4]
 80098f6:	6911      	ldr	r1, [r2, #16]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6812      	ldr	r2, [r2, #0]
 80098fc:	430b      	orrs	r3, r1
 80098fe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8009902:	e013      	b.n	800992c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	691a      	ldr	r2, [r3, #16]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009912:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6812      	ldr	r2, [r2, #0]
 8009920:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009924:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009928:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009932:	2b01      	cmp	r3, #1
 8009934:	d12a      	bne.n	800998c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	691b      	ldr	r3, [r3, #16]
 800993c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009940:	f023 0304 	bic.w	r3, r3, #4
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800994c:	4311      	orrs	r1, r2
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8009952:	4311      	orrs	r1, r2
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009958:	430a      	orrs	r2, r1
 800995a:	431a      	orrs	r2, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f042 0201 	orr.w	r2, r2, #1
 8009964:	611a      	str	r2, [r3, #16]
 8009966:	e019      	b.n	800999c <HAL_ADC_Init+0x320>
 8009968:	20000c34 	.word	0x20000c34
 800996c:	053e2d63 	.word	0x053e2d63
 8009970:	50000100 	.word	0x50000100
 8009974:	50000400 	.word	0x50000400
 8009978:	50000500 	.word	0x50000500
 800997c:	50000600 	.word	0x50000600
 8009980:	50000300 	.word	0x50000300
 8009984:	50000700 	.word	0x50000700
 8009988:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691a      	ldr	r2, [r3, #16]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f022 0201 	bic.w	r2, r2, #1
 800999a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	2b01      	cmp	r3, #1
 80099a2:	d10c      	bne.n	80099be <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099aa:	f023 010f 	bic.w	r1, r3, #15
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6a1b      	ldr	r3, [r3, #32]
 80099b2:	1e5a      	subs	r2, r3, #1
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	430a      	orrs	r2, r1
 80099ba:	631a      	str	r2, [r3, #48]	; 0x30
 80099bc:	e007      	b.n	80099ce <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f022 020f 	bic.w	r2, r2, #15
 80099cc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099d2:	f023 0303 	bic.w	r3, r3, #3
 80099d6:	f043 0201 	orr.w	r2, r3, #1
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80099de:	e007      	b.n	80099f0 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099e4:	f043 0210 	orr.w	r2, r3, #16
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80099f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3724      	adds	r7, #36	; 0x24
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd90      	pop	{r4, r7, pc}
 80099fa:	bf00      	nop

080099fc <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b084      	sub	sp, #16
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <HAL_ADC_Stop_DMA+0x16>
 8009a0e:	2302      	movs	r3, #2
 8009a10:	e051      	b.n	8009ab6 <HAL_ADC_Stop_DMA+0xba>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009a1a:	2103      	movs	r1, #3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 fbff 	bl	800a220 <ADC_ConversionStop>
 8009a22:	4603      	mov	r3, r0
 8009a24:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d13f      	bne.n	8009aac <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	68da      	ldr	r2, [r3, #12]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f022 0201 	bic.w	r2, r2, #1
 8009a3a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b02      	cmp	r3, #2
 8009a48:	d10f      	bne.n	8009a6a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f002 f863 	bl	800bb1a <HAL_DMA_Abort>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009a58:	7bfb      	ldrb	r3, [r7, #15]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d005      	beq.n	8009a6a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0210 	bic.w	r2, r2, #16
 8009a78:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8009a7a:	7bfb      	ldrb	r3, [r7, #15]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d105      	bne.n	8009a8c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fc81 	bl	800a388 <ADC_Disable>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73fb      	strb	r3, [r7, #15]
 8009a8a:	e002      	b.n	8009a92 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 fc7b 	bl	800a388 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d109      	bne.n	8009aac <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a9c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009aa0:	f023 0301 	bic.w	r3, r3, #1
 8009aa4:	f043 0201 	orr.w	r2, r3, #1
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	3710      	adds	r7, #16
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
	...

08009ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b0a6      	sub	sp, #152	; 0x98
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
 8009ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009aca:	2300      	movs	r3, #0
 8009acc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d101      	bne.n	8009ae2 <HAL_ADC_ConfigChannel+0x22>
 8009ade:	2302      	movs	r3, #2
 8009ae0:	e38e      	b.n	800a200 <HAL_ADC_ConfigChannel+0x740>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7ff fd8a 	bl	8009608 <LL_ADC_REG_IsConversionOngoing>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f040 836f 	bne.w	800a1da <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6818      	ldr	r0, [r3, #0]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	6859      	ldr	r1, [r3, #4]
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	461a      	mov	r2, r3
 8009b0a:	f7ff fc6c 	bl	80093e6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff fd78 	bl	8009608 <LL_ADC_REG_IsConversionOngoing>
 8009b18:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7ff fd98 	bl	8009656 <LL_ADC_INJ_IsConversionOngoing>
 8009b26:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009b2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	f040 817b 	bne.w	8009e2a <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f040 8176 	bne.w	8009e2a <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b46:	d10f      	bne.n	8009b68 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	6818      	ldr	r0, [r3, #0]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2200      	movs	r2, #0
 8009b52:	4619      	mov	r1, r3
 8009b54:	f7ff fc70 	bl	8009438 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8009b60:	4618      	mov	r0, r3
 8009b62:	f7ff fc2d 	bl	80093c0 <LL_ADC_SetSamplingTimeCommonConfig>
 8009b66:	e00e      	b.n	8009b86 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6818      	ldr	r0, [r3, #0]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	6819      	ldr	r1, [r3, #0]
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	461a      	mov	r2, r3
 8009b76:	f7ff fc5f 	bl	8009438 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2100      	movs	r1, #0
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff fc1d 	bl	80093c0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	695a      	ldr	r2, [r3, #20]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	08db      	lsrs	r3, r3, #3
 8009b92:	f003 0303 	and.w	r3, r3, #3
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d022      	beq.n	8009bee <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6818      	ldr	r0, [r3, #0]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	6919      	ldr	r1, [r3, #16]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bb8:	f7ff fb84 	bl	80092c4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	6919      	ldr	r1, [r3, #16]
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	461a      	mov	r2, r3
 8009bca:	f7ff fbc9 	bl	8009360 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6818      	ldr	r0, [r3, #0]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	6919      	ldr	r1, [r3, #16]
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	7f1b      	ldrb	r3, [r3, #28]
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d102      	bne.n	8009be4 <HAL_ADC_ConfigChannel+0x124>
 8009bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009be2:	e000      	b.n	8009be6 <HAL_ADC_ConfigChannel+0x126>
 8009be4:	2300      	movs	r3, #0
 8009be6:	461a      	mov	r2, r3
 8009be8:	f7ff fbd2 	bl	8009390 <LL_ADC_SetOffsetSaturation>
 8009bec:	e11d      	b.n	8009e2a <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2100      	movs	r1, #0
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7ff fb87 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d10a      	bne.n	8009c1a <HAL_ADC_ConfigChannel+0x15a>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	2100      	movs	r1, #0
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7ff fb7c 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009c10:	4603      	mov	r3, r0
 8009c12:	0e9b      	lsrs	r3, r3, #26
 8009c14:	f003 021f 	and.w	r2, r3, #31
 8009c18:	e012      	b.n	8009c40 <HAL_ADC_ConfigChannel+0x180>
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	2100      	movs	r1, #0
 8009c20:	4618      	mov	r0, r3
 8009c22:	f7ff fb71 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009c26:	4603      	mov	r3, r0
 8009c28:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c2c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009c30:	fa93 f3a3 	rbit	r3, r3
 8009c34:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009c36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009c38:	fab3 f383 	clz	r3, r3
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	461a      	mov	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d105      	bne.n	8009c58 <HAL_ADC_ConfigChannel+0x198>
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	0e9b      	lsrs	r3, r3, #26
 8009c52:	f003 031f 	and.w	r3, r3, #31
 8009c56:	e00a      	b.n	8009c6e <HAL_ADC_ConfigChannel+0x1ae>
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c60:	fa93 f3a3 	rbit	r3, r3
 8009c64:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009c66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c68:	fab3 f383 	clz	r3, r3
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d106      	bne.n	8009c80 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff fb58 	bl	8009330 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	2101      	movs	r1, #1
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7ff fb3e 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10a      	bne.n	8009cac <HAL_ADC_ConfigChannel+0x1ec>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f7ff fb33 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009ca2:	4603      	mov	r3, r0
 8009ca4:	0e9b      	lsrs	r3, r3, #26
 8009ca6:	f003 021f 	and.w	r2, r3, #31
 8009caa:	e010      	b.n	8009cce <HAL_ADC_ConfigChannel+0x20e>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f7ff fb28 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009cbe:	fa93 f3a3 	rbit	r3, r3
 8009cc2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc6:	fab3 f383 	clz	r3, r3
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	461a      	mov	r2, r3
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d105      	bne.n	8009ce6 <HAL_ADC_ConfigChannel+0x226>
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	0e9b      	lsrs	r3, r3, #26
 8009ce0:	f003 031f 	and.w	r3, r3, #31
 8009ce4:	e00a      	b.n	8009cfc <HAL_ADC_ConfigChannel+0x23c>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cee:	fa93 f3a3 	rbit	r3, r3
 8009cf2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cf6:	fab3 f383 	clz	r3, r3
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d106      	bne.n	8009d0e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2200      	movs	r2, #0
 8009d06:	2101      	movs	r1, #1
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7ff fb11 	bl	8009330 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2102      	movs	r1, #2
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff faf7 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d10a      	bne.n	8009d3a <HAL_ADC_ConfigChannel+0x27a>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2102      	movs	r1, #2
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f7ff faec 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009d30:	4603      	mov	r3, r0
 8009d32:	0e9b      	lsrs	r3, r3, #26
 8009d34:	f003 021f 	and.w	r2, r3, #31
 8009d38:	e010      	b.n	8009d5c <HAL_ADC_ConfigChannel+0x29c>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2102      	movs	r1, #2
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff fae1 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009d46:	4603      	mov	r3, r0
 8009d48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009d4c:	fa93 f3a3 	rbit	r3, r3
 8009d50:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009d52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d54:	fab3 f383 	clz	r3, r3
 8009d58:	b2db      	uxtb	r3, r3
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d105      	bne.n	8009d74 <HAL_ADC_ConfigChannel+0x2b4>
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	0e9b      	lsrs	r3, r3, #26
 8009d6e:	f003 031f 	and.w	r3, r3, #31
 8009d72:	e00a      	b.n	8009d8a <HAL_ADC_ConfigChannel+0x2ca>
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d7c:	fa93 f3a3 	rbit	r3, r3
 8009d80:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d84:	fab3 f383 	clz	r3, r3
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d106      	bne.n	8009d9c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	2200      	movs	r2, #0
 8009d94:	2102      	movs	r1, #2
 8009d96:	4618      	mov	r0, r3
 8009d98:	f7ff faca 	bl	8009330 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2103      	movs	r1, #3
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff fab0 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009da8:	4603      	mov	r3, r0
 8009daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10a      	bne.n	8009dc8 <HAL_ADC_ConfigChannel+0x308>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2103      	movs	r1, #3
 8009db8:	4618      	mov	r0, r3
 8009dba:	f7ff faa5 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	0e9b      	lsrs	r3, r3, #26
 8009dc2:	f003 021f 	and.w	r2, r3, #31
 8009dc6:	e010      	b.n	8009dea <HAL_ADC_ConfigChannel+0x32a>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2103      	movs	r1, #3
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fa9a 	bl	8009308 <LL_ADC_GetOffsetChannel>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dda:	fa93 f3a3 	rbit	r3, r3
 8009dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de2:	fab3 f383 	clz	r3, r3
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	461a      	mov	r2, r3
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d105      	bne.n	8009e02 <HAL_ADC_ConfigChannel+0x342>
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	0e9b      	lsrs	r3, r3, #26
 8009dfc:	f003 031f 	and.w	r3, r3, #31
 8009e00:	e00a      	b.n	8009e18 <HAL_ADC_ConfigChannel+0x358>
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009e0a:	fa93 f3a3 	rbit	r3, r3
 8009e0e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009e10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e12:	fab3 f383 	clz	r3, r3
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d106      	bne.n	8009e2a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2200      	movs	r2, #0
 8009e22:	2103      	movs	r1, #3
 8009e24:	4618      	mov	r0, r3
 8009e26:	f7ff fa83 	bl	8009330 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7ff fbb0 	bl	8009594 <LL_ADC_IsEnabled>
 8009e34:	4603      	mov	r3, r0
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	f040 810c 	bne.w	800a054 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6818      	ldr	r0, [r3, #0]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	6819      	ldr	r1, [r3, #0]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	f7ff fb1d 	bl	8009488 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	4aaf      	ldr	r2, [pc, #700]	; (800a110 <HAL_ADC_ConfigChannel+0x650>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	f040 80fd 	bne.w	800a054 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10b      	bne.n	8009e82 <HAL_ADC_ConfigChannel+0x3c2>
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	0e9b      	lsrs	r3, r3, #26
 8009e70:	3301      	adds	r3, #1
 8009e72:	f003 031f 	and.w	r3, r3, #31
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	bf94      	ite	ls
 8009e7a:	2301      	movls	r3, #1
 8009e7c:	2300      	movhi	r3, #0
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	e012      	b.n	8009ea8 <HAL_ADC_ConfigChannel+0x3e8>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e8a:	fa93 f3a3 	rbit	r3, r3
 8009e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e92:	fab3 f383 	clz	r3, r3
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f003 031f 	and.w	r3, r3, #31
 8009e9e:	2b09      	cmp	r3, #9
 8009ea0:	bf94      	ite	ls
 8009ea2:	2301      	movls	r3, #1
 8009ea4:	2300      	movhi	r3, #0
 8009ea6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d064      	beq.n	8009f76 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d107      	bne.n	8009ec8 <HAL_ADC_ConfigChannel+0x408>
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	0e9b      	lsrs	r3, r3, #26
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	069b      	lsls	r3, r3, #26
 8009ec2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009ec6:	e00e      	b.n	8009ee6 <HAL_ADC_ConfigChannel+0x426>
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed0:	fa93 f3a3 	rbit	r3, r3
 8009ed4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ed8:	fab3 f383 	clz	r3, r3
 8009edc:	b2db      	uxtb	r3, r3
 8009ede:	3301      	adds	r3, #1
 8009ee0:	069b      	lsls	r3, r3, #26
 8009ee2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d109      	bne.n	8009f06 <HAL_ADC_ConfigChannel+0x446>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	0e9b      	lsrs	r3, r3, #26
 8009ef8:	3301      	adds	r3, #1
 8009efa:	f003 031f 	and.w	r3, r3, #31
 8009efe:	2101      	movs	r1, #1
 8009f00:	fa01 f303 	lsl.w	r3, r1, r3
 8009f04:	e010      	b.n	8009f28 <HAL_ADC_ConfigChannel+0x468>
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f0e:	fa93 f3a3 	rbit	r3, r3
 8009f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f16:	fab3 f383 	clz	r3, r3
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	f003 031f 	and.w	r3, r3, #31
 8009f22:	2101      	movs	r1, #1
 8009f24:	fa01 f303 	lsl.w	r3, r1, r3
 8009f28:	ea42 0103 	orr.w	r1, r2, r3
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d10a      	bne.n	8009f4e <HAL_ADC_ConfigChannel+0x48e>
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	0e9b      	lsrs	r3, r3, #26
 8009f3e:	3301      	adds	r3, #1
 8009f40:	f003 021f 	and.w	r2, r3, #31
 8009f44:	4613      	mov	r3, r2
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	4413      	add	r3, r2
 8009f4a:	051b      	lsls	r3, r3, #20
 8009f4c:	e011      	b.n	8009f72 <HAL_ADC_ConfigChannel+0x4b2>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	fa93 f3a3 	rbit	r3, r3
 8009f5a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	fab3 f383 	clz	r3, r3
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	3301      	adds	r3, #1
 8009f66:	f003 021f 	and.w	r2, r3, #31
 8009f6a:	4613      	mov	r3, r2
 8009f6c:	005b      	lsls	r3, r3, #1
 8009f6e:	4413      	add	r3, r2
 8009f70:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009f72:	430b      	orrs	r3, r1
 8009f74:	e069      	b.n	800a04a <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d107      	bne.n	8009f92 <HAL_ADC_ConfigChannel+0x4d2>
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	0e9b      	lsrs	r3, r3, #26
 8009f88:	3301      	adds	r3, #1
 8009f8a:	069b      	lsls	r3, r3, #26
 8009f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009f90:	e00e      	b.n	8009fb0 <HAL_ADC_ConfigChannel+0x4f0>
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f98:	6a3b      	ldr	r3, [r7, #32]
 8009f9a:	fa93 f3a3 	rbit	r3, r3
 8009f9e:	61fb      	str	r3, [r7, #28]
  return result;
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	fab3 f383 	clz	r3, r3
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	3301      	adds	r3, #1
 8009faa:	069b      	lsls	r3, r3, #26
 8009fac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d109      	bne.n	8009fd0 <HAL_ADC_ConfigChannel+0x510>
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	0e9b      	lsrs	r3, r3, #26
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	f003 031f 	and.w	r3, r3, #31
 8009fc8:	2101      	movs	r1, #1
 8009fca:	fa01 f303 	lsl.w	r3, r1, r3
 8009fce:	e010      	b.n	8009ff2 <HAL_ADC_ConfigChannel+0x532>
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	fa93 f3a3 	rbit	r3, r3
 8009fdc:	617b      	str	r3, [r7, #20]
  return result;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	fab3 f383 	clz	r3, r3
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	f003 031f 	and.w	r3, r3, #31
 8009fec:	2101      	movs	r1, #1
 8009fee:	fa01 f303 	lsl.w	r3, r1, r3
 8009ff2:	ea42 0103 	orr.w	r1, r2, r3
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d10d      	bne.n	800a01e <HAL_ADC_ConfigChannel+0x55e>
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	0e9b      	lsrs	r3, r3, #26
 800a008:	3301      	adds	r3, #1
 800a00a:	f003 021f 	and.w	r2, r3, #31
 800a00e:	4613      	mov	r3, r2
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	4413      	add	r3, r2
 800a014:	3b1e      	subs	r3, #30
 800a016:	051b      	lsls	r3, r3, #20
 800a018:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a01c:	e014      	b.n	800a048 <HAL_ADC_ConfigChannel+0x588>
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	fa93 f3a3 	rbit	r3, r3
 800a02a:	60fb      	str	r3, [r7, #12]
  return result;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	fab3 f383 	clz	r3, r3
 800a032:	b2db      	uxtb	r3, r3
 800a034:	3301      	adds	r3, #1
 800a036:	f003 021f 	and.w	r2, r3, #31
 800a03a:	4613      	mov	r3, r2
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	4413      	add	r3, r2
 800a040:	3b1e      	subs	r3, #30
 800a042:	051b      	lsls	r3, r3, #20
 800a044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a048:	430b      	orrs	r3, r1
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	6892      	ldr	r2, [r2, #8]
 800a04e:	4619      	mov	r1, r3
 800a050:	f7ff f9f2 	bl	8009438 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	4b2e      	ldr	r3, [pc, #184]	; (800a114 <HAL_ADC_ConfigChannel+0x654>)
 800a05a:	4013      	ands	r3, r2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	f000 80c9 	beq.w	800a1f4 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a06a:	d004      	beq.n	800a076 <HAL_ADC_ConfigChannel+0x5b6>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a29      	ldr	r2, [pc, #164]	; (800a118 <HAL_ADC_ConfigChannel+0x658>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d101      	bne.n	800a07a <HAL_ADC_ConfigChannel+0x5ba>
 800a076:	4b29      	ldr	r3, [pc, #164]	; (800a11c <HAL_ADC_ConfigChannel+0x65c>)
 800a078:	e000      	b.n	800a07c <HAL_ADC_ConfigChannel+0x5bc>
 800a07a:	4b29      	ldr	r3, [pc, #164]	; (800a120 <HAL_ADC_ConfigChannel+0x660>)
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff f913 	bl	80092a8 <LL_ADC_GetCommonPathInternalCh>
 800a082:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a26      	ldr	r2, [pc, #152]	; (800a124 <HAL_ADC_ConfigChannel+0x664>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d004      	beq.n	800a09a <HAL_ADC_ConfigChannel+0x5da>
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a24      	ldr	r2, [pc, #144]	; (800a128 <HAL_ADC_ConfigChannel+0x668>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d14e      	bne.n	800a138 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a09a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a09e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d148      	bne.n	800a138 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0ae:	d005      	beq.n	800a0bc <HAL_ADC_ConfigChannel+0x5fc>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a1d      	ldr	r2, [pc, #116]	; (800a12c <HAL_ADC_ConfigChannel+0x66c>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	f040 8099 	bne.w	800a1ee <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a0c4:	d004      	beq.n	800a0d0 <HAL_ADC_ConfigChannel+0x610>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a13      	ldr	r2, [pc, #76]	; (800a118 <HAL_ADC_ConfigChannel+0x658>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d101      	bne.n	800a0d4 <HAL_ADC_ConfigChannel+0x614>
 800a0d0:	4a12      	ldr	r2, [pc, #72]	; (800a11c <HAL_ADC_ConfigChannel+0x65c>)
 800a0d2:	e000      	b.n	800a0d6 <HAL_ADC_ConfigChannel+0x616>
 800a0d4:	4a12      	ldr	r2, [pc, #72]	; (800a120 <HAL_ADC_ConfigChannel+0x660>)
 800a0d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a0da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7ff f8ce 	bl	8009282 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a0e6:	4b12      	ldr	r3, [pc, #72]	; (800a130 <HAL_ADC_ConfigChannel+0x670>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	099b      	lsrs	r3, r3, #6
 800a0ec:	4a11      	ldr	r2, [pc, #68]	; (800a134 <HAL_ADC_ConfigChannel+0x674>)
 800a0ee:	fba2 2303 	umull	r2, r3, r2, r3
 800a0f2:	099a      	lsrs	r2, r3, #6
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	005b      	lsls	r3, r3, #1
 800a0f8:	4413      	add	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a0fe:	e002      	b.n	800a106 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	3b01      	subs	r3, #1
 800a104:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f9      	bne.n	800a100 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a10c:	e06f      	b.n	800a1ee <HAL_ADC_ConfigChannel+0x72e>
 800a10e:	bf00      	nop
 800a110:	407f0000 	.word	0x407f0000
 800a114:	80080000 	.word	0x80080000
 800a118:	50000100 	.word	0x50000100
 800a11c:	50000300 	.word	0x50000300
 800a120:	50000700 	.word	0x50000700
 800a124:	c3210000 	.word	0xc3210000
 800a128:	90c00010 	.word	0x90c00010
 800a12c:	50000600 	.word	0x50000600
 800a130:	20000c34 	.word	0x20000c34
 800a134:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	4a32      	ldr	r2, [pc, #200]	; (800a208 <HAL_ADC_ConfigChannel+0x748>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d125      	bne.n	800a18e <HAL_ADC_ConfigChannel+0x6ce>
 800a142:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a146:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d11f      	bne.n	800a18e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a2e      	ldr	r2, [pc, #184]	; (800a20c <HAL_ADC_ConfigChannel+0x74c>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d104      	bne.n	800a162 <HAL_ADC_ConfigChannel+0x6a2>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a2c      	ldr	r2, [pc, #176]	; (800a210 <HAL_ADC_ConfigChannel+0x750>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d047      	beq.n	800a1f2 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a16a:	d004      	beq.n	800a176 <HAL_ADC_ConfigChannel+0x6b6>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	4a26      	ldr	r2, [pc, #152]	; (800a20c <HAL_ADC_ConfigChannel+0x74c>)
 800a172:	4293      	cmp	r3, r2
 800a174:	d101      	bne.n	800a17a <HAL_ADC_ConfigChannel+0x6ba>
 800a176:	4a27      	ldr	r2, [pc, #156]	; (800a214 <HAL_ADC_ConfigChannel+0x754>)
 800a178:	e000      	b.n	800a17c <HAL_ADC_ConfigChannel+0x6bc>
 800a17a:	4a27      	ldr	r2, [pc, #156]	; (800a218 <HAL_ADC_ConfigChannel+0x758>)
 800a17c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a184:	4619      	mov	r1, r3
 800a186:	4610      	mov	r0, r2
 800a188:	f7ff f87b 	bl	8009282 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a18c:	e031      	b.n	800a1f2 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a22      	ldr	r2, [pc, #136]	; (800a21c <HAL_ADC_ConfigChannel+0x75c>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d12d      	bne.n	800a1f4 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a198:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a19c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d127      	bne.n	800a1f4 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a18      	ldr	r2, [pc, #96]	; (800a20c <HAL_ADC_ConfigChannel+0x74c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d022      	beq.n	800a1f4 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1b6:	d004      	beq.n	800a1c2 <HAL_ADC_ConfigChannel+0x702>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a13      	ldr	r2, [pc, #76]	; (800a20c <HAL_ADC_ConfigChannel+0x74c>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d101      	bne.n	800a1c6 <HAL_ADC_ConfigChannel+0x706>
 800a1c2:	4a14      	ldr	r2, [pc, #80]	; (800a214 <HAL_ADC_ConfigChannel+0x754>)
 800a1c4:	e000      	b.n	800a1c8 <HAL_ADC_ConfigChannel+0x708>
 800a1c6:	4a14      	ldr	r2, [pc, #80]	; (800a218 <HAL_ADC_ConfigChannel+0x758>)
 800a1c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a1cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4610      	mov	r0, r2
 800a1d4:	f7ff f855 	bl	8009282 <LL_ADC_SetCommonPathInternalCh>
 800a1d8:	e00c      	b.n	800a1f4 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1de:	f043 0220 	orr.w	r2, r3, #32
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a1ec:	e002      	b.n	800a1f4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a1ee:	bf00      	nop
 800a1f0:	e000      	b.n	800a1f4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a1f2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a1fc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800a200:	4618      	mov	r0, r3
 800a202:	3798      	adds	r7, #152	; 0x98
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}
 800a208:	c7520000 	.word	0xc7520000
 800a20c:	50000100 	.word	0x50000100
 800a210:	50000500 	.word	0x50000500
 800a214:	50000300 	.word	0x50000300
 800a218:	50000700 	.word	0x50000700
 800a21c:	cb840000 	.word	0xcb840000

0800a220 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b088      	sub	sp, #32
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4618      	mov	r0, r3
 800a238:	f7ff f9e6 	bl	8009608 <LL_ADC_REG_IsConversionOngoing>
 800a23c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4618      	mov	r0, r3
 800a244:	f7ff fa07 	bl	8009656 <LL_ADC_INJ_IsConversionOngoing>
 800a248:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d103      	bne.n	800a258 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	2b00      	cmp	r3, #0
 800a254:	f000 8090 	beq.w	800a378 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a262:	2b00      	cmp	r3, #0
 800a264:	d02a      	beq.n	800a2bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	7f5b      	ldrb	r3, [r3, #29]
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d126      	bne.n	800a2bc <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	7f1b      	ldrb	r3, [r3, #28]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d122      	bne.n	800a2bc <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a276:	2301      	movs	r3, #1
 800a278:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a27a:	e014      	b.n	800a2a6 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	4a41      	ldr	r2, [pc, #260]	; (800a384 <ADC_ConversionStop+0x164>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d90d      	bls.n	800a2a0 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a288:	f043 0210 	orr.w	r2, r3, #16
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a294:	f043 0201 	orr.w	r2, r3, #1
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e06c      	b.n	800a37a <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b0:	2b40      	cmp	r3, #64	; 0x40
 800a2b2:	d1e3      	bne.n	800a27c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2240      	movs	r2, #64	; 0x40
 800a2ba:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2b02      	cmp	r3, #2
 800a2c0:	d014      	beq.n	800a2ec <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7ff f99e 	bl	8009608 <LL_ADC_REG_IsConversionOngoing>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d00c      	beq.n	800a2ec <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f7ff f96f 	bl	80095ba <LL_ADC_IsDisableOngoing>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d104      	bne.n	800a2ec <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	f7ff f97a 	bl	80095e0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a2ec:	69bb      	ldr	r3, [r7, #24]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d014      	beq.n	800a31c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f7ff f9ad 	bl	8009656 <LL_ADC_INJ_IsConversionOngoing>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00c      	beq.n	800a31c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4618      	mov	r0, r3
 800a308:	f7ff f957 	bl	80095ba <LL_ADC_IsDisableOngoing>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d104      	bne.n	800a31c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4618      	mov	r0, r3
 800a318:	f7ff f989 	bl	800962e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d004      	beq.n	800a32c <ADC_ConversionStop+0x10c>
 800a322:	2b03      	cmp	r3, #3
 800a324:	d105      	bne.n	800a332 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a326:	230c      	movs	r3, #12
 800a328:	617b      	str	r3, [r7, #20]
        break;
 800a32a:	e005      	b.n	800a338 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a32c:	2308      	movs	r3, #8
 800a32e:	617b      	str	r3, [r7, #20]
        break;
 800a330:	e002      	b.n	800a338 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a332:	2304      	movs	r3, #4
 800a334:	617b      	str	r3, [r7, #20]
        break;
 800a336:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a338:	f7fe ff62 	bl	8009200 <HAL_GetTick>
 800a33c:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a33e:	e014      	b.n	800a36a <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a340:	f7fe ff5e 	bl	8009200 <HAL_GetTick>
 800a344:	4602      	mov	r2, r0
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	1ad3      	subs	r3, r2, r3
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d90d      	bls.n	800a36a <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a352:	f043 0210 	orr.w	r2, r3, #16
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a35e:	f043 0201 	orr.w	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e007      	b.n	800a37a <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	4013      	ands	r3, r2
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1e3      	bne.n	800a340 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a378:	2300      	movs	r3, #0
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3720      	adds	r7, #32
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	a33fffff 	.word	0xa33fffff

0800a388 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff f910 	bl	80095ba <LL_ADC_IsDisableOngoing>
 800a39a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff f8f7 	bl	8009594 <LL_ADC_IsEnabled>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d040      	beq.n	800a42e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d13d      	bne.n	800a42e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	689b      	ldr	r3, [r3, #8]
 800a3b8:	f003 030d 	and.w	r3, r3, #13
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d10c      	bne.n	800a3da <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7ff f8d1 	bl	800956c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	2203      	movs	r2, #3
 800a3d0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a3d2:	f7fe ff15 	bl	8009200 <HAL_GetTick>
 800a3d6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a3d8:	e022      	b.n	800a420 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3de:	f043 0210 	orr.w	r2, r3, #16
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3ea:	f043 0201 	orr.w	r2, r3, #1
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e01c      	b.n	800a430 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a3f6:	f7fe ff03 	bl	8009200 <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	2b02      	cmp	r3, #2
 800a402:	d90d      	bls.n	800a420 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a408:	f043 0210 	orr.w	r2, r3, #16
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a414:	f043 0201 	orr.w	r2, r3, #1
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a41c:	2301      	movs	r3, #1
 800a41e:	e007      	b.n	800a430 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	689b      	ldr	r3, [r3, #8]
 800a426:	f003 0301 	and.w	r3, r3, #1
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d1e3      	bne.n	800a3f6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <LL_ADC_IsEnabled>:
{
 800a438:	b480      	push	{r7}
 800a43a:	b083      	sub	sp, #12
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	f003 0301 	and.w	r3, r3, #1
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d101      	bne.n	800a450 <LL_ADC_IsEnabled+0x18>
 800a44c:	2301      	movs	r3, #1
 800a44e:	e000      	b.n	800a452 <LL_ADC_IsEnabled+0x1a>
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr

0800a45e <LL_ADC_REG_IsConversionOngoing>:
{
 800a45e:	b480      	push	{r7}
 800a460:	b083      	sub	sp, #12
 800a462:	af00      	add	r7, sp, #0
 800a464:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	f003 0304 	and.w	r3, r3, #4
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d101      	bne.n	800a476 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a472:	2301      	movs	r3, #1
 800a474:	e000      	b.n	800a478 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a484:	b590      	push	{r4, r7, lr}
 800a486:	b0a1      	sub	sp, #132	; 0x84
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
 800a48c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a48e:	2300      	movs	r3, #0
 800a490:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a49a:	2b01      	cmp	r3, #1
 800a49c:	d101      	bne.n	800a4a2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a49e:	2302      	movs	r3, #2
 800a4a0:	e0e3      	b.n	800a66a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2201      	movs	r2, #1
 800a4a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4b2:	d102      	bne.n	800a4ba <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a4b4:	4b6f      	ldr	r3, [pc, #444]	; (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a4b6:	60bb      	str	r3, [r7, #8]
 800a4b8:	e009      	b.n	800a4ce <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a6e      	ldr	r2, [pc, #440]	; (800a678 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d102      	bne.n	800a4ca <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a4c4:	4b6d      	ldr	r3, [pc, #436]	; (800a67c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a4c6:	60bb      	str	r3, [r7, #8]
 800a4c8:	e001      	b.n	800a4ce <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10b      	bne.n	800a4ec <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d8:	f043 0220 	orr.w	r2, r3, #32
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e0be      	b.n	800a66a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7ff ffb5 	bl	800a45e <LL_ADC_REG_IsConversionOngoing>
 800a4f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7ff ffaf 	bl	800a45e <LL_ADC_REG_IsConversionOngoing>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	f040 80a0 	bne.w	800a648 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	f040 809c 	bne.w	800a648 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a518:	d004      	beq.n	800a524 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a55      	ldr	r2, [pc, #340]	; (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d101      	bne.n	800a528 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a524:	4b56      	ldr	r3, [pc, #344]	; (800a680 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a526:	e000      	b.n	800a52a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a528:	4b56      	ldr	r3, [pc, #344]	; (800a684 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a52a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d04b      	beq.n	800a5cc <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	6859      	ldr	r1, [r3, #4]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a546:	035b      	lsls	r3, r3, #13
 800a548:	430b      	orrs	r3, r1
 800a54a:	431a      	orrs	r2, r3
 800a54c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a54e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a558:	d004      	beq.n	800a564 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a45      	ldr	r2, [pc, #276]	; (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d10f      	bne.n	800a584 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a564:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a568:	f7ff ff66 	bl	800a438 <LL_ADC_IsEnabled>
 800a56c:	4604      	mov	r4, r0
 800a56e:	4841      	ldr	r0, [pc, #260]	; (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a570:	f7ff ff62 	bl	800a438 <LL_ADC_IsEnabled>
 800a574:	4603      	mov	r3, r0
 800a576:	4323      	orrs	r3, r4
 800a578:	2b00      	cmp	r3, #0
 800a57a:	bf0c      	ite	eq
 800a57c:	2301      	moveq	r3, #1
 800a57e:	2300      	movne	r3, #0
 800a580:	b2db      	uxtb	r3, r3
 800a582:	e012      	b.n	800a5aa <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a584:	483c      	ldr	r0, [pc, #240]	; (800a678 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a586:	f7ff ff57 	bl	800a438 <LL_ADC_IsEnabled>
 800a58a:	4604      	mov	r4, r0
 800a58c:	483b      	ldr	r0, [pc, #236]	; (800a67c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a58e:	f7ff ff53 	bl	800a438 <LL_ADC_IsEnabled>
 800a592:	4603      	mov	r3, r0
 800a594:	431c      	orrs	r4, r3
 800a596:	483c      	ldr	r0, [pc, #240]	; (800a688 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a598:	f7ff ff4e 	bl	800a438 <LL_ADC_IsEnabled>
 800a59c:	4603      	mov	r3, r0
 800a59e:	4323      	orrs	r3, r4
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bf0c      	ite	eq
 800a5a4:	2301      	moveq	r3, #1
 800a5a6:	2300      	movne	r3, #0
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d056      	beq.n	800a65c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a5ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a5b6:	f023 030f 	bic.w	r3, r3, #15
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	6811      	ldr	r1, [r2, #0]
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	6892      	ldr	r2, [r2, #8]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	431a      	orrs	r2, r3
 800a5c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5c8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a5ca:	e047      	b.n	800a65c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a5cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5ce:	689b      	ldr	r3, [r3, #8]
 800a5d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a5d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5d6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5e0:	d004      	beq.n	800a5ec <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a23      	ldr	r2, [pc, #140]	; (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d10f      	bne.n	800a60c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a5ec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a5f0:	f7ff ff22 	bl	800a438 <LL_ADC_IsEnabled>
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	481f      	ldr	r0, [pc, #124]	; (800a674 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a5f8:	f7ff ff1e 	bl	800a438 <LL_ADC_IsEnabled>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	4323      	orrs	r3, r4
 800a600:	2b00      	cmp	r3, #0
 800a602:	bf0c      	ite	eq
 800a604:	2301      	moveq	r3, #1
 800a606:	2300      	movne	r3, #0
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	e012      	b.n	800a632 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a60c:	481a      	ldr	r0, [pc, #104]	; (800a678 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a60e:	f7ff ff13 	bl	800a438 <LL_ADC_IsEnabled>
 800a612:	4604      	mov	r4, r0
 800a614:	4819      	ldr	r0, [pc, #100]	; (800a67c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a616:	f7ff ff0f 	bl	800a438 <LL_ADC_IsEnabled>
 800a61a:	4603      	mov	r3, r0
 800a61c:	431c      	orrs	r4, r3
 800a61e:	481a      	ldr	r0, [pc, #104]	; (800a688 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a620:	f7ff ff0a 	bl	800a438 <LL_ADC_IsEnabled>
 800a624:	4603      	mov	r3, r0
 800a626:	4323      	orrs	r3, r4
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bf0c      	ite	eq
 800a62c:	2301      	moveq	r3, #1
 800a62e:	2300      	movne	r3, #0
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b00      	cmp	r3, #0
 800a634:	d012      	beq.n	800a65c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a638:	689b      	ldr	r3, [r3, #8]
 800a63a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a63e:	f023 030f 	bic.w	r3, r3, #15
 800a642:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a644:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a646:	e009      	b.n	800a65c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64c:	f043 0220 	orr.w	r2, r3, #32
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a65a:	e000      	b.n	800a65e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a65c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a666:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3784      	adds	r7, #132	; 0x84
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd90      	pop	{r4, r7, pc}
 800a672:	bf00      	nop
 800a674:	50000100 	.word	0x50000100
 800a678:	50000400 	.word	0x50000400
 800a67c:	50000500 	.word	0x50000500
 800a680:	50000300 	.word	0x50000300
 800a684:	50000700 	.word	0x50000700
 800a688:	50000600 	.word	0x50000600

0800a68c <LL_EXTI_EnableIT_0_31>:
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a694:	4b05      	ldr	r3, [pc, #20]	; (800a6ac <LL_EXTI_EnableIT_0_31+0x20>)
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	4904      	ldr	r1, [pc, #16]	; (800a6ac <LL_EXTI_EnableIT_0_31+0x20>)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	600b      	str	r3, [r1, #0]
}
 800a6a0:	bf00      	nop
 800a6a2:	370c      	adds	r7, #12
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr
 800a6ac:	40010400 	.word	0x40010400

0800a6b0 <LL_EXTI_EnableIT_32_63>:
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a6b8:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <LL_EXTI_EnableIT_32_63+0x20>)
 800a6ba:	6a1a      	ldr	r2, [r3, #32]
 800a6bc:	4904      	ldr	r1, [pc, #16]	; (800a6d0 <LL_EXTI_EnableIT_32_63+0x20>)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	620b      	str	r3, [r1, #32]
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	40010400 	.word	0x40010400

0800a6d4 <LL_EXTI_DisableIT_0_31>:
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <LL_EXTI_DisableIT_0_31+0x24>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	43db      	mvns	r3, r3
 800a6e4:	4904      	ldr	r1, [pc, #16]	; (800a6f8 <LL_EXTI_DisableIT_0_31+0x24>)
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	600b      	str	r3, [r1, #0]
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr
 800a6f6:	bf00      	nop
 800a6f8:	40010400 	.word	0x40010400

0800a6fc <LL_EXTI_DisableIT_32_63>:
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b083      	sub	sp, #12
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a704:	4b06      	ldr	r3, [pc, #24]	; (800a720 <LL_EXTI_DisableIT_32_63+0x24>)
 800a706:	6a1a      	ldr	r2, [r3, #32]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	43db      	mvns	r3, r3
 800a70c:	4904      	ldr	r1, [pc, #16]	; (800a720 <LL_EXTI_DisableIT_32_63+0x24>)
 800a70e:	4013      	ands	r3, r2
 800a710:	620b      	str	r3, [r1, #32]
}
 800a712:	bf00      	nop
 800a714:	370c      	adds	r7, #12
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	40010400 	.word	0x40010400

0800a724 <LL_EXTI_EnableEvent_0_31>:
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a72c:	4b05      	ldr	r3, [pc, #20]	; (800a744 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a72e:	685a      	ldr	r2, [r3, #4]
 800a730:	4904      	ldr	r1, [pc, #16]	; (800a744 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	4313      	orrs	r3, r2
 800a736:	604b      	str	r3, [r1, #4]
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr
 800a744:	40010400 	.word	0x40010400

0800a748 <LL_EXTI_EnableEvent_32_63>:
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a750:	4b05      	ldr	r3, [pc, #20]	; (800a768 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a752:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a754:	4904      	ldr	r1, [pc, #16]	; (800a768 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	4313      	orrs	r3, r2
 800a75a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a75c:	bf00      	nop
 800a75e:	370c      	adds	r7, #12
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr
 800a768:	40010400 	.word	0x40010400

0800a76c <LL_EXTI_DisableEvent_0_31>:
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a774:	4b06      	ldr	r3, [pc, #24]	; (800a790 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	43db      	mvns	r3, r3
 800a77c:	4904      	ldr	r1, [pc, #16]	; (800a790 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a77e:	4013      	ands	r3, r2
 800a780:	604b      	str	r3, [r1, #4]
}
 800a782:	bf00      	nop
 800a784:	370c      	adds	r7, #12
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	40010400 	.word	0x40010400

0800a794 <LL_EXTI_DisableEvent_32_63>:
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a79c:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a79e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	43db      	mvns	r3, r3
 800a7a4:	4904      	ldr	r1, [pc, #16]	; (800a7b8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a7a6:	4013      	ands	r3, r2
 800a7a8:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a7aa:	bf00      	nop
 800a7ac:	370c      	adds	r7, #12
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010400 	.word	0x40010400

0800a7bc <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a7bc:	b480      	push	{r7}
 800a7be:	b083      	sub	sp, #12
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a7c4:	4b05      	ldr	r3, [pc, #20]	; (800a7dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	4904      	ldr	r1, [pc, #16]	; (800a7dc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	608b      	str	r3, [r1, #8]
}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr
 800a7dc:	40010400 	.word	0x40010400

0800a7e0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a7e8:	4b05      	ldr	r3, [pc, #20]	; (800a800 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a7ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7ec:	4904      	ldr	r1, [pc, #16]	; (800a800 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a7f4:	bf00      	nop
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	40010400 	.word	0x40010400

0800a804 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a80c:	4b06      	ldr	r3, [pc, #24]	; (800a828 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	43db      	mvns	r3, r3
 800a814:	4904      	ldr	r1, [pc, #16]	; (800a828 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a816:	4013      	ands	r3, r2
 800a818:	608b      	str	r3, [r1, #8]
}
 800a81a:	bf00      	nop
 800a81c:	370c      	adds	r7, #12
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
 800a826:	bf00      	nop
 800a828:	40010400 	.word	0x40010400

0800a82c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a834:	4b06      	ldr	r3, [pc, #24]	; (800a850 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a836:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	43db      	mvns	r3, r3
 800a83c:	4904      	ldr	r1, [pc, #16]	; (800a850 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a83e:	4013      	ands	r3, r2
 800a840:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a842:	bf00      	nop
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop
 800a850:	40010400 	.word	0x40010400

0800a854 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a85e:	68da      	ldr	r2, [r3, #12]
 800a860:	4904      	ldr	r1, [pc, #16]	; (800a874 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4313      	orrs	r3, r2
 800a866:	60cb      	str	r3, [r1, #12]
}
 800a868:	bf00      	nop
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	40010400 	.word	0x40010400

0800a878 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a880:	4b05      	ldr	r3, [pc, #20]	; (800a898 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a884:	4904      	ldr	r1, [pc, #16]	; (800a898 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	4313      	orrs	r3, r2
 800a88a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a88c:	bf00      	nop
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	40010400 	.word	0x40010400

0800a89c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a8a4:	4b06      	ldr	r3, [pc, #24]	; (800a8c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a8a6:	68da      	ldr	r2, [r3, #12]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	43db      	mvns	r3, r3
 800a8ac:	4904      	ldr	r1, [pc, #16]	; (800a8c0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	60cb      	str	r3, [r1, #12]
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr
 800a8be:	bf00      	nop
 800a8c0:	40010400 	.word	0x40010400

0800a8c4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a8cc:	4b06      	ldr	r3, [pc, #24]	; (800a8e8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	43db      	mvns	r3, r3
 800a8d4:	4904      	ldr	r1, [pc, #16]	; (800a8e8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a8d6:	4013      	ands	r3, r2
 800a8d8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a8da:	bf00      	nop
 800a8dc:	370c      	adds	r7, #12
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr
 800a8e6:	bf00      	nop
 800a8e8:	40010400 	.word	0x40010400

0800a8ec <LL_EXTI_IsActiveFlag_0_31>:
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a8f4:	4b07      	ldr	r3, [pc, #28]	; (800a914 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a8f6:	695a      	ldr	r2, [r3, #20]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4013      	ands	r3, r2
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d101      	bne.n	800a906 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a902:	2301      	movs	r3, #1
 800a904:	e000      	b.n	800a908 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	40010400 	.word	0x40010400

0800a918 <LL_EXTI_IsActiveFlag_32_63>:
{
 800a918:	b480      	push	{r7}
 800a91a:	b083      	sub	sp, #12
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a920:	4b07      	ldr	r3, [pc, #28]	; (800a940 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4013      	ands	r3, r2
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d101      	bne.n	800a932 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	370c      	adds	r7, #12
 800a938:	46bd      	mov	sp, r7
 800a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93e:	4770      	bx	lr
 800a940:	40010400 	.word	0x40010400

0800a944 <LL_EXTI_ClearFlag_0_31>:
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a94c:	4a04      	ldr	r2, [pc, #16]	; (800a960 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6153      	str	r3, [r2, #20]
}
 800a952:	bf00      	nop
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	40010400 	.word	0x40010400

0800a964 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a96c:	4a04      	ldr	r2, [pc, #16]	; (800a980 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a972:	bf00      	nop
 800a974:	370c      	adds	r7, #12
 800a976:	46bd      	mov	sp, r7
 800a978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97c:	4770      	bx	lr
 800a97e:	bf00      	nop
 800a980:	40010400 	.word	0x40010400

0800a984 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b088      	sub	sp, #32
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a98c:	2300      	movs	r3, #0
 800a98e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d102      	bne.n	800a9a0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a99a:	2301      	movs	r3, #1
 800a99c:	77fb      	strb	r3, [r7, #31]
 800a99e:	e180      	b.n	800aca2 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9ae:	d102      	bne.n	800a9b6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	77fb      	strb	r3, [r7, #31]
 800a9b4:	e175      	b.n	800aca2 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	7f5b      	ldrb	r3, [r3, #29]
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d108      	bne.n	800a9d2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f7fc fea5 	bl	800771c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a9dc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	695b      	ldr	r3, [r3, #20]
 800a9ec:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	4b98      	ldr	r3, [pc, #608]	; (800ac64 <HAL_COMP_Init+0x2e0>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6812      	ldr	r2, [r2, #0]
 800aa0a:	6979      	ldr	r1, [r7, #20]
 800aa0c:	430b      	orrs	r3, r1
 800aa0e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d015      	beq.n	800aa4a <HAL_COMP_Init+0xc6>
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d112      	bne.n	800aa4a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800aa24:	4b90      	ldr	r3, [pc, #576]	; (800ac68 <HAL_COMP_Init+0x2e4>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	099b      	lsrs	r3, r3, #6
 800aa2a:	4a90      	ldr	r2, [pc, #576]	; (800ac6c <HAL_COMP_Init+0x2e8>)
 800aa2c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa30:	099a      	lsrs	r2, r3, #6
 800aa32:	4613      	mov	r3, r2
 800aa34:	009b      	lsls	r3, r3, #2
 800aa36:	4413      	add	r3, r2
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800aa3c:	e002      	b.n	800aa44 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	3b01      	subs	r3, #1
 800aa42:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d1f9      	bne.n	800aa3e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a88      	ldr	r2, [pc, #544]	; (800ac70 <HAL_COMP_Init+0x2ec>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d028      	beq.n	800aaa6 <HAL_COMP_Init+0x122>
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4a86      	ldr	r2, [pc, #536]	; (800ac74 <HAL_COMP_Init+0x2f0>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d020      	beq.n	800aaa0 <HAL_COMP_Init+0x11c>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	4a85      	ldr	r2, [pc, #532]	; (800ac78 <HAL_COMP_Init+0x2f4>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d018      	beq.n	800aa9a <HAL_COMP_Init+0x116>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4a83      	ldr	r2, [pc, #524]	; (800ac7c <HAL_COMP_Init+0x2f8>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d010      	beq.n	800aa94 <HAL_COMP_Init+0x110>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	4a82      	ldr	r2, [pc, #520]	; (800ac80 <HAL_COMP_Init+0x2fc>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d008      	beq.n	800aa8e <HAL_COMP_Init+0x10a>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a80      	ldr	r2, [pc, #512]	; (800ac84 <HAL_COMP_Init+0x300>)
 800aa82:	4293      	cmp	r3, r2
 800aa84:	d101      	bne.n	800aa8a <HAL_COMP_Init+0x106>
 800aa86:	2301      	movs	r3, #1
 800aa88:	e00f      	b.n	800aaaa <HAL_COMP_Init+0x126>
 800aa8a:	2302      	movs	r3, #2
 800aa8c:	e00d      	b.n	800aaaa <HAL_COMP_Init+0x126>
 800aa8e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa92:	e00a      	b.n	800aaaa <HAL_COMP_Init+0x126>
 800aa94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa98:	e007      	b.n	800aaaa <HAL_COMP_Init+0x126>
 800aa9a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800aa9e:	e004      	b.n	800aaaa <HAL_COMP_Init+0x126>
 800aaa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aaa4:	e001      	b.n	800aaaa <HAL_COMP_Init+0x126>
 800aaa6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aaaa:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	699b      	ldr	r3, [r3, #24]
 800aab0:	f003 0303 	and.w	r3, r3, #3
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	f000 80b6 	beq.w	800ac26 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	699b      	ldr	r3, [r3, #24]
 800aabe:	f003 0310 	and.w	r3, r3, #16
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d011      	beq.n	800aaea <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a6e      	ldr	r2, [pc, #440]	; (800ac84 <HAL_COMP_Init+0x300>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d004      	beq.n	800aada <HAL_COMP_Init+0x156>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a6c      	ldr	r2, [pc, #432]	; (800ac88 <HAL_COMP_Init+0x304>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d103      	bne.n	800aae2 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800aada:	6938      	ldr	r0, [r7, #16]
 800aadc:	f7ff fe80 	bl	800a7e0 <LL_EXTI_EnableRisingTrig_32_63>
 800aae0:	e014      	b.n	800ab0c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800aae2:	6938      	ldr	r0, [r7, #16]
 800aae4:	f7ff fe6a 	bl	800a7bc <LL_EXTI_EnableRisingTrig_0_31>
 800aae8:	e010      	b.n	800ab0c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	4a65      	ldr	r2, [pc, #404]	; (800ac84 <HAL_COMP_Init+0x300>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d004      	beq.n	800aafe <HAL_COMP_Init+0x17a>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	4a63      	ldr	r2, [pc, #396]	; (800ac88 <HAL_COMP_Init+0x304>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d103      	bne.n	800ab06 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800aafe:	6938      	ldr	r0, [r7, #16]
 800ab00:	f7ff fe94 	bl	800a82c <LL_EXTI_DisableRisingTrig_32_63>
 800ab04:	e002      	b.n	800ab0c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800ab06:	6938      	ldr	r0, [r7, #16]
 800ab08:	f7ff fe7c 	bl	800a804 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	699b      	ldr	r3, [r3, #24]
 800ab10:	f003 0320 	and.w	r3, r3, #32
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d011      	beq.n	800ab3c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a59      	ldr	r2, [pc, #356]	; (800ac84 <HAL_COMP_Init+0x300>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d004      	beq.n	800ab2c <HAL_COMP_Init+0x1a8>
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	4a58      	ldr	r2, [pc, #352]	; (800ac88 <HAL_COMP_Init+0x304>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d103      	bne.n	800ab34 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800ab2c:	6938      	ldr	r0, [r7, #16]
 800ab2e:	f7ff fea3 	bl	800a878 <LL_EXTI_EnableFallingTrig_32_63>
 800ab32:	e014      	b.n	800ab5e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800ab34:	6938      	ldr	r0, [r7, #16]
 800ab36:	f7ff fe8d 	bl	800a854 <LL_EXTI_EnableFallingTrig_0_31>
 800ab3a:	e010      	b.n	800ab5e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a50      	ldr	r2, [pc, #320]	; (800ac84 <HAL_COMP_Init+0x300>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d004      	beq.n	800ab50 <HAL_COMP_Init+0x1cc>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a4f      	ldr	r2, [pc, #316]	; (800ac88 <HAL_COMP_Init+0x304>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d103      	bne.n	800ab58 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800ab50:	6938      	ldr	r0, [r7, #16]
 800ab52:	f7ff feb7 	bl	800a8c4 <LL_EXTI_DisableFallingTrig_32_63>
 800ab56:	e002      	b.n	800ab5e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800ab58:	6938      	ldr	r0, [r7, #16]
 800ab5a:	f7ff fe9f 	bl	800a89c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a48      	ldr	r2, [pc, #288]	; (800ac84 <HAL_COMP_Init+0x300>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d004      	beq.n	800ab72 <HAL_COMP_Init+0x1ee>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	4a46      	ldr	r2, [pc, #280]	; (800ac88 <HAL_COMP_Init+0x304>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d103      	bne.n	800ab7a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800ab72:	6938      	ldr	r0, [r7, #16]
 800ab74:	f7ff fef6 	bl	800a964 <LL_EXTI_ClearFlag_32_63>
 800ab78:	e002      	b.n	800ab80 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800ab7a:	6938      	ldr	r0, [r7, #16]
 800ab7c:	f7ff fee2 	bl	800a944 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	f003 0302 	and.w	r3, r3, #2
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d011      	beq.n	800abb0 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a3c      	ldr	r2, [pc, #240]	; (800ac84 <HAL_COMP_Init+0x300>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d004      	beq.n	800aba0 <HAL_COMP_Init+0x21c>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	4a3b      	ldr	r2, [pc, #236]	; (800ac88 <HAL_COMP_Init+0x304>)
 800ab9c:	4293      	cmp	r3, r2
 800ab9e:	d103      	bne.n	800aba8 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800aba0:	6938      	ldr	r0, [r7, #16]
 800aba2:	f7ff fdd1 	bl	800a748 <LL_EXTI_EnableEvent_32_63>
 800aba6:	e014      	b.n	800abd2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800aba8:	6938      	ldr	r0, [r7, #16]
 800abaa:	f7ff fdbb 	bl	800a724 <LL_EXTI_EnableEvent_0_31>
 800abae:	e010      	b.n	800abd2 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a33      	ldr	r2, [pc, #204]	; (800ac84 <HAL_COMP_Init+0x300>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d004      	beq.n	800abc4 <HAL_COMP_Init+0x240>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a32      	ldr	r2, [pc, #200]	; (800ac88 <HAL_COMP_Init+0x304>)
 800abc0:	4293      	cmp	r3, r2
 800abc2:	d103      	bne.n	800abcc <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800abc4:	6938      	ldr	r0, [r7, #16]
 800abc6:	f7ff fde5 	bl	800a794 <LL_EXTI_DisableEvent_32_63>
 800abca:	e002      	b.n	800abd2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800abcc:	6938      	ldr	r0, [r7, #16]
 800abce:	f7ff fdcd 	bl	800a76c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	699b      	ldr	r3, [r3, #24]
 800abd6:	f003 0301 	and.w	r3, r3, #1
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d011      	beq.n	800ac02 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a28      	ldr	r2, [pc, #160]	; (800ac84 <HAL_COMP_Init+0x300>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d004      	beq.n	800abf2 <HAL_COMP_Init+0x26e>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a26      	ldr	r2, [pc, #152]	; (800ac88 <HAL_COMP_Init+0x304>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d103      	bne.n	800abfa <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800abf2:	6938      	ldr	r0, [r7, #16]
 800abf4:	f7ff fd5c 	bl	800a6b0 <LL_EXTI_EnableIT_32_63>
 800abf8:	e04b      	b.n	800ac92 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800abfa:	6938      	ldr	r0, [r7, #16]
 800abfc:	f7ff fd46 	bl	800a68c <LL_EXTI_EnableIT_0_31>
 800ac00:	e047      	b.n	800ac92 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a1f      	ldr	r2, [pc, #124]	; (800ac84 <HAL_COMP_Init+0x300>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d004      	beq.n	800ac16 <HAL_COMP_Init+0x292>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a1d      	ldr	r2, [pc, #116]	; (800ac88 <HAL_COMP_Init+0x304>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d103      	bne.n	800ac1e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800ac16:	6938      	ldr	r0, [r7, #16]
 800ac18:	f7ff fd70 	bl	800a6fc <LL_EXTI_DisableIT_32_63>
 800ac1c:	e039      	b.n	800ac92 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800ac1e:	6938      	ldr	r0, [r7, #16]
 800ac20:	f7ff fd58 	bl	800a6d4 <LL_EXTI_DisableIT_0_31>
 800ac24:	e035      	b.n	800ac92 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a16      	ldr	r2, [pc, #88]	; (800ac84 <HAL_COMP_Init+0x300>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d004      	beq.n	800ac3a <HAL_COMP_Init+0x2b6>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a14      	ldr	r2, [pc, #80]	; (800ac88 <HAL_COMP_Init+0x304>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d103      	bne.n	800ac42 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800ac3a:	6938      	ldr	r0, [r7, #16]
 800ac3c:	f7ff fdaa 	bl	800a794 <LL_EXTI_DisableEvent_32_63>
 800ac40:	e002      	b.n	800ac48 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800ac42:	6938      	ldr	r0, [r7, #16]
 800ac44:	f7ff fd92 	bl	800a76c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a0d      	ldr	r2, [pc, #52]	; (800ac84 <HAL_COMP_Init+0x300>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d004      	beq.n	800ac5c <HAL_COMP_Init+0x2d8>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4a0c      	ldr	r2, [pc, #48]	; (800ac88 <HAL_COMP_Init+0x304>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d117      	bne.n	800ac8c <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800ac5c:	6938      	ldr	r0, [r7, #16]
 800ac5e:	f7ff fd4d 	bl	800a6fc <LL_EXTI_DisableIT_32_63>
 800ac62:	e016      	b.n	800ac92 <HAL_COMP_Init+0x30e>
 800ac64:	ff007e0f 	.word	0xff007e0f
 800ac68:	20000c34 	.word	0x20000c34
 800ac6c:	053e2d63 	.word	0x053e2d63
 800ac70:	40010200 	.word	0x40010200
 800ac74:	40010204 	.word	0x40010204
 800ac78:	40010208 	.word	0x40010208
 800ac7c:	4001020c 	.word	0x4001020c
 800ac80:	40010210 	.word	0x40010210
 800ac84:	40010214 	.word	0x40010214
 800ac88:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800ac8c:	6938      	ldr	r0, [r7, #16]
 800ac8e:	f7ff fd21 	bl	800a6d4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	7f5b      	ldrb	r3, [r3, #29]
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d102      	bne.n	800aca2 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800aca2:	7ffb      	ldrb	r3, [r7, #31]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3720      	adds	r7, #32
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800acac:	b480      	push	{r7}
 800acae:	b085      	sub	sp, #20
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d102      	bne.n	800acc4 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	73fb      	strb	r3, [r7, #15]
 800acc2:	e01d      	b.n	800ad00 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acd2:	d102      	bne.n	800acda <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800acd4:	2301      	movs	r3, #1
 800acd6:	73fb      	strb	r3, [r7, #15]
 800acd8:	e012      	b.n	800ad00 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	7f5b      	ldrb	r3, [r3, #29]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d00b      	beq.n	800acfc <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0201 	bic.w	r2, r2, #1
 800acf2:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2201      	movs	r2, #1
 800acf8:	775a      	strb	r2, [r3, #29]
 800acfa:	e001      	b.n	800ad00 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3714      	adds	r7, #20
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
	...

0800ad10 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	4a2f      	ldr	r2, [pc, #188]	; (800addc <HAL_COMP_IRQHandler+0xcc>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d028      	beq.n	800ad74 <HAL_COMP_IRQHandler+0x64>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	4a2e      	ldr	r2, [pc, #184]	; (800ade0 <HAL_COMP_IRQHandler+0xd0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d020      	beq.n	800ad6e <HAL_COMP_IRQHandler+0x5e>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	4a2c      	ldr	r2, [pc, #176]	; (800ade4 <HAL_COMP_IRQHandler+0xd4>)
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d018      	beq.n	800ad68 <HAL_COMP_IRQHandler+0x58>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a2b      	ldr	r2, [pc, #172]	; (800ade8 <HAL_COMP_IRQHandler+0xd8>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d010      	beq.n	800ad62 <HAL_COMP_IRQHandler+0x52>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4a29      	ldr	r2, [pc, #164]	; (800adec <HAL_COMP_IRQHandler+0xdc>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d008      	beq.n	800ad5c <HAL_COMP_IRQHandler+0x4c>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	4a28      	ldr	r2, [pc, #160]	; (800adf0 <HAL_COMP_IRQHandler+0xe0>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d101      	bne.n	800ad58 <HAL_COMP_IRQHandler+0x48>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e00f      	b.n	800ad78 <HAL_COMP_IRQHandler+0x68>
 800ad58:	2302      	movs	r3, #2
 800ad5a:	e00d      	b.n	800ad78 <HAL_COMP_IRQHandler+0x68>
 800ad5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ad60:	e00a      	b.n	800ad78 <HAL_COMP_IRQHandler+0x68>
 800ad62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad66:	e007      	b.n	800ad78 <HAL_COMP_IRQHandler+0x68>
 800ad68:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ad6c:	e004      	b.n	800ad78 <HAL_COMP_IRQHandler+0x68>
 800ad6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ad72:	e001      	b.n	800ad78 <HAL_COMP_IRQHandler+0x68>
 800ad74:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ad78:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a1b      	ldr	r2, [pc, #108]	; (800adf0 <HAL_COMP_IRQHandler+0xe0>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d004      	beq.n	800ad92 <HAL_COMP_IRQHandler+0x82>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a19      	ldr	r2, [pc, #100]	; (800adf4 <HAL_COMP_IRQHandler+0xe4>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d108      	bne.n	800ada4 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800ad92:	68b8      	ldr	r0, [r7, #8]
 800ad94:	f7ff fdc0 	bl	800a918 <LL_EXTI_IsActiveFlag_32_63>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800ad9e:	2302      	movs	r3, #2
 800ada0:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800ada2:	e007      	b.n	800adb4 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800ada4:	68b8      	ldr	r0, [r7, #8]
 800ada6:	f7ff fda1 	bl	800a8ec <LL_EXTI_IsActiveFlag_0_31>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d001      	beq.n	800adb4 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800adb0:	2301      	movs	r3, #1
 800adb2:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00c      	beq.n	800add4 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d103      	bne.n	800adc8 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800adc0:	68b8      	ldr	r0, [r7, #8]
 800adc2:	f7ff fdcf 	bl	800a964 <LL_EXTI_ClearFlag_32_63>
 800adc6:	e002      	b.n	800adce <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800adc8:	68b8      	ldr	r0, [r7, #8]
 800adca:	f7ff fdbb 	bl	800a944 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7fb fce8 	bl	80067a4 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800add4:	bf00      	nop
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}
 800addc:	40010200 	.word	0x40010200
 800ade0:	40010204 	.word	0x40010204
 800ade4:	40010208 	.word	0x40010208
 800ade8:	4001020c 	.word	0x4001020c
 800adec:	40010210 	.word	0x40010210
 800adf0:	40010214 	.word	0x40010214
 800adf4:	40010218 	.word	0x40010218

0800adf8 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b083      	sub	sp, #12
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	0f9b      	lsrs	r3, r3, #30
 800ae08:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	370c      	adds	r7, #12
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <__NVIC_SetPriorityGrouping>:
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b085      	sub	sp, #20
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f003 0307 	and.w	r3, r3, #7
 800ae26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ae28:	4b0c      	ldr	r3, [pc, #48]	; (800ae5c <__NVIC_SetPriorityGrouping+0x44>)
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae2e:	68ba      	ldr	r2, [r7, #8]
 800ae30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae34:	4013      	ands	r3, r2
 800ae36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ae40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ae4a:	4a04      	ldr	r2, [pc, #16]	; (800ae5c <__NVIC_SetPriorityGrouping+0x44>)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	60d3      	str	r3, [r2, #12]
}
 800ae50:	bf00      	nop
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr
 800ae5c:	e000ed00 	.word	0xe000ed00

0800ae60 <__NVIC_GetPriorityGrouping>:
{
 800ae60:	b480      	push	{r7}
 800ae62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ae64:	4b04      	ldr	r3, [pc, #16]	; (800ae78 <__NVIC_GetPriorityGrouping+0x18>)
 800ae66:	68db      	ldr	r3, [r3, #12]
 800ae68:	0a1b      	lsrs	r3, r3, #8
 800ae6a:	f003 0307 	and.w	r3, r3, #7
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	e000ed00 	.word	0xe000ed00

0800ae7c <__NVIC_EnableIRQ>:
{
 800ae7c:	b480      	push	{r7}
 800ae7e:	b083      	sub	sp, #12
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	4603      	mov	r3, r0
 800ae84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ae86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	db0b      	blt.n	800aea6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ae8e:	79fb      	ldrb	r3, [r7, #7]
 800ae90:	f003 021f 	and.w	r2, r3, #31
 800ae94:	4907      	ldr	r1, [pc, #28]	; (800aeb4 <__NVIC_EnableIRQ+0x38>)
 800ae96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae9a:	095b      	lsrs	r3, r3, #5
 800ae9c:	2001      	movs	r0, #1
 800ae9e:	fa00 f202 	lsl.w	r2, r0, r2
 800aea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800aea6:	bf00      	nop
 800aea8:	370c      	adds	r7, #12
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	e000e100 	.word	0xe000e100

0800aeb8 <__NVIC_DisableIRQ>:
{
 800aeb8:	b480      	push	{r7}
 800aeba:	b083      	sub	sp, #12
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	4603      	mov	r3, r0
 800aec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	db10      	blt.n	800aeec <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aeca:	79fb      	ldrb	r3, [r7, #7]
 800aecc:	f003 021f 	and.w	r2, r3, #31
 800aed0:	4909      	ldr	r1, [pc, #36]	; (800aef8 <__NVIC_DisableIRQ+0x40>)
 800aed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aed6:	095b      	lsrs	r3, r3, #5
 800aed8:	2001      	movs	r0, #1
 800aeda:	fa00 f202 	lsl.w	r2, r0, r2
 800aede:	3320      	adds	r3, #32
 800aee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800aee4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800aee8:	f3bf 8f6f 	isb	sy
}
 800aeec:	bf00      	nop
 800aeee:	370c      	adds	r7, #12
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr
 800aef8:	e000e100 	.word	0xe000e100

0800aefc <__NVIC_SetPriority>:
{
 800aefc:	b480      	push	{r7}
 800aefe:	b083      	sub	sp, #12
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	6039      	str	r1, [r7, #0]
 800af06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	db0a      	blt.n	800af26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af10:	683b      	ldr	r3, [r7, #0]
 800af12:	b2da      	uxtb	r2, r3
 800af14:	490c      	ldr	r1, [pc, #48]	; (800af48 <__NVIC_SetPriority+0x4c>)
 800af16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af1a:	0112      	lsls	r2, r2, #4
 800af1c:	b2d2      	uxtb	r2, r2
 800af1e:	440b      	add	r3, r1
 800af20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af24:	e00a      	b.n	800af3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	b2da      	uxtb	r2, r3
 800af2a:	4908      	ldr	r1, [pc, #32]	; (800af4c <__NVIC_SetPriority+0x50>)
 800af2c:	79fb      	ldrb	r3, [r7, #7]
 800af2e:	f003 030f 	and.w	r3, r3, #15
 800af32:	3b04      	subs	r3, #4
 800af34:	0112      	lsls	r2, r2, #4
 800af36:	b2d2      	uxtb	r2, r2
 800af38:	440b      	add	r3, r1
 800af3a:	761a      	strb	r2, [r3, #24]
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	e000e100 	.word	0xe000e100
 800af4c:	e000ed00 	.word	0xe000ed00

0800af50 <NVIC_EncodePriority>:
{
 800af50:	b480      	push	{r7}
 800af52:	b089      	sub	sp, #36	; 0x24
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	60b9      	str	r1, [r7, #8]
 800af5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	f1c3 0307 	rsb	r3, r3, #7
 800af6a:	2b04      	cmp	r3, #4
 800af6c:	bf28      	it	cs
 800af6e:	2304      	movcs	r3, #4
 800af70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	3304      	adds	r3, #4
 800af76:	2b06      	cmp	r3, #6
 800af78:	d902      	bls.n	800af80 <NVIC_EncodePriority+0x30>
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	3b03      	subs	r3, #3
 800af7e:	e000      	b.n	800af82 <NVIC_EncodePriority+0x32>
 800af80:	2300      	movs	r3, #0
 800af82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800af84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	fa02 f303 	lsl.w	r3, r2, r3
 800af8e:	43da      	mvns	r2, r3
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	401a      	ands	r2, r3
 800af94:	697b      	ldr	r3, [r7, #20]
 800af96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800af98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	fa01 f303 	lsl.w	r3, r1, r3
 800afa2:	43d9      	mvns	r1, r3
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800afa8:	4313      	orrs	r3, r2
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3724      	adds	r7, #36	; 0x24
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr
	...

0800afb8 <SysTick_Config>:
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	3b01      	subs	r3, #1
 800afc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800afc8:	d301      	bcc.n	800afce <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800afca:	2301      	movs	r3, #1
 800afcc:	e00f      	b.n	800afee <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800afce:	4a0a      	ldr	r2, [pc, #40]	; (800aff8 <SysTick_Config+0x40>)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800afd6:	210f      	movs	r1, #15
 800afd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afdc:	f7ff ff8e 	bl	800aefc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800afe0:	4b05      	ldr	r3, [pc, #20]	; (800aff8 <SysTick_Config+0x40>)
 800afe2:	2200      	movs	r2, #0
 800afe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800afe6:	4b04      	ldr	r3, [pc, #16]	; (800aff8 <SysTick_Config+0x40>)
 800afe8:	2207      	movs	r2, #7
 800afea:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800afec:	2300      	movs	r3, #0
}
 800afee:	4618      	mov	r0, r3
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}
 800aff6:	bf00      	nop
 800aff8:	e000e010 	.word	0xe000e010

0800affc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff ff07 	bl	800ae18 <__NVIC_SetPriorityGrouping>
}
 800b00a:	bf00      	nop
 800b00c:	3708      	adds	r7, #8
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b086      	sub	sp, #24
 800b016:	af00      	add	r7, sp, #0
 800b018:	4603      	mov	r3, r0
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	607a      	str	r2, [r7, #4]
 800b01e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b020:	f7ff ff1e 	bl	800ae60 <__NVIC_GetPriorityGrouping>
 800b024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b026:	687a      	ldr	r2, [r7, #4]
 800b028:	68b9      	ldr	r1, [r7, #8]
 800b02a:	6978      	ldr	r0, [r7, #20]
 800b02c:	f7ff ff90 	bl	800af50 <NVIC_EncodePriority>
 800b030:	4602      	mov	r2, r0
 800b032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f7ff ff5f 	bl	800aefc <__NVIC_SetPriority>
}
 800b03e:	bf00      	nop
 800b040:	3718      	adds	r7, #24
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}

0800b046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b046:	b580      	push	{r7, lr}
 800b048:	b082      	sub	sp, #8
 800b04a:	af00      	add	r7, sp, #0
 800b04c:	4603      	mov	r3, r0
 800b04e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b054:	4618      	mov	r0, r3
 800b056:	f7ff ff11 	bl	800ae7c <__NVIC_EnableIRQ>
}
 800b05a:	bf00      	nop
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b062:	b580      	push	{r7, lr}
 800b064:	b082      	sub	sp, #8
 800b066:	af00      	add	r7, sp, #0
 800b068:	4603      	mov	r3, r0
 800b06a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b06c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b070:	4618      	mov	r0, r3
 800b072:	f7ff ff21 	bl	800aeb8 <__NVIC_DisableIRQ>
}
 800b076:	bf00      	nop
 800b078:	3708      	adds	r7, #8
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}

0800b07e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b07e:	b580      	push	{r7, lr}
 800b080:	b082      	sub	sp, #8
 800b082:	af00      	add	r7, sp, #0
 800b084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f7ff ff96 	bl	800afb8 <SysTick_Config>
 800b08c:	4603      	mov	r3, r0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3708      	adds	r7, #8
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}

0800b096 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b096:	b580      	push	{r7, lr}
 800b098:	b082      	sub	sp, #8
 800b09a:	af00      	add	r7, sp, #0
 800b09c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	e014      	b.n	800b0d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	791b      	ldrb	r3, [r3, #4]
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d105      	bne.n	800b0be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f7fc fbed 	bl	8007898 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2202      	movs	r2, #2
 800b0c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b082      	sub	sp, #8
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	795b      	ldrb	r3, [r3, #5]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d101      	bne.n	800b0f0 <HAL_DAC_Start+0x16>
 800b0ec:	2302      	movs	r3, #2
 800b0ee:	e043      	b.n	800b178 <HAL_DAC_Start+0x9e>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	6819      	ldr	r1, [r3, #0]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	f003 0310 	and.w	r3, r3, #16
 800b108:	2201      	movs	r2, #1
 800b10a:	409a      	lsls	r2, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	430a      	orrs	r2, r1
 800b112:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800b114:	2001      	movs	r0, #1
 800b116:	f7fe f87f 	bl	8009218 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800b11a:	683b      	ldr	r3, [r7, #0]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d10f      	bne.n	800b140 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d11d      	bne.n	800b16a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f042 0201 	orr.w	r2, r2, #1
 800b13c:	605a      	str	r2, [r3, #4]
 800b13e:	e014      	b.n	800b16a <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	f003 0310 	and.w	r3, r3, #16
 800b150:	2102      	movs	r1, #2
 800b152:	fa01 f303 	lsl.w	r3, r1, r3
 800b156:	429a      	cmp	r2, r3
 800b158:	d107      	bne.n	800b16a <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f042 0202 	orr.w	r2, r2, #2
 800b168:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2201      	movs	r2, #1
 800b16e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	60b9      	str	r1, [r7, #8]
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800b18e:	2300      	movs	r3, #0
 800b190:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	795b      	ldrb	r3, [r3, #5]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d101      	bne.n	800b19e <HAL_DAC_Start_DMA+0x1e>
 800b19a:	2302      	movs	r3, #2
 800b19c:	e0a1      	b.n	800b2e2 <HAL_DAC_Start_DMA+0x162>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	2202      	movs	r2, #2
 800b1a8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d12a      	bne.n	800b206 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	4a4d      	ldr	r2, [pc, #308]	; (800b2ec <HAL_DAC_Start_DMA+0x16c>)
 800b1b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	4a4c      	ldr	r2, [pc, #304]	; (800b2f0 <HAL_DAC_Start_DMA+0x170>)
 800b1be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	689b      	ldr	r3, [r3, #8]
 800b1c4:	4a4b      	ldr	r2, [pc, #300]	; (800b2f4 <HAL_DAC_Start_DMA+0x174>)
 800b1c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	681a      	ldr	r2, [r3, #0]
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b1d6:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d009      	beq.n	800b1f2 <HAL_DAC_Start_DMA+0x72>
 800b1de:	2b08      	cmp	r3, #8
 800b1e0:	d00c      	beq.n	800b1fc <HAL_DAC_Start_DMA+0x7c>
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d000      	beq.n	800b1e8 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b1e6:	e039      	b.n	800b25c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	3308      	adds	r3, #8
 800b1ee:	613b      	str	r3, [r7, #16]
        break;
 800b1f0:	e034      	b.n	800b25c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	330c      	adds	r3, #12
 800b1f8:	613b      	str	r3, [r7, #16]
        break;
 800b1fa:	e02f      	b.n	800b25c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3310      	adds	r3, #16
 800b202:	613b      	str	r3, [r7, #16]
        break;
 800b204:	e02a      	b.n	800b25c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	4a3b      	ldr	r2, [pc, #236]	; (800b2f8 <HAL_DAC_Start_DMA+0x178>)
 800b20c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	4a3a      	ldr	r2, [pc, #232]	; (800b2fc <HAL_DAC_Start_DMA+0x17c>)
 800b214:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	4a39      	ldr	r2, [pc, #228]	; (800b300 <HAL_DAC_Start_DMA+0x180>)
 800b21c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b22c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	2b04      	cmp	r3, #4
 800b232:	d009      	beq.n	800b248 <HAL_DAC_Start_DMA+0xc8>
 800b234:	2b08      	cmp	r3, #8
 800b236:	d00c      	beq.n	800b252 <HAL_DAC_Start_DMA+0xd2>
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d000      	beq.n	800b23e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b23c:	e00e      	b.n	800b25c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3314      	adds	r3, #20
 800b244:	613b      	str	r3, [r7, #16]
        break;
 800b246:	e009      	b.n	800b25c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3318      	adds	r3, #24
 800b24e:	613b      	str	r3, [r7, #16]
        break;
 800b250:	e004      	b.n	800b25c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	331c      	adds	r3, #28
 800b258:	613b      	str	r3, [r7, #16]
        break;
 800b25a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d111      	bne.n	800b286 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	681a      	ldr	r2, [r3, #0]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b270:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6898      	ldr	r0, [r3, #8]
 800b276:	6879      	ldr	r1, [r7, #4]
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	f000 fbd2 	bl	800ba24 <HAL_DMA_Start_IT>
 800b280:	4603      	mov	r3, r0
 800b282:	75fb      	strb	r3, [r7, #23]
 800b284:	e010      	b.n	800b2a8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	681a      	ldr	r2, [r3, #0]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b294:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	68d8      	ldr	r0, [r3, #12]
 800b29a:	6879      	ldr	r1, [r7, #4]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	693a      	ldr	r2, [r7, #16]
 800b2a0:	f000 fbc0 	bl	800ba24 <HAL_DMA_Start_IT>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d10f      	bne.n	800b2d4 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	6819      	ldr	r1, [r3, #0]
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	f003 0310 	and.w	r3, r3, #16
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	409a      	lsls	r2, r3
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	430a      	orrs	r2, r1
 800b2ca:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	f7fd ffa3 	bl	8009218 <HAL_Delay>
 800b2d2:	e005      	b.n	800b2e0 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	f043 0204 	orr.w	r2, r3, #4
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b2e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	0800b7c1 	.word	0x0800b7c1
 800b2f0:	0800b7e3 	.word	0x0800b7e3
 800b2f4:	0800b7ff 	.word	0x0800b7ff
 800b2f8:	0800b869 	.word	0x0800b869
 800b2fc:	0800b88b 	.word	0x0800b88b
 800b300:	0800b8a7 	.word	0x0800b8a7

0800b304 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	6819      	ldr	r1, [r3, #0]
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	f003 0310 	and.w	r3, r3, #16
 800b31a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b31e:	fa02 f303 	lsl.w	r3, r2, r3
 800b322:	43da      	mvns	r2, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	400a      	ands	r2, r1
 800b32a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	6819      	ldr	r1, [r3, #0]
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	f003 0310 	and.w	r3, r3, #16
 800b338:	2201      	movs	r2, #1
 800b33a:	fa02 f303 	lsl.w	r3, r2, r3
 800b33e:	43da      	mvns	r2, r3
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	400a      	ands	r2, r1
 800b346:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b348:	2001      	movs	r0, #1
 800b34a:	f7fd ff65 	bl	8009218 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10f      	bne.n	800b374 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	689b      	ldr	r3, [r3, #8]
 800b358:	4618      	mov	r0, r3
 800b35a:	f000 fbde 	bl	800bb1a <HAL_DMA_Abort>
 800b35e:	4603      	mov	r3, r0
 800b360:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b370:	601a      	str	r2, [r3, #0]
 800b372:	e00e      	b.n	800b392 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fbce 	bl	800bb1a <HAL_DMA_Abort>
 800b37e:	4603      	mov	r3, r0
 800b380:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	681a      	ldr	r2, [r3, #0]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b390:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b392:	7bfb      	ldrb	r3, [r7, #15]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d003      	beq.n	800b3a0 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2204      	movs	r2, #4
 800b39c:	711a      	strb	r2, [r3, #4]
 800b39e:	e002      	b.n	800b3a6 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2201      	movs	r2, #1
 800b3a4:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b3a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b087      	sub	sp, #28
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	607a      	str	r2, [r7, #4]
 800b3bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d105      	bne.n	800b3e0 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4413      	add	r3, r2
 800b3da:	3308      	adds	r3, #8
 800b3dc:	617b      	str	r3, [r7, #20]
 800b3de:	e004      	b.n	800b3ea <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4413      	add	r3, r2
 800b3e6:	3314      	adds	r3, #20
 800b3e8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	371c      	adds	r7, #28
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b400:	b480      	push	{r7}
 800b402:	b083      	sub	sp, #12
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b408:	bf00      	nop
 800b40a:	370c      	adds	r7, #12
 800b40c:	46bd      	mov	sp, r7
 800b40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b412:	4770      	bx	lr

0800b414 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b41c:	bf00      	nop
 800b41e:	370c      	adds	r7, #12
 800b420:	46bd      	mov	sp, r7
 800b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b426:	4770      	bx	lr

0800b428 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b430:	bf00      	nop
 800b432:	370c      	adds	r7, #12
 800b434:	46bd      	mov	sp, r7
 800b436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43a:	4770      	bx	lr

0800b43c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
 800b444:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d103      	bne.n	800b454 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b452:	e002      	b.n	800b45a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
	...

0800b468 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b08a      	sub	sp, #40	; 0x28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b474:	2300      	movs	r3, #0
 800b476:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	795b      	ldrb	r3, [r3, #5]
 800b47c:	2b01      	cmp	r3, #1
 800b47e:	d101      	bne.n	800b484 <HAL_DAC_ConfigChannel+0x1c>
 800b480:	2302      	movs	r3, #2
 800b482:	e194      	b.n	800b7ae <HAL_DAC_ConfigChannel+0x346>
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2201      	movs	r2, #1
 800b488:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2202      	movs	r2, #2
 800b48e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	689b      	ldr	r3, [r3, #8]
 800b494:	2b04      	cmp	r3, #4
 800b496:	d174      	bne.n	800b582 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d137      	bne.n	800b50e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b49e:	f7fd feaf 	bl	8009200 <HAL_GetTick>
 800b4a2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b4a4:	e011      	b.n	800b4ca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b4a6:	f7fd feab 	bl	8009200 <HAL_GetTick>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	2b01      	cmp	r3, #1
 800b4b2:	d90a      	bls.n	800b4ca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	f043 0208 	orr.w	r2, r3, #8
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2203      	movs	r2, #3
 800b4c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e171      	b.n	800b7ae <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d1e6      	bne.n	800b4a6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b4d8:	2001      	movs	r0, #1
 800b4da:	f7fd fe9d 	bl	8009218 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4e6:	641a      	str	r2, [r3, #64]	; 0x40
 800b4e8:	e01e      	b.n	800b528 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b4ea:	f7fd fe89 	bl	8009200 <HAL_GetTick>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d90a      	bls.n	800b50e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	f043 0208 	orr.w	r2, r3, #8
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2203      	movs	r2, #3
 800b508:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b50a:	2303      	movs	r3, #3
 800b50c:	e14f      	b.n	800b7ae <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b514:	2b00      	cmp	r3, #0
 800b516:	dbe8      	blt.n	800b4ea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b518:	2001      	movs	r0, #1
 800b51a:	f7fd fe7d 	bl	8009218 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68ba      	ldr	r2, [r7, #8]
 800b524:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b526:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f003 0310 	and.w	r3, r3, #16
 800b534:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b538:	fa01 f303 	lsl.w	r3, r1, r3
 800b53c:	43db      	mvns	r3, r3
 800b53e:	ea02 0103 	and.w	r1, r2, r3
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f003 0310 	and.w	r3, r3, #16
 800b54c:	409a      	lsls	r2, r3
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	430a      	orrs	r2, r1
 800b554:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f003 0310 	and.w	r3, r3, #16
 800b562:	21ff      	movs	r1, #255	; 0xff
 800b564:	fa01 f303 	lsl.w	r3, r1, r3
 800b568:	43db      	mvns	r3, r3
 800b56a:	ea02 0103 	and.w	r1, r2, r3
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f003 0310 	and.w	r3, r3, #16
 800b578:	409a      	lsls	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	430a      	orrs	r2, r1
 800b580:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	69db      	ldr	r3, [r3, #28]
 800b586:	2b01      	cmp	r3, #1
 800b588:	d11d      	bne.n	800b5c6 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f003 0310 	and.w	r3, r3, #16
 800b598:	221f      	movs	r2, #31
 800b59a:	fa02 f303 	lsl.w	r3, r2, r3
 800b59e:	43db      	mvns	r3, r3
 800b5a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5a2:	4013      	ands	r3, r2
 800b5a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	6a1b      	ldr	r3, [r3, #32]
 800b5aa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f003 0310 	and.w	r3, r3, #16
 800b5b2:	69ba      	ldr	r2, [r7, #24]
 800b5b4:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ba:	4313      	orrs	r3, r2
 800b5bc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f003 0310 	and.w	r3, r3, #16
 800b5d4:	2207      	movs	r2, #7
 800b5d6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5da:	43db      	mvns	r3, r3
 800b5dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5de:	4013      	ands	r3, r2
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	699b      	ldr	r3, [r3, #24]
 800b5e6:	f003 0301 	and.w	r3, r3, #1
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	623b      	str	r3, [r7, #32]
 800b5f2:	e011      	b.n	800b618 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	699b      	ldr	r3, [r3, #24]
 800b5f8:	f003 0302 	and.w	r3, r3, #2
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b600:	2301      	movs	r3, #1
 800b602:	623b      	str	r3, [r7, #32]
 800b604:	e008      	b.n	800b618 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	695b      	ldr	r3, [r3, #20]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d102      	bne.n	800b614 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b60e:	2301      	movs	r3, #1
 800b610:	623b      	str	r3, [r7, #32]
 800b612:	e001      	b.n	800b618 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b614:	2300      	movs	r3, #0
 800b616:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	689a      	ldr	r2, [r3, #8]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	695b      	ldr	r3, [r3, #20]
 800b620:	4313      	orrs	r3, r2
 800b622:	6a3a      	ldr	r2, [r7, #32]
 800b624:	4313      	orrs	r3, r2
 800b626:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f003 0310 	and.w	r3, r3, #16
 800b62e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b632:	fa02 f303 	lsl.w	r3, r2, r3
 800b636:	43db      	mvns	r3, r3
 800b638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b63a:	4013      	ands	r3, r2
 800b63c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	791b      	ldrb	r3, [r3, #4]
 800b642:	2b01      	cmp	r3, #1
 800b644:	d102      	bne.n	800b64c <HAL_DAC_ConfigChannel+0x1e4>
 800b646:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b64a:	e000      	b.n	800b64e <HAL_DAC_ConfigChannel+0x1e6>
 800b64c:	2300      	movs	r3, #0
 800b64e:	69ba      	ldr	r2, [r7, #24]
 800b650:	4313      	orrs	r3, r2
 800b652:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f003 0310 	and.w	r3, r3, #16
 800b65a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b65e:	fa02 f303 	lsl.w	r3, r2, r3
 800b662:	43db      	mvns	r3, r3
 800b664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b666:	4013      	ands	r3, r2
 800b668:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	795b      	ldrb	r3, [r3, #5]
 800b66e:	2b01      	cmp	r3, #1
 800b670:	d102      	bne.n	800b678 <HAL_DAC_ConfigChannel+0x210>
 800b672:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b676:	e000      	b.n	800b67a <HAL_DAC_ConfigChannel+0x212>
 800b678:	2300      	movs	r3, #0
 800b67a:	69ba      	ldr	r2, [r7, #24]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b682:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b686:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b02      	cmp	r3, #2
 800b68e:	d114      	bne.n	800b6ba <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b690:	f001 fc28 	bl	800cee4 <HAL_RCC_GetHCLKFreq>
 800b694:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	4a47      	ldr	r2, [pc, #284]	; (800b7b8 <HAL_DAC_ConfigChannel+0x350>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d904      	bls.n	800b6a8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b6a6:	e00d      	b.n	800b6c4 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	4a44      	ldr	r2, [pc, #272]	; (800b7bc <HAL_DAC_ConfigChannel+0x354>)
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d909      	bls.n	800b6c4 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b8:	e004      	b.n	800b6c4 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f003 0310 	and.w	r3, r3, #16
 800b6ca:	69ba      	ldr	r2, [r7, #24]
 800b6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	6819      	ldr	r1, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f003 0310 	and.w	r3, r3, #16
 800b6ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800b6f2:	43da      	mvns	r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	400a      	ands	r2, r1
 800b6fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f003 0310 	and.w	r3, r3, #16
 800b70a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b70e:	fa02 f303 	lsl.w	r3, r2, r3
 800b712:	43db      	mvns	r3, r3
 800b714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b716:	4013      	ands	r3, r2
 800b718:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b71a:	68bb      	ldr	r3, [r7, #8]
 800b71c:	68db      	ldr	r3, [r3, #12]
 800b71e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f003 0310 	and.w	r3, r3, #16
 800b726:	69ba      	ldr	r2, [r7, #24]
 800b728:	fa02 f303 	lsl.w	r3, r2, r3
 800b72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b72e:	4313      	orrs	r3, r2
 800b730:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b738:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	6819      	ldr	r1, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f003 0310 	and.w	r3, r3, #16
 800b746:	22c0      	movs	r2, #192	; 0xc0
 800b748:	fa02 f303 	lsl.w	r3, r2, r3
 800b74c:	43da      	mvns	r2, r3
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	400a      	ands	r2, r1
 800b754:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	089b      	lsrs	r3, r3, #2
 800b75c:	f003 030f 	and.w	r3, r3, #15
 800b760:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	089b      	lsrs	r3, r3, #2
 800b768:	021b      	lsls	r3, r3, #8
 800b76a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	4313      	orrs	r3, r2
 800b772:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f003 0310 	and.w	r3, r3, #16
 800b780:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b784:	fa01 f303 	lsl.w	r3, r1, r3
 800b788:	43db      	mvns	r3, r3
 800b78a:	ea02 0103 	and.w	r1, r2, r3
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f003 0310 	and.w	r3, r3, #16
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	409a      	lsls	r2, r3
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	430a      	orrs	r2, r1
 800b79e:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3728      	adds	r7, #40	; 0x28
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	09896800 	.word	0x09896800
 800b7bc:	04c4b400 	.word	0x04c4b400

0800b7c0 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b084      	sub	sp, #16
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7cc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b7ce:	68f8      	ldr	r0, [r7, #12]
 800b7d0:	f7ff fe16 	bl	800b400 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	711a      	strb	r2, [r3, #4]
}
 800b7da:	bf00      	nop
 800b7dc:	3710      	adds	r7, #16
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}

0800b7e2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b084      	sub	sp, #16
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b7f0:	68f8      	ldr	r0, [r7, #12]
 800b7f2:	f7ff fe0f 	bl	800b414 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b7f6:	bf00      	nop
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}

0800b7fe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b7fe:	b580      	push	{r7, lr}
 800b800:	b084      	sub	sp, #16
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b80a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	f043 0204 	orr.w	r2, r3, #4
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b818:	68f8      	ldr	r0, [r7, #12]
 800b81a:	f7ff fe05 	bl	800b428 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	2201      	movs	r2, #1
 800b822:	711a      	strb	r2, [r3, #4]
}
 800b824:	bf00      	nop
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b834:	bf00      	nop
 800b836:	370c      	adds	r7, #12
 800b838:	46bd      	mov	sp, r7
 800b83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83e:	4770      	bx	lr

0800b840 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b840:	b480      	push	{r7}
 800b842:	b083      	sub	sp, #12
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b848:	bf00      	nop
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b084      	sub	sp, #16
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b874:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f7ff ffd8 	bl	800b82c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2201      	movs	r2, #1
 800b880:	711a      	strb	r2, [r3, #4]
}
 800b882:	bf00      	nop
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b88a:	b580      	push	{r7, lr}
 800b88c:	b084      	sub	sp, #16
 800b88e:	af00      	add	r7, sp, #0
 800b890:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b896:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f7ff ffd1 	bl	800b840 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b89e:	bf00      	nop
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8b2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	691b      	ldr	r3, [r3, #16]
 800b8b8:	f043 0204 	orr.w	r2, r3, #4
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f7ff ffc7 	bl	800b854 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	711a      	strb	r2, [r3, #4]
}
 800b8cc:	bf00      	nop
 800b8ce:	3710      	adds	r7, #16
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}

0800b8d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e08d      	b.n	800ba02 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b47      	ldr	r3, [pc, #284]	; (800ba0c <HAL_DMA_Init+0x138>)
 800b8ee:	429a      	cmp	r2, r3
 800b8f0:	d80f      	bhi.n	800b912 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	4b45      	ldr	r3, [pc, #276]	; (800ba10 <HAL_DMA_Init+0x13c>)
 800b8fa:	4413      	add	r3, r2
 800b8fc:	4a45      	ldr	r2, [pc, #276]	; (800ba14 <HAL_DMA_Init+0x140>)
 800b8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b902:	091b      	lsrs	r3, r3, #4
 800b904:	009a      	lsls	r2, r3, #2
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	4a42      	ldr	r2, [pc, #264]	; (800ba18 <HAL_DMA_Init+0x144>)
 800b90e:	641a      	str	r2, [r3, #64]	; 0x40
 800b910:	e00e      	b.n	800b930 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	461a      	mov	r2, r3
 800b918:	4b40      	ldr	r3, [pc, #256]	; (800ba1c <HAL_DMA_Init+0x148>)
 800b91a:	4413      	add	r3, r2
 800b91c:	4a3d      	ldr	r2, [pc, #244]	; (800ba14 <HAL_DMA_Init+0x140>)
 800b91e:	fba2 2303 	umull	r2, r3, r2, r3
 800b922:	091b      	lsrs	r3, r3, #4
 800b924:	009a      	lsls	r2, r3, #2
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4a3c      	ldr	r2, [pc, #240]	; (800ba20 <HAL_DMA_Init+0x14c>)
 800b92e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2202      	movs	r2, #2
 800b934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b94a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b954:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b960:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b96c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a1b      	ldr	r3, [r3, #32]
 800b972:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	4313      	orrs	r3, r2
 800b978:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa76 	bl	800be74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b990:	d102      	bne.n	800b998 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2200      	movs	r2, #0
 800b996:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	685a      	ldr	r2, [r3, #4]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9a0:	b2d2      	uxtb	r2, r2
 800b9a2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b9ac:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d010      	beq.n	800b9d8 <HAL_DMA_Init+0x104>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	2b04      	cmp	r3, #4
 800b9bc:	d80c      	bhi.n	800b9d8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 fa96 	bl	800bef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b9d4:	605a      	str	r2, [r3, #4]
 800b9d6:	e008      	b.n	800b9ea <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ba00:	2300      	movs	r3, #0
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3710      	adds	r7, #16
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
 800ba0a:	bf00      	nop
 800ba0c:	40020407 	.word	0x40020407
 800ba10:	bffdfff8 	.word	0xbffdfff8
 800ba14:	cccccccd 	.word	0xcccccccd
 800ba18:	40020000 	.word	0x40020000
 800ba1c:	bffdfbf8 	.word	0xbffdfbf8
 800ba20:	40020400 	.word	0x40020400

0800ba24 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b086      	sub	sp, #24
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	607a      	str	r2, [r7, #4]
 800ba30:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba32:	2300      	movs	r3, #0
 800ba34:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d101      	bne.n	800ba44 <HAL_DMA_Start_IT+0x20>
 800ba40:	2302      	movs	r3, #2
 800ba42:	e066      	b.n	800bb12 <HAL_DMA_Start_IT+0xee>
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d155      	bne.n	800bb04 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	2200      	movs	r2, #0
 800ba64:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f022 0201 	bic.w	r2, r2, #1
 800ba74:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	687a      	ldr	r2, [r7, #4]
 800ba7a:	68b9      	ldr	r1, [r7, #8]
 800ba7c:	68f8      	ldr	r0, [r7, #12]
 800ba7e:	f000 f9bb 	bl	800bdf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d008      	beq.n	800ba9c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	681a      	ldr	r2, [r3, #0]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f042 020e 	orr.w	r2, r2, #14
 800ba98:	601a      	str	r2, [r3, #0]
 800ba9a:	e00f      	b.n	800babc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	681a      	ldr	r2, [r3, #0]
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	f022 0204 	bic.w	r2, r2, #4
 800baaa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f042 020a 	orr.w	r2, r2, #10
 800baba:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d007      	beq.n	800bada <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bad8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d007      	beq.n	800baf2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800baf0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f042 0201 	orr.w	r2, r2, #1
 800bb00:	601a      	str	r2, [r3, #0]
 800bb02:	e005      	b.n	800bb10 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bb0c:	2302      	movs	r3, #2
 800bb0e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bb10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3718      	adds	r7, #24
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}

0800bb1a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bb1a:	b480      	push	{r7}
 800bb1c:	b085      	sub	sp, #20
 800bb1e:	af00      	add	r7, sp, #0
 800bb20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb22:	2300      	movs	r3, #0
 800bb24:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b02      	cmp	r3, #2
 800bb30:	d005      	beq.n	800bb3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	2204      	movs	r2, #4
 800bb36:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	73fb      	strb	r3, [r7, #15]
 800bb3c:	e037      	b.n	800bbae <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	681a      	ldr	r2, [r3, #0]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 020e 	bic.w	r2, r2, #14
 800bb4c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bb5c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f022 0201 	bic.w	r2, r2, #1
 800bb6c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb72:	f003 021f 	and.w	r2, r3, #31
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7a:	2101      	movs	r1, #1
 800bb7c:	fa01 f202 	lsl.w	r2, r1, r2
 800bb80:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb86:	687a      	ldr	r2, [r7, #4]
 800bb88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bb8a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d00c      	beq.n	800bbae <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bba2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bba8:	687a      	ldr	r2, [r7, #4]
 800bbaa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bbac:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2200      	movs	r2, #0
 800bbba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3714      	adds	r7, #20
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bbde:	b2db      	uxtb	r3, r3
 800bbe0:	2b02      	cmp	r3, #2
 800bbe2:	d00d      	beq.n	800bc00 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2204      	movs	r2, #4
 800bbe8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	73fb      	strb	r3, [r7, #15]
 800bbfe:	e047      	b.n	800bc90 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f022 020e 	bic.w	r2, r2, #14
 800bc0e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f022 0201 	bic.w	r2, r2, #1
 800bc1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc34:	f003 021f 	and.w	r2, r3, #31
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc3c:	2101      	movs	r1, #1
 800bc3e:	fa01 f202 	lsl.w	r2, r1, r2
 800bc42:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bc4c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00c      	beq.n	800bc70 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc64:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bc6e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2201      	movs	r2, #1
 800bc74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d003      	beq.n	800bc90 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	4798      	blx	r3
    }
  }
  return status;
 800bc90:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3710      	adds	r7, #16
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd80      	pop	{r7, pc}

0800bc9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b084      	sub	sp, #16
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcb6:	f003 031f 	and.w	r3, r3, #31
 800bcba:	2204      	movs	r2, #4
 800bcbc:	409a      	lsls	r2, r3
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d026      	beq.n	800bd14 <HAL_DMA_IRQHandler+0x7a>
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	f003 0304 	and.w	r3, r3, #4
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d021      	beq.n	800bd14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 0320 	and.w	r3, r3, #32
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d107      	bne.n	800bcee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	681a      	ldr	r2, [r3, #0]
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	f022 0204 	bic.w	r2, r2, #4
 800bcec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcf2:	f003 021f 	and.w	r2, r3, #31
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfa:	2104      	movs	r1, #4
 800bcfc:	fa01 f202 	lsl.w	r2, r1, r2
 800bd00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d071      	beq.n	800bdee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bd12:	e06c      	b.n	800bdee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd18:	f003 031f 	and.w	r3, r3, #31
 800bd1c:	2202      	movs	r2, #2
 800bd1e:	409a      	lsls	r2, r3
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4013      	ands	r3, r2
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d02e      	beq.n	800bd86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bd28:	68bb      	ldr	r3, [r7, #8]
 800bd2a:	f003 0302 	and.w	r3, r3, #2
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d029      	beq.n	800bd86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f003 0320 	and.w	r3, r3, #32
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d10b      	bne.n	800bd58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f022 020a 	bic.w	r2, r2, #10
 800bd4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2201      	movs	r2, #1
 800bd54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd5c:	f003 021f 	and.w	r2, r3, #31
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd64:	2102      	movs	r1, #2
 800bd66:	fa01 f202 	lsl.w	r2, r1, r2
 800bd6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d038      	beq.n	800bdee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bd84:	e033      	b.n	800bdee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd8a:	f003 031f 	and.w	r3, r3, #31
 800bd8e:	2208      	movs	r2, #8
 800bd90:	409a      	lsls	r2, r3
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	4013      	ands	r3, r2
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d02a      	beq.n	800bdf0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	f003 0308 	and.w	r3, r3, #8
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d025      	beq.n	800bdf0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f022 020e 	bic.w	r2, r2, #14
 800bdb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdb8:	f003 021f 	and.w	r2, r3, #31
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdc0:	2101      	movs	r1, #1
 800bdc2:	fa01 f202 	lsl.w	r2, r1, r2
 800bdc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2201      	movs	r2, #1
 800bdcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2200      	movs	r2, #0
 800bdda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d004      	beq.n	800bdf0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bdee:	bf00      	nop
 800bdf0:	bf00      	nop
}
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b085      	sub	sp, #20
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	607a      	str	r2, [r7, #4]
 800be04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be14:	2b00      	cmp	r3, #0
 800be16:	d004      	beq.n	800be22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be1c:	68fa      	ldr	r2, [r7, #12]
 800be1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800be20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be26:	f003 021f 	and.w	r2, r3, #31
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be2e:	2101      	movs	r1, #1
 800be30:	fa01 f202 	lsl.w	r2, r1, r2
 800be34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	689b      	ldr	r3, [r3, #8]
 800be42:	2b10      	cmp	r3, #16
 800be44:	d108      	bne.n	800be58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	687a      	ldr	r2, [r7, #4]
 800be4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	68ba      	ldr	r2, [r7, #8]
 800be54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800be56:	e007      	b.n	800be68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	60da      	str	r2, [r3, #12]
}
 800be68:	bf00      	nop
 800be6a:	3714      	adds	r7, #20
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800be74:	b480      	push	{r7}
 800be76:	b087      	sub	sp, #28
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	4b16      	ldr	r3, [pc, #88]	; (800bedc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800be84:	429a      	cmp	r2, r3
 800be86:	d802      	bhi.n	800be8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800be88:	4b15      	ldr	r3, [pc, #84]	; (800bee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	e001      	b.n	800be92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800be8e:	4b15      	ldr	r3, [pc, #84]	; (800bee4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800be90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	b2db      	uxtb	r3, r3
 800be9c:	3b08      	subs	r3, #8
 800be9e:	4a12      	ldr	r2, [pc, #72]	; (800bee8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bea0:	fba2 2303 	umull	r2, r3, r2, r3
 800bea4:	091b      	lsrs	r3, r3, #4
 800bea6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800beac:	089b      	lsrs	r3, r3, #2
 800beae:	009a      	lsls	r2, r3, #2
 800beb0:	693b      	ldr	r3, [r7, #16]
 800beb2:	4413      	add	r3, r2
 800beb4:	461a      	mov	r2, r3
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a0b      	ldr	r2, [pc, #44]	; (800beec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bebe:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f003 031f 	and.w	r3, r3, #31
 800bec6:	2201      	movs	r2, #1
 800bec8:	409a      	lsls	r2, r3
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bece:	bf00      	nop
 800bed0:	371c      	adds	r7, #28
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
 800beda:	bf00      	nop
 800bedc:	40020407 	.word	0x40020407
 800bee0:	40020800 	.word	0x40020800
 800bee4:	40020820 	.word	0x40020820
 800bee8:	cccccccd 	.word	0xcccccccd
 800beec:	40020880 	.word	0x40020880

0800bef0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b085      	sub	sp, #20
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	b2db      	uxtb	r3, r3
 800befe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf00:	68fa      	ldr	r2, [r7, #12]
 800bf02:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bf04:	4413      	add	r3, r2
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	461a      	mov	r2, r3
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a08      	ldr	r2, [pc, #32]	; (800bf34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bf12:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	3b01      	subs	r3, #1
 800bf18:	f003 031f 	and.w	r3, r3, #31
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	409a      	lsls	r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bf24:	bf00      	nop
 800bf26:	3714      	adds	r7, #20
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	1000823f 	.word	0x1000823f
 800bf34:	40020940 	.word	0x40020940

0800bf38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bf42:	2300      	movs	r3, #0
 800bf44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bf46:	e15a      	b.n	800c1fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	2101      	movs	r1, #1
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	fa01 f303 	lsl.w	r3, r1, r3
 800bf54:	4013      	ands	r3, r2
 800bf56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 814c 	beq.w	800c1f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	2b01      	cmp	r3, #1
 800bf66:	d00b      	beq.n	800bf80 <HAL_GPIO_Init+0x48>
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	2b02      	cmp	r3, #2
 800bf6e:	d007      	beq.n	800bf80 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf74:	2b11      	cmp	r3, #17
 800bf76:	d003      	beq.n	800bf80 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	685b      	ldr	r3, [r3, #4]
 800bf7c:	2b12      	cmp	r3, #18
 800bf7e:	d130      	bne.n	800bfe2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	005b      	lsls	r3, r3, #1
 800bf8a:	2203      	movs	r2, #3
 800bf8c:	fa02 f303 	lsl.w	r3, r2, r3
 800bf90:	43db      	mvns	r3, r3
 800bf92:	693a      	ldr	r2, [r7, #16]
 800bf94:	4013      	ands	r3, r2
 800bf96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	005b      	lsls	r3, r3, #1
 800bfa0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa4:	693a      	ldr	r2, [r7, #16]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	693a      	ldr	r2, [r7, #16]
 800bfae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	fa02 f303 	lsl.w	r3, r2, r3
 800bfbe:	43db      	mvns	r3, r3
 800bfc0:	693a      	ldr	r2, [r7, #16]
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	091b      	lsrs	r3, r3, #4
 800bfcc:	f003 0201 	and.w	r2, r3, #1
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd6:	693a      	ldr	r2, [r7, #16]
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	693a      	ldr	r2, [r7, #16]
 800bfe0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	005b      	lsls	r3, r3, #1
 800bfec:	2203      	movs	r2, #3
 800bfee:	fa02 f303 	lsl.w	r3, r2, r3
 800bff2:	43db      	mvns	r3, r3
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	4013      	ands	r3, r2
 800bff8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bffa:	683b      	ldr	r3, [r7, #0]
 800bffc:	689a      	ldr	r2, [r3, #8]
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	005b      	lsls	r3, r3, #1
 800c002:	fa02 f303 	lsl.w	r3, r2, r3
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	4313      	orrs	r3, r2
 800c00a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	2b02      	cmp	r3, #2
 800c018:	d003      	beq.n	800c022 <HAL_GPIO_Init+0xea>
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	2b12      	cmp	r3, #18
 800c020:	d123      	bne.n	800c06a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	08da      	lsrs	r2, r3, #3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	3208      	adds	r2, #8
 800c02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c02e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	f003 0307 	and.w	r3, r3, #7
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	220f      	movs	r2, #15
 800c03a:	fa02 f303 	lsl.w	r3, r2, r3
 800c03e:	43db      	mvns	r3, r3
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	4013      	ands	r3, r2
 800c044:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	691a      	ldr	r2, [r3, #16]
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	f003 0307 	and.w	r3, r3, #7
 800c050:	009b      	lsls	r3, r3, #2
 800c052:	fa02 f303 	lsl.w	r3, r2, r3
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	4313      	orrs	r3, r2
 800c05a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c05c:	697b      	ldr	r3, [r7, #20]
 800c05e:	08da      	lsrs	r2, r3, #3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	3208      	adds	r2, #8
 800c064:	6939      	ldr	r1, [r7, #16]
 800c066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c070:	697b      	ldr	r3, [r7, #20]
 800c072:	005b      	lsls	r3, r3, #1
 800c074:	2203      	movs	r2, #3
 800c076:	fa02 f303 	lsl.w	r3, r2, r3
 800c07a:	43db      	mvns	r3, r3
 800c07c:	693a      	ldr	r2, [r7, #16]
 800c07e:	4013      	ands	r3, r2
 800c080:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	f003 0203 	and.w	r2, r3, #3
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	005b      	lsls	r3, r3, #1
 800c08e:	fa02 f303 	lsl.w	r3, r2, r3
 800c092:	693a      	ldr	r2, [r7, #16]
 800c094:	4313      	orrs	r3, r2
 800c096:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	693a      	ldr	r2, [r7, #16]
 800c09c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 80a6 	beq.w	800c1f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0ac:	4b5b      	ldr	r3, [pc, #364]	; (800c21c <HAL_GPIO_Init+0x2e4>)
 800c0ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0b0:	4a5a      	ldr	r2, [pc, #360]	; (800c21c <HAL_GPIO_Init+0x2e4>)
 800c0b2:	f043 0301 	orr.w	r3, r3, #1
 800c0b6:	6613      	str	r3, [r2, #96]	; 0x60
 800c0b8:	4b58      	ldr	r3, [pc, #352]	; (800c21c <HAL_GPIO_Init+0x2e4>)
 800c0ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0bc:	f003 0301 	and.w	r3, r3, #1
 800c0c0:	60bb      	str	r3, [r7, #8]
 800c0c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c0c4:	4a56      	ldr	r2, [pc, #344]	; (800c220 <HAL_GPIO_Init+0x2e8>)
 800c0c6:	697b      	ldr	r3, [r7, #20]
 800c0c8:	089b      	lsrs	r3, r3, #2
 800c0ca:	3302      	adds	r3, #2
 800c0cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	f003 0303 	and.w	r3, r3, #3
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	220f      	movs	r2, #15
 800c0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e0:	43db      	mvns	r3, r3
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	4013      	ands	r3, r2
 800c0e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c0ee:	d01f      	beq.n	800c130 <HAL_GPIO_Init+0x1f8>
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	4a4c      	ldr	r2, [pc, #304]	; (800c224 <HAL_GPIO_Init+0x2ec>)
 800c0f4:	4293      	cmp	r3, r2
 800c0f6:	d019      	beq.n	800c12c <HAL_GPIO_Init+0x1f4>
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4a4b      	ldr	r2, [pc, #300]	; (800c228 <HAL_GPIO_Init+0x2f0>)
 800c0fc:	4293      	cmp	r3, r2
 800c0fe:	d013      	beq.n	800c128 <HAL_GPIO_Init+0x1f0>
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	4a4a      	ldr	r2, [pc, #296]	; (800c22c <HAL_GPIO_Init+0x2f4>)
 800c104:	4293      	cmp	r3, r2
 800c106:	d00d      	beq.n	800c124 <HAL_GPIO_Init+0x1ec>
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	4a49      	ldr	r2, [pc, #292]	; (800c230 <HAL_GPIO_Init+0x2f8>)
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d007      	beq.n	800c120 <HAL_GPIO_Init+0x1e8>
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	4a48      	ldr	r2, [pc, #288]	; (800c234 <HAL_GPIO_Init+0x2fc>)
 800c114:	4293      	cmp	r3, r2
 800c116:	d101      	bne.n	800c11c <HAL_GPIO_Init+0x1e4>
 800c118:	2305      	movs	r3, #5
 800c11a:	e00a      	b.n	800c132 <HAL_GPIO_Init+0x1fa>
 800c11c:	2306      	movs	r3, #6
 800c11e:	e008      	b.n	800c132 <HAL_GPIO_Init+0x1fa>
 800c120:	2304      	movs	r3, #4
 800c122:	e006      	b.n	800c132 <HAL_GPIO_Init+0x1fa>
 800c124:	2303      	movs	r3, #3
 800c126:	e004      	b.n	800c132 <HAL_GPIO_Init+0x1fa>
 800c128:	2302      	movs	r3, #2
 800c12a:	e002      	b.n	800c132 <HAL_GPIO_Init+0x1fa>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e000      	b.n	800c132 <HAL_GPIO_Init+0x1fa>
 800c130:	2300      	movs	r3, #0
 800c132:	697a      	ldr	r2, [r7, #20]
 800c134:	f002 0203 	and.w	r2, r2, #3
 800c138:	0092      	lsls	r2, r2, #2
 800c13a:	4093      	lsls	r3, r2
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	4313      	orrs	r3, r2
 800c140:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c142:	4937      	ldr	r1, [pc, #220]	; (800c220 <HAL_GPIO_Init+0x2e8>)
 800c144:	697b      	ldr	r3, [r7, #20]
 800c146:	089b      	lsrs	r3, r3, #2
 800c148:	3302      	adds	r3, #2
 800c14a:	693a      	ldr	r2, [r7, #16]
 800c14c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c150:	4b39      	ldr	r3, [pc, #228]	; (800c238 <HAL_GPIO_Init+0x300>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	43db      	mvns	r3, r3
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	4013      	ands	r3, r2
 800c15e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c16c:	693a      	ldr	r2, [r7, #16]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	4313      	orrs	r3, r2
 800c172:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c174:	4a30      	ldr	r2, [pc, #192]	; (800c238 <HAL_GPIO_Init+0x300>)
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c17a:	4b2f      	ldr	r3, [pc, #188]	; (800c238 <HAL_GPIO_Init+0x300>)
 800c17c:	685b      	ldr	r3, [r3, #4]
 800c17e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	43db      	mvns	r3, r3
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	4013      	ands	r3, r2
 800c188:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c192:	2b00      	cmp	r3, #0
 800c194:	d003      	beq.n	800c19e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c19e:	4a26      	ldr	r2, [pc, #152]	; (800c238 <HAL_GPIO_Init+0x300>)
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c1a4:	4b24      	ldr	r3, [pc, #144]	; (800c238 <HAL_GPIO_Init+0x300>)
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	43db      	mvns	r3, r3
 800c1ae:	693a      	ldr	r2, [r7, #16]
 800c1b0:	4013      	ands	r3, r2
 800c1b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	685b      	ldr	r3, [r3, #4]
 800c1b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d003      	beq.n	800c1c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c1c0:	693a      	ldr	r2, [r7, #16]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c1c8:	4a1b      	ldr	r2, [pc, #108]	; (800c238 <HAL_GPIO_Init+0x300>)
 800c1ca:	693b      	ldr	r3, [r7, #16]
 800c1cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c1ce:	4b1a      	ldr	r3, [pc, #104]	; (800c238 <HAL_GPIO_Init+0x300>)
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	43db      	mvns	r3, r3
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	4013      	ands	r3, r2
 800c1dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d003      	beq.n	800c1f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c1f2:	4a11      	ldr	r2, [pc, #68]	; (800c238 <HAL_GPIO_Init+0x300>)
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c1f8:	697b      	ldr	r3, [r7, #20]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	681a      	ldr	r2, [r3, #0]
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	fa22 f303 	lsr.w	r3, r2, r3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f47f ae9d 	bne.w	800bf48 <HAL_GPIO_Init+0x10>
  }
}
 800c20e:	bf00      	nop
 800c210:	371c      	adds	r7, #28
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop
 800c21c:	40021000 	.word	0x40021000
 800c220:	40010000 	.word	0x40010000
 800c224:	48000400 	.word	0x48000400
 800c228:	48000800 	.word	0x48000800
 800c22c:	48000c00 	.word	0x48000c00
 800c230:	48001000 	.word	0x48001000
 800c234:	48001400 	.word	0x48001400
 800c238:	40010400 	.word	0x40010400

0800c23c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c23c:	b480      	push	{r7}
 800c23e:	b087      	sub	sp, #28
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
 800c244:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c246:	2300      	movs	r3, #0
 800c248:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800c24a:	e0bd      	b.n	800c3c8 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800c24c:	2201      	movs	r2, #1
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	fa02 f303 	lsl.w	r3, r2, r3
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	4013      	ands	r3, r2
 800c258:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f000 80b0 	beq.w	800c3c2 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800c262:	4a60      	ldr	r2, [pc, #384]	; (800c3e4 <HAL_GPIO_DeInit+0x1a8>)
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	089b      	lsrs	r3, r3, #2
 800c268:	3302      	adds	r3, #2
 800c26a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c26e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	f003 0303 	and.w	r3, r3, #3
 800c276:	009b      	lsls	r3, r3, #2
 800c278:	220f      	movs	r2, #15
 800c27a:	fa02 f303 	lsl.w	r3, r2, r3
 800c27e:	68fa      	ldr	r2, [r7, #12]
 800c280:	4013      	ands	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c28a:	d01f      	beq.n	800c2cc <HAL_GPIO_DeInit+0x90>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a56      	ldr	r2, [pc, #344]	; (800c3e8 <HAL_GPIO_DeInit+0x1ac>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d019      	beq.n	800c2c8 <HAL_GPIO_DeInit+0x8c>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a55      	ldr	r2, [pc, #340]	; (800c3ec <HAL_GPIO_DeInit+0x1b0>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d013      	beq.n	800c2c4 <HAL_GPIO_DeInit+0x88>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	4a54      	ldr	r2, [pc, #336]	; (800c3f0 <HAL_GPIO_DeInit+0x1b4>)
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	d00d      	beq.n	800c2c0 <HAL_GPIO_DeInit+0x84>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4a53      	ldr	r2, [pc, #332]	; (800c3f4 <HAL_GPIO_DeInit+0x1b8>)
 800c2a8:	4293      	cmp	r3, r2
 800c2aa:	d007      	beq.n	800c2bc <HAL_GPIO_DeInit+0x80>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4a52      	ldr	r2, [pc, #328]	; (800c3f8 <HAL_GPIO_DeInit+0x1bc>)
 800c2b0:	4293      	cmp	r3, r2
 800c2b2:	d101      	bne.n	800c2b8 <HAL_GPIO_DeInit+0x7c>
 800c2b4:	2305      	movs	r3, #5
 800c2b6:	e00a      	b.n	800c2ce <HAL_GPIO_DeInit+0x92>
 800c2b8:	2306      	movs	r3, #6
 800c2ba:	e008      	b.n	800c2ce <HAL_GPIO_DeInit+0x92>
 800c2bc:	2304      	movs	r3, #4
 800c2be:	e006      	b.n	800c2ce <HAL_GPIO_DeInit+0x92>
 800c2c0:	2303      	movs	r3, #3
 800c2c2:	e004      	b.n	800c2ce <HAL_GPIO_DeInit+0x92>
 800c2c4:	2302      	movs	r3, #2
 800c2c6:	e002      	b.n	800c2ce <HAL_GPIO_DeInit+0x92>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	e000      	b.n	800c2ce <HAL_GPIO_DeInit+0x92>
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	697a      	ldr	r2, [r7, #20]
 800c2d0:	f002 0203 	and.w	r2, r2, #3
 800c2d4:	0092      	lsls	r2, r2, #2
 800c2d6:	4093      	lsls	r3, r2
 800c2d8:	68fa      	ldr	r2, [r7, #12]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	d132      	bne.n	800c344 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c2de:	4b47      	ldr	r3, [pc, #284]	; (800c3fc <HAL_GPIO_DeInit+0x1c0>)
 800c2e0:	681a      	ldr	r2, [r3, #0]
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	43db      	mvns	r3, r3
 800c2e6:	4945      	ldr	r1, [pc, #276]	; (800c3fc <HAL_GPIO_DeInit+0x1c0>)
 800c2e8:	4013      	ands	r3, r2
 800c2ea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c2ec:	4b43      	ldr	r3, [pc, #268]	; (800c3fc <HAL_GPIO_DeInit+0x1c0>)
 800c2ee:	685a      	ldr	r2, [r3, #4]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	43db      	mvns	r3, r3
 800c2f4:	4941      	ldr	r1, [pc, #260]	; (800c3fc <HAL_GPIO_DeInit+0x1c0>)
 800c2f6:	4013      	ands	r3, r2
 800c2f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c2fa:	4b40      	ldr	r3, [pc, #256]	; (800c3fc <HAL_GPIO_DeInit+0x1c0>)
 800c2fc:	689a      	ldr	r2, [r3, #8]
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	43db      	mvns	r3, r3
 800c302:	493e      	ldr	r1, [pc, #248]	; (800c3fc <HAL_GPIO_DeInit+0x1c0>)
 800c304:	4013      	ands	r3, r2
 800c306:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c308:	4b3c      	ldr	r3, [pc, #240]	; (800c3fc <HAL_GPIO_DeInit+0x1c0>)
 800c30a:	68da      	ldr	r2, [r3, #12]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	43db      	mvns	r3, r3
 800c310:	493a      	ldr	r1, [pc, #232]	; (800c3fc <HAL_GPIO_DeInit+0x1c0>)
 800c312:	4013      	ands	r3, r2
 800c314:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	009b      	lsls	r3, r3, #2
 800c31e:	220f      	movs	r2, #15
 800c320:	fa02 f303 	lsl.w	r3, r2, r3
 800c324:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c326:	4a2f      	ldr	r2, [pc, #188]	; (800c3e4 <HAL_GPIO_DeInit+0x1a8>)
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	089b      	lsrs	r3, r3, #2
 800c32c:	3302      	adds	r3, #2
 800c32e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	43da      	mvns	r2, r3
 800c336:	482b      	ldr	r0, [pc, #172]	; (800c3e4 <HAL_GPIO_DeInit+0x1a8>)
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	089b      	lsrs	r3, r3, #2
 800c33c:	400a      	ands	r2, r1
 800c33e:	3302      	adds	r3, #2
 800c340:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681a      	ldr	r2, [r3, #0]
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	2103      	movs	r1, #3
 800c34e:	fa01 f303 	lsl.w	r3, r1, r3
 800c352:	431a      	orrs	r2, r3
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	08da      	lsrs	r2, r3, #3
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	3208      	adds	r2, #8
 800c360:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	f003 0307 	and.w	r3, r3, #7
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	220f      	movs	r2, #15
 800c36e:	fa02 f303 	lsl.w	r3, r2, r3
 800c372:	43db      	mvns	r3, r3
 800c374:	697a      	ldr	r2, [r7, #20]
 800c376:	08d2      	lsrs	r2, r2, #3
 800c378:	4019      	ands	r1, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	3208      	adds	r2, #8
 800c37e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68da      	ldr	r2, [r3, #12]
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	2103      	movs	r1, #3
 800c38c:	fa01 f303 	lsl.w	r3, r1, r3
 800c390:	43db      	mvns	r3, r3
 800c392:	401a      	ands	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	685a      	ldr	r2, [r3, #4]
 800c39c:	2101      	movs	r1, #1
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c3a4:	43db      	mvns	r3, r3
 800c3a6:	401a      	ands	r2, r3
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	689a      	ldr	r2, [r3, #8]
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	005b      	lsls	r3, r3, #1
 800c3b4:	2103      	movs	r1, #3
 800c3b6:	fa01 f303 	lsl.w	r3, r1, r3
 800c3ba:	43db      	mvns	r3, r3
 800c3bc:	401a      	ands	r2, r3
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c3c8:	683a      	ldr	r2, [r7, #0]
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f47f af3b 	bne.w	800c24c <HAL_GPIO_DeInit+0x10>
  }
}
 800c3d6:	bf00      	nop
 800c3d8:	371c      	adds	r7, #28
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	40010000 	.word	0x40010000
 800c3e8:	48000400 	.word	0x48000400
 800c3ec:	48000800 	.word	0x48000800
 800c3f0:	48000c00 	.word	0x48000c00
 800c3f4:	48001000 	.word	0x48001000
 800c3f8:	48001400 	.word	0x48001400
 800c3fc:	40010400 	.word	0x40010400

0800c400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c400:	b480      	push	{r7}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	460b      	mov	r3, r1
 800c40a:	807b      	strh	r3, [r7, #2]
 800c40c:	4613      	mov	r3, r2
 800c40e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c410:	787b      	ldrb	r3, [r7, #1]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d003      	beq.n	800c41e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c416:	887a      	ldrh	r2, [r7, #2]
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c41c:	e002      	b.n	800c424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c41e:	887a      	ldrh	r2, [r7, #2]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c424:	bf00      	nop
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr

0800c430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c430:	b480      	push	{r7}
 800c432:	b085      	sub	sp, #20
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d141      	bne.n	800c4c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c43e:	4b4b      	ldr	r3, [pc, #300]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c44a:	d131      	bne.n	800c4b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c44c:	4b47      	ldr	r3, [pc, #284]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c44e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c452:	4a46      	ldr	r2, [pc, #280]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c458:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c45c:	4b43      	ldr	r3, [pc, #268]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c464:	4a41      	ldr	r2, [pc, #260]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c466:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c46a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c46c:	4b40      	ldr	r3, [pc, #256]	; (800c570 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2232      	movs	r2, #50	; 0x32
 800c472:	fb02 f303 	mul.w	r3, r2, r3
 800c476:	4a3f      	ldr	r2, [pc, #252]	; (800c574 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c478:	fba2 2303 	umull	r2, r3, r2, r3
 800c47c:	0c9b      	lsrs	r3, r3, #18
 800c47e:	3301      	adds	r3, #1
 800c480:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c482:	e002      	b.n	800c48a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	3b01      	subs	r3, #1
 800c488:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c48a:	4b38      	ldr	r3, [pc, #224]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c48c:	695b      	ldr	r3, [r3, #20]
 800c48e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c496:	d102      	bne.n	800c49e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d1f2      	bne.n	800c484 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c49e:	4b33      	ldr	r3, [pc, #204]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4a0:	695b      	ldr	r3, [r3, #20]
 800c4a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4aa:	d158      	bne.n	800c55e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c4ac:	2303      	movs	r3, #3
 800c4ae:	e057      	b.n	800c560 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c4b0:	4b2e      	ldr	r3, [pc, #184]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4b6:	4a2d      	ldr	r2, [pc, #180]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c4c0:	e04d      	b.n	800c55e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c4c8:	d141      	bne.n	800c54e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c4ca:	4b28      	ldr	r3, [pc, #160]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c4d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4d6:	d131      	bne.n	800c53c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c4d8:	4b24      	ldr	r3, [pc, #144]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4de:	4a23      	ldr	r2, [pc, #140]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c4e8:	4b20      	ldr	r3, [pc, #128]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c4f0:	4a1e      	ldr	r2, [pc, #120]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c4f8:	4b1d      	ldr	r3, [pc, #116]	; (800c570 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2232      	movs	r2, #50	; 0x32
 800c4fe:	fb02 f303 	mul.w	r3, r2, r3
 800c502:	4a1c      	ldr	r2, [pc, #112]	; (800c574 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c504:	fba2 2303 	umull	r2, r3, r2, r3
 800c508:	0c9b      	lsrs	r3, r3, #18
 800c50a:	3301      	adds	r3, #1
 800c50c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c50e:	e002      	b.n	800c516 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	3b01      	subs	r3, #1
 800c514:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c516:	4b15      	ldr	r3, [pc, #84]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c51e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c522:	d102      	bne.n	800c52a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1f2      	bne.n	800c510 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c52a:	4b10      	ldr	r3, [pc, #64]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c532:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c536:	d112      	bne.n	800c55e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c538:	2303      	movs	r3, #3
 800c53a:	e011      	b.n	800c560 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c53c:	4b0b      	ldr	r3, [pc, #44]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c53e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c542:	4a0a      	ldr	r2, [pc, #40]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c54c:	e007      	b.n	800c55e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c54e:	4b07      	ldr	r3, [pc, #28]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c556:	4a05      	ldr	r2, [pc, #20]	; (800c56c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c558:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c55c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c55e:	2300      	movs	r3, #0
}
 800c560:	4618      	mov	r0, r3
 800c562:	3714      	adds	r7, #20
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	40007000 	.word	0x40007000
 800c570:	20000c34 	.word	0x20000c34
 800c574:	431bde83 	.word	0x431bde83

0800c578 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e308      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	2b00      	cmp	r3, #0
 800c594:	d075      	beq.n	800c682 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c596:	4ba3      	ldr	r3, [pc, #652]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f003 030c 	and.w	r3, r3, #12
 800c59e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c5a0:	4ba0      	ldr	r3, [pc, #640]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c5a2:	68db      	ldr	r3, [r3, #12]
 800c5a4:	f003 0303 	and.w	r3, r3, #3
 800c5a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	2b0c      	cmp	r3, #12
 800c5ae:	d102      	bne.n	800c5b6 <HAL_RCC_OscConfig+0x3e>
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	2b03      	cmp	r3, #3
 800c5b4:	d002      	beq.n	800c5bc <HAL_RCC_OscConfig+0x44>
 800c5b6:	69bb      	ldr	r3, [r7, #24]
 800c5b8:	2b08      	cmp	r3, #8
 800c5ba:	d10b      	bne.n	800c5d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5bc:	4b99      	ldr	r3, [pc, #612]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d05b      	beq.n	800c680 <HAL_RCC_OscConfig+0x108>
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d157      	bne.n	800c680 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e2e3      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	685b      	ldr	r3, [r3, #4]
 800c5d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5dc:	d106      	bne.n	800c5ec <HAL_RCC_OscConfig+0x74>
 800c5de:	4b91      	ldr	r3, [pc, #580]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	4a90      	ldr	r2, [pc, #576]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c5e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c5e8:	6013      	str	r3, [r2, #0]
 800c5ea:	e01d      	b.n	800c628 <HAL_RCC_OscConfig+0xb0>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5f4:	d10c      	bne.n	800c610 <HAL_RCC_OscConfig+0x98>
 800c5f6:	4b8b      	ldr	r3, [pc, #556]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a8a      	ldr	r2, [pc, #552]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c5fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	4b88      	ldr	r3, [pc, #544]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4a87      	ldr	r2, [pc, #540]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c60c:	6013      	str	r3, [r2, #0]
 800c60e:	e00b      	b.n	800c628 <HAL_RCC_OscConfig+0xb0>
 800c610:	4b84      	ldr	r3, [pc, #528]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	4a83      	ldr	r2, [pc, #524]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c61a:	6013      	str	r3, [r2, #0]
 800c61c:	4b81      	ldr	r3, [pc, #516]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	4a80      	ldr	r2, [pc, #512]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d013      	beq.n	800c658 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c630:	f7fc fde6 	bl	8009200 <HAL_GetTick>
 800c634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c636:	e008      	b.n	800c64a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c638:	f7fc fde2 	bl	8009200 <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	2b64      	cmp	r3, #100	; 0x64
 800c644:	d901      	bls.n	800c64a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c646:	2303      	movs	r3, #3
 800c648:	e2a8      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c64a:	4b76      	ldr	r3, [pc, #472]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c652:	2b00      	cmp	r3, #0
 800c654:	d0f0      	beq.n	800c638 <HAL_RCC_OscConfig+0xc0>
 800c656:	e014      	b.n	800c682 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c658:	f7fc fdd2 	bl	8009200 <HAL_GetTick>
 800c65c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c65e:	e008      	b.n	800c672 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c660:	f7fc fdce 	bl	8009200 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	2b64      	cmp	r3, #100	; 0x64
 800c66c:	d901      	bls.n	800c672 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	e294      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c672:	4b6c      	ldr	r3, [pc, #432]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d1f0      	bne.n	800c660 <HAL_RCC_OscConfig+0xe8>
 800c67e:	e000      	b.n	800c682 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	f003 0302 	and.w	r3, r3, #2
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d075      	beq.n	800c77a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c68e:	4b65      	ldr	r3, [pc, #404]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c690:	689b      	ldr	r3, [r3, #8]
 800c692:	f003 030c 	and.w	r3, r3, #12
 800c696:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c698:	4b62      	ldr	r3, [pc, #392]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	f003 0303 	and.w	r3, r3, #3
 800c6a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c6a2:	69bb      	ldr	r3, [r7, #24]
 800c6a4:	2b0c      	cmp	r3, #12
 800c6a6:	d102      	bne.n	800c6ae <HAL_RCC_OscConfig+0x136>
 800c6a8:	697b      	ldr	r3, [r7, #20]
 800c6aa:	2b02      	cmp	r3, #2
 800c6ac:	d002      	beq.n	800c6b4 <HAL_RCC_OscConfig+0x13c>
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	2b04      	cmp	r3, #4
 800c6b2:	d11f      	bne.n	800c6f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c6b4:	4b5b      	ldr	r3, [pc, #364]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d005      	beq.n	800c6cc <HAL_RCC_OscConfig+0x154>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d101      	bne.n	800c6cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	e267      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c6cc:	4b55      	ldr	r3, [pc, #340]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c6ce:	685b      	ldr	r3, [r3, #4]
 800c6d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	061b      	lsls	r3, r3, #24
 800c6da:	4952      	ldr	r1, [pc, #328]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c6dc:	4313      	orrs	r3, r2
 800c6de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c6e0:	4b51      	ldr	r3, [pc, #324]	; (800c828 <HAL_RCC_OscConfig+0x2b0>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f7fc fd3f 	bl	8009168 <HAL_InitTick>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d043      	beq.n	800c778 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e253      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	68db      	ldr	r3, [r3, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d023      	beq.n	800c744 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c6fc:	4b49      	ldr	r3, [pc, #292]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4a48      	ldr	r2, [pc, #288]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c706:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c708:	f7fc fd7a 	bl	8009200 <HAL_GetTick>
 800c70c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c70e:	e008      	b.n	800c722 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c710:	f7fc fd76 	bl	8009200 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d901      	bls.n	800c722 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e23c      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c722:	4b40      	ldr	r3, [pc, #256]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d0f0      	beq.n	800c710 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c72e:	4b3d      	ldr	r3, [pc, #244]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	061b      	lsls	r3, r3, #24
 800c73c:	4939      	ldr	r1, [pc, #228]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c73e:	4313      	orrs	r3, r2
 800c740:	604b      	str	r3, [r1, #4]
 800c742:	e01a      	b.n	800c77a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c744:	4b37      	ldr	r3, [pc, #220]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a36      	ldr	r2, [pc, #216]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c74a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c74e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c750:	f7fc fd56 	bl	8009200 <HAL_GetTick>
 800c754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c756:	e008      	b.n	800c76a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c758:	f7fc fd52 	bl	8009200 <HAL_GetTick>
 800c75c:	4602      	mov	r2, r0
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	2b02      	cmp	r3, #2
 800c764:	d901      	bls.n	800c76a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c766:	2303      	movs	r3, #3
 800c768:	e218      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c76a:	4b2e      	ldr	r3, [pc, #184]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1f0      	bne.n	800c758 <HAL_RCC_OscConfig+0x1e0>
 800c776:	e000      	b.n	800c77a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c778:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f003 0308 	and.w	r3, r3, #8
 800c782:	2b00      	cmp	r3, #0
 800c784:	d03c      	beq.n	800c800 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	695b      	ldr	r3, [r3, #20]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d01c      	beq.n	800c7c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c78e:	4b25      	ldr	r3, [pc, #148]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c794:	4a23      	ldr	r2, [pc, #140]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c796:	f043 0301 	orr.w	r3, r3, #1
 800c79a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c79e:	f7fc fd2f 	bl	8009200 <HAL_GetTick>
 800c7a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c7a4:	e008      	b.n	800c7b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7a6:	f7fc fd2b 	bl	8009200 <HAL_GetTick>
 800c7aa:	4602      	mov	r2, r0
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	1ad3      	subs	r3, r2, r3
 800c7b0:	2b02      	cmp	r3, #2
 800c7b2:	d901      	bls.n	800c7b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e1f1      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c7b8:	4b1a      	ldr	r3, [pc, #104]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c7ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7be:	f003 0302 	and.w	r3, r3, #2
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0ef      	beq.n	800c7a6 <HAL_RCC_OscConfig+0x22e>
 800c7c6:	e01b      	b.n	800c800 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c7c8:	4b16      	ldr	r3, [pc, #88]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c7ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7ce:	4a15      	ldr	r2, [pc, #84]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c7d0:	f023 0301 	bic.w	r3, r3, #1
 800c7d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7d8:	f7fc fd12 	bl	8009200 <HAL_GetTick>
 800c7dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c7de:	e008      	b.n	800c7f2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7e0:	f7fc fd0e 	bl	8009200 <HAL_GetTick>
 800c7e4:	4602      	mov	r2, r0
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d901      	bls.n	800c7f2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e1d4      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c7f2:	4b0c      	ldr	r3, [pc, #48]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c7f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7f8:	f003 0302 	and.w	r3, r3, #2
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1ef      	bne.n	800c7e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f003 0304 	and.w	r3, r3, #4
 800c808:	2b00      	cmp	r3, #0
 800c80a:	f000 80ab 	beq.w	800c964 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c80e:	2300      	movs	r3, #0
 800c810:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c812:	4b04      	ldr	r3, [pc, #16]	; (800c824 <HAL_RCC_OscConfig+0x2ac>)
 800c814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d106      	bne.n	800c82c <HAL_RCC_OscConfig+0x2b4>
 800c81e:	2301      	movs	r3, #1
 800c820:	e005      	b.n	800c82e <HAL_RCC_OscConfig+0x2b6>
 800c822:	bf00      	nop
 800c824:	40021000 	.word	0x40021000
 800c828:	20000c38 	.word	0x20000c38
 800c82c:	2300      	movs	r3, #0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00d      	beq.n	800c84e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c832:	4baf      	ldr	r3, [pc, #700]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c836:	4aae      	ldr	r2, [pc, #696]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c83c:	6593      	str	r3, [r2, #88]	; 0x58
 800c83e:	4bac      	ldr	r3, [pc, #688]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c846:	60fb      	str	r3, [r7, #12]
 800c848:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c84a:	2301      	movs	r3, #1
 800c84c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c84e:	4ba9      	ldr	r3, [pc, #676]	; (800caf4 <HAL_RCC_OscConfig+0x57c>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c856:	2b00      	cmp	r3, #0
 800c858:	d118      	bne.n	800c88c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c85a:	4ba6      	ldr	r3, [pc, #664]	; (800caf4 <HAL_RCC_OscConfig+0x57c>)
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	4aa5      	ldr	r2, [pc, #660]	; (800caf4 <HAL_RCC_OscConfig+0x57c>)
 800c860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c866:	f7fc fccb 	bl	8009200 <HAL_GetTick>
 800c86a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c86c:	e008      	b.n	800c880 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c86e:	f7fc fcc7 	bl	8009200 <HAL_GetTick>
 800c872:	4602      	mov	r2, r0
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	1ad3      	subs	r3, r2, r3
 800c878:	2b02      	cmp	r3, #2
 800c87a:	d901      	bls.n	800c880 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c87c:	2303      	movs	r3, #3
 800c87e:	e18d      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c880:	4b9c      	ldr	r3, [pc, #624]	; (800caf4 <HAL_RCC_OscConfig+0x57c>)
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d0f0      	beq.n	800c86e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d108      	bne.n	800c8a6 <HAL_RCC_OscConfig+0x32e>
 800c894:	4b96      	ldr	r3, [pc, #600]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c89a:	4a95      	ldr	r2, [pc, #596]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c89c:	f043 0301 	orr.w	r3, r3, #1
 800c8a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c8a4:	e024      	b.n	800c8f0 <HAL_RCC_OscConfig+0x378>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	2b05      	cmp	r3, #5
 800c8ac:	d110      	bne.n	800c8d0 <HAL_RCC_OscConfig+0x358>
 800c8ae:	4b90      	ldr	r3, [pc, #576]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c8b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8b4:	4a8e      	ldr	r2, [pc, #568]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c8b6:	f043 0304 	orr.w	r3, r3, #4
 800c8ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c8be:	4b8c      	ldr	r3, [pc, #560]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8c4:	4a8a      	ldr	r2, [pc, #552]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c8c6:	f043 0301 	orr.w	r3, r3, #1
 800c8ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c8ce:	e00f      	b.n	800c8f0 <HAL_RCC_OscConfig+0x378>
 800c8d0:	4b87      	ldr	r3, [pc, #540]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8d6:	4a86      	ldr	r2, [pc, #536]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c8d8:	f023 0301 	bic.w	r3, r3, #1
 800c8dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c8e0:	4b83      	ldr	r3, [pc, #524]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c8e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8e6:	4a82      	ldr	r2, [pc, #520]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c8e8:	f023 0304 	bic.w	r3, r3, #4
 800c8ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	689b      	ldr	r3, [r3, #8]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d016      	beq.n	800c926 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c8f8:	f7fc fc82 	bl	8009200 <HAL_GetTick>
 800c8fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c8fe:	e00a      	b.n	800c916 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c900:	f7fc fc7e 	bl	8009200 <HAL_GetTick>
 800c904:	4602      	mov	r2, r0
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	1ad3      	subs	r3, r2, r3
 800c90a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c90e:	4293      	cmp	r3, r2
 800c910:	d901      	bls.n	800c916 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c912:	2303      	movs	r3, #3
 800c914:	e142      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c916:	4b76      	ldr	r3, [pc, #472]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c91c:	f003 0302 	and.w	r3, r3, #2
 800c920:	2b00      	cmp	r3, #0
 800c922:	d0ed      	beq.n	800c900 <HAL_RCC_OscConfig+0x388>
 800c924:	e015      	b.n	800c952 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c926:	f7fc fc6b 	bl	8009200 <HAL_GetTick>
 800c92a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c92c:	e00a      	b.n	800c944 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c92e:	f7fc fc67 	bl	8009200 <HAL_GetTick>
 800c932:	4602      	mov	r2, r0
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	1ad3      	subs	r3, r2, r3
 800c938:	f241 3288 	movw	r2, #5000	; 0x1388
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d901      	bls.n	800c944 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c940:	2303      	movs	r3, #3
 800c942:	e12b      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c944:	4b6a      	ldr	r3, [pc, #424]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c94a:	f003 0302 	and.w	r3, r3, #2
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d1ed      	bne.n	800c92e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c952:	7ffb      	ldrb	r3, [r7, #31]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d105      	bne.n	800c964 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c958:	4b65      	ldr	r3, [pc, #404]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c95a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c95c:	4a64      	ldr	r2, [pc, #400]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c95e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c962:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 0320 	and.w	r3, r3, #32
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d03c      	beq.n	800c9ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	699b      	ldr	r3, [r3, #24]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d01c      	beq.n	800c9b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c978:	4b5d      	ldr	r3, [pc, #372]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c97a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c97e:	4a5c      	ldr	r2, [pc, #368]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c980:	f043 0301 	orr.w	r3, r3, #1
 800c984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c988:	f7fc fc3a 	bl	8009200 <HAL_GetTick>
 800c98c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c98e:	e008      	b.n	800c9a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c990:	f7fc fc36 	bl	8009200 <HAL_GetTick>
 800c994:	4602      	mov	r2, r0
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	2b02      	cmp	r3, #2
 800c99c:	d901      	bls.n	800c9a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	e0fc      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c9a2:	4b53      	ldr	r3, [pc, #332]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c9a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9a8:	f003 0302 	and.w	r3, r3, #2
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d0ef      	beq.n	800c990 <HAL_RCC_OscConfig+0x418>
 800c9b0:	e01b      	b.n	800c9ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c9b2:	4b4f      	ldr	r3, [pc, #316]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c9b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9b8:	4a4d      	ldr	r2, [pc, #308]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c9ba:	f023 0301 	bic.w	r3, r3, #1
 800c9be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9c2:	f7fc fc1d 	bl	8009200 <HAL_GetTick>
 800c9c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c9c8:	e008      	b.n	800c9dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9ca:	f7fc fc19 	bl	8009200 <HAL_GetTick>
 800c9ce:	4602      	mov	r2, r0
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	1ad3      	subs	r3, r2, r3
 800c9d4:	2b02      	cmp	r3, #2
 800c9d6:	d901      	bls.n	800c9dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c9d8:	2303      	movs	r3, #3
 800c9da:	e0df      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c9dc:	4b44      	ldr	r3, [pc, #272]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c9de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9e2:	f003 0302 	and.w	r3, r3, #2
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d1ef      	bne.n	800c9ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	f000 80d3 	beq.w	800cb9a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c9f4:	4b3e      	ldr	r3, [pc, #248]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	f003 030c 	and.w	r3, r3, #12
 800c9fc:	2b0c      	cmp	r3, #12
 800c9fe:	f000 808d 	beq.w	800cb1c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	69db      	ldr	r3, [r3, #28]
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	d15a      	bne.n	800cac0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca0a:	4b39      	ldr	r3, [pc, #228]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	4a38      	ldr	r2, [pc, #224]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca16:	f7fc fbf3 	bl	8009200 <HAL_GetTick>
 800ca1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca1c:	e008      	b.n	800ca30 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca1e:	f7fc fbef 	bl	8009200 <HAL_GetTick>
 800ca22:	4602      	mov	r2, r0
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	1ad3      	subs	r3, r2, r3
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d901      	bls.n	800ca30 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e0b5      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca30:	4b2f      	ldr	r3, [pc, #188]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1f0      	bne.n	800ca1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ca3c:	4b2c      	ldr	r3, [pc, #176]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca3e:	68da      	ldr	r2, [r3, #12]
 800ca40:	4b2d      	ldr	r3, [pc, #180]	; (800caf8 <HAL_RCC_OscConfig+0x580>)
 800ca42:	4013      	ands	r3, r2
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	6a11      	ldr	r1, [r2, #32]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca4c:	3a01      	subs	r2, #1
 800ca4e:	0112      	lsls	r2, r2, #4
 800ca50:	4311      	orrs	r1, r2
 800ca52:	687a      	ldr	r2, [r7, #4]
 800ca54:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ca56:	0212      	lsls	r2, r2, #8
 800ca58:	4311      	orrs	r1, r2
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ca5e:	0852      	lsrs	r2, r2, #1
 800ca60:	3a01      	subs	r2, #1
 800ca62:	0552      	lsls	r2, r2, #21
 800ca64:	4311      	orrs	r1, r2
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ca6a:	0852      	lsrs	r2, r2, #1
 800ca6c:	3a01      	subs	r2, #1
 800ca6e:	0652      	lsls	r2, r2, #25
 800ca70:	4311      	orrs	r1, r2
 800ca72:	687a      	ldr	r2, [r7, #4]
 800ca74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800ca76:	06d2      	lsls	r2, r2, #27
 800ca78:	430a      	orrs	r2, r1
 800ca7a:	491d      	ldr	r1, [pc, #116]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca7c:	4313      	orrs	r3, r2
 800ca7e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ca80:	4b1b      	ldr	r3, [pc, #108]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4a1a      	ldr	r2, [pc, #104]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca8a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ca8c:	4b18      	ldr	r3, [pc, #96]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca8e:	68db      	ldr	r3, [r3, #12]
 800ca90:	4a17      	ldr	r2, [pc, #92]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800ca92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ca96:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca98:	f7fc fbb2 	bl	8009200 <HAL_GetTick>
 800ca9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ca9e:	e008      	b.n	800cab2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800caa0:	f7fc fbae 	bl	8009200 <HAL_GetTick>
 800caa4:	4602      	mov	r2, r0
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	2b02      	cmp	r3, #2
 800caac:	d901      	bls.n	800cab2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e074      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cab2:	4b0f      	ldr	r3, [pc, #60]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d0f0      	beq.n	800caa0 <HAL_RCC_OscConfig+0x528>
 800cabe:	e06c      	b.n	800cb9a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cac0:	4b0b      	ldr	r3, [pc, #44]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	4a0a      	ldr	r2, [pc, #40]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800cac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800caca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cacc:	4b08      	ldr	r3, [pc, #32]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	4a07      	ldr	r2, [pc, #28]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800cad2:	f023 0303 	bic.w	r3, r3, #3
 800cad6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cad8:	4b05      	ldr	r3, [pc, #20]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800cada:	68db      	ldr	r3, [r3, #12]
 800cadc:	4a04      	ldr	r2, [pc, #16]	; (800caf0 <HAL_RCC_OscConfig+0x578>)
 800cade:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cae6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cae8:	f7fc fb8a 	bl	8009200 <HAL_GetTick>
 800caec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800caee:	e00e      	b.n	800cb0e <HAL_RCC_OscConfig+0x596>
 800caf0:	40021000 	.word	0x40021000
 800caf4:	40007000 	.word	0x40007000
 800caf8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cafc:	f7fc fb80 	bl	8009200 <HAL_GetTick>
 800cb00:	4602      	mov	r2, r0
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d901      	bls.n	800cb0e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e046      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb0e:	4b25      	ldr	r3, [pc, #148]	; (800cba4 <HAL_RCC_OscConfig+0x62c>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1f0      	bne.n	800cafc <HAL_RCC_OscConfig+0x584>
 800cb1a:	e03e      	b.n	800cb9a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	69db      	ldr	r3, [r3, #28]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d101      	bne.n	800cb28 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800cb24:	2301      	movs	r3, #1
 800cb26:	e039      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cb28:	4b1e      	ldr	r3, [pc, #120]	; (800cba4 <HAL_RCC_OscConfig+0x62c>)
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	f003 0203 	and.w	r2, r3, #3
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a1b      	ldr	r3, [r3, #32]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d12c      	bne.n	800cb96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb46:	3b01      	subs	r3, #1
 800cb48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d123      	bne.n	800cb96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb58:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cb5a:	429a      	cmp	r2, r3
 800cb5c:	d11b      	bne.n	800cb96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb68:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d113      	bne.n	800cb96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cb6e:	697b      	ldr	r3, [r7, #20]
 800cb70:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb78:	085b      	lsrs	r3, r3, #1
 800cb7a:	3b01      	subs	r3, #1
 800cb7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d109      	bne.n	800cb96 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb8c:	085b      	lsrs	r3, r3, #1
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d001      	beq.n	800cb9a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800cb96:	2301      	movs	r3, #1
 800cb98:	e000      	b.n	800cb9c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800cb9a:	2300      	movs	r3, #0
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3720      	adds	r7, #32
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	40021000 	.word	0x40021000

0800cba8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b086      	sub	sp, #24
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
 800cbb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d101      	bne.n	800cbc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	e11e      	b.n	800cdfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cbc0:	4b91      	ldr	r3, [pc, #580]	; (800ce08 <HAL_RCC_ClockConfig+0x260>)
 800cbc2:	681b      	ldr	r3, [r3, #0]
 800cbc4:	f003 030f 	and.w	r3, r3, #15
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d910      	bls.n	800cbf0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cbce:	4b8e      	ldr	r3, [pc, #568]	; (800ce08 <HAL_RCC_ClockConfig+0x260>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	f023 020f 	bic.w	r2, r3, #15
 800cbd6:	498c      	ldr	r1, [pc, #560]	; (800ce08 <HAL_RCC_ClockConfig+0x260>)
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cbde:	4b8a      	ldr	r3, [pc, #552]	; (800ce08 <HAL_RCC_ClockConfig+0x260>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	f003 030f 	and.w	r3, r3, #15
 800cbe6:	683a      	ldr	r2, [r7, #0]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d001      	beq.n	800cbf0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	e106      	b.n	800cdfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	f003 0301 	and.w	r3, r3, #1
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d073      	beq.n	800cce4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	2b03      	cmp	r3, #3
 800cc02:	d129      	bne.n	800cc58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc04:	4b81      	ldr	r3, [pc, #516]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d101      	bne.n	800cc14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800cc10:	2301      	movs	r3, #1
 800cc12:	e0f4      	b.n	800cdfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cc14:	f000 f972 	bl	800cefc <RCC_GetSysClockFreqFromPLLSource>
 800cc18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	4a7c      	ldr	r2, [pc, #496]	; (800ce10 <HAL_RCC_ClockConfig+0x268>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d93f      	bls.n	800cca2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cc22:	4b7a      	ldr	r3, [pc, #488]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cc24:	689b      	ldr	r3, [r3, #8]
 800cc26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d009      	beq.n	800cc42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d033      	beq.n	800cca2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d12f      	bne.n	800cca2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cc42:	4b72      	ldr	r3, [pc, #456]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cc44:	689b      	ldr	r3, [r3, #8]
 800cc46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc4a:	4a70      	ldr	r2, [pc, #448]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cc4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cc52:	2380      	movs	r3, #128	; 0x80
 800cc54:	617b      	str	r3, [r7, #20]
 800cc56:	e024      	b.n	800cca2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d107      	bne.n	800cc70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cc60:	4b6a      	ldr	r3, [pc, #424]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d109      	bne.n	800cc80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cc6c:	2301      	movs	r3, #1
 800cc6e:	e0c6      	b.n	800cdfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800cc70:	4b66      	ldr	r3, [pc, #408]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d101      	bne.n	800cc80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	e0be      	b.n	800cdfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800cc80:	f000 f8ce 	bl	800ce20 <HAL_RCC_GetSysClockFreq>
 800cc84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	4a61      	ldr	r2, [pc, #388]	; (800ce10 <HAL_RCC_ClockConfig+0x268>)
 800cc8a:	4293      	cmp	r3, r2
 800cc8c:	d909      	bls.n	800cca2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cc8e:	4b5f      	ldr	r3, [pc, #380]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cc90:	689b      	ldr	r3, [r3, #8]
 800cc92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc96:	4a5d      	ldr	r2, [pc, #372]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cc98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800cc9e:	2380      	movs	r3, #128	; 0x80
 800cca0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cca2:	4b5a      	ldr	r3, [pc, #360]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	f023 0203 	bic.w	r2, r3, #3
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	685b      	ldr	r3, [r3, #4]
 800ccae:	4957      	ldr	r1, [pc, #348]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800ccb0:	4313      	orrs	r3, r2
 800ccb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccb4:	f7fc faa4 	bl	8009200 <HAL_GetTick>
 800ccb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccba:	e00a      	b.n	800ccd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ccbc:	f7fc faa0 	bl	8009200 <HAL_GetTick>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	1ad3      	subs	r3, r2, r3
 800ccc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccca:	4293      	cmp	r3, r2
 800cccc:	d901      	bls.n	800ccd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ccce:	2303      	movs	r3, #3
 800ccd0:	e095      	b.n	800cdfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ccd2:	4b4e      	ldr	r3, [pc, #312]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800ccd4:	689b      	ldr	r3, [r3, #8]
 800ccd6:	f003 020c 	and.w	r2, r3, #12
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d1eb      	bne.n	800ccbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	f003 0302 	and.w	r3, r3, #2
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d023      	beq.n	800cd38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f003 0304 	and.w	r3, r3, #4
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d005      	beq.n	800cd08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ccfc:	4b43      	ldr	r3, [pc, #268]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	4a42      	ldr	r2, [pc, #264]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cd02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cd06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f003 0308 	and.w	r3, r3, #8
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d007      	beq.n	800cd24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cd14:	4b3d      	ldr	r3, [pc, #244]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd1c:	4a3b      	ldr	r2, [pc, #236]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cd1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cd22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd24:	4b39      	ldr	r3, [pc, #228]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	4936      	ldr	r1, [pc, #216]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cd32:	4313      	orrs	r3, r2
 800cd34:	608b      	str	r3, [r1, #8]
 800cd36:	e008      	b.n	800cd4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	2b80      	cmp	r3, #128	; 0x80
 800cd3c:	d105      	bne.n	800cd4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cd3e:	4b33      	ldr	r3, [pc, #204]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cd40:	689b      	ldr	r3, [r3, #8]
 800cd42:	4a32      	ldr	r2, [pc, #200]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cd44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cd4a:	4b2f      	ldr	r3, [pc, #188]	; (800ce08 <HAL_RCC_ClockConfig+0x260>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	f003 030f 	and.w	r3, r3, #15
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d21d      	bcs.n	800cd94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cd58:	4b2b      	ldr	r3, [pc, #172]	; (800ce08 <HAL_RCC_ClockConfig+0x260>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f023 020f 	bic.w	r2, r3, #15
 800cd60:	4929      	ldr	r1, [pc, #164]	; (800ce08 <HAL_RCC_ClockConfig+0x260>)
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cd68:	f7fc fa4a 	bl	8009200 <HAL_GetTick>
 800cd6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd6e:	e00a      	b.n	800cd86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd70:	f7fc fa46 	bl	8009200 <HAL_GetTick>
 800cd74:	4602      	mov	r2, r0
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	1ad3      	subs	r3, r2, r3
 800cd7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d901      	bls.n	800cd86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cd82:	2303      	movs	r3, #3
 800cd84:	e03b      	b.n	800cdfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cd86:	4b20      	ldr	r3, [pc, #128]	; (800ce08 <HAL_RCC_ClockConfig+0x260>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	f003 030f 	and.w	r3, r3, #15
 800cd8e:	683a      	ldr	r2, [r7, #0]
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d1ed      	bne.n	800cd70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f003 0304 	and.w	r3, r3, #4
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d008      	beq.n	800cdb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cda0:	4b1a      	ldr	r3, [pc, #104]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	4917      	ldr	r1, [pc, #92]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0308 	and.w	r3, r3, #8
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d009      	beq.n	800cdd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cdbe:	4b13      	ldr	r3, [pc, #76]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	691b      	ldr	r3, [r3, #16]
 800cdca:	00db      	lsls	r3, r3, #3
 800cdcc:	490f      	ldr	r1, [pc, #60]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cdce:	4313      	orrs	r3, r2
 800cdd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cdd2:	f000 f825 	bl	800ce20 <HAL_RCC_GetSysClockFreq>
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	4b0c      	ldr	r3, [pc, #48]	; (800ce0c <HAL_RCC_ClockConfig+0x264>)
 800cdda:	689b      	ldr	r3, [r3, #8]
 800cddc:	091b      	lsrs	r3, r3, #4
 800cdde:	f003 030f 	and.w	r3, r3, #15
 800cde2:	4a0c      	ldr	r2, [pc, #48]	; (800ce14 <HAL_RCC_ClockConfig+0x26c>)
 800cde4:	5cd3      	ldrb	r3, [r2, r3]
 800cde6:	f003 031f 	and.w	r3, r3, #31
 800cdea:	fa21 f303 	lsr.w	r3, r1, r3
 800cdee:	4a0a      	ldr	r2, [pc, #40]	; (800ce18 <HAL_RCC_ClockConfig+0x270>)
 800cdf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cdf2:	4b0a      	ldr	r3, [pc, #40]	; (800ce1c <HAL_RCC_ClockConfig+0x274>)
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fc f9b6 	bl	8009168 <HAL_InitTick>
 800cdfc:	4603      	mov	r3, r0
}
 800cdfe:	4618      	mov	r0, r3
 800ce00:	3718      	adds	r7, #24
 800ce02:	46bd      	mov	sp, r7
 800ce04:	bd80      	pop	{r7, pc}
 800ce06:	bf00      	nop
 800ce08:	40022000 	.word	0x40022000
 800ce0c:	40021000 	.word	0x40021000
 800ce10:	04c4b400 	.word	0x04c4b400
 800ce14:	08016524 	.word	0x08016524
 800ce18:	20000c34 	.word	0x20000c34
 800ce1c:	20000c38 	.word	0x20000c38

0800ce20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ce26:	4b2c      	ldr	r3, [pc, #176]	; (800ced8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	f003 030c 	and.w	r3, r3, #12
 800ce2e:	2b04      	cmp	r3, #4
 800ce30:	d102      	bne.n	800ce38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce32:	4b2a      	ldr	r3, [pc, #168]	; (800cedc <HAL_RCC_GetSysClockFreq+0xbc>)
 800ce34:	613b      	str	r3, [r7, #16]
 800ce36:	e047      	b.n	800cec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ce38:	4b27      	ldr	r3, [pc, #156]	; (800ced8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	f003 030c 	and.w	r3, r3, #12
 800ce40:	2b08      	cmp	r3, #8
 800ce42:	d102      	bne.n	800ce4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ce44:	4b26      	ldr	r3, [pc, #152]	; (800cee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ce46:	613b      	str	r3, [r7, #16]
 800ce48:	e03e      	b.n	800cec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ce4a:	4b23      	ldr	r3, [pc, #140]	; (800ced8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	f003 030c 	and.w	r3, r3, #12
 800ce52:	2b0c      	cmp	r3, #12
 800ce54:	d136      	bne.n	800cec4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce56:	4b20      	ldr	r3, [pc, #128]	; (800ced8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	f003 0303 	and.w	r3, r3, #3
 800ce5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ce60:	4b1d      	ldr	r3, [pc, #116]	; (800ced8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	091b      	lsrs	r3, r3, #4
 800ce66:	f003 030f 	and.w	r3, r3, #15
 800ce6a:	3301      	adds	r3, #1
 800ce6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b03      	cmp	r3, #3
 800ce72:	d10c      	bne.n	800ce8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce74:	4a1a      	ldr	r2, [pc, #104]	; (800cee0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce7c:	4a16      	ldr	r2, [pc, #88]	; (800ced8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce7e:	68d2      	ldr	r2, [r2, #12]
 800ce80:	0a12      	lsrs	r2, r2, #8
 800ce82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ce86:	fb02 f303 	mul.w	r3, r2, r3
 800ce8a:	617b      	str	r3, [r7, #20]
      break;
 800ce8c:	e00c      	b.n	800cea8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ce8e:	4a13      	ldr	r2, [pc, #76]	; (800cedc <HAL_RCC_GetSysClockFreq+0xbc>)
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce96:	4a10      	ldr	r2, [pc, #64]	; (800ced8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce98:	68d2      	ldr	r2, [r2, #12]
 800ce9a:	0a12      	lsrs	r2, r2, #8
 800ce9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cea0:	fb02 f303 	mul.w	r3, r2, r3
 800cea4:	617b      	str	r3, [r7, #20]
      break;
 800cea6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cea8:	4b0b      	ldr	r3, [pc, #44]	; (800ced8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	0e5b      	lsrs	r3, r3, #25
 800ceae:	f003 0303 	and.w	r3, r3, #3
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ceb8:	697a      	ldr	r2, [r7, #20]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec0:	613b      	str	r3, [r7, #16]
 800cec2:	e001      	b.n	800cec8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cec4:	2300      	movs	r3, #0
 800cec6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cec8:	693b      	ldr	r3, [r7, #16]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	371c      	adds	r7, #28
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	40021000 	.word	0x40021000
 800cedc:	00f42400 	.word	0x00f42400
 800cee0:	007a1200 	.word	0x007a1200

0800cee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cee4:	b480      	push	{r7}
 800cee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cee8:	4b03      	ldr	r3, [pc, #12]	; (800cef8 <HAL_RCC_GetHCLKFreq+0x14>)
 800ceea:	681b      	ldr	r3, [r3, #0]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	20000c34 	.word	0x20000c34

0800cefc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b087      	sub	sp, #28
 800cf00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cf02:	4b1e      	ldr	r3, [pc, #120]	; (800cf7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf04:	68db      	ldr	r3, [r3, #12]
 800cf06:	f003 0303 	and.w	r3, r3, #3
 800cf0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cf0c:	4b1b      	ldr	r3, [pc, #108]	; (800cf7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf0e:	68db      	ldr	r3, [r3, #12]
 800cf10:	091b      	lsrs	r3, r3, #4
 800cf12:	f003 030f 	and.w	r3, r3, #15
 800cf16:	3301      	adds	r3, #1
 800cf18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	2b03      	cmp	r3, #3
 800cf1e:	d10c      	bne.n	800cf3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf20:	4a17      	ldr	r2, [pc, #92]	; (800cf80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf28:	4a14      	ldr	r2, [pc, #80]	; (800cf7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf2a:	68d2      	ldr	r2, [r2, #12]
 800cf2c:	0a12      	lsrs	r2, r2, #8
 800cf2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf32:	fb02 f303 	mul.w	r3, r2, r3
 800cf36:	617b      	str	r3, [r7, #20]
    break;
 800cf38:	e00c      	b.n	800cf54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf3a:	4a12      	ldr	r2, [pc, #72]	; (800cf84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf42:	4a0e      	ldr	r2, [pc, #56]	; (800cf7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf44:	68d2      	ldr	r2, [r2, #12]
 800cf46:	0a12      	lsrs	r2, r2, #8
 800cf48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf4c:	fb02 f303 	mul.w	r3, r2, r3
 800cf50:	617b      	str	r3, [r7, #20]
    break;
 800cf52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cf54:	4b09      	ldr	r3, [pc, #36]	; (800cf7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	0e5b      	lsrs	r3, r3, #25
 800cf5a:	f003 0303 	and.w	r3, r3, #3
 800cf5e:	3301      	adds	r3, #1
 800cf60:	005b      	lsls	r3, r3, #1
 800cf62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800cf64:	697a      	ldr	r2, [r7, #20]
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cf6e:	687b      	ldr	r3, [r7, #4]
}
 800cf70:	4618      	mov	r0, r3
 800cf72:	371c      	adds	r7, #28
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr
 800cf7c:	40021000 	.word	0x40021000
 800cf80:	007a1200 	.word	0x007a1200
 800cf84:	00f42400 	.word	0x00f42400

0800cf88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b086      	sub	sp, #24
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cf90:	2300      	movs	r3, #0
 800cf92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cf94:	2300      	movs	r3, #0
 800cf96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f000 8098 	beq.w	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cfaa:	4b43      	ldr	r3, [pc, #268]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d10d      	bne.n	800cfd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cfb6:	4b40      	ldr	r3, [pc, #256]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfba:	4a3f      	ldr	r2, [pc, #252]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cfc0:	6593      	str	r3, [r2, #88]	; 0x58
 800cfc2:	4b3d      	ldr	r3, [pc, #244]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cfc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfca:	60bb      	str	r3, [r7, #8]
 800cfcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cfd2:	4b3a      	ldr	r3, [pc, #232]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a39      	ldr	r2, [pc, #228]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cfd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cfdc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cfde:	f7fc f90f 	bl	8009200 <HAL_GetTick>
 800cfe2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cfe4:	e009      	b.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfe6:	f7fc f90b 	bl	8009200 <HAL_GetTick>
 800cfea:	4602      	mov	r2, r0
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	1ad3      	subs	r3, r2, r3
 800cff0:	2b02      	cmp	r3, #2
 800cff2:	d902      	bls.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cff4:	2303      	movs	r3, #3
 800cff6:	74fb      	strb	r3, [r7, #19]
        break;
 800cff8:	e005      	b.n	800d006 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cffa:	4b30      	ldr	r3, [pc, #192]	; (800d0bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d002:	2b00      	cmp	r3, #0
 800d004:	d0ef      	beq.n	800cfe6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d006:	7cfb      	ldrb	r3, [r7, #19]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d159      	bne.n	800d0c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d00c:	4b2a      	ldr	r3, [pc, #168]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d00e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d016:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d01e      	beq.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	429a      	cmp	r2, r3
 800d026:	d019      	beq.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d028:	4b23      	ldr	r3, [pc, #140]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d02a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d02e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d032:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d034:	4b20      	ldr	r3, [pc, #128]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d03a:	4a1f      	ldr	r2, [pc, #124]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d03c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d044:	4b1c      	ldr	r3, [pc, #112]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d04a:	4a1b      	ldr	r2, [pc, #108]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d04c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d054:	4a18      	ldr	r2, [pc, #96]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	f003 0301 	and.w	r3, r3, #1
 800d062:	2b00      	cmp	r3, #0
 800d064:	d016      	beq.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d066:	f7fc f8cb 	bl	8009200 <HAL_GetTick>
 800d06a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d06c:	e00b      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d06e:	f7fc f8c7 	bl	8009200 <HAL_GetTick>
 800d072:	4602      	mov	r2, r0
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	1ad3      	subs	r3, r2, r3
 800d078:	f241 3288 	movw	r2, #5000	; 0x1388
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d902      	bls.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d080:	2303      	movs	r3, #3
 800d082:	74fb      	strb	r3, [r7, #19]
            break;
 800d084:	e006      	b.n	800d094 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d086:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d08c:	f003 0302 	and.w	r3, r3, #2
 800d090:	2b00      	cmp	r3, #0
 800d092:	d0ec      	beq.n	800d06e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d094:	7cfb      	ldrb	r3, [r7, #19]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d10b      	bne.n	800d0b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d09a:	4b07      	ldr	r3, [pc, #28]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d09c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0a8:	4903      	ldr	r1, [pc, #12]	; (800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d0aa:	4313      	orrs	r3, r2
 800d0ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d0b0:	e008      	b.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d0b2:	7cfb      	ldrb	r3, [r7, #19]
 800d0b4:	74bb      	strb	r3, [r7, #18]
 800d0b6:	e005      	b.n	800d0c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d0b8:	40021000 	.word	0x40021000
 800d0bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d0c0:	7cfb      	ldrb	r3, [r7, #19]
 800d0c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d0c4:	7c7b      	ldrb	r3, [r7, #17]
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d105      	bne.n	800d0d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d0ca:	4baf      	ldr	r3, [pc, #700]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ce:	4aae      	ldr	r2, [pc, #696]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	f003 0301 	and.w	r3, r3, #1
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00a      	beq.n	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d0e2:	4ba9      	ldr	r3, [pc, #676]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0e8:	f023 0203 	bic.w	r2, r3, #3
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	49a5      	ldr	r1, [pc, #660]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f003 0302 	and.w	r3, r3, #2
 800d100:	2b00      	cmp	r3, #0
 800d102:	d00a      	beq.n	800d11a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d104:	4ba0      	ldr	r3, [pc, #640]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d10a:	f023 020c 	bic.w	r2, r3, #12
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	689b      	ldr	r3, [r3, #8]
 800d112:	499d      	ldr	r1, [pc, #628]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d114:	4313      	orrs	r3, r2
 800d116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	f003 0304 	and.w	r3, r3, #4
 800d122:	2b00      	cmp	r3, #0
 800d124:	d00a      	beq.n	800d13c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d126:	4b98      	ldr	r3, [pc, #608]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d12c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	68db      	ldr	r3, [r3, #12]
 800d134:	4994      	ldr	r1, [pc, #592]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d136:	4313      	orrs	r3, r2
 800d138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	f003 0308 	and.w	r3, r3, #8
 800d144:	2b00      	cmp	r3, #0
 800d146:	d00a      	beq.n	800d15e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d148:	4b8f      	ldr	r3, [pc, #572]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d14a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d14e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	691b      	ldr	r3, [r3, #16]
 800d156:	498c      	ldr	r1, [pc, #560]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d158:	4313      	orrs	r3, r2
 800d15a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f003 0310 	and.w	r3, r3, #16
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00a      	beq.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d16a:	4b87      	ldr	r3, [pc, #540]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	695b      	ldr	r3, [r3, #20]
 800d178:	4983      	ldr	r1, [pc, #524]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d17a:	4313      	orrs	r3, r2
 800d17c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 0320 	and.w	r3, r3, #32
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d00a      	beq.n	800d1a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d18c:	4b7e      	ldr	r3, [pc, #504]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d18e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d192:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	497b      	ldr	r1, [pc, #492]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d19c:	4313      	orrs	r3, r2
 800d19e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d00a      	beq.n	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d1ae:	4b76      	ldr	r3, [pc, #472]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	69db      	ldr	r3, [r3, #28]
 800d1bc:	4972      	ldr	r1, [pc, #456]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1be:	4313      	orrs	r3, r2
 800d1c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d00a      	beq.n	800d1e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d1d0:	4b6d      	ldr	r3, [pc, #436]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6a1b      	ldr	r3, [r3, #32]
 800d1de:	496a      	ldr	r1, [pc, #424]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00a      	beq.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d1f2:	4b65      	ldr	r3, [pc, #404]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d200:	4961      	ldr	r1, [pc, #388]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d202:	4313      	orrs	r3, r2
 800d204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00a      	beq.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d214:	4b5c      	ldr	r3, [pc, #368]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d216:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d21a:	f023 0203 	bic.w	r2, r3, #3
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d222:	4959      	ldr	r1, [pc, #356]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d224:	4313      	orrs	r3, r2
 800d226:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00a      	beq.n	800d24c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d236:	4b54      	ldr	r3, [pc, #336]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d23c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d244:	4950      	ldr	r1, [pc, #320]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d246:	4313      	orrs	r3, r2
 800d248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d254:	2b00      	cmp	r3, #0
 800d256:	d015      	beq.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d258:	4b4b      	ldr	r3, [pc, #300]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d25a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d25e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d266:	4948      	ldr	r1, [pc, #288]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d268:	4313      	orrs	r3, r2
 800d26a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d276:	d105      	bne.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d278:	4b43      	ldr	r3, [pc, #268]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d27a:	68db      	ldr	r3, [r3, #12]
 800d27c:	4a42      	ldr	r2, [pc, #264]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d27e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d282:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d015      	beq.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d290:	4b3d      	ldr	r3, [pc, #244]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d296:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d29e:	493a      	ldr	r1, [pc, #232]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2ae:	d105      	bne.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2b0:	4b35      	ldr	r3, [pc, #212]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2b2:	68db      	ldr	r3, [r3, #12]
 800d2b4:	4a34      	ldr	r2, [pc, #208]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d015      	beq.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d2c8:	4b2f      	ldr	r3, [pc, #188]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d6:	492c      	ldr	r1, [pc, #176]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d2e6:	d105      	bne.n	800d2f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2e8:	4b27      	ldr	r3, [pc, #156]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2ea:	68db      	ldr	r3, [r3, #12]
 800d2ec:	4a26      	ldr	r2, [pc, #152]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d015      	beq.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d300:	4b21      	ldr	r3, [pc, #132]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d306:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d30e:	491e      	ldr	r1, [pc, #120]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d310:	4313      	orrs	r3, r2
 800d312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d31a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d31e:	d105      	bne.n	800d32c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d320:	4b19      	ldr	r3, [pc, #100]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d322:	68db      	ldr	r3, [r3, #12]
 800d324:	4a18      	ldr	r2, [pc, #96]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d326:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d32a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d334:	2b00      	cmp	r3, #0
 800d336:	d015      	beq.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d338:	4b13      	ldr	r3, [pc, #76]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d33a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d33e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d346:	4910      	ldr	r1, [pc, #64]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d348:	4313      	orrs	r3, r2
 800d34a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d356:	d105      	bne.n	800d364 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d358:	4b0b      	ldr	r3, [pc, #44]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d35a:	68db      	ldr	r3, [r3, #12]
 800d35c:	4a0a      	ldr	r2, [pc, #40]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d35e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d362:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d018      	beq.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d370:	4b05      	ldr	r3, [pc, #20]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d376:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d37e:	4902      	ldr	r1, [pc, #8]	; (800d388 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d380:	4313      	orrs	r3, r2
 800d382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d386:	e001      	b.n	800d38c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d388:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d390:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d394:	d105      	bne.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d396:	4b21      	ldr	r3, [pc, #132]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d398:	68db      	ldr	r3, [r3, #12]
 800d39a:	4a20      	ldr	r2, [pc, #128]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d39c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3a0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d015      	beq.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d3ae:	4b1b      	ldr	r3, [pc, #108]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3bc:	4917      	ldr	r1, [pc, #92]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3cc:	d105      	bne.n	800d3da <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d3ce:	4b13      	ldr	r3, [pc, #76]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	4a12      	ldr	r2, [pc, #72]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3d8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d015      	beq.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d3e6:	4b0d      	ldr	r3, [pc, #52]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d3ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d3f4:	4909      	ldr	r1, [pc, #36]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3f6:	4313      	orrs	r3, r2
 800d3f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d400:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d404:	d105      	bne.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d406:	4b05      	ldr	r3, [pc, #20]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d408:	68db      	ldr	r3, [r3, #12]
 800d40a:	4a04      	ldr	r2, [pc, #16]	; (800d41c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d40c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d410:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d412:	7cbb      	ldrb	r3, [r7, #18]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3718      	adds	r7, #24
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	40021000 	.word	0x40021000

0800d420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d101      	bne.n	800d432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e084      	b.n	800d53c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d43e:	b2db      	uxtb	r3, r3
 800d440:	2b00      	cmp	r3, #0
 800d442:	d106      	bne.n	800d452 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2200      	movs	r2, #0
 800d448:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7fa ffc3 	bl	80083d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2202      	movs	r2, #2
 800d456:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681a      	ldr	r2, [r3, #0]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d468:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68db      	ldr	r3, [r3, #12]
 800d46e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d472:	d902      	bls.n	800d47a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d474:	2300      	movs	r3, #0
 800d476:	60fb      	str	r3, [r7, #12]
 800d478:	e002      	b.n	800d480 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d47a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d47e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d488:	d007      	beq.n	800d49a <HAL_SPI_Init+0x7a>
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d492:	d002      	beq.n	800d49a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2200      	movs	r2, #0
 800d498:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d10b      	bne.n	800d4ba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	68db      	ldr	r3, [r3, #12]
 800d4a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d4aa:	d903      	bls.n	800d4b4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2202      	movs	r2, #2
 800d4b0:	631a      	str	r2, [r3, #48]	; 0x30
 800d4b2:	e002      	b.n	800d4ba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2201      	movs	r2, #1
 800d4b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	685a      	ldr	r2, [r3, #4]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	689b      	ldr	r3, [r3, #8]
 800d4c2:	431a      	orrs	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	691b      	ldr	r3, [r3, #16]
 800d4c8:	431a      	orrs	r2, r3
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	695b      	ldr	r3, [r3, #20]
 800d4ce:	431a      	orrs	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	699b      	ldr	r3, [r3, #24]
 800d4d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d4d8:	431a      	orrs	r2, r3
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	69db      	ldr	r3, [r3, #28]
 800d4de:	431a      	orrs	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a1b      	ldr	r3, [r3, #32]
 800d4e4:	ea42 0103 	orr.w	r1, r2, r3
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	430a      	orrs	r2, r1
 800d4f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	699b      	ldr	r3, [r3, #24]
 800d4f8:	0c1b      	lsrs	r3, r3, #16
 800d4fa:	f003 0204 	and.w	r2, r3, #4
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d502:	431a      	orrs	r2, r3
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d508:	431a      	orrs	r2, r3
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	68db      	ldr	r3, [r3, #12]
 800d50e:	ea42 0103 	orr.w	r1, r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	68fa      	ldr	r2, [r7, #12]
 800d518:	430a      	orrs	r2, r1
 800d51a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	69da      	ldr	r2, [r3, #28]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d52a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	2200      	movs	r2, #0
 800d530:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2201      	movs	r2, #1
 800d536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b082      	sub	sp, #8
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d101      	bne.n	800d556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	e049      	b.n	800d5ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d106      	bne.n	800d570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f7fb fc96 	bl	8008e9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2202      	movs	r2, #2
 800d574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	681a      	ldr	r2, [r3, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	3304      	adds	r3, #4
 800d580:	4619      	mov	r1, r3
 800d582:	4610      	mov	r0, r2
 800d584:	f001 fb9e 	bl	800ecc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2201      	movs	r2, #1
 800d5a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3708      	adds	r7, #8
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
	...

0800d5f4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d5f4:	b480      	push	{r7}
 800d5f6:	b085      	sub	sp, #20
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d602:	b2db      	uxtb	r3, r3
 800d604:	2b01      	cmp	r3, #1
 800d606:	d001      	beq.n	800d60c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d608:	2301      	movs	r3, #1
 800d60a:	e019      	b.n	800d640 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	2202      	movs	r2, #2
 800d610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	689a      	ldr	r2, [r3, #8]
 800d61a:	4b0c      	ldr	r3, [pc, #48]	; (800d64c <HAL_TIM_Base_Start+0x58>)
 800d61c:	4013      	ands	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	2b06      	cmp	r3, #6
 800d624:	d00b      	beq.n	800d63e <HAL_TIM_Base_Start+0x4a>
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d62c:	d007      	beq.n	800d63e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	681a      	ldr	r2, [r3, #0]
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	f042 0201 	orr.w	r2, r2, #1
 800d63c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3714      	adds	r7, #20
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr
 800d64c:	00010007 	.word	0x00010007

0800d650 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d650:	b480      	push	{r7}
 800d652:	b083      	sub	sp, #12
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	6a1a      	ldr	r2, [r3, #32]
 800d65e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d662:	4013      	ands	r3, r2
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10f      	bne.n	800d688 <HAL_TIM_Base_Stop+0x38>
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6a1a      	ldr	r2, [r3, #32]
 800d66e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d672:	4013      	ands	r3, r2
 800d674:	2b00      	cmp	r3, #0
 800d676:	d107      	bne.n	800d688 <HAL_TIM_Base_Stop+0x38>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f022 0201 	bic.w	r2, r2, #1
 800d686:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	2201      	movs	r2, #1
 800d68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d690:	2300      	movs	r3, #0
}
 800d692:	4618      	mov	r0, r3
 800d694:	370c      	adds	r7, #12
 800d696:	46bd      	mov	sp, r7
 800d698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69c:	4770      	bx	lr
	...

0800d6a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	b085      	sub	sp, #20
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	2b01      	cmp	r3, #1
 800d6b2:	d001      	beq.n	800d6b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e021      	b.n	800d6fc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	2202      	movs	r2, #2
 800d6bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	68da      	ldr	r2, [r3, #12]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f042 0201 	orr.w	r2, r2, #1
 800d6ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	689a      	ldr	r2, [r3, #8]
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <HAL_TIM_Base_Start_IT+0x68>)
 800d6d8:	4013      	ands	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2b06      	cmp	r3, #6
 800d6e0:	d00b      	beq.n	800d6fa <HAL_TIM_Base_Start_IT+0x5a>
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6e8:	d007      	beq.n	800d6fa <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	681a      	ldr	r2, [r3, #0]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	f042 0201 	orr.w	r2, r2, #1
 800d6f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d6fa:	2300      	movs	r3, #0
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3714      	adds	r7, #20
 800d700:	46bd      	mov	sp, r7
 800d702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d706:	4770      	bx	lr
 800d708:	00010007 	.word	0x00010007

0800d70c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b083      	sub	sp, #12
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	68da      	ldr	r2, [r3, #12]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	f022 0201 	bic.w	r2, r2, #1
 800d722:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	6a1a      	ldr	r2, [r3, #32]
 800d72a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d72e:	4013      	ands	r3, r2
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10f      	bne.n	800d754 <HAL_TIM_Base_Stop_IT+0x48>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	6a1a      	ldr	r2, [r3, #32]
 800d73a:	f244 4344 	movw	r3, #17476	; 0x4444
 800d73e:	4013      	ands	r3, r2
 800d740:	2b00      	cmp	r3, #0
 800d742:	d107      	bne.n	800d754 <HAL_TIM_Base_Stop_IT+0x48>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f022 0201 	bic.w	r2, r2, #1
 800d752:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2201      	movs	r2, #1
 800d758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	370c      	adds	r7, #12
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b082      	sub	sp, #8
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	e049      	b.n	800d810 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	d106      	bne.n	800d796 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 f841 	bl	800d818 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2202      	movs	r2, #2
 800d79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681a      	ldr	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	3304      	adds	r3, #4
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	4610      	mov	r0, r2
 800d7aa:	f001 fa8b 	bl	800ecc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2201      	movs	r2, #1
 800d7ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2201      	movs	r2, #1
 800d7ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2201      	movs	r2, #1
 800d7f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d820:	bf00      	nop
 800d822:	370c      	adds	r7, #12
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr

0800d82c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d109      	bne.n	800d850 <HAL_TIM_PWM_Start+0x24>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b01      	cmp	r3, #1
 800d846:	bf14      	ite	ne
 800d848:	2301      	movne	r3, #1
 800d84a:	2300      	moveq	r3, #0
 800d84c:	b2db      	uxtb	r3, r3
 800d84e:	e03c      	b.n	800d8ca <HAL_TIM_PWM_Start+0x9e>
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	2b04      	cmp	r3, #4
 800d854:	d109      	bne.n	800d86a <HAL_TIM_PWM_Start+0x3e>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d85c:	b2db      	uxtb	r3, r3
 800d85e:	2b01      	cmp	r3, #1
 800d860:	bf14      	ite	ne
 800d862:	2301      	movne	r3, #1
 800d864:	2300      	moveq	r3, #0
 800d866:	b2db      	uxtb	r3, r3
 800d868:	e02f      	b.n	800d8ca <HAL_TIM_PWM_Start+0x9e>
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	2b08      	cmp	r3, #8
 800d86e:	d109      	bne.n	800d884 <HAL_TIM_PWM_Start+0x58>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d876:	b2db      	uxtb	r3, r3
 800d878:	2b01      	cmp	r3, #1
 800d87a:	bf14      	ite	ne
 800d87c:	2301      	movne	r3, #1
 800d87e:	2300      	moveq	r3, #0
 800d880:	b2db      	uxtb	r3, r3
 800d882:	e022      	b.n	800d8ca <HAL_TIM_PWM_Start+0x9e>
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b0c      	cmp	r3, #12
 800d888:	d109      	bne.n	800d89e <HAL_TIM_PWM_Start+0x72>
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d890:	b2db      	uxtb	r3, r3
 800d892:	2b01      	cmp	r3, #1
 800d894:	bf14      	ite	ne
 800d896:	2301      	movne	r3, #1
 800d898:	2300      	moveq	r3, #0
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	e015      	b.n	800d8ca <HAL_TIM_PWM_Start+0x9e>
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	2b10      	cmp	r3, #16
 800d8a2:	d109      	bne.n	800d8b8 <HAL_TIM_PWM_Start+0x8c>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8aa:	b2db      	uxtb	r3, r3
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	bf14      	ite	ne
 800d8b0:	2301      	movne	r3, #1
 800d8b2:	2300      	moveq	r3, #0
 800d8b4:	b2db      	uxtb	r3, r3
 800d8b6:	e008      	b.n	800d8ca <HAL_TIM_PWM_Start+0x9e>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	bf14      	ite	ne
 800d8c4:	2301      	movne	r3, #1
 800d8c6:	2300      	moveq	r3, #0
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d001      	beq.n	800d8d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d8ce:	2301      	movs	r3, #1
 800d8d0:	e073      	b.n	800d9ba <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d104      	bne.n	800d8e2 <HAL_TIM_PWM_Start+0xb6>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2202      	movs	r2, #2
 800d8dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d8e0:	e023      	b.n	800d92a <HAL_TIM_PWM_Start+0xfe>
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	2b04      	cmp	r3, #4
 800d8e6:	d104      	bne.n	800d8f2 <HAL_TIM_PWM_Start+0xc6>
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2202      	movs	r2, #2
 800d8ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d8f0:	e01b      	b.n	800d92a <HAL_TIM_PWM_Start+0xfe>
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	2b08      	cmp	r3, #8
 800d8f6:	d104      	bne.n	800d902 <HAL_TIM_PWM_Start+0xd6>
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2202      	movs	r2, #2
 800d8fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d900:	e013      	b.n	800d92a <HAL_TIM_PWM_Start+0xfe>
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b0c      	cmp	r3, #12
 800d906:	d104      	bne.n	800d912 <HAL_TIM_PWM_Start+0xe6>
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2202      	movs	r2, #2
 800d90c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d910:	e00b      	b.n	800d92a <HAL_TIM_PWM_Start+0xfe>
 800d912:	683b      	ldr	r3, [r7, #0]
 800d914:	2b10      	cmp	r3, #16
 800d916:	d104      	bne.n	800d922 <HAL_TIM_PWM_Start+0xf6>
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2202      	movs	r2, #2
 800d91c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d920:	e003      	b.n	800d92a <HAL_TIM_PWM_Start+0xfe>
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2202      	movs	r2, #2
 800d926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2201      	movs	r2, #1
 800d930:	6839      	ldr	r1, [r7, #0]
 800d932:	4618      	mov	r0, r3
 800d934:	f002 f81a 	bl	800f96c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	4a21      	ldr	r2, [pc, #132]	; (800d9c4 <HAL_TIM_PWM_Start+0x198>)
 800d93e:	4293      	cmp	r3, r2
 800d940:	d018      	beq.n	800d974 <HAL_TIM_PWM_Start+0x148>
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a20      	ldr	r2, [pc, #128]	; (800d9c8 <HAL_TIM_PWM_Start+0x19c>)
 800d948:	4293      	cmp	r3, r2
 800d94a:	d013      	beq.n	800d974 <HAL_TIM_PWM_Start+0x148>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	4a1e      	ldr	r2, [pc, #120]	; (800d9cc <HAL_TIM_PWM_Start+0x1a0>)
 800d952:	4293      	cmp	r3, r2
 800d954:	d00e      	beq.n	800d974 <HAL_TIM_PWM_Start+0x148>
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	4a1d      	ldr	r2, [pc, #116]	; (800d9d0 <HAL_TIM_PWM_Start+0x1a4>)
 800d95c:	4293      	cmp	r3, r2
 800d95e:	d009      	beq.n	800d974 <HAL_TIM_PWM_Start+0x148>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4a1b      	ldr	r2, [pc, #108]	; (800d9d4 <HAL_TIM_PWM_Start+0x1a8>)
 800d966:	4293      	cmp	r3, r2
 800d968:	d004      	beq.n	800d974 <HAL_TIM_PWM_Start+0x148>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	4a1a      	ldr	r2, [pc, #104]	; (800d9d8 <HAL_TIM_PWM_Start+0x1ac>)
 800d970:	4293      	cmp	r3, r2
 800d972:	d101      	bne.n	800d978 <HAL_TIM_PWM_Start+0x14c>
 800d974:	2301      	movs	r3, #1
 800d976:	e000      	b.n	800d97a <HAL_TIM_PWM_Start+0x14e>
 800d978:	2300      	movs	r3, #0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d007      	beq.n	800d98e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d98c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	689a      	ldr	r2, [r3, #8]
 800d994:	4b11      	ldr	r3, [pc, #68]	; (800d9dc <HAL_TIM_PWM_Start+0x1b0>)
 800d996:	4013      	ands	r3, r2
 800d998:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2b06      	cmp	r3, #6
 800d99e:	d00b      	beq.n	800d9b8 <HAL_TIM_PWM_Start+0x18c>
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9a6:	d007      	beq.n	800d9b8 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	681a      	ldr	r2, [r3, #0]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	f042 0201 	orr.w	r2, r2, #1
 800d9b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	40012c00 	.word	0x40012c00
 800d9c8:	40013400 	.word	0x40013400
 800d9cc:	40014000 	.word	0x40014000
 800d9d0:	40014400 	.word	0x40014400
 800d9d4:	40014800 	.word	0x40014800
 800d9d8:	40015000 	.word	0x40015000
 800d9dc:	00010007 	.word	0x00010007

0800d9e0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	6839      	ldr	r1, [r7, #0]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f001 ffba 	bl	800f96c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	4a40      	ldr	r2, [pc, #256]	; (800db00 <HAL_TIM_PWM_Stop+0x120>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d018      	beq.n	800da34 <HAL_TIM_PWM_Stop+0x54>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	4a3f      	ldr	r2, [pc, #252]	; (800db04 <HAL_TIM_PWM_Stop+0x124>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d013      	beq.n	800da34 <HAL_TIM_PWM_Stop+0x54>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	4a3d      	ldr	r2, [pc, #244]	; (800db08 <HAL_TIM_PWM_Stop+0x128>)
 800da12:	4293      	cmp	r3, r2
 800da14:	d00e      	beq.n	800da34 <HAL_TIM_PWM_Stop+0x54>
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4a3c      	ldr	r2, [pc, #240]	; (800db0c <HAL_TIM_PWM_Stop+0x12c>)
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d009      	beq.n	800da34 <HAL_TIM_PWM_Stop+0x54>
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a3a      	ldr	r2, [pc, #232]	; (800db10 <HAL_TIM_PWM_Stop+0x130>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d004      	beq.n	800da34 <HAL_TIM_PWM_Stop+0x54>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	4a39      	ldr	r2, [pc, #228]	; (800db14 <HAL_TIM_PWM_Stop+0x134>)
 800da30:	4293      	cmp	r3, r2
 800da32:	d101      	bne.n	800da38 <HAL_TIM_PWM_Stop+0x58>
 800da34:	2301      	movs	r3, #1
 800da36:	e000      	b.n	800da3a <HAL_TIM_PWM_Stop+0x5a>
 800da38:	2300      	movs	r3, #0
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d017      	beq.n	800da6e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	6a1a      	ldr	r2, [r3, #32]
 800da44:	f241 1311 	movw	r3, #4369	; 0x1111
 800da48:	4013      	ands	r3, r2
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10f      	bne.n	800da6e <HAL_TIM_PWM_Stop+0x8e>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	6a1a      	ldr	r2, [r3, #32]
 800da54:	f244 4344 	movw	r3, #17476	; 0x4444
 800da58:	4013      	ands	r3, r2
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d107      	bne.n	800da6e <HAL_TIM_PWM_Stop+0x8e>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800da6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	6a1a      	ldr	r2, [r3, #32]
 800da74:	f241 1311 	movw	r3, #4369	; 0x1111
 800da78:	4013      	ands	r3, r2
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d10f      	bne.n	800da9e <HAL_TIM_PWM_Stop+0xbe>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6a1a      	ldr	r2, [r3, #32]
 800da84:	f244 4344 	movw	r3, #17476	; 0x4444
 800da88:	4013      	ands	r3, r2
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d107      	bne.n	800da9e <HAL_TIM_PWM_Stop+0xbe>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681a      	ldr	r2, [r3, #0]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f022 0201 	bic.w	r2, r2, #1
 800da9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d104      	bne.n	800daae <HAL_TIM_PWM_Stop+0xce>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	2201      	movs	r2, #1
 800daa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800daac:	e023      	b.n	800daf6 <HAL_TIM_PWM_Stop+0x116>
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b04      	cmp	r3, #4
 800dab2:	d104      	bne.n	800dabe <HAL_TIM_PWM_Stop+0xde>
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	2201      	movs	r2, #1
 800dab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dabc:	e01b      	b.n	800daf6 <HAL_TIM_PWM_Stop+0x116>
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	2b08      	cmp	r3, #8
 800dac2:	d104      	bne.n	800dace <HAL_TIM_PWM_Stop+0xee>
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dacc:	e013      	b.n	800daf6 <HAL_TIM_PWM_Stop+0x116>
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	2b0c      	cmp	r3, #12
 800dad2:	d104      	bne.n	800dade <HAL_TIM_PWM_Stop+0xfe>
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	2201      	movs	r2, #1
 800dad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dadc:	e00b      	b.n	800daf6 <HAL_TIM_PWM_Stop+0x116>
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	2b10      	cmp	r3, #16
 800dae2:	d104      	bne.n	800daee <HAL_TIM_PWM_Stop+0x10e>
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2201      	movs	r2, #1
 800dae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800daec:	e003      	b.n	800daf6 <HAL_TIM_PWM_Stop+0x116>
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800daf6:	2300      	movs	r3, #0
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3708      	adds	r7, #8
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}
 800db00:	40012c00 	.word	0x40012c00
 800db04:	40013400 	.word	0x40013400
 800db08:	40014000 	.word	0x40014000
 800db0c:	40014400 	.word	0x40014400
 800db10:	40014800 	.word	0x40014800
 800db14:	40015000 	.word	0x40015000

0800db18 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b082      	sub	sp, #8
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d101      	bne.n	800db2a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800db26:	2301      	movs	r3, #1
 800db28:	e049      	b.n	800dbbe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db30:	b2db      	uxtb	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d106      	bne.n	800db44 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f000 f841 	bl	800dbc6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2202      	movs	r2, #2
 800db48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681a      	ldr	r2, [r3, #0]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	3304      	adds	r3, #4
 800db54:	4619      	mov	r1, r3
 800db56:	4610      	mov	r0, r2
 800db58:	f001 f8b4 	bl	800ecc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	2201      	movs	r2, #1
 800db60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2201      	movs	r2, #1
 800db68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2201      	movs	r2, #1
 800db70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2201      	movs	r2, #1
 800db78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	2201      	movs	r2, #1
 800db80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2201      	movs	r2, #1
 800db90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	2201      	movs	r2, #1
 800db98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2201      	movs	r2, #1
 800dba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3708      	adds	r7, #8
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800dbc6:	b480      	push	{r7}
 800dbc8:	b083      	sub	sp, #12
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800dbce:	bf00      	nop
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr
	...

0800dbdc <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b086      	sub	sp, #24
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	60f8      	str	r0, [r7, #12]
 800dbe4:	60b9      	str	r1, [r7, #8]
 800dbe6:	607a      	str	r2, [r7, #4]
 800dbe8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d104      	bne.n	800dbfa <HAL_TIM_IC_Start_DMA+0x1e>
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	e023      	b.n	800dc42 <HAL_TIM_IC_Start_DMA+0x66>
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	2b04      	cmp	r3, #4
 800dbfe:	d104      	bne.n	800dc0a <HAL_TIM_IC_Start_DMA+0x2e>
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	e01b      	b.n	800dc42 <HAL_TIM_IC_Start_DMA+0x66>
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	2b08      	cmp	r3, #8
 800dc0e:	d104      	bne.n	800dc1a <HAL_TIM_IC_Start_DMA+0x3e>
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc16:	b2db      	uxtb	r3, r3
 800dc18:	e013      	b.n	800dc42 <HAL_TIM_IC_Start_DMA+0x66>
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	2b0c      	cmp	r3, #12
 800dc1e:	d104      	bne.n	800dc2a <HAL_TIM_IC_Start_DMA+0x4e>
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	e00b      	b.n	800dc42 <HAL_TIM_IC_Start_DMA+0x66>
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	2b10      	cmp	r3, #16
 800dc2e:	d104      	bne.n	800dc3a <HAL_TIM_IC_Start_DMA+0x5e>
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc36:	b2db      	uxtb	r3, r3
 800dc38:	e003      	b.n	800dc42 <HAL_TIM_IC_Start_DMA+0x66>
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc40:	b2db      	uxtb	r3, r3
 800dc42:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d104      	bne.n	800dc54 <HAL_TIM_IC_Start_DMA+0x78>
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc50:	b2db      	uxtb	r3, r3
 800dc52:	e013      	b.n	800dc7c <HAL_TIM_IC_Start_DMA+0xa0>
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	2b04      	cmp	r3, #4
 800dc58:	d104      	bne.n	800dc64 <HAL_TIM_IC_Start_DMA+0x88>
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	e00b      	b.n	800dc7c <HAL_TIM_IC_Start_DMA+0xa0>
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	2b08      	cmp	r3, #8
 800dc68:	d104      	bne.n	800dc74 <HAL_TIM_IC_Start_DMA+0x98>
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	e003      	b.n	800dc7c <HAL_TIM_IC_Start_DMA+0xa0>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800dc7e:	7dfb      	ldrb	r3, [r7, #23]
 800dc80:	2b02      	cmp	r3, #2
 800dc82:	d002      	beq.n	800dc8a <HAL_TIM_IC_Start_DMA+0xae>
   || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800dc84:	7dbb      	ldrb	r3, [r7, #22]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d101      	bne.n	800dc8e <HAL_TIM_IC_Start_DMA+0xb2>
  {
    return HAL_BUSY;
 800dc8a:	2302      	movs	r3, #2
 800dc8c:	e128      	b.n	800dee0 <HAL_TIM_IC_Start_DMA+0x304>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800dc8e:	7dfb      	ldrb	r3, [r7, #23]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d153      	bne.n	800dd3c <HAL_TIM_IC_Start_DMA+0x160>
        && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800dc94:	7dbb      	ldrb	r3, [r7, #22]
 800dc96:	2b01      	cmp	r3, #1
 800dc98:	d150      	bne.n	800dd3c <HAL_TIM_IC_Start_DMA+0x160>
  {
    if ((pData == NULL) && (Length > 0U))
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d104      	bne.n	800dcaa <HAL_TIM_IC_Start_DMA+0xce>
 800dca0:	887b      	ldrh	r3, [r7, #2]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d001      	beq.n	800dcaa <HAL_TIM_IC_Start_DMA+0xce>
    {
      return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e11a      	b.n	800dee0 <HAL_TIM_IC_Start_DMA+0x304>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d104      	bne.n	800dcba <HAL_TIM_IC_Start_DMA+0xde>
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2202      	movs	r2, #2
 800dcb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dcb8:	e023      	b.n	800dd02 <HAL_TIM_IC_Start_DMA+0x126>
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	2b04      	cmp	r3, #4
 800dcbe:	d104      	bne.n	800dcca <HAL_TIM_IC_Start_DMA+0xee>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2202      	movs	r2, #2
 800dcc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dcc8:	e01b      	b.n	800dd02 <HAL_TIM_IC_Start_DMA+0x126>
 800dcca:	68bb      	ldr	r3, [r7, #8]
 800dccc:	2b08      	cmp	r3, #8
 800dcce:	d104      	bne.n	800dcda <HAL_TIM_IC_Start_DMA+0xfe>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2202      	movs	r2, #2
 800dcd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dcd8:	e013      	b.n	800dd02 <HAL_TIM_IC_Start_DMA+0x126>
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	2b0c      	cmp	r3, #12
 800dcde:	d104      	bne.n	800dcea <HAL_TIM_IC_Start_DMA+0x10e>
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	2202      	movs	r2, #2
 800dce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dce8:	e00b      	b.n	800dd02 <HAL_TIM_IC_Start_DMA+0x126>
 800dcea:	68bb      	ldr	r3, [r7, #8]
 800dcec:	2b10      	cmp	r3, #16
 800dcee:	d104      	bne.n	800dcfa <HAL_TIM_IC_Start_DMA+0x11e>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2202      	movs	r2, #2
 800dcf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dcf8:	e003      	b.n	800dd02 <HAL_TIM_IC_Start_DMA+0x126>
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2202      	movs	r2, #2
 800dcfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d104      	bne.n	800dd12 <HAL_TIM_IC_Start_DMA+0x136>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800dd10:	e016      	b.n	800dd40 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2b04      	cmp	r3, #4
 800dd16:	d104      	bne.n	800dd22 <HAL_TIM_IC_Start_DMA+0x146>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800dd20:	e00e      	b.n	800dd40 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	2b08      	cmp	r3, #8
 800dd26:	d104      	bne.n	800dd32 <HAL_TIM_IC_Start_DMA+0x156>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800dd30:	e006      	b.n	800dd40 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	2202      	movs	r2, #2
 800dd36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800dd3a:	e001      	b.n	800dd40 <HAL_TIM_IC_Start_DMA+0x164>
    }
  }
  else
  {
    return HAL_ERROR;
 800dd3c:	2301      	movs	r3, #1
 800dd3e:	e0cf      	b.n	800dee0 <HAL_TIM_IC_Start_DMA+0x304>
  }

  switch (Channel)
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	2b0c      	cmp	r3, #12
 800dd44:	f200 80ae 	bhi.w	800dea4 <HAL_TIM_IC_Start_DMA+0x2c8>
 800dd48:	a201      	add	r2, pc, #4	; (adr r2, 800dd50 <HAL_TIM_IC_Start_DMA+0x174>)
 800dd4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd4e:	bf00      	nop
 800dd50:	0800dd85 	.word	0x0800dd85
 800dd54:	0800dea5 	.word	0x0800dea5
 800dd58:	0800dea5 	.word	0x0800dea5
 800dd5c:	0800dea5 	.word	0x0800dea5
 800dd60:	0800ddcd 	.word	0x0800ddcd
 800dd64:	0800dea5 	.word	0x0800dea5
 800dd68:	0800dea5 	.word	0x0800dea5
 800dd6c:	0800dea5 	.word	0x0800dea5
 800dd70:	0800de15 	.word	0x0800de15
 800dd74:	0800dea5 	.word	0x0800dea5
 800dd78:	0800dea5 	.word	0x0800dea5
 800dd7c:	0800dea5 	.word	0x0800dea5
 800dd80:	0800de5d 	.word	0x0800de5d
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd88:	4a57      	ldr	r2, [pc, #348]	; (800dee8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800dd8a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd90:	4a56      	ldr	r2, [pc, #344]	; (800deec <HAL_TIM_IC_Start_DMA+0x310>)
 800dd92:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd98:	4a55      	ldr	r2, [pc, #340]	; (800def0 <HAL_TIM_IC_Start_DMA+0x314>)
 800dd9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	3334      	adds	r3, #52	; 0x34
 800dda6:	4619      	mov	r1, r3
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	887b      	ldrh	r3, [r7, #2]
 800ddac:	f7fd fe3a 	bl	800ba24 <HAL_DMA_Start_IT>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d001      	beq.n	800ddba <HAL_TIM_IC_Start_DMA+0x1de>
      {
        return HAL_ERROR;
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	e092      	b.n	800dee0 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	68da      	ldr	r2, [r3, #12]
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ddc8:	60da      	str	r2, [r3, #12]
      break;
 800ddca:	e06c      	b.n	800dea6 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd0:	4a45      	ldr	r2, [pc, #276]	; (800dee8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800ddd2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddd8:	4a44      	ldr	r2, [pc, #272]	; (800deec <HAL_TIM_IC_Start_DMA+0x310>)
 800ddda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dde0:	4a43      	ldr	r2, [pc, #268]	; (800def0 <HAL_TIM_IC_Start_DMA+0x314>)
 800dde2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3338      	adds	r3, #56	; 0x38
 800ddee:	4619      	mov	r1, r3
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	887b      	ldrh	r3, [r7, #2]
 800ddf4:	f7fd fe16 	bl	800ba24 <HAL_DMA_Start_IT>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <HAL_TIM_IC_Start_DMA+0x226>
      {
        return HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e06e      	b.n	800dee0 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68da      	ldr	r2, [r3, #12]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de10:	60da      	str	r2, [r3, #12]
      break;
 800de12:	e048      	b.n	800dea6 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de18:	4a33      	ldr	r2, [pc, #204]	; (800dee8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800de1a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de20:	4a32      	ldr	r2, [pc, #200]	; (800deec <HAL_TIM_IC_Start_DMA+0x310>)
 800de22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de28:	4a31      	ldr	r2, [pc, #196]	; (800def0 <HAL_TIM_IC_Start_DMA+0x314>)
 800de2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	333c      	adds	r3, #60	; 0x3c
 800de36:	4619      	mov	r1, r3
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	887b      	ldrh	r3, [r7, #2]
 800de3c:	f7fd fdf2 	bl	800ba24 <HAL_DMA_Start_IT>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <HAL_TIM_IC_Start_DMA+0x26e>
      {
        return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e04a      	b.n	800dee0 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68da      	ldr	r2, [r3, #12]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de58:	60da      	str	r2, [r3, #12]
      break;
 800de5a:	e024      	b.n	800dea6 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de60:	4a21      	ldr	r2, [pc, #132]	; (800dee8 <HAL_TIM_IC_Start_DMA+0x30c>)
 800de62:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de68:	4a20      	ldr	r2, [pc, #128]	; (800deec <HAL_TIM_IC_Start_DMA+0x310>)
 800de6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de70:	4a1f      	ldr	r2, [pc, #124]	; (800def0 <HAL_TIM_IC_Start_DMA+0x314>)
 800de72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	3340      	adds	r3, #64	; 0x40
 800de7e:	4619      	mov	r1, r3
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	887b      	ldrh	r3, [r7, #2]
 800de84:	f7fd fdce 	bl	800ba24 <HAL_DMA_Start_IT>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <HAL_TIM_IC_Start_DMA+0x2b6>
      {
        return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e026      	b.n	800dee0 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68da      	ldr	r2, [r3, #12]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dea0:	60da      	str	r2, [r3, #12]
      break;
 800dea2:	e000      	b.n	800dea6 <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    default:
      break;
 800dea4:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2201      	movs	r2, #1
 800deac:	68b9      	ldr	r1, [r7, #8]
 800deae:	4618      	mov	r0, r3
 800deb0:	f001 fd5c 	bl	800f96c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	689a      	ldr	r2, [r3, #8]
 800deba:	4b0e      	ldr	r3, [pc, #56]	; (800def4 <HAL_TIM_IC_Start_DMA+0x318>)
 800debc:	4013      	ands	r3, r2
 800debe:	613b      	str	r3, [r7, #16]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dec0:	693b      	ldr	r3, [r7, #16]
 800dec2:	2b06      	cmp	r3, #6
 800dec4:	d00b      	beq.n	800dede <HAL_TIM_IC_Start_DMA+0x302>
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800decc:	d007      	beq.n	800dede <HAL_TIM_IC_Start_DMA+0x302>
  {
    __HAL_TIM_ENABLE(htim);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f042 0201 	orr.w	r2, r2, #1
 800dedc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3718      	adds	r7, #24
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	0800eb93 	.word	0x0800eb93
 800deec:	0800ec5b 	.word	0x0800ec5b
 800def0:	0800eb01 	.word	0x0800eb01
 800def4:	00010007 	.word	0x00010007

0800def8 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	2b0c      	cmp	r3, #12
 800df06:	d855      	bhi.n	800dfb4 <HAL_TIM_IC_Stop_DMA+0xbc>
 800df08:	a201      	add	r2, pc, #4	; (adr r2, 800df10 <HAL_TIM_IC_Stop_DMA+0x18>)
 800df0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df0e:	bf00      	nop
 800df10:	0800df45 	.word	0x0800df45
 800df14:	0800dfb5 	.word	0x0800dfb5
 800df18:	0800dfb5 	.word	0x0800dfb5
 800df1c:	0800dfb5 	.word	0x0800dfb5
 800df20:	0800df61 	.word	0x0800df61
 800df24:	0800dfb5 	.word	0x0800dfb5
 800df28:	0800dfb5 	.word	0x0800dfb5
 800df2c:	0800dfb5 	.word	0x0800dfb5
 800df30:	0800df7d 	.word	0x0800df7d
 800df34:	0800dfb5 	.word	0x0800dfb5
 800df38:	0800dfb5 	.word	0x0800dfb5
 800df3c:	0800dfb5 	.word	0x0800dfb5
 800df40:	0800df99 	.word	0x0800df99
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	68da      	ldr	r2, [r3, #12]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800df52:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df58:	4618      	mov	r0, r3
 800df5a:	f7fd fe37 	bl	800bbcc <HAL_DMA_Abort_IT>
      break;
 800df5e:	e02a      	b.n	800dfb6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	68da      	ldr	r2, [r3, #12]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df6e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df74:	4618      	mov	r0, r3
 800df76:	f7fd fe29 	bl	800bbcc <HAL_DMA_Abort_IT>
      break;
 800df7a:	e01c      	b.n	800dfb6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	68da      	ldr	r2, [r3, #12]
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800df8a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df90:	4618      	mov	r0, r3
 800df92:	f7fd fe1b 	bl	800bbcc <HAL_DMA_Abort_IT>
      break;
 800df96:	e00e      	b.n	800dfb6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	68da      	ldr	r2, [r3, #12]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dfa6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fd fe0d 	bl	800bbcc <HAL_DMA_Abort_IT>
      break;
 800dfb2:	e000      	b.n	800dfb6 <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 800dfb4:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	6839      	ldr	r1, [r7, #0]
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f001 fcd4 	bl	800f96c <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	6a1a      	ldr	r2, [r3, #32]
 800dfca:	f241 1311 	movw	r3, #4369	; 0x1111
 800dfce:	4013      	ands	r3, r2
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d10f      	bne.n	800dff4 <HAL_TIM_IC_Stop_DMA+0xfc>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	6a1a      	ldr	r2, [r3, #32]
 800dfda:	f244 4344 	movw	r3, #17476	; 0x4444
 800dfde:	4013      	ands	r3, r2
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d107      	bne.n	800dff4 <HAL_TIM_IC_Stop_DMA+0xfc>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f022 0201 	bic.w	r2, r2, #1
 800dff2:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d104      	bne.n	800e004 <HAL_TIM_IC_Stop_DMA+0x10c>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	2201      	movs	r2, #1
 800dffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e002:	e023      	b.n	800e04c <HAL_TIM_IC_Stop_DMA+0x154>
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	2b04      	cmp	r3, #4
 800e008:	d104      	bne.n	800e014 <HAL_TIM_IC_Stop_DMA+0x11c>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2201      	movs	r2, #1
 800e00e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e012:	e01b      	b.n	800e04c <HAL_TIM_IC_Stop_DMA+0x154>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2b08      	cmp	r3, #8
 800e018:	d104      	bne.n	800e024 <HAL_TIM_IC_Stop_DMA+0x12c>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2201      	movs	r2, #1
 800e01e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e022:	e013      	b.n	800e04c <HAL_TIM_IC_Stop_DMA+0x154>
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	2b0c      	cmp	r3, #12
 800e028:	d104      	bne.n	800e034 <HAL_TIM_IC_Stop_DMA+0x13c>
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	2201      	movs	r2, #1
 800e02e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e032:	e00b      	b.n	800e04c <HAL_TIM_IC_Stop_DMA+0x154>
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	2b10      	cmp	r3, #16
 800e038:	d104      	bne.n	800e044 <HAL_TIM_IC_Stop_DMA+0x14c>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2201      	movs	r2, #1
 800e03e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e042:	e003      	b.n	800e04c <HAL_TIM_IC_Stop_DMA+0x154>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2201      	movs	r2, #1
 800e048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d104      	bne.n	800e05c <HAL_TIM_IC_Stop_DMA+0x164>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e05a:	e013      	b.n	800e084 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b04      	cmp	r3, #4
 800e060:	d104      	bne.n	800e06c <HAL_TIM_IC_Stop_DMA+0x174>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e06a:	e00b      	b.n	800e084 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b08      	cmp	r3, #8
 800e070:	d104      	bne.n	800e07c <HAL_TIM_IC_Stop_DMA+0x184>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2201      	movs	r2, #1
 800e076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e07a:	e003      	b.n	800e084 <HAL_TIM_IC_Stop_DMA+0x18c>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800e084:	2300      	movs	r3, #0
}
 800e086:	4618      	mov	r0, r3
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop

0800e090 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e097      	b.n	800e1d4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d106      	bne.n	800e0be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e0b8:	6878      	ldr	r0, [r7, #4]
 800e0ba:	f7fa fe9b 	bl	8008df4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2202      	movs	r2, #2
 800e0c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	689b      	ldr	r3, [r3, #8]
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	6812      	ldr	r2, [r2, #0]
 800e0d0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e0d4:	f023 0307 	bic.w	r3, r3, #7
 800e0d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	3304      	adds	r3, #4
 800e0e2:	4619      	mov	r1, r3
 800e0e4:	4610      	mov	r0, r2
 800e0e6:	f000 fded 	bl	800ecc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	689b      	ldr	r3, [r3, #8]
 800e0f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	6a1b      	ldr	r3, [r3, #32]
 800e100:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	697a      	ldr	r2, [r7, #20]
 800e108:	4313      	orrs	r3, r2
 800e10a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e112:	f023 0303 	bic.w	r3, r3, #3
 800e116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	689a      	ldr	r2, [r3, #8]
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	021b      	lsls	r3, r3, #8
 800e122:	4313      	orrs	r3, r2
 800e124:	693a      	ldr	r2, [r7, #16]
 800e126:	4313      	orrs	r3, r2
 800e128:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e130:	f023 030c 	bic.w	r3, r3, #12
 800e134:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e13c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e140:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	68da      	ldr	r2, [r3, #12]
 800e146:	683b      	ldr	r3, [r7, #0]
 800e148:	69db      	ldr	r3, [r3, #28]
 800e14a:	021b      	lsls	r3, r3, #8
 800e14c:	4313      	orrs	r3, r2
 800e14e:	693a      	ldr	r2, [r7, #16]
 800e150:	4313      	orrs	r3, r2
 800e152:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	691b      	ldr	r3, [r3, #16]
 800e158:	011a      	lsls	r2, r3, #4
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	6a1b      	ldr	r3, [r3, #32]
 800e15e:	031b      	lsls	r3, r3, #12
 800e160:	4313      	orrs	r3, r2
 800e162:	693a      	ldr	r2, [r7, #16]
 800e164:	4313      	orrs	r3, r2
 800e166:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e16e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e176:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	685a      	ldr	r2, [r3, #4]
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	695b      	ldr	r3, [r3, #20]
 800e180:	011b      	lsls	r3, r3, #4
 800e182:	4313      	orrs	r3, r2
 800e184:	68fa      	ldr	r2, [r7, #12]
 800e186:	4313      	orrs	r3, r2
 800e188:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	697a      	ldr	r2, [r7, #20]
 800e190:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	68fa      	ldr	r2, [r7, #12]
 800e1a0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2201      	movs	r2, #1
 800e1ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2201      	movs	r2, #1
 800e1be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1d2:	2300      	movs	r3, #0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b082      	sub	sp, #8
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	691b      	ldr	r3, [r3, #16]
 800e1ea:	f003 0302 	and.w	r3, r3, #2
 800e1ee:	2b02      	cmp	r3, #2
 800e1f0:	d122      	bne.n	800e238 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	68db      	ldr	r3, [r3, #12]
 800e1f8:	f003 0302 	and.w	r3, r3, #2
 800e1fc:	2b02      	cmp	r3, #2
 800e1fe:	d11b      	bne.n	800e238 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f06f 0202 	mvn.w	r2, #2
 800e208:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	699b      	ldr	r3, [r3, #24]
 800e216:	f003 0303 	and.w	r3, r3, #3
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d003      	beq.n	800e226 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f7f8 fada 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 800e224:	e005      	b.n	800e232 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f000 fc38 	bl	800ea9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fc49 	bl	800eac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	2200      	movs	r2, #0
 800e236:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	691b      	ldr	r3, [r3, #16]
 800e23e:	f003 0304 	and.w	r3, r3, #4
 800e242:	2b04      	cmp	r3, #4
 800e244:	d122      	bne.n	800e28c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	f003 0304 	and.w	r3, r3, #4
 800e250:	2b04      	cmp	r3, #4
 800e252:	d11b      	bne.n	800e28c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f06f 0204 	mvn.w	r2, #4
 800e25c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	2202      	movs	r2, #2
 800e262:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	699b      	ldr	r3, [r3, #24]
 800e26a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d003      	beq.n	800e27a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f7f8 fab0 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 800e278:	e005      	b.n	800e286 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f000 fc0e 	bl	800ea9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 fc1f 	bl	800eac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	2200      	movs	r2, #0
 800e28a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	691b      	ldr	r3, [r3, #16]
 800e292:	f003 0308 	and.w	r3, r3, #8
 800e296:	2b08      	cmp	r3, #8
 800e298:	d122      	bne.n	800e2e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	f003 0308 	and.w	r3, r3, #8
 800e2a4:	2b08      	cmp	r3, #8
 800e2a6:	d11b      	bne.n	800e2e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f06f 0208 	mvn.w	r2, #8
 800e2b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2204      	movs	r2, #4
 800e2b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	69db      	ldr	r3, [r3, #28]
 800e2be:	f003 0303 	and.w	r3, r3, #3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d003      	beq.n	800e2ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f7f8 fa86 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 800e2cc:	e005      	b.n	800e2da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fbe4 	bl	800ea9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 fbf5 	bl	800eac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	691b      	ldr	r3, [r3, #16]
 800e2e6:	f003 0310 	and.w	r3, r3, #16
 800e2ea:	2b10      	cmp	r3, #16
 800e2ec:	d122      	bne.n	800e334 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	68db      	ldr	r3, [r3, #12]
 800e2f4:	f003 0310 	and.w	r3, r3, #16
 800e2f8:	2b10      	cmp	r3, #16
 800e2fa:	d11b      	bne.n	800e334 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	f06f 0210 	mvn.w	r2, #16
 800e304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2208      	movs	r2, #8
 800e30a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	69db      	ldr	r3, [r3, #28]
 800e312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e316:	2b00      	cmp	r3, #0
 800e318:	d003      	beq.n	800e322 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f7f8 fa5c 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
 800e320:	e005      	b.n	800e32e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e322:	6878      	ldr	r0, [r7, #4]
 800e324:	f000 fbba 	bl	800ea9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f000 fbcb 	bl	800eac4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2200      	movs	r2, #0
 800e332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	691b      	ldr	r3, [r3, #16]
 800e33a:	f003 0301 	and.w	r3, r3, #1
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d10e      	bne.n	800e360 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	68db      	ldr	r3, [r3, #12]
 800e348:	f003 0301 	and.w	r3, r3, #1
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d107      	bne.n	800e360 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f06f 0201 	mvn.w	r2, #1
 800e358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e35a:	6878      	ldr	r0, [r7, #4]
 800e35c:	f000 fb94 	bl	800ea88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	691b      	ldr	r3, [r3, #16]
 800e366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e36a:	2b80      	cmp	r3, #128	; 0x80
 800e36c:	d10e      	bne.n	800e38c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	68db      	ldr	r3, [r3, #12]
 800e374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e378:	2b80      	cmp	r3, #128	; 0x80
 800e37a:	d107      	bne.n	800e38c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e386:	6878      	ldr	r0, [r7, #4]
 800e388:	f001 fc68 	bl	800fc5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	691b      	ldr	r3, [r3, #16]
 800e392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e39a:	d10e      	bne.n	800e3ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3a6:	2b80      	cmp	r3, #128	; 0x80
 800e3a8:	d107      	bne.n	800e3ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e3b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f001 fc5b 	bl	800fc70 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	691b      	ldr	r3, [r3, #16]
 800e3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3c4:	2b40      	cmp	r3, #64	; 0x40
 800e3c6:	d10e      	bne.n	800e3e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3d2:	2b40      	cmp	r3, #64	; 0x40
 800e3d4:	d107      	bne.n	800e3e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e3de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e3e0:	6878      	ldr	r0, [r7, #4]
 800e3e2:	f000 fb79 	bl	800ead8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	691b      	ldr	r3, [r3, #16]
 800e3ec:	f003 0320 	and.w	r3, r3, #32
 800e3f0:	2b20      	cmp	r3, #32
 800e3f2:	d10e      	bne.n	800e412 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	f003 0320 	and.w	r3, r3, #32
 800e3fe:	2b20      	cmp	r3, #32
 800e400:	d107      	bne.n	800e412 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	f06f 0220 	mvn.w	r2, #32
 800e40a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e40c:	6878      	ldr	r0, [r7, #4]
 800e40e:	f001 fc1b 	bl	800fc48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	691b      	ldr	r3, [r3, #16]
 800e418:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e41c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e420:	d10f      	bne.n	800e442 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	68db      	ldr	r3, [r3, #12]
 800e428:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e42c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e430:	d107      	bne.n	800e442 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e43a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f001 fc21 	bl	800fc84 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	691b      	ldr	r3, [r3, #16]
 800e448:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e44c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e450:	d10f      	bne.n	800e472 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	68db      	ldr	r3, [r3, #12]
 800e458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e45c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e460:	d107      	bne.n	800e472 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e46a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f001 fc13 	bl	800fc98 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	691b      	ldr	r3, [r3, #16]
 800e478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e47c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e480:	d10f      	bne.n	800e4a2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e48c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e490:	d107      	bne.n	800e4a2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f001 fc05 	bl	800fcac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	691b      	ldr	r3, [r3, #16]
 800e4a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4b0:	d10f      	bne.n	800e4d2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4c0:	d107      	bne.n	800e4d2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e4ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f001 fbf7 	bl	800fcc0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4d2:	bf00      	nop
 800e4d4:	3708      	adds	r7, #8
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}

0800e4da <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e4da:	b580      	push	{r7, lr}
 800e4dc:	b084      	sub	sp, #16
 800e4de:	af00      	add	r7, sp, #0
 800e4e0:	60f8      	str	r0, [r7, #12]
 800e4e2:	60b9      	str	r1, [r7, #8]
 800e4e4:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4ec:	2b01      	cmp	r3, #1
 800e4ee:	d101      	bne.n	800e4f4 <HAL_TIM_IC_ConfigChannel+0x1a>
 800e4f0:	2302      	movs	r3, #2
 800e4f2:	e082      	b.n	800e5fa <HAL_TIM_IC_ConfigChannel+0x120>
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d11b      	bne.n	800e53a <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	6818      	ldr	r0, [r3, #0]
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	6819      	ldr	r1, [r3, #0]
 800e50a:	68bb      	ldr	r3, [r7, #8]
 800e50c:	685a      	ldr	r2, [r3, #4]
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	68db      	ldr	r3, [r3, #12]
 800e512:	f001 f865 	bl	800f5e0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	699a      	ldr	r2, [r3, #24]
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f022 020c 	bic.w	r2, r2, #12
 800e524:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	681b      	ldr	r3, [r3, #0]
 800e52a:	6999      	ldr	r1, [r3, #24]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	689a      	ldr	r2, [r3, #8]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	430a      	orrs	r2, r1
 800e536:	619a      	str	r2, [r3, #24]
 800e538:	e05a      	b.n	800e5f0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2b04      	cmp	r3, #4
 800e53e:	d11c      	bne.n	800e57a <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	6818      	ldr	r0, [r3, #0]
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	6819      	ldr	r1, [r3, #0]
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	68db      	ldr	r3, [r3, #12]
 800e550:	f001 f8e9 	bl	800f726 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	699a      	ldr	r2, [r3, #24]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e562:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	6999      	ldr	r1, [r3, #24]
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	021a      	lsls	r2, r3, #8
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	430a      	orrs	r2, r1
 800e576:	619a      	str	r2, [r3, #24]
 800e578:	e03a      	b.n	800e5f0 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2b08      	cmp	r3, #8
 800e57e:	d11b      	bne.n	800e5b8 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	6818      	ldr	r0, [r3, #0]
 800e584:	68bb      	ldr	r3, [r7, #8]
 800e586:	6819      	ldr	r1, [r3, #0]
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	685a      	ldr	r2, [r3, #4]
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	f001 f936 	bl	800f800 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	69da      	ldr	r2, [r3, #28]
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	f022 020c 	bic.w	r2, r2, #12
 800e5a2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	69d9      	ldr	r1, [r3, #28]
 800e5aa:	68bb      	ldr	r3, [r7, #8]
 800e5ac:	689a      	ldr	r2, [r3, #8]
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	430a      	orrs	r2, r1
 800e5b4:	61da      	str	r2, [r3, #28]
 800e5b6:	e01b      	b.n	800e5f0 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	6818      	ldr	r0, [r3, #0]
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	6819      	ldr	r1, [r3, #0]
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	685a      	ldr	r2, [r3, #4]
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	f001 f956 	bl	800f878 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	69da      	ldr	r2, [r3, #28]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e5da:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69d9      	ldr	r1, [r3, #28]
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	021a      	lsls	r2, r3, #8
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	430a      	orrs	r2, r1
 800e5ee:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e5f8:	2300      	movs	r3, #0
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
	...

0800e604 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e616:	2b01      	cmp	r3, #1
 800e618:	d101      	bne.n	800e61e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e61a:	2302      	movs	r3, #2
 800e61c:	e0fd      	b.n	800e81a <HAL_TIM_PWM_ConfigChannel+0x216>
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2201      	movs	r2, #1
 800e622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2b14      	cmp	r3, #20
 800e62a:	f200 80f0 	bhi.w	800e80e <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e62e:	a201      	add	r2, pc, #4	; (adr r2, 800e634 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e634:	0800e689 	.word	0x0800e689
 800e638:	0800e80f 	.word	0x0800e80f
 800e63c:	0800e80f 	.word	0x0800e80f
 800e640:	0800e80f 	.word	0x0800e80f
 800e644:	0800e6c9 	.word	0x0800e6c9
 800e648:	0800e80f 	.word	0x0800e80f
 800e64c:	0800e80f 	.word	0x0800e80f
 800e650:	0800e80f 	.word	0x0800e80f
 800e654:	0800e70b 	.word	0x0800e70b
 800e658:	0800e80f 	.word	0x0800e80f
 800e65c:	0800e80f 	.word	0x0800e80f
 800e660:	0800e80f 	.word	0x0800e80f
 800e664:	0800e74b 	.word	0x0800e74b
 800e668:	0800e80f 	.word	0x0800e80f
 800e66c:	0800e80f 	.word	0x0800e80f
 800e670:	0800e80f 	.word	0x0800e80f
 800e674:	0800e78d 	.word	0x0800e78d
 800e678:	0800e80f 	.word	0x0800e80f
 800e67c:	0800e80f 	.word	0x0800e80f
 800e680:	0800e80f 	.word	0x0800e80f
 800e684:	0800e7cd 	.word	0x0800e7cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	68b9      	ldr	r1, [r7, #8]
 800e68e:	4618      	mov	r0, r3
 800e690:	f000 fbc0 	bl	800ee14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	699a      	ldr	r2, [r3, #24]
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	f042 0208 	orr.w	r2, r2, #8
 800e6a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	699a      	ldr	r2, [r3, #24]
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	f022 0204 	bic.w	r2, r2, #4
 800e6b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	6999      	ldr	r1, [r3, #24]
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	691a      	ldr	r2, [r3, #16]
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	430a      	orrs	r2, r1
 800e6c4:	619a      	str	r2, [r3, #24]
      break;
 800e6c6:	e0a3      	b.n	800e810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68b9      	ldr	r1, [r7, #8]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f000 fc3a 	bl	800ef48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	699a      	ldr	r2, [r3, #24]
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e6e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	699a      	ldr	r2, [r3, #24]
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e6f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	6999      	ldr	r1, [r3, #24]
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	691b      	ldr	r3, [r3, #16]
 800e6fe:	021a      	lsls	r2, r3, #8
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	430a      	orrs	r2, r1
 800e706:	619a      	str	r2, [r3, #24]
      break;
 800e708:	e082      	b.n	800e810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	68b9      	ldr	r1, [r7, #8]
 800e710:	4618      	mov	r0, r3
 800e712:	f000 fcad 	bl	800f070 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	69da      	ldr	r2, [r3, #28]
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f042 0208 	orr.w	r2, r2, #8
 800e724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	69da      	ldr	r2, [r3, #28]
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	f022 0204 	bic.w	r2, r2, #4
 800e734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	69d9      	ldr	r1, [r3, #28]
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	691a      	ldr	r2, [r3, #16]
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	430a      	orrs	r2, r1
 800e746:	61da      	str	r2, [r3, #28]
      break;
 800e748:	e062      	b.n	800e810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	68b9      	ldr	r1, [r7, #8]
 800e750:	4618      	mov	r0, r3
 800e752:	f000 fd1f 	bl	800f194 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	69da      	ldr	r2, [r3, #28]
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	69da      	ldr	r2, [r3, #28]
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	69d9      	ldr	r1, [r3, #28]
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	691b      	ldr	r3, [r3, #16]
 800e780:	021a      	lsls	r2, r3, #8
 800e782:	68fb      	ldr	r3, [r7, #12]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	430a      	orrs	r2, r1
 800e788:	61da      	str	r2, [r3, #28]
      break;
 800e78a:	e041      	b.n	800e810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68b9      	ldr	r1, [r7, #8]
 800e792:	4618      	mov	r0, r3
 800e794:	f000 fd92 	bl	800f2bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	f042 0208 	orr.w	r2, r2, #8
 800e7a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	f022 0204 	bic.w	r2, r2, #4
 800e7b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e7be:	68bb      	ldr	r3, [r7, #8]
 800e7c0:	691a      	ldr	r2, [r3, #16]
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	430a      	orrs	r2, r1
 800e7c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e7ca:	e021      	b.n	800e810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	68b9      	ldr	r1, [r7, #8]
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f000 fddc 	bl	800f390 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	021a      	lsls	r2, r3, #8
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	430a      	orrs	r2, r1
 800e80a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e80c:	e000      	b.n	800e810 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e80e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2200      	movs	r2, #0
 800e814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e818:	2300      	movs	r3, #0
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop

0800e824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b084      	sub	sp, #16
 800e828:	af00      	add	r7, sp, #0
 800e82a:	6078      	str	r0, [r7, #4]
 800e82c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e834:	2b01      	cmp	r3, #1
 800e836:	d101      	bne.n	800e83c <HAL_TIM_ConfigClockSource+0x18>
 800e838:	2302      	movs	r3, #2
 800e83a:	e0d2      	b.n	800e9e2 <HAL_TIM_ConfigClockSource+0x1be>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2201      	movs	r2, #1
 800e840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2202      	movs	r2, #2
 800e848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	689b      	ldr	r3, [r3, #8]
 800e852:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e85a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e85e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e866:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	68fa      	ldr	r2, [r7, #12]
 800e86e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e870:	683b      	ldr	r3, [r7, #0]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e878:	f000 80a9 	beq.w	800e9ce <HAL_TIM_ConfigClockSource+0x1aa>
 800e87c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e880:	d81a      	bhi.n	800e8b8 <HAL_TIM_ConfigClockSource+0x94>
 800e882:	2b30      	cmp	r3, #48	; 0x30
 800e884:	f000 809a 	beq.w	800e9bc <HAL_TIM_ConfigClockSource+0x198>
 800e888:	2b30      	cmp	r3, #48	; 0x30
 800e88a:	d809      	bhi.n	800e8a0 <HAL_TIM_ConfigClockSource+0x7c>
 800e88c:	2b10      	cmp	r3, #16
 800e88e:	f000 8095 	beq.w	800e9bc <HAL_TIM_ConfigClockSource+0x198>
 800e892:	2b20      	cmp	r3, #32
 800e894:	f000 8092 	beq.w	800e9bc <HAL_TIM_ConfigClockSource+0x198>
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f000 808f 	beq.w	800e9bc <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e89e:	e097      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8a0:	2b50      	cmp	r3, #80	; 0x50
 800e8a2:	d05b      	beq.n	800e95c <HAL_TIM_ConfigClockSource+0x138>
 800e8a4:	2b50      	cmp	r3, #80	; 0x50
 800e8a6:	d802      	bhi.n	800e8ae <HAL_TIM_ConfigClockSource+0x8a>
 800e8a8:	2b40      	cmp	r3, #64	; 0x40
 800e8aa:	d077      	beq.n	800e99c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e8ac:	e090      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8ae:	2b60      	cmp	r3, #96	; 0x60
 800e8b0:	d064      	beq.n	800e97c <HAL_TIM_ConfigClockSource+0x158>
 800e8b2:	2b70      	cmp	r3, #112	; 0x70
 800e8b4:	d028      	beq.n	800e908 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800e8b6:	e08b      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8b8:	4a4c      	ldr	r2, [pc, #304]	; (800e9ec <HAL_TIM_ConfigClockSource+0x1c8>)
 800e8ba:	4293      	cmp	r3, r2
 800e8bc:	d07e      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x198>
 800e8be:	4a4b      	ldr	r2, [pc, #300]	; (800e9ec <HAL_TIM_ConfigClockSource+0x1c8>)
 800e8c0:	4293      	cmp	r3, r2
 800e8c2:	d810      	bhi.n	800e8e6 <HAL_TIM_ConfigClockSource+0xc2>
 800e8c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8c8:	d078      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x198>
 800e8ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e8ce:	d803      	bhi.n	800e8d8 <HAL_TIM_ConfigClockSource+0xb4>
 800e8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e8d4:	d02f      	beq.n	800e936 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800e8d6:	e07b      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8d8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e8dc:	d06e      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x198>
 800e8de:	4a44      	ldr	r2, [pc, #272]	; (800e9f0 <HAL_TIM_ConfigClockSource+0x1cc>)
 800e8e0:	4293      	cmp	r3, r2
 800e8e2:	d06b      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e8e4:	e074      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8e6:	4a43      	ldr	r2, [pc, #268]	; (800e9f4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800e8e8:	4293      	cmp	r3, r2
 800e8ea:	d067      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x198>
 800e8ec:	4a41      	ldr	r2, [pc, #260]	; (800e9f4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	d803      	bhi.n	800e8fa <HAL_TIM_ConfigClockSource+0xd6>
 800e8f2:	4a41      	ldr	r2, [pc, #260]	; (800e9f8 <HAL_TIM_ConfigClockSource+0x1d4>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d061      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e8f8:	e06a      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8fa:	4a40      	ldr	r2, [pc, #256]	; (800e9fc <HAL_TIM_ConfigClockSource+0x1d8>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d05d      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x198>
 800e900:	4a3f      	ldr	r2, [pc, #252]	; (800ea00 <HAL_TIM_ConfigClockSource+0x1dc>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d05a      	beq.n	800e9bc <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e906:	e063      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	6818      	ldr	r0, [r3, #0]
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	6899      	ldr	r1, [r3, #8]
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	68db      	ldr	r3, [r3, #12]
 800e918:	f001 f808 	bl	800f92c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	689b      	ldr	r3, [r3, #8]
 800e922:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e92a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	68fa      	ldr	r2, [r7, #12]
 800e932:	609a      	str	r2, [r3, #8]
      break;
 800e934:	e04c      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6818      	ldr	r0, [r3, #0]
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	6899      	ldr	r1, [r3, #8]
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	685a      	ldr	r2, [r3, #4]
 800e942:	683b      	ldr	r3, [r7, #0]
 800e944:	68db      	ldr	r3, [r3, #12]
 800e946:	f000 fff1 	bl	800f92c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	689a      	ldr	r2, [r3, #8]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e958:	609a      	str	r2, [r3, #8]
      break;
 800e95a:	e039      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6818      	ldr	r0, [r3, #0]
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	6859      	ldr	r1, [r3, #4]
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	68db      	ldr	r3, [r3, #12]
 800e968:	461a      	mov	r2, r3
 800e96a:	f000 fead 	bl	800f6c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	2150      	movs	r1, #80	; 0x50
 800e974:	4618      	mov	r0, r3
 800e976:	f000 ffbc 	bl	800f8f2 <TIM_ITRx_SetConfig>
      break;
 800e97a:	e029      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6818      	ldr	r0, [r3, #0]
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	6859      	ldr	r1, [r3, #4]
 800e984:	683b      	ldr	r3, [r7, #0]
 800e986:	68db      	ldr	r3, [r3, #12]
 800e988:	461a      	mov	r2, r3
 800e98a:	f000 ff09 	bl	800f7a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	2160      	movs	r1, #96	; 0x60
 800e994:	4618      	mov	r0, r3
 800e996:	f000 ffac 	bl	800f8f2 <TIM_ITRx_SetConfig>
      break;
 800e99a:	e019      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	6818      	ldr	r0, [r3, #0]
 800e9a0:	683b      	ldr	r3, [r7, #0]
 800e9a2:	6859      	ldr	r1, [r3, #4]
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	f000 fe8d 	bl	800f6c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	2140      	movs	r1, #64	; 0x40
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f000 ff9c 	bl	800f8f2 <TIM_ITRx_SetConfig>
      break;
 800e9ba:	e009      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	f000 ff93 	bl	800f8f2 <TIM_ITRx_SetConfig>
      break;
 800e9cc:	e000      	b.n	800e9d0 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800e9ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9e0:	2300      	movs	r3, #0
}
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	3710      	adds	r7, #16
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}
 800e9ea:	bf00      	nop
 800e9ec:	00100030 	.word	0x00100030
 800e9f0:	00100020 	.word	0x00100020
 800e9f4:	00100050 	.word	0x00100050
 800e9f8:	00100040 	.word	0x00100040
 800e9fc:	00100060 	.word	0x00100060
 800ea00:	00100070 	.word	0x00100070

0800ea04 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d101      	bne.n	800ea1c <HAL_TIM_SlaveConfigSynchro+0x18>
 800ea18:	2302      	movs	r3, #2
 800ea1a:	e031      	b.n	800ea80 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	2202      	movs	r2, #2
 800ea28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ea2c:	6839      	ldr	r1, [r7, #0]
 800ea2e:	6878      	ldr	r0, [r7, #4]
 800ea30:	f000 fd1a 	bl	800f468 <TIM_SlaveTimer_SetConfig>
 800ea34:	4603      	mov	r3, r0
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d009      	beq.n	800ea4e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ea4a:	2301      	movs	r3, #1
 800ea4c:	e018      	b.n	800ea80 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	68da      	ldr	r2, [r3, #12]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ea5c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	68da      	ldr	r2, [r3, #12]
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ea6c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	2200      	movs	r2, #0
 800ea7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea7e:	2300      	movs	r3, #0
}
 800ea80:	4618      	mov	r0, r3
 800ea82:	3708      	adds	r7, #8
 800ea84:	46bd      	mov	sp, r7
 800ea86:	bd80      	pop	{r7, pc}

0800ea88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr

0800ea9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	b083      	sub	sp, #12
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eaa4:	bf00      	nop
 800eaa6:	370c      	adds	r7, #12
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaae:	4770      	bx	lr

0800eab0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800eab0:	b480      	push	{r7}
 800eab2:	b083      	sub	sp, #12
 800eab4:	af00      	add	r7, sp, #0
 800eab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800eab8:	bf00      	nop
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr

0800eac4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eacc:	bf00      	nop
 800eace:	370c      	adds	r7, #12
 800ead0:	46bd      	mov	sp, r7
 800ead2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead6:	4770      	bx	lr

0800ead8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eae0:	bf00      	nop
 800eae2:	370c      	adds	r7, #12
 800eae4:	46bd      	mov	sp, r7
 800eae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaea:	4770      	bx	lr

0800eaec <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800eaf4:	bf00      	nop
 800eaf6:	370c      	adds	r7, #12
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr

0800eb00 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b084      	sub	sp, #16
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb12:	687a      	ldr	r2, [r7, #4]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d107      	bne.n	800eb28 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	2201      	movs	r2, #1
 800eb22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb26:	e02a      	b.n	800eb7e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d107      	bne.n	800eb42 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2202      	movs	r2, #2
 800eb36:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2201      	movs	r2, #1
 800eb3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb40:	e01d      	b.n	800eb7e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d107      	bne.n	800eb5c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2204      	movs	r2, #4
 800eb50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb5a:	e010      	b.n	800eb7e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d107      	bne.n	800eb76 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2208      	movs	r2, #8
 800eb6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb74:	e003      	b.n	800eb7e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	2201      	movs	r2, #1
 800eb7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f7ff ffb4 	bl	800eaec <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	771a      	strb	r2, [r3, #28]
}
 800eb8a:	bf00      	nop
 800eb8c:	3710      	adds	r7, #16
 800eb8e:	46bd      	mov	sp, r7
 800eb90:	bd80      	pop	{r7, pc}

0800eb92 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800eb92:	b580      	push	{r7, lr}
 800eb94:	b084      	sub	sp, #16
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	429a      	cmp	r2, r3
 800eba8:	d10f      	bne.n	800ebca <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2201      	movs	r2, #1
 800ebae:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	69db      	ldr	r3, [r3, #28]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d146      	bne.n	800ec46 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	2201      	movs	r2, #1
 800ebc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebc8:	e03d      	b.n	800ec46 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d10f      	bne.n	800ebf4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2202      	movs	r2, #2
 800ebd8:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	69db      	ldr	r3, [r3, #28]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d131      	bne.n	800ec46 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	2201      	movs	r2, #1
 800ebee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebf2:	e028      	b.n	800ec46 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d10f      	bne.n	800ec1e <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	2204      	movs	r2, #4
 800ec02:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	69db      	ldr	r3, [r3, #28]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d11c      	bne.n	800ec46 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	2201      	movs	r2, #1
 800ec18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec1c:	e013      	b.n	800ec46 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec22:	687a      	ldr	r2, [r7, #4]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	d10e      	bne.n	800ec46 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	2208      	movs	r2, #8
 800ec2c:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	69db      	ldr	r3, [r3, #28]
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d107      	bne.n	800ec46 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	2201      	movs	r2, #1
 800ec42:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800ec46:	68f8      	ldr	r0, [r7, #12]
 800ec48:	f7f7 fdc6 	bl	80067d8 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2200      	movs	r2, #0
 800ec50:	771a      	strb	r2, [r3, #28]
}
 800ec52:	bf00      	nop
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}

0800ec5a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec5a:	b580      	push	{r7, lr}
 800ec5c:	b084      	sub	sp, #16
 800ec5e:	af00      	add	r7, sp, #0
 800ec60:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec66:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6c:	687a      	ldr	r2, [r7, #4]
 800ec6e:	429a      	cmp	r2, r3
 800ec70:	d103      	bne.n	800ec7a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2201      	movs	r2, #1
 800ec76:	771a      	strb	r2, [r3, #28]
 800ec78:	e019      	b.n	800ecae <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7e:	687a      	ldr	r2, [r7, #4]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d103      	bne.n	800ec8c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	2202      	movs	r2, #2
 800ec88:	771a      	strb	r2, [r3, #28]
 800ec8a:	e010      	b.n	800ecae <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d103      	bne.n	800ec9e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2204      	movs	r2, #4
 800ec9a:	771a      	strb	r2, [r3, #28]
 800ec9c:	e007      	b.n	800ecae <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d102      	bne.n	800ecae <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2208      	movs	r2, #8
 800ecac:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ecae:	68f8      	ldr	r0, [r7, #12]
 800ecb0:	f7ff fefe 	bl	800eab0 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	771a      	strb	r2, [r3, #28]
}
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}
	...

0800ecc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ecc4:	b480      	push	{r7}
 800ecc6:	b085      	sub	sp, #20
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
 800eccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	4a46      	ldr	r2, [pc, #280]	; (800edf0 <TIM_Base_SetConfig+0x12c>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d017      	beq.n	800ed0c <TIM_Base_SetConfig+0x48>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ece2:	d013      	beq.n	800ed0c <TIM_Base_SetConfig+0x48>
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	4a43      	ldr	r2, [pc, #268]	; (800edf4 <TIM_Base_SetConfig+0x130>)
 800ece8:	4293      	cmp	r3, r2
 800ecea:	d00f      	beq.n	800ed0c <TIM_Base_SetConfig+0x48>
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a42      	ldr	r2, [pc, #264]	; (800edf8 <TIM_Base_SetConfig+0x134>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d00b      	beq.n	800ed0c <TIM_Base_SetConfig+0x48>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	4a41      	ldr	r2, [pc, #260]	; (800edfc <TIM_Base_SetConfig+0x138>)
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	d007      	beq.n	800ed0c <TIM_Base_SetConfig+0x48>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a40      	ldr	r2, [pc, #256]	; (800ee00 <TIM_Base_SetConfig+0x13c>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d003      	beq.n	800ed0c <TIM_Base_SetConfig+0x48>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a3f      	ldr	r2, [pc, #252]	; (800ee04 <TIM_Base_SetConfig+0x140>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d108      	bne.n	800ed1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	685b      	ldr	r3, [r3, #4]
 800ed18:	68fa      	ldr	r2, [r7, #12]
 800ed1a:	4313      	orrs	r3, r2
 800ed1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	4a33      	ldr	r2, [pc, #204]	; (800edf0 <TIM_Base_SetConfig+0x12c>)
 800ed22:	4293      	cmp	r3, r2
 800ed24:	d023      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed2c:	d01f      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a30      	ldr	r2, [pc, #192]	; (800edf4 <TIM_Base_SetConfig+0x130>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d01b      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4a2f      	ldr	r2, [pc, #188]	; (800edf8 <TIM_Base_SetConfig+0x134>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d017      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a2e      	ldr	r2, [pc, #184]	; (800edfc <TIM_Base_SetConfig+0x138>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d013      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4a2d      	ldr	r2, [pc, #180]	; (800ee00 <TIM_Base_SetConfig+0x13c>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d00f      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4a2d      	ldr	r2, [pc, #180]	; (800ee08 <TIM_Base_SetConfig+0x144>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d00b      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4a2c      	ldr	r2, [pc, #176]	; (800ee0c <TIM_Base_SetConfig+0x148>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d007      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	4a2b      	ldr	r2, [pc, #172]	; (800ee10 <TIM_Base_SetConfig+0x14c>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d003      	beq.n	800ed6e <TIM_Base_SetConfig+0xaa>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4a26      	ldr	r2, [pc, #152]	; (800ee04 <TIM_Base_SetConfig+0x140>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d108      	bne.n	800ed80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	68db      	ldr	r3, [r3, #12]
 800ed7a:	68fa      	ldr	r2, [r7, #12]
 800ed7c:	4313      	orrs	r3, r2
 800ed7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	695b      	ldr	r3, [r3, #20]
 800ed8a:	4313      	orrs	r3, r2
 800ed8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	68fa      	ldr	r2, [r7, #12]
 800ed92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	689a      	ldr	r2, [r3, #8]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	4a12      	ldr	r2, [pc, #72]	; (800edf0 <TIM_Base_SetConfig+0x12c>)
 800eda8:	4293      	cmp	r3, r2
 800edaa:	d013      	beq.n	800edd4 <TIM_Base_SetConfig+0x110>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	4a14      	ldr	r2, [pc, #80]	; (800ee00 <TIM_Base_SetConfig+0x13c>)
 800edb0:	4293      	cmp	r3, r2
 800edb2:	d00f      	beq.n	800edd4 <TIM_Base_SetConfig+0x110>
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	4a14      	ldr	r2, [pc, #80]	; (800ee08 <TIM_Base_SetConfig+0x144>)
 800edb8:	4293      	cmp	r3, r2
 800edba:	d00b      	beq.n	800edd4 <TIM_Base_SetConfig+0x110>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	4a13      	ldr	r2, [pc, #76]	; (800ee0c <TIM_Base_SetConfig+0x148>)
 800edc0:	4293      	cmp	r3, r2
 800edc2:	d007      	beq.n	800edd4 <TIM_Base_SetConfig+0x110>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4a12      	ldr	r2, [pc, #72]	; (800ee10 <TIM_Base_SetConfig+0x14c>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d003      	beq.n	800edd4 <TIM_Base_SetConfig+0x110>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a0d      	ldr	r2, [pc, #52]	; (800ee04 <TIM_Base_SetConfig+0x140>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d103      	bne.n	800eddc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	691a      	ldr	r2, [r3, #16]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	615a      	str	r2, [r3, #20]
}
 800ede2:	bf00      	nop
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop
 800edf0:	40012c00 	.word	0x40012c00
 800edf4:	40000400 	.word	0x40000400
 800edf8:	40000800 	.word	0x40000800
 800edfc:	40000c00 	.word	0x40000c00
 800ee00:	40013400 	.word	0x40013400
 800ee04:	40015000 	.word	0x40015000
 800ee08:	40014000 	.word	0x40014000
 800ee0c:	40014400 	.word	0x40014400
 800ee10:	40014800 	.word	0x40014800

0800ee14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b087      	sub	sp, #28
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
 800ee1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6a1b      	ldr	r3, [r3, #32]
 800ee22:	f023 0201 	bic.w	r2, r3, #1
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6a1b      	ldr	r3, [r3, #32]
 800ee2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685b      	ldr	r3, [r3, #4]
 800ee34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	f023 0303 	bic.w	r3, r3, #3
 800ee4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	68fa      	ldr	r2, [r7, #12]
 800ee56:	4313      	orrs	r3, r2
 800ee58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	f023 0302 	bic.w	r3, r3, #2
 800ee60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee62:	683b      	ldr	r3, [r7, #0]
 800ee64:	689b      	ldr	r3, [r3, #8]
 800ee66:	697a      	ldr	r2, [r7, #20]
 800ee68:	4313      	orrs	r3, r2
 800ee6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	4a30      	ldr	r2, [pc, #192]	; (800ef30 <TIM_OC1_SetConfig+0x11c>)
 800ee70:	4293      	cmp	r3, r2
 800ee72:	d013      	beq.n	800ee9c <TIM_OC1_SetConfig+0x88>
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	4a2f      	ldr	r2, [pc, #188]	; (800ef34 <TIM_OC1_SetConfig+0x120>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d00f      	beq.n	800ee9c <TIM_OC1_SetConfig+0x88>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	4a2e      	ldr	r2, [pc, #184]	; (800ef38 <TIM_OC1_SetConfig+0x124>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d00b      	beq.n	800ee9c <TIM_OC1_SetConfig+0x88>
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4a2d      	ldr	r2, [pc, #180]	; (800ef3c <TIM_OC1_SetConfig+0x128>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d007      	beq.n	800ee9c <TIM_OC1_SetConfig+0x88>
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	4a2c      	ldr	r2, [pc, #176]	; (800ef40 <TIM_OC1_SetConfig+0x12c>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d003      	beq.n	800ee9c <TIM_OC1_SetConfig+0x88>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	4a2b      	ldr	r2, [pc, #172]	; (800ef44 <TIM_OC1_SetConfig+0x130>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d10c      	bne.n	800eeb6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee9c:	697b      	ldr	r3, [r7, #20]
 800ee9e:	f023 0308 	bic.w	r3, r3, #8
 800eea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	68db      	ldr	r3, [r3, #12]
 800eea8:	697a      	ldr	r2, [r7, #20]
 800eeaa:	4313      	orrs	r3, r2
 800eeac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eeae:	697b      	ldr	r3, [r7, #20]
 800eeb0:	f023 0304 	bic.w	r3, r3, #4
 800eeb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	4a1d      	ldr	r2, [pc, #116]	; (800ef30 <TIM_OC1_SetConfig+0x11c>)
 800eeba:	4293      	cmp	r3, r2
 800eebc:	d013      	beq.n	800eee6 <TIM_OC1_SetConfig+0xd2>
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4a1c      	ldr	r2, [pc, #112]	; (800ef34 <TIM_OC1_SetConfig+0x120>)
 800eec2:	4293      	cmp	r3, r2
 800eec4:	d00f      	beq.n	800eee6 <TIM_OC1_SetConfig+0xd2>
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	4a1b      	ldr	r2, [pc, #108]	; (800ef38 <TIM_OC1_SetConfig+0x124>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d00b      	beq.n	800eee6 <TIM_OC1_SetConfig+0xd2>
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	4a1a      	ldr	r2, [pc, #104]	; (800ef3c <TIM_OC1_SetConfig+0x128>)
 800eed2:	4293      	cmp	r3, r2
 800eed4:	d007      	beq.n	800eee6 <TIM_OC1_SetConfig+0xd2>
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	4a19      	ldr	r2, [pc, #100]	; (800ef40 <TIM_OC1_SetConfig+0x12c>)
 800eeda:	4293      	cmp	r3, r2
 800eedc:	d003      	beq.n	800eee6 <TIM_OC1_SetConfig+0xd2>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	4a18      	ldr	r2, [pc, #96]	; (800ef44 <TIM_OC1_SetConfig+0x130>)
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d111      	bne.n	800ef0a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eeec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800eef4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	695b      	ldr	r3, [r3, #20]
 800eefa:	693a      	ldr	r2, [r7, #16]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	699b      	ldr	r3, [r3, #24]
 800ef04:	693a      	ldr	r2, [r7, #16]
 800ef06:	4313      	orrs	r3, r2
 800ef08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	693a      	ldr	r2, [r7, #16]
 800ef0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	68fa      	ldr	r2, [r7, #12]
 800ef14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	685a      	ldr	r2, [r3, #4]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	697a      	ldr	r2, [r7, #20]
 800ef22:	621a      	str	r2, [r3, #32]
}
 800ef24:	bf00      	nop
 800ef26:	371c      	adds	r7, #28
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	40012c00 	.word	0x40012c00
 800ef34:	40013400 	.word	0x40013400
 800ef38:	40014000 	.word	0x40014000
 800ef3c:	40014400 	.word	0x40014400
 800ef40:	40014800 	.word	0x40014800
 800ef44:	40015000 	.word	0x40015000

0800ef48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b087      	sub	sp, #28
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
 800ef50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	f023 0210 	bic.w	r2, r3, #16
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	6a1b      	ldr	r3, [r3, #32]
 800ef62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	685b      	ldr	r3, [r3, #4]
 800ef68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	699b      	ldr	r3, [r3, #24]
 800ef6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ef76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ef7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ef82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	681b      	ldr	r3, [r3, #0]
 800ef88:	021b      	lsls	r3, r3, #8
 800ef8a:	68fa      	ldr	r2, [r7, #12]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f023 0320 	bic.w	r3, r3, #32
 800ef96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	689b      	ldr	r3, [r3, #8]
 800ef9c:	011b      	lsls	r3, r3, #4
 800ef9e:	697a      	ldr	r2, [r7, #20]
 800efa0:	4313      	orrs	r3, r2
 800efa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	4a2c      	ldr	r2, [pc, #176]	; (800f058 <TIM_OC2_SetConfig+0x110>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d007      	beq.n	800efbc <TIM_OC2_SetConfig+0x74>
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	4a2b      	ldr	r2, [pc, #172]	; (800f05c <TIM_OC2_SetConfig+0x114>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d003      	beq.n	800efbc <TIM_OC2_SetConfig+0x74>
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	4a2a      	ldr	r2, [pc, #168]	; (800f060 <TIM_OC2_SetConfig+0x118>)
 800efb8:	4293      	cmp	r3, r2
 800efba:	d10d      	bne.n	800efd8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800efbc:	697b      	ldr	r3, [r7, #20]
 800efbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800efc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	011b      	lsls	r3, r3, #4
 800efca:	697a      	ldr	r2, [r7, #20]
 800efcc:	4313      	orrs	r3, r2
 800efce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800efd0:	697b      	ldr	r3, [r7, #20]
 800efd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800efd6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a1f      	ldr	r2, [pc, #124]	; (800f058 <TIM_OC2_SetConfig+0x110>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d013      	beq.n	800f008 <TIM_OC2_SetConfig+0xc0>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a1e      	ldr	r2, [pc, #120]	; (800f05c <TIM_OC2_SetConfig+0x114>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d00f      	beq.n	800f008 <TIM_OC2_SetConfig+0xc0>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a1e      	ldr	r2, [pc, #120]	; (800f064 <TIM_OC2_SetConfig+0x11c>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d00b      	beq.n	800f008 <TIM_OC2_SetConfig+0xc0>
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	4a1d      	ldr	r2, [pc, #116]	; (800f068 <TIM_OC2_SetConfig+0x120>)
 800eff4:	4293      	cmp	r3, r2
 800eff6:	d007      	beq.n	800f008 <TIM_OC2_SetConfig+0xc0>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	4a1c      	ldr	r2, [pc, #112]	; (800f06c <TIM_OC2_SetConfig+0x124>)
 800effc:	4293      	cmp	r3, r2
 800effe:	d003      	beq.n	800f008 <TIM_OC2_SetConfig+0xc0>
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	4a17      	ldr	r2, [pc, #92]	; (800f060 <TIM_OC2_SetConfig+0x118>)
 800f004:	4293      	cmp	r3, r2
 800f006:	d113      	bne.n	800f030 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f00e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f010:	693b      	ldr	r3, [r7, #16]
 800f012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	695b      	ldr	r3, [r3, #20]
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	693a      	ldr	r2, [r7, #16]
 800f020:	4313      	orrs	r3, r2
 800f022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	699b      	ldr	r3, [r3, #24]
 800f028:	009b      	lsls	r3, r3, #2
 800f02a:	693a      	ldr	r2, [r7, #16]
 800f02c:	4313      	orrs	r3, r2
 800f02e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	693a      	ldr	r2, [r7, #16]
 800f034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	685a      	ldr	r2, [r3, #4]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	697a      	ldr	r2, [r7, #20]
 800f048:	621a      	str	r2, [r3, #32]
}
 800f04a:	bf00      	nop
 800f04c:	371c      	adds	r7, #28
 800f04e:	46bd      	mov	sp, r7
 800f050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f054:	4770      	bx	lr
 800f056:	bf00      	nop
 800f058:	40012c00 	.word	0x40012c00
 800f05c:	40013400 	.word	0x40013400
 800f060:	40015000 	.word	0x40015000
 800f064:	40014000 	.word	0x40014000
 800f068:	40014400 	.word	0x40014400
 800f06c:	40014800 	.word	0x40014800

0800f070 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f070:	b480      	push	{r7}
 800f072:	b087      	sub	sp, #28
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6a1b      	ldr	r3, [r3, #32]
 800f07e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6a1b      	ldr	r3, [r3, #32]
 800f08a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	685b      	ldr	r3, [r3, #4]
 800f090:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	69db      	ldr	r3, [r3, #28]
 800f096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f023 0303 	bic.w	r3, r3, #3
 800f0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	68fa      	ldr	r2, [r7, #12]
 800f0b2:	4313      	orrs	r3, r2
 800f0b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	689b      	ldr	r3, [r3, #8]
 800f0c2:	021b      	lsls	r3, r3, #8
 800f0c4:	697a      	ldr	r2, [r7, #20]
 800f0c6:	4313      	orrs	r3, r2
 800f0c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	4a2b      	ldr	r2, [pc, #172]	; (800f17c <TIM_OC3_SetConfig+0x10c>)
 800f0ce:	4293      	cmp	r3, r2
 800f0d0:	d007      	beq.n	800f0e2 <TIM_OC3_SetConfig+0x72>
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	4a2a      	ldr	r2, [pc, #168]	; (800f180 <TIM_OC3_SetConfig+0x110>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d003      	beq.n	800f0e2 <TIM_OC3_SetConfig+0x72>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	4a29      	ldr	r2, [pc, #164]	; (800f184 <TIM_OC3_SetConfig+0x114>)
 800f0de:	4293      	cmp	r3, r2
 800f0e0:	d10d      	bne.n	800f0fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f0e2:	697b      	ldr	r3, [r7, #20]
 800f0e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	021b      	lsls	r3, r3, #8
 800f0f0:	697a      	ldr	r2, [r7, #20]
 800f0f2:	4313      	orrs	r3, r2
 800f0f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f0f6:	697b      	ldr	r3, [r7, #20]
 800f0f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f0fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4a1e      	ldr	r2, [pc, #120]	; (800f17c <TIM_OC3_SetConfig+0x10c>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d013      	beq.n	800f12e <TIM_OC3_SetConfig+0xbe>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4a1d      	ldr	r2, [pc, #116]	; (800f180 <TIM_OC3_SetConfig+0x110>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d00f      	beq.n	800f12e <TIM_OC3_SetConfig+0xbe>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4a1d      	ldr	r2, [pc, #116]	; (800f188 <TIM_OC3_SetConfig+0x118>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d00b      	beq.n	800f12e <TIM_OC3_SetConfig+0xbe>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	4a1c      	ldr	r2, [pc, #112]	; (800f18c <TIM_OC3_SetConfig+0x11c>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d007      	beq.n	800f12e <TIM_OC3_SetConfig+0xbe>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	4a1b      	ldr	r2, [pc, #108]	; (800f190 <TIM_OC3_SetConfig+0x120>)
 800f122:	4293      	cmp	r3, r2
 800f124:	d003      	beq.n	800f12e <TIM_OC3_SetConfig+0xbe>
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4a16      	ldr	r2, [pc, #88]	; (800f184 <TIM_OC3_SetConfig+0x114>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d113      	bne.n	800f156 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f12e:	693b      	ldr	r3, [r7, #16]
 800f130:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f134:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f136:	693b      	ldr	r3, [r7, #16]
 800f138:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f13c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	695b      	ldr	r3, [r3, #20]
 800f142:	011b      	lsls	r3, r3, #4
 800f144:	693a      	ldr	r2, [r7, #16]
 800f146:	4313      	orrs	r3, r2
 800f148:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	699b      	ldr	r3, [r3, #24]
 800f14e:	011b      	lsls	r3, r3, #4
 800f150:	693a      	ldr	r2, [r7, #16]
 800f152:	4313      	orrs	r3, r2
 800f154:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	693a      	ldr	r2, [r7, #16]
 800f15a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	68fa      	ldr	r2, [r7, #12]
 800f160:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	685a      	ldr	r2, [r3, #4]
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	697a      	ldr	r2, [r7, #20]
 800f16e:	621a      	str	r2, [r3, #32]
}
 800f170:	bf00      	nop
 800f172:	371c      	adds	r7, #28
 800f174:	46bd      	mov	sp, r7
 800f176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17a:	4770      	bx	lr
 800f17c:	40012c00 	.word	0x40012c00
 800f180:	40013400 	.word	0x40013400
 800f184:	40015000 	.word	0x40015000
 800f188:	40014000 	.word	0x40014000
 800f18c:	40014400 	.word	0x40014400
 800f190:	40014800 	.word	0x40014800

0800f194 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f194:	b480      	push	{r7}
 800f196:	b087      	sub	sp, #28
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6a1b      	ldr	r3, [r3, #32]
 800f1ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	69db      	ldr	r3, [r3, #28]
 800f1ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f1c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f1ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f1d0:	683b      	ldr	r3, [r7, #0]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	021b      	lsls	r3, r3, #8
 800f1d6:	68fa      	ldr	r2, [r7, #12]
 800f1d8:	4313      	orrs	r3, r2
 800f1da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f1dc:	697b      	ldr	r3, [r7, #20]
 800f1de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f1e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	689b      	ldr	r3, [r3, #8]
 800f1e8:	031b      	lsls	r3, r3, #12
 800f1ea:	697a      	ldr	r2, [r7, #20]
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4a2c      	ldr	r2, [pc, #176]	; (800f2a4 <TIM_OC4_SetConfig+0x110>)
 800f1f4:	4293      	cmp	r3, r2
 800f1f6:	d007      	beq.n	800f208 <TIM_OC4_SetConfig+0x74>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	4a2b      	ldr	r2, [pc, #172]	; (800f2a8 <TIM_OC4_SetConfig+0x114>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d003      	beq.n	800f208 <TIM_OC4_SetConfig+0x74>
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	4a2a      	ldr	r2, [pc, #168]	; (800f2ac <TIM_OC4_SetConfig+0x118>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d10d      	bne.n	800f224 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f20e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f210:	683b      	ldr	r3, [r7, #0]
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	031b      	lsls	r3, r3, #12
 800f216:	697a      	ldr	r2, [r7, #20]
 800f218:	4313      	orrs	r3, r2
 800f21a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f222:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a1f      	ldr	r2, [pc, #124]	; (800f2a4 <TIM_OC4_SetConfig+0x110>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d013      	beq.n	800f254 <TIM_OC4_SetConfig+0xc0>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a1e      	ldr	r2, [pc, #120]	; (800f2a8 <TIM_OC4_SetConfig+0x114>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d00f      	beq.n	800f254 <TIM_OC4_SetConfig+0xc0>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a1e      	ldr	r2, [pc, #120]	; (800f2b0 <TIM_OC4_SetConfig+0x11c>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d00b      	beq.n	800f254 <TIM_OC4_SetConfig+0xc0>
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	4a1d      	ldr	r2, [pc, #116]	; (800f2b4 <TIM_OC4_SetConfig+0x120>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d007      	beq.n	800f254 <TIM_OC4_SetConfig+0xc0>
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	4a1c      	ldr	r2, [pc, #112]	; (800f2b8 <TIM_OC4_SetConfig+0x124>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d003      	beq.n	800f254 <TIM_OC4_SetConfig+0xc0>
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4a17      	ldr	r2, [pc, #92]	; (800f2ac <TIM_OC4_SetConfig+0x118>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d113      	bne.n	800f27c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f25a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f262:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	695b      	ldr	r3, [r3, #20]
 800f268:	019b      	lsls	r3, r3, #6
 800f26a:	693a      	ldr	r2, [r7, #16]
 800f26c:	4313      	orrs	r3, r2
 800f26e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	699b      	ldr	r3, [r3, #24]
 800f274:	019b      	lsls	r3, r3, #6
 800f276:	693a      	ldr	r2, [r7, #16]
 800f278:	4313      	orrs	r3, r2
 800f27a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	693a      	ldr	r2, [r7, #16]
 800f280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	685a      	ldr	r2, [r3, #4]
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	621a      	str	r2, [r3, #32]
}
 800f296:	bf00      	nop
 800f298:	371c      	adds	r7, #28
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr
 800f2a2:	bf00      	nop
 800f2a4:	40012c00 	.word	0x40012c00
 800f2a8:	40013400 	.word	0x40013400
 800f2ac:	40015000 	.word	0x40015000
 800f2b0:	40014000 	.word	0x40014000
 800f2b4:	40014400 	.word	0x40014400
 800f2b8:	40014800 	.word	0x40014800

0800f2bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b087      	sub	sp, #28
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6a1b      	ldr	r3, [r3, #32]
 800f2ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	6a1b      	ldr	r3, [r3, #32]
 800f2d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	685b      	ldr	r3, [r3, #4]
 800f2dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f2e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f2ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	68fa      	ldr	r2, [r7, #12]
 800f2f6:	4313      	orrs	r3, r2
 800f2f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	689b      	ldr	r3, [r3, #8]
 800f306:	041b      	lsls	r3, r3, #16
 800f308:	693a      	ldr	r2, [r7, #16]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	4a19      	ldr	r2, [pc, #100]	; (800f378 <TIM_OC5_SetConfig+0xbc>)
 800f312:	4293      	cmp	r3, r2
 800f314:	d013      	beq.n	800f33e <TIM_OC5_SetConfig+0x82>
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	4a18      	ldr	r2, [pc, #96]	; (800f37c <TIM_OC5_SetConfig+0xc0>)
 800f31a:	4293      	cmp	r3, r2
 800f31c:	d00f      	beq.n	800f33e <TIM_OC5_SetConfig+0x82>
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	4a17      	ldr	r2, [pc, #92]	; (800f380 <TIM_OC5_SetConfig+0xc4>)
 800f322:	4293      	cmp	r3, r2
 800f324:	d00b      	beq.n	800f33e <TIM_OC5_SetConfig+0x82>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4a16      	ldr	r2, [pc, #88]	; (800f384 <TIM_OC5_SetConfig+0xc8>)
 800f32a:	4293      	cmp	r3, r2
 800f32c:	d007      	beq.n	800f33e <TIM_OC5_SetConfig+0x82>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4a15      	ldr	r2, [pc, #84]	; (800f388 <TIM_OC5_SetConfig+0xcc>)
 800f332:	4293      	cmp	r3, r2
 800f334:	d003      	beq.n	800f33e <TIM_OC5_SetConfig+0x82>
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4a14      	ldr	r2, [pc, #80]	; (800f38c <TIM_OC5_SetConfig+0xd0>)
 800f33a:	4293      	cmp	r3, r2
 800f33c:	d109      	bne.n	800f352 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f33e:	697b      	ldr	r3, [r7, #20]
 800f340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f344:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f346:	683b      	ldr	r3, [r7, #0]
 800f348:	695b      	ldr	r3, [r3, #20]
 800f34a:	021b      	lsls	r3, r3, #8
 800f34c:	697a      	ldr	r2, [r7, #20]
 800f34e:	4313      	orrs	r3, r2
 800f350:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	68fa      	ldr	r2, [r7, #12]
 800f35c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f35e:	683b      	ldr	r3, [r7, #0]
 800f360:	685a      	ldr	r2, [r3, #4]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	693a      	ldr	r2, [r7, #16]
 800f36a:	621a      	str	r2, [r3, #32]
}
 800f36c:	bf00      	nop
 800f36e:	371c      	adds	r7, #28
 800f370:	46bd      	mov	sp, r7
 800f372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f376:	4770      	bx	lr
 800f378:	40012c00 	.word	0x40012c00
 800f37c:	40013400 	.word	0x40013400
 800f380:	40014000 	.word	0x40014000
 800f384:	40014400 	.word	0x40014400
 800f388:	40014800 	.word	0x40014800
 800f38c:	40015000 	.word	0x40015000

0800f390 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f390:	b480      	push	{r7}
 800f392:	b087      	sub	sp, #28
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	6a1b      	ldr	r3, [r3, #32]
 800f39e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6a1b      	ldr	r3, [r3, #32]
 800f3aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f3be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3c4:	683b      	ldr	r3, [r7, #0]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	021b      	lsls	r3, r3, #8
 800f3ca:	68fa      	ldr	r2, [r7, #12]
 800f3cc:	4313      	orrs	r3, r2
 800f3ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f3d0:	693b      	ldr	r3, [r7, #16]
 800f3d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f3d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	689b      	ldr	r3, [r3, #8]
 800f3dc:	051b      	lsls	r3, r3, #20
 800f3de:	693a      	ldr	r2, [r7, #16]
 800f3e0:	4313      	orrs	r3, r2
 800f3e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	4a1a      	ldr	r2, [pc, #104]	; (800f450 <TIM_OC6_SetConfig+0xc0>)
 800f3e8:	4293      	cmp	r3, r2
 800f3ea:	d013      	beq.n	800f414 <TIM_OC6_SetConfig+0x84>
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	4a19      	ldr	r2, [pc, #100]	; (800f454 <TIM_OC6_SetConfig+0xc4>)
 800f3f0:	4293      	cmp	r3, r2
 800f3f2:	d00f      	beq.n	800f414 <TIM_OC6_SetConfig+0x84>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	4a18      	ldr	r2, [pc, #96]	; (800f458 <TIM_OC6_SetConfig+0xc8>)
 800f3f8:	4293      	cmp	r3, r2
 800f3fa:	d00b      	beq.n	800f414 <TIM_OC6_SetConfig+0x84>
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	4a17      	ldr	r2, [pc, #92]	; (800f45c <TIM_OC6_SetConfig+0xcc>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d007      	beq.n	800f414 <TIM_OC6_SetConfig+0x84>
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	4a16      	ldr	r2, [pc, #88]	; (800f460 <TIM_OC6_SetConfig+0xd0>)
 800f408:	4293      	cmp	r3, r2
 800f40a:	d003      	beq.n	800f414 <TIM_OC6_SetConfig+0x84>
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	4a15      	ldr	r2, [pc, #84]	; (800f464 <TIM_OC6_SetConfig+0xd4>)
 800f410:	4293      	cmp	r3, r2
 800f412:	d109      	bne.n	800f428 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f41a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	695b      	ldr	r3, [r3, #20]
 800f420:	029b      	lsls	r3, r3, #10
 800f422:	697a      	ldr	r2, [r7, #20]
 800f424:	4313      	orrs	r3, r2
 800f426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	697a      	ldr	r2, [r7, #20]
 800f42c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	68fa      	ldr	r2, [r7, #12]
 800f432:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	685a      	ldr	r2, [r3, #4]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	693a      	ldr	r2, [r7, #16]
 800f440:	621a      	str	r2, [r3, #32]
}
 800f442:	bf00      	nop
 800f444:	371c      	adds	r7, #28
 800f446:	46bd      	mov	sp, r7
 800f448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44c:	4770      	bx	lr
 800f44e:	bf00      	nop
 800f450:	40012c00 	.word	0x40012c00
 800f454:	40013400 	.word	0x40013400
 800f458:	40014000 	.word	0x40014000
 800f45c:	40014400 	.word	0x40014400
 800f460:	40014800 	.word	0x40014800
 800f464:	40015000 	.word	0x40015000

0800f468 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b086      	sub	sp, #24
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	6078      	str	r0, [r7, #4]
 800f470:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	689b      	ldr	r3, [r3, #8]
 800f478:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f47a:	697b      	ldr	r3, [r7, #20]
 800f47c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f480:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f484:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f486:	683b      	ldr	r3, [r7, #0]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	4313      	orrs	r3, r2
 800f48e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f490:	697b      	ldr	r3, [r7, #20]
 800f492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f496:	f023 0307 	bic.w	r3, r3, #7
 800f49a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	697a      	ldr	r2, [r7, #20]
 800f4a2:	4313      	orrs	r3, r2
 800f4a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	697a      	ldr	r2, [r7, #20]
 800f4ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	2b70      	cmp	r3, #112	; 0x70
 800f4b4:	d034      	beq.n	800f520 <TIM_SlaveTimer_SetConfig+0xb8>
 800f4b6:	2b70      	cmp	r3, #112	; 0x70
 800f4b8:	d811      	bhi.n	800f4de <TIM_SlaveTimer_SetConfig+0x76>
 800f4ba:	2b30      	cmp	r3, #48	; 0x30
 800f4bc:	d07d      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
 800f4be:	2b30      	cmp	r3, #48	; 0x30
 800f4c0:	d806      	bhi.n	800f4d0 <TIM_SlaveTimer_SetConfig+0x68>
 800f4c2:	2b10      	cmp	r3, #16
 800f4c4:	d079      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
 800f4c6:	2b20      	cmp	r3, #32
 800f4c8:	d077      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d075      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800f4ce:	e075      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f4d0:	2b50      	cmp	r3, #80	; 0x50
 800f4d2:	d05e      	beq.n	800f592 <TIM_SlaveTimer_SetConfig+0x12a>
 800f4d4:	2b60      	cmp	r3, #96	; 0x60
 800f4d6:	d066      	beq.n	800f5a6 <TIM_SlaveTimer_SetConfig+0x13e>
 800f4d8:	2b40      	cmp	r3, #64	; 0x40
 800f4da:	d02c      	beq.n	800f536 <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800f4dc:	e06e      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f4de:	4a3a      	ldr	r2, [pc, #232]	; (800f5c8 <TIM_SlaveTimer_SetConfig+0x160>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d06a      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
 800f4e4:	4a38      	ldr	r2, [pc, #224]	; (800f5c8 <TIM_SlaveTimer_SetConfig+0x160>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d809      	bhi.n	800f4fe <TIM_SlaveTimer_SetConfig+0x96>
 800f4ea:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f4ee:	d064      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
 800f4f0:	4a36      	ldr	r2, [pc, #216]	; (800f5cc <TIM_SlaveTimer_SetConfig+0x164>)
 800f4f2:	4293      	cmp	r3, r2
 800f4f4:	d061      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
 800f4f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4fa:	d05e      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f4fc:	e05e      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f4fe:	4a34      	ldr	r2, [pc, #208]	; (800f5d0 <TIM_SlaveTimer_SetConfig+0x168>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d05a      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
 800f504:	4a32      	ldr	r2, [pc, #200]	; (800f5d0 <TIM_SlaveTimer_SetConfig+0x168>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d803      	bhi.n	800f512 <TIM_SlaveTimer_SetConfig+0xaa>
 800f50a:	4a32      	ldr	r2, [pc, #200]	; (800f5d4 <TIM_SlaveTimer_SetConfig+0x16c>)
 800f50c:	4293      	cmp	r3, r2
 800f50e:	d054      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f510:	e054      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f512:	4a31      	ldr	r2, [pc, #196]	; (800f5d8 <TIM_SlaveTimer_SetConfig+0x170>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d050      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
 800f518:	4a30      	ldr	r2, [pc, #192]	; (800f5dc <TIM_SlaveTimer_SetConfig+0x174>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d04d      	beq.n	800f5ba <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f51e:	e04d      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6818      	ldr	r0, [r3, #0]
 800f524:	683b      	ldr	r3, [r7, #0]
 800f526:	68d9      	ldr	r1, [r3, #12]
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	689a      	ldr	r2, [r3, #8]
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	691b      	ldr	r3, [r3, #16]
 800f530:	f000 f9fc 	bl	800f92c <TIM_ETR_SetConfig>
      break;
 800f534:	e042      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	2b05      	cmp	r3, #5
 800f53c:	d004      	beq.n	800f548 <TIM_SlaveTimer_SetConfig+0xe0>
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800f546:	d101      	bne.n	800f54c <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800f548:	2301      	movs	r3, #1
 800f54a:	e038      	b.n	800f5be <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	6a1b      	ldr	r3, [r3, #32]
 800f552:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	6a1a      	ldr	r2, [r3, #32]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	f022 0201 	bic.w	r2, r2, #1
 800f562:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	699b      	ldr	r3, [r3, #24]
 800f56a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f572:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f574:	683b      	ldr	r3, [r7, #0]
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	011b      	lsls	r3, r3, #4
 800f57a:	68fa      	ldr	r2, [r7, #12]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	621a      	str	r2, [r3, #32]
      break;
 800f590:	e014      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	6818      	ldr	r0, [r3, #0]
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	6899      	ldr	r1, [r3, #8]
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	691b      	ldr	r3, [r3, #16]
 800f59e:	461a      	mov	r2, r3
 800f5a0:	f000 f892 	bl	800f6c8 <TIM_TI1_ConfigInputStage>
      break;
 800f5a4:	e00a      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6818      	ldr	r0, [r3, #0]
 800f5aa:	683b      	ldr	r3, [r7, #0]
 800f5ac:	6899      	ldr	r1, [r3, #8]
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	691b      	ldr	r3, [r3, #16]
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	f000 f8f4 	bl	800f7a0 <TIM_TI2_ConfigInputStage>
      break;
 800f5b8:	e000      	b.n	800f5bc <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800f5ba:	bf00      	nop
  }
  return HAL_OK;
 800f5bc:	2300      	movs	r3, #0
}
 800f5be:	4618      	mov	r0, r3
 800f5c0:	3718      	adds	r7, #24
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}
 800f5c6:	bf00      	nop
 800f5c8:	00100030 	.word	0x00100030
 800f5cc:	00100020 	.word	0x00100020
 800f5d0:	00100050 	.word	0x00100050
 800f5d4:	00100040 	.word	0x00100040
 800f5d8:	00100060 	.word	0x00100060
 800f5dc:	00100070 	.word	0x00100070

0800f5e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	6a1b      	ldr	r3, [r3, #32]
 800f5f2:	f023 0201 	bic.w	r2, r3, #1
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
 800f5fc:	699b      	ldr	r3, [r3, #24]
 800f5fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	6a1b      	ldr	r3, [r3, #32]
 800f604:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	4a28      	ldr	r2, [pc, #160]	; (800f6ac <TIM_TI1_SetConfig+0xcc>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d01b      	beq.n	800f646 <TIM_TI1_SetConfig+0x66>
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f614:	d017      	beq.n	800f646 <TIM_TI1_SetConfig+0x66>
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	4a25      	ldr	r2, [pc, #148]	; (800f6b0 <TIM_TI1_SetConfig+0xd0>)
 800f61a:	4293      	cmp	r3, r2
 800f61c:	d013      	beq.n	800f646 <TIM_TI1_SetConfig+0x66>
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	4a24      	ldr	r2, [pc, #144]	; (800f6b4 <TIM_TI1_SetConfig+0xd4>)
 800f622:	4293      	cmp	r3, r2
 800f624:	d00f      	beq.n	800f646 <TIM_TI1_SetConfig+0x66>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	4a23      	ldr	r2, [pc, #140]	; (800f6b8 <TIM_TI1_SetConfig+0xd8>)
 800f62a:	4293      	cmp	r3, r2
 800f62c:	d00b      	beq.n	800f646 <TIM_TI1_SetConfig+0x66>
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	4a22      	ldr	r2, [pc, #136]	; (800f6bc <TIM_TI1_SetConfig+0xdc>)
 800f632:	4293      	cmp	r3, r2
 800f634:	d007      	beq.n	800f646 <TIM_TI1_SetConfig+0x66>
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	4a21      	ldr	r2, [pc, #132]	; (800f6c0 <TIM_TI1_SetConfig+0xe0>)
 800f63a:	4293      	cmp	r3, r2
 800f63c:	d003      	beq.n	800f646 <TIM_TI1_SetConfig+0x66>
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	4a20      	ldr	r2, [pc, #128]	; (800f6c4 <TIM_TI1_SetConfig+0xe4>)
 800f642:	4293      	cmp	r3, r2
 800f644:	d101      	bne.n	800f64a <TIM_TI1_SetConfig+0x6a>
 800f646:	2301      	movs	r3, #1
 800f648:	e000      	b.n	800f64c <TIM_TI1_SetConfig+0x6c>
 800f64a:	2300      	movs	r3, #0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d008      	beq.n	800f662 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f650:	697b      	ldr	r3, [r7, #20]
 800f652:	f023 0303 	bic.w	r3, r3, #3
 800f656:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f658:	697a      	ldr	r2, [r7, #20]
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	4313      	orrs	r3, r2
 800f65e:	617b      	str	r3, [r7, #20]
 800f660:	e003      	b.n	800f66a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f662:	697b      	ldr	r3, [r7, #20]
 800f664:	f043 0301 	orr.w	r3, r3, #1
 800f668:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f672:	683b      	ldr	r3, [r7, #0]
 800f674:	011b      	lsls	r3, r3, #4
 800f676:	b2db      	uxtb	r3, r3
 800f678:	697a      	ldr	r2, [r7, #20]
 800f67a:	4313      	orrs	r3, r2
 800f67c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f67e:	693b      	ldr	r3, [r7, #16]
 800f680:	f023 030a 	bic.w	r3, r3, #10
 800f684:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f686:	68bb      	ldr	r3, [r7, #8]
 800f688:	f003 030a 	and.w	r3, r3, #10
 800f68c:	693a      	ldr	r2, [r7, #16]
 800f68e:	4313      	orrs	r3, r2
 800f690:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	697a      	ldr	r2, [r7, #20]
 800f696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	693a      	ldr	r2, [r7, #16]
 800f69c:	621a      	str	r2, [r3, #32]
}
 800f69e:	bf00      	nop
 800f6a0:	371c      	adds	r7, #28
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	40012c00 	.word	0x40012c00
 800f6b0:	40000400 	.word	0x40000400
 800f6b4:	40000800 	.word	0x40000800
 800f6b8:	40000c00 	.word	0x40000c00
 800f6bc:	40013400 	.word	0x40013400
 800f6c0:	40014000 	.word	0x40014000
 800f6c4:	40015000 	.word	0x40015000

0800f6c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	b087      	sub	sp, #28
 800f6cc:	af00      	add	r7, sp, #0
 800f6ce:	60f8      	str	r0, [r7, #12]
 800f6d0:	60b9      	str	r1, [r7, #8]
 800f6d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	6a1b      	ldr	r3, [r3, #32]
 800f6d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	6a1b      	ldr	r3, [r3, #32]
 800f6de:	f023 0201 	bic.w	r2, r3, #1
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	699b      	ldr	r3, [r3, #24]
 800f6ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f6f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	011b      	lsls	r3, r3, #4
 800f6f8:	693a      	ldr	r2, [r7, #16]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6fe:	697b      	ldr	r3, [r7, #20]
 800f700:	f023 030a 	bic.w	r3, r3, #10
 800f704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f706:	697a      	ldr	r2, [r7, #20]
 800f708:	68bb      	ldr	r3, [r7, #8]
 800f70a:	4313      	orrs	r3, r2
 800f70c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	693a      	ldr	r2, [r7, #16]
 800f712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	697a      	ldr	r2, [r7, #20]
 800f718:	621a      	str	r2, [r3, #32]
}
 800f71a:	bf00      	nop
 800f71c:	371c      	adds	r7, #28
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr

0800f726 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f726:	b480      	push	{r7}
 800f728:	b087      	sub	sp, #28
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	60f8      	str	r0, [r7, #12]
 800f72e:	60b9      	str	r1, [r7, #8]
 800f730:	607a      	str	r2, [r7, #4]
 800f732:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	6a1b      	ldr	r3, [r3, #32]
 800f738:	f023 0210 	bic.w	r2, r3, #16
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	699b      	ldr	r3, [r3, #24]
 800f744:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	6a1b      	ldr	r3, [r3, #32]
 800f74a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f752:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	021b      	lsls	r3, r3, #8
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f764:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	031b      	lsls	r3, r3, #12
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	697a      	ldr	r2, [r7, #20]
 800f76e:	4313      	orrs	r3, r2
 800f770:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f778:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f77a:	68bb      	ldr	r3, [r7, #8]
 800f77c:	011b      	lsls	r3, r3, #4
 800f77e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f782:	693a      	ldr	r2, [r7, #16]
 800f784:	4313      	orrs	r3, r2
 800f786:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	697a      	ldr	r2, [r7, #20]
 800f78c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	693a      	ldr	r2, [r7, #16]
 800f792:	621a      	str	r2, [r3, #32]
}
 800f794:	bf00      	nop
 800f796:	371c      	adds	r7, #28
 800f798:	46bd      	mov	sp, r7
 800f79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f79e:	4770      	bx	lr

0800f7a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b087      	sub	sp, #28
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	60f8      	str	r0, [r7, #12]
 800f7a8:	60b9      	str	r1, [r7, #8]
 800f7aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	6a1b      	ldr	r3, [r3, #32]
 800f7b0:	f023 0210 	bic.w	r2, r3, #16
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7b8:	68fb      	ldr	r3, [r7, #12]
 800f7ba:	699b      	ldr	r3, [r3, #24]
 800f7bc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	6a1b      	ldr	r3, [r3, #32]
 800f7c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f7ca:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	031b      	lsls	r3, r3, #12
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f7dc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	011b      	lsls	r3, r3, #4
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	697a      	ldr	r2, [r7, #20]
 800f7ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	693a      	ldr	r2, [r7, #16]
 800f7f2:	621a      	str	r2, [r3, #32]
}
 800f7f4:	bf00      	nop
 800f7f6:	371c      	adds	r7, #28
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fe:	4770      	bx	lr

0800f800 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f800:	b480      	push	{r7}
 800f802:	b087      	sub	sp, #28
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
 800f80c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6a1b      	ldr	r3, [r3, #32]
 800f812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	69db      	ldr	r3, [r3, #28]
 800f81e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	6a1b      	ldr	r3, [r3, #32]
 800f824:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	f023 0303 	bic.w	r3, r3, #3
 800f82c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f82e:	697a      	ldr	r2, [r7, #20]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	4313      	orrs	r3, r2
 800f834:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f836:	697b      	ldr	r3, [r7, #20]
 800f838:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f83c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	011b      	lsls	r3, r3, #4
 800f842:	b2db      	uxtb	r3, r3
 800f844:	697a      	ldr	r2, [r7, #20]
 800f846:	4313      	orrs	r3, r2
 800f848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f84a:	693b      	ldr	r3, [r7, #16]
 800f84c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800f850:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	021b      	lsls	r3, r3, #8
 800f856:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800f85a:	693a      	ldr	r2, [r7, #16]
 800f85c:	4313      	orrs	r3, r2
 800f85e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	697a      	ldr	r2, [r7, #20]
 800f864:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	693a      	ldr	r2, [r7, #16]
 800f86a:	621a      	str	r2, [r3, #32]
}
 800f86c:	bf00      	nop
 800f86e:	371c      	adds	r7, #28
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f878:	b480      	push	{r7}
 800f87a:	b087      	sub	sp, #28
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	60f8      	str	r0, [r7, #12]
 800f880:	60b9      	str	r1, [r7, #8]
 800f882:	607a      	str	r2, [r7, #4]
 800f884:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	6a1b      	ldr	r3, [r3, #32]
 800f88a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	69db      	ldr	r3, [r3, #28]
 800f896:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6a1b      	ldr	r3, [r3, #32]
 800f89c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f89e:	697b      	ldr	r3, [r7, #20]
 800f8a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8a4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	021b      	lsls	r3, r3, #8
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f8b6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	031b      	lsls	r3, r3, #12
 800f8bc:	b29b      	uxth	r3, r3
 800f8be:	697a      	ldr	r2, [r7, #20]
 800f8c0:	4313      	orrs	r3, r2
 800f8c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800f8ca:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f8cc:	68bb      	ldr	r3, [r7, #8]
 800f8ce:	031b      	lsls	r3, r3, #12
 800f8d0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800f8d4:	693a      	ldr	r2, [r7, #16]
 800f8d6:	4313      	orrs	r3, r2
 800f8d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	697a      	ldr	r2, [r7, #20]
 800f8de:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	693a      	ldr	r2, [r7, #16]
 800f8e4:	621a      	str	r2, [r3, #32]
}
 800f8e6:	bf00      	nop
 800f8e8:	371c      	adds	r7, #28
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr

0800f8f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f8f2:	b480      	push	{r7}
 800f8f4:	b085      	sub	sp, #20
 800f8f6:	af00      	add	r7, sp, #0
 800f8f8:	6078      	str	r0, [r7, #4]
 800f8fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	689b      	ldr	r3, [r3, #8]
 800f900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f908:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f90c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	4313      	orrs	r3, r2
 800f914:	f043 0307 	orr.w	r3, r3, #7
 800f918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	68fa      	ldr	r2, [r7, #12]
 800f91e:	609a      	str	r2, [r3, #8]
}
 800f920:	bf00      	nop
 800f922:	3714      	adds	r7, #20
 800f924:	46bd      	mov	sp, r7
 800f926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92a:	4770      	bx	lr

0800f92c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f92c:	b480      	push	{r7}
 800f92e:	b087      	sub	sp, #28
 800f930:	af00      	add	r7, sp, #0
 800f932:	60f8      	str	r0, [r7, #12]
 800f934:	60b9      	str	r1, [r7, #8]
 800f936:	607a      	str	r2, [r7, #4]
 800f938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	021a      	lsls	r2, r3, #8
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	431a      	orrs	r2, r3
 800f950:	68bb      	ldr	r3, [r7, #8]
 800f952:	4313      	orrs	r3, r2
 800f954:	697a      	ldr	r2, [r7, #20]
 800f956:	4313      	orrs	r3, r2
 800f958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	697a      	ldr	r2, [r7, #20]
 800f95e:	609a      	str	r2, [r3, #8]
}
 800f960:	bf00      	nop
 800f962:	371c      	adds	r7, #28
 800f964:	46bd      	mov	sp, r7
 800f966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96a:	4770      	bx	lr

0800f96c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f96c:	b480      	push	{r7}
 800f96e:	b087      	sub	sp, #28
 800f970:	af00      	add	r7, sp, #0
 800f972:	60f8      	str	r0, [r7, #12]
 800f974:	60b9      	str	r1, [r7, #8]
 800f976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	f003 031f 	and.w	r3, r3, #31
 800f97e:	2201      	movs	r2, #1
 800f980:	fa02 f303 	lsl.w	r3, r2, r3
 800f984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	6a1a      	ldr	r2, [r3, #32]
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	43db      	mvns	r3, r3
 800f98e:	401a      	ands	r2, r3
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	6a1a      	ldr	r2, [r3, #32]
 800f998:	68bb      	ldr	r3, [r7, #8]
 800f99a:	f003 031f 	and.w	r3, r3, #31
 800f99e:	6879      	ldr	r1, [r7, #4]
 800f9a0:	fa01 f303 	lsl.w	r3, r1, r3
 800f9a4:	431a      	orrs	r2, r3
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	621a      	str	r2, [r3, #32]
}
 800f9aa:	bf00      	nop
 800f9ac:	371c      	adds	r7, #28
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b4:	4770      	bx	lr
	...

0800f9b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b085      	sub	sp, #20
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
 800f9c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d101      	bne.n	800f9d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f9cc:	2302      	movs	r3, #2
 800f9ce:	e074      	b.n	800faba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	2202      	movs	r2, #2
 800f9dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a34      	ldr	r2, [pc, #208]	; (800fac8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d009      	beq.n	800fa0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	4a33      	ldr	r2, [pc, #204]	; (800facc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d004      	beq.n	800fa0e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4a31      	ldr	r2, [pc, #196]	; (800fad0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	d108      	bne.n	800fa20 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fa14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	68fa      	ldr	r2, [r7, #12]
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fa26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	68fa      	ldr	r2, [r7, #12]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	68fa      	ldr	r2, [r7, #12]
 800fa3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	4a21      	ldr	r2, [pc, #132]	; (800fac8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fa44:	4293      	cmp	r3, r2
 800fa46:	d022      	beq.n	800fa8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa50:	d01d      	beq.n	800fa8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	4a1f      	ldr	r2, [pc, #124]	; (800fad4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d018      	beq.n	800fa8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	4a1d      	ldr	r2, [pc, #116]	; (800fad8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fa62:	4293      	cmp	r3, r2
 800fa64:	d013      	beq.n	800fa8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	4a1c      	ldr	r2, [pc, #112]	; (800fadc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d00e      	beq.n	800fa8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	4a15      	ldr	r2, [pc, #84]	; (800facc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa76:	4293      	cmp	r3, r2
 800fa78:	d009      	beq.n	800fa8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	4a18      	ldr	r2, [pc, #96]	; (800fae0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fa80:	4293      	cmp	r3, r2
 800fa82:	d004      	beq.n	800fa8e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	4a11      	ldr	r2, [pc, #68]	; (800fad0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d10c      	bne.n	800faa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fa94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	68ba      	ldr	r2, [r7, #8]
 800fa9c:	4313      	orrs	r3, r2
 800fa9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	68ba      	ldr	r2, [r7, #8]
 800faa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2201      	movs	r2, #1
 800faac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fab8:	2300      	movs	r3, #0
}
 800faba:	4618      	mov	r0, r3
 800fabc:	3714      	adds	r7, #20
 800fabe:	46bd      	mov	sp, r7
 800fac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac4:	4770      	bx	lr
 800fac6:	bf00      	nop
 800fac8:	40012c00 	.word	0x40012c00
 800facc:	40013400 	.word	0x40013400
 800fad0:	40015000 	.word	0x40015000
 800fad4:	40000400 	.word	0x40000400
 800fad8:	40000800 	.word	0x40000800
 800fadc:	40000c00 	.word	0x40000c00
 800fae0:	40014000 	.word	0x40014000

0800fae4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fae4:	b480      	push	{r7}
 800fae6:	b085      	sub	sp, #20
 800fae8:	af00      	add	r7, sp, #0
 800faea:	6078      	str	r0, [r7, #4]
 800faec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800faee:	2300      	movs	r3, #0
 800faf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d101      	bne.n	800fb00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fafc:	2302      	movs	r3, #2
 800fafe:	e096      	b.n	800fc2e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2201      	movs	r2, #1
 800fb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fb0e:	683b      	ldr	r3, [r7, #0]
 800fb10:	68db      	ldr	r3, [r3, #12]
 800fb12:	4313      	orrs	r3, r2
 800fb14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	689b      	ldr	r3, [r3, #8]
 800fb20:	4313      	orrs	r3, r2
 800fb22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	4313      	orrs	r3, r2
 800fb30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4313      	orrs	r3, r2
 800fb3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb46:	683b      	ldr	r3, [r7, #0]
 800fb48:	691b      	ldr	r3, [r3, #16]
 800fb4a:	4313      	orrs	r3, r2
 800fb4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	695b      	ldr	r3, [r3, #20]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb66:	4313      	orrs	r3, r2
 800fb68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	699b      	ldr	r3, [r3, #24]
 800fb74:	041b      	lsls	r3, r3, #16
 800fb76:	4313      	orrs	r3, r2
 800fb78:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4a2f      	ldr	r2, [pc, #188]	; (800fc3c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fb80:	4293      	cmp	r3, r2
 800fb82:	d009      	beq.n	800fb98 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a2d      	ldr	r2, [pc, #180]	; (800fc40 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d004      	beq.n	800fb98 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4a2c      	ldr	r2, [pc, #176]	; (800fc44 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d106      	bne.n	800fba6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	69db      	ldr	r3, [r3, #28]
 800fba2:	4313      	orrs	r3, r2
 800fba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a24      	ldr	r2, [pc, #144]	; (800fc3c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d009      	beq.n	800fbc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a22      	ldr	r2, [pc, #136]	; (800fc40 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d004      	beq.n	800fbc4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a21      	ldr	r2, [pc, #132]	; (800fc44 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d12b      	bne.n	800fc1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fbca:	683b      	ldr	r3, [r7, #0]
 800fbcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbce:	051b      	lsls	r3, r3, #20
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	6a1b      	ldr	r3, [r3, #32]
 800fbde:	4313      	orrs	r3, r2
 800fbe0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fbe8:	683b      	ldr	r3, [r7, #0]
 800fbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbec:	4313      	orrs	r3, r2
 800fbee:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a11      	ldr	r2, [pc, #68]	; (800fc3c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d009      	beq.n	800fc0e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	4a10      	ldr	r2, [pc, #64]	; (800fc40 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fc00:	4293      	cmp	r3, r2
 800fc02:	d004      	beq.n	800fc0e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	4a0e      	ldr	r2, [pc, #56]	; (800fc44 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fc0a:	4293      	cmp	r3, r2
 800fc0c:	d106      	bne.n	800fc1c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fc14:	683b      	ldr	r3, [r7, #0]
 800fc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc18:	4313      	orrs	r3, r2
 800fc1a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2200      	movs	r2, #0
 800fc28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc2c:	2300      	movs	r3, #0
}
 800fc2e:	4618      	mov	r0, r3
 800fc30:	3714      	adds	r7, #20
 800fc32:	46bd      	mov	sp, r7
 800fc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc38:	4770      	bx	lr
 800fc3a:	bf00      	nop
 800fc3c:	40012c00 	.word	0x40012c00
 800fc40:	40013400 	.word	0x40013400
 800fc44:	40015000 	.word	0x40015000

0800fc48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc48:	b480      	push	{r7}
 800fc4a:	b083      	sub	sp, #12
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc50:	bf00      	nop
 800fc52:	370c      	adds	r7, #12
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr

0800fc5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc64:	bf00      	nop
 800fc66:	370c      	adds	r7, #12
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6e:	4770      	bx	lr

0800fc70 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fc70:	b480      	push	{r7}
 800fc72:	b083      	sub	sp, #12
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fc78:	bf00      	nop
 800fc7a:	370c      	adds	r7, #12
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr

0800fc84 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fc84:	b480      	push	{r7}
 800fc86:	b083      	sub	sp, #12
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fc8c:	bf00      	nop
 800fc8e:	370c      	adds	r7, #12
 800fc90:	46bd      	mov	sp, r7
 800fc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc96:	4770      	bx	lr

0800fc98 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fc98:	b480      	push	{r7}
 800fc9a:	b083      	sub	sp, #12
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fca0:	bf00      	nop
 800fca2:	370c      	adds	r7, #12
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr

0800fcac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fcac:	b480      	push	{r7}
 800fcae:	b083      	sub	sp, #12
 800fcb0:	af00      	add	r7, sp, #0
 800fcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fcb4:	bf00      	nop
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	b083      	sub	sp, #12
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fcc8:	bf00      	nop
 800fcca:	370c      	adds	r7, #12
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <LL_EXTI_EnableIT_0_31>:
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b083      	sub	sp, #12
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800fcdc:	4b05      	ldr	r3, [pc, #20]	; (800fcf4 <LL_EXTI_EnableIT_0_31+0x20>)
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	4904      	ldr	r1, [pc, #16]	; (800fcf4 <LL_EXTI_EnableIT_0_31+0x20>)
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	4313      	orrs	r3, r2
 800fce6:	600b      	str	r3, [r1, #0]
}
 800fce8:	bf00      	nop
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr
 800fcf4:	40010400 	.word	0x40010400

0800fcf8 <LL_EXTI_EnableIT_32_63>:
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	b083      	sub	sp, #12
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800fd00:	4b05      	ldr	r3, [pc, #20]	; (800fd18 <LL_EXTI_EnableIT_32_63+0x20>)
 800fd02:	6a1a      	ldr	r2, [r3, #32]
 800fd04:	4904      	ldr	r1, [pc, #16]	; (800fd18 <LL_EXTI_EnableIT_32_63+0x20>)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	4313      	orrs	r3, r2
 800fd0a:	620b      	str	r3, [r1, #32]
}
 800fd0c:	bf00      	nop
 800fd0e:	370c      	adds	r7, #12
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr
 800fd18:	40010400 	.word	0x40010400

0800fd1c <LL_EXTI_DisableIT_0_31>:
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800fd24:	4b06      	ldr	r3, [pc, #24]	; (800fd40 <LL_EXTI_DisableIT_0_31+0x24>)
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	43db      	mvns	r3, r3
 800fd2c:	4904      	ldr	r1, [pc, #16]	; (800fd40 <LL_EXTI_DisableIT_0_31+0x24>)
 800fd2e:	4013      	ands	r3, r2
 800fd30:	600b      	str	r3, [r1, #0]
}
 800fd32:	bf00      	nop
 800fd34:	370c      	adds	r7, #12
 800fd36:	46bd      	mov	sp, r7
 800fd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd3c:	4770      	bx	lr
 800fd3e:	bf00      	nop
 800fd40:	40010400 	.word	0x40010400

0800fd44 <LL_EXTI_DisableIT_32_63>:
{
 800fd44:	b480      	push	{r7}
 800fd46:	b083      	sub	sp, #12
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800fd4c:	4b06      	ldr	r3, [pc, #24]	; (800fd68 <LL_EXTI_DisableIT_32_63+0x24>)
 800fd4e:	6a1a      	ldr	r2, [r3, #32]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	43db      	mvns	r3, r3
 800fd54:	4904      	ldr	r1, [pc, #16]	; (800fd68 <LL_EXTI_DisableIT_32_63+0x24>)
 800fd56:	4013      	ands	r3, r2
 800fd58:	620b      	str	r3, [r1, #32]
}
 800fd5a:	bf00      	nop
 800fd5c:	370c      	adds	r7, #12
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	40010400 	.word	0x40010400

0800fd6c <LL_EXTI_EnableEvent_0_31>:
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800fd74:	4b05      	ldr	r3, [pc, #20]	; (800fd8c <LL_EXTI_EnableEvent_0_31+0x20>)
 800fd76:	685a      	ldr	r2, [r3, #4]
 800fd78:	4904      	ldr	r1, [pc, #16]	; (800fd8c <LL_EXTI_EnableEvent_0_31+0x20>)
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4313      	orrs	r3, r2
 800fd7e:	604b      	str	r3, [r1, #4]
}
 800fd80:	bf00      	nop
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr
 800fd8c:	40010400 	.word	0x40010400

0800fd90 <LL_EXTI_EnableEvent_32_63>:
{
 800fd90:	b480      	push	{r7}
 800fd92:	b083      	sub	sp, #12
 800fd94:	af00      	add	r7, sp, #0
 800fd96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800fd98:	4b05      	ldr	r3, [pc, #20]	; (800fdb0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800fd9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd9c:	4904      	ldr	r1, [pc, #16]	; (800fdb0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4313      	orrs	r3, r2
 800fda2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800fda4:	bf00      	nop
 800fda6:	370c      	adds	r7, #12
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdae:	4770      	bx	lr
 800fdb0:	40010400 	.word	0x40010400

0800fdb4 <LL_EXTI_DisableEvent_0_31>:
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b083      	sub	sp, #12
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800fdbe:	685a      	ldr	r2, [r3, #4]
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	43db      	mvns	r3, r3
 800fdc4:	4904      	ldr	r1, [pc, #16]	; (800fdd8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800fdc6:	4013      	ands	r3, r2
 800fdc8:	604b      	str	r3, [r1, #4]
}
 800fdca:	bf00      	nop
 800fdcc:	370c      	adds	r7, #12
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd4:	4770      	bx	lr
 800fdd6:	bf00      	nop
 800fdd8:	40010400 	.word	0x40010400

0800fddc <LL_EXTI_DisableEvent_32_63>:
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800fde4:	4b06      	ldr	r3, [pc, #24]	; (800fe00 <LL_EXTI_DisableEvent_32_63+0x24>)
 800fde6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	43db      	mvns	r3, r3
 800fdec:	4904      	ldr	r1, [pc, #16]	; (800fe00 <LL_EXTI_DisableEvent_32_63+0x24>)
 800fdee:	4013      	ands	r3, r2
 800fdf0:	624b      	str	r3, [r1, #36]	; 0x24
}
 800fdf2:	bf00      	nop
 800fdf4:	370c      	adds	r7, #12
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdfc:	4770      	bx	lr
 800fdfe:	bf00      	nop
 800fe00:	40010400 	.word	0x40010400

0800fe04 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800fe04:	b480      	push	{r7}
 800fe06:	b083      	sub	sp, #12
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800fe0c:	4b05      	ldr	r3, [pc, #20]	; (800fe24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800fe0e:	689a      	ldr	r2, [r3, #8]
 800fe10:	4904      	ldr	r1, [pc, #16]	; (800fe24 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	4313      	orrs	r3, r2
 800fe16:	608b      	str	r3, [r1, #8]
}
 800fe18:	bf00      	nop
 800fe1a:	370c      	adds	r7, #12
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr
 800fe24:	40010400 	.word	0x40010400

0800fe28 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b083      	sub	sp, #12
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800fe30:	4b05      	ldr	r3, [pc, #20]	; (800fe48 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fe32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe34:	4904      	ldr	r1, [pc, #16]	; (800fe48 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800fe3c:	bf00      	nop
 800fe3e:	370c      	adds	r7, #12
 800fe40:	46bd      	mov	sp, r7
 800fe42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe46:	4770      	bx	lr
 800fe48:	40010400 	.word	0x40010400

0800fe4c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b083      	sub	sp, #12
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800fe54:	4b06      	ldr	r3, [pc, #24]	; (800fe70 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800fe56:	689a      	ldr	r2, [r3, #8]
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	43db      	mvns	r3, r3
 800fe5c:	4904      	ldr	r1, [pc, #16]	; (800fe70 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800fe5e:	4013      	ands	r3, r2
 800fe60:	608b      	str	r3, [r1, #8]
}
 800fe62:	bf00      	nop
 800fe64:	370c      	adds	r7, #12
 800fe66:	46bd      	mov	sp, r7
 800fe68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe6c:	4770      	bx	lr
 800fe6e:	bf00      	nop
 800fe70:	40010400 	.word	0x40010400

0800fe74 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800fe74:	b480      	push	{r7}
 800fe76:	b083      	sub	sp, #12
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800fe7c:	4b06      	ldr	r3, [pc, #24]	; (800fe98 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800fe7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	43db      	mvns	r3, r3
 800fe84:	4904      	ldr	r1, [pc, #16]	; (800fe98 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800fe86:	4013      	ands	r3, r2
 800fe88:	628b      	str	r3, [r1, #40]	; 0x28
}
 800fe8a:	bf00      	nop
 800fe8c:	370c      	adds	r7, #12
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop
 800fe98:	40010400 	.word	0x40010400

0800fe9c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800fea4:	4b05      	ldr	r3, [pc, #20]	; (800febc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800fea6:	68da      	ldr	r2, [r3, #12]
 800fea8:	4904      	ldr	r1, [pc, #16]	; (800febc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	4313      	orrs	r3, r2
 800feae:	60cb      	str	r3, [r1, #12]
}
 800feb0:	bf00      	nop
 800feb2:	370c      	adds	r7, #12
 800feb4:	46bd      	mov	sp, r7
 800feb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feba:	4770      	bx	lr
 800febc:	40010400 	.word	0x40010400

0800fec0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800fec8:	4b05      	ldr	r3, [pc, #20]	; (800fee0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800feca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fecc:	4904      	ldr	r1, [pc, #16]	; (800fee0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	4313      	orrs	r3, r2
 800fed2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800fed4:	bf00      	nop
 800fed6:	370c      	adds	r7, #12
 800fed8:	46bd      	mov	sp, r7
 800feda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fede:	4770      	bx	lr
 800fee0:	40010400 	.word	0x40010400

0800fee4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800feec:	4b06      	ldr	r3, [pc, #24]	; (800ff08 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800feee:	68da      	ldr	r2, [r3, #12]
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	43db      	mvns	r3, r3
 800fef4:	4904      	ldr	r1, [pc, #16]	; (800ff08 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800fef6:	4013      	ands	r3, r2
 800fef8:	60cb      	str	r3, [r1, #12]
}
 800fefa:	bf00      	nop
 800fefc:	370c      	adds	r7, #12
 800fefe:	46bd      	mov	sp, r7
 800ff00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	40010400 	.word	0x40010400

0800ff0c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ff0c:	b480      	push	{r7}
 800ff0e:	b083      	sub	sp, #12
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ff14:	4b06      	ldr	r3, [pc, #24]	; (800ff30 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ff16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	43db      	mvns	r3, r3
 800ff1c:	4904      	ldr	r1, [pc, #16]	; (800ff30 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ff1e:	4013      	ands	r3, r2
 800ff20:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ff22:	bf00      	nop
 800ff24:	370c      	adds	r7, #12
 800ff26:	46bd      	mov	sp, r7
 800ff28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2c:	4770      	bx	lr
 800ff2e:	bf00      	nop
 800ff30:	40010400 	.word	0x40010400

0800ff34 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b084      	sub	sp, #16
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	7a1b      	ldrb	r3, [r3, #8]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f000 80c8 	beq.w	80100da <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d05d      	beq.n	801000e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	7a5b      	ldrb	r3, [r3, #9]
 800ff56:	2b01      	cmp	r3, #1
 800ff58:	d00e      	beq.n	800ff78 <LL_EXTI_Init+0x44>
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d017      	beq.n	800ff8e <LL_EXTI_Init+0x5a>
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d120      	bne.n	800ffa4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	4618      	mov	r0, r3
 800ff68:	f7ff ff24 	bl	800fdb4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	4618      	mov	r0, r3
 800ff72:	f7ff feaf 	bl	800fcd4 <LL_EXTI_EnableIT_0_31>
          break;
 800ff76:	e018      	b.n	800ffaa <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7ff fecd 	bl	800fd1c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	4618      	mov	r0, r3
 800ff88:	f7ff fef0 	bl	800fd6c <LL_EXTI_EnableEvent_0_31>
          break;
 800ff8c:	e00d      	b.n	800ffaa <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	4618      	mov	r0, r3
 800ff94:	f7ff fe9e 	bl	800fcd4 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	f7ff fee5 	bl	800fd6c <LL_EXTI_EnableEvent_0_31>
          break;
 800ffa2:	e002      	b.n	800ffaa <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800ffa4:	2301      	movs	r3, #1
 800ffa6:	60fb      	str	r3, [r7, #12]
          break;
 800ffa8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	7a9b      	ldrb	r3, [r3, #10]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d02d      	beq.n	801000e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	7a9b      	ldrb	r3, [r3, #10]
 800ffb6:	2b02      	cmp	r3, #2
 800ffb8:	d00e      	beq.n	800ffd8 <LL_EXTI_Init+0xa4>
 800ffba:	2b03      	cmp	r3, #3
 800ffbc:	d017      	beq.n	800ffee <LL_EXTI_Init+0xba>
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d120      	bne.n	8010004 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff ff8c 	bl	800fee4 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff ff17 	bl	800fe04 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800ffd6:	e01b      	b.n	8010010 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4618      	mov	r0, r3
 800ffde:	f7ff ff35 	bl	800fe4c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	f7ff ff58 	bl	800fe9c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800ffec:	e010      	b.n	8010010 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff ff06 	bl	800fe04 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7ff ff4d 	bl	800fe9c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8010002:	e005      	b.n	8010010 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	f043 0302 	orr.w	r3, r3, #2
 801000a:	60fb      	str	r3, [r7, #12]
            break;
 801000c:	e000      	b.n	8010010 <LL_EXTI_Init+0xdc>
        }
      }
 801000e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	685b      	ldr	r3, [r3, #4]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d075      	beq.n	8010104 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	7a5b      	ldrb	r3, [r3, #9]
 801001c:	2b01      	cmp	r3, #1
 801001e:	d00e      	beq.n	801003e <LL_EXTI_Init+0x10a>
 8010020:	2b02      	cmp	r3, #2
 8010022:	d017      	beq.n	8010054 <LL_EXTI_Init+0x120>
 8010024:	2b00      	cmp	r3, #0
 8010026:	d120      	bne.n	801006a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	685b      	ldr	r3, [r3, #4]
 801002c:	4618      	mov	r0, r3
 801002e:	f7ff fed5 	bl	800fddc <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	685b      	ldr	r3, [r3, #4]
 8010036:	4618      	mov	r0, r3
 8010038:	f7ff fe5e 	bl	800fcf8 <LL_EXTI_EnableIT_32_63>
          break;
 801003c:	e01a      	b.n	8010074 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	4618      	mov	r0, r3
 8010044:	f7ff fe7e 	bl	800fd44 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	4618      	mov	r0, r3
 801004e:	f7ff fe9f 	bl	800fd90 <LL_EXTI_EnableEvent_32_63>
          break;
 8010052:	e00f      	b.n	8010074 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	4618      	mov	r0, r3
 801005a:	f7ff fe4d 	bl	800fcf8 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	4618      	mov	r0, r3
 8010064:	f7ff fe94 	bl	800fd90 <LL_EXTI_EnableEvent_32_63>
          break;
 8010068:	e004      	b.n	8010074 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	f043 0304 	orr.w	r3, r3, #4
 8010070:	60fb      	str	r3, [r7, #12]
          break;
 8010072:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	7a9b      	ldrb	r3, [r3, #10]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d043      	beq.n	8010104 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	7a9b      	ldrb	r3, [r3, #10]
 8010080:	2b02      	cmp	r3, #2
 8010082:	d00e      	beq.n	80100a2 <LL_EXTI_Init+0x16e>
 8010084:	2b03      	cmp	r3, #3
 8010086:	d017      	beq.n	80100b8 <LL_EXTI_Init+0x184>
 8010088:	2b01      	cmp	r3, #1
 801008a:	d120      	bne.n	80100ce <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	685b      	ldr	r3, [r3, #4]
 8010090:	4618      	mov	r0, r3
 8010092:	f7ff ff3b 	bl	800ff0c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	685b      	ldr	r3, [r3, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fec4 	bl	800fe28 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80100a0:	e031      	b.n	8010106 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7ff fee4 	bl	800fe74 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	685b      	ldr	r3, [r3, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7ff ff05 	bl	800fec0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80100b6:	e026      	b.n	8010106 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	685b      	ldr	r3, [r3, #4]
 80100bc:	4618      	mov	r0, r3
 80100be:	f7ff feb3 	bl	800fe28 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	685b      	ldr	r3, [r3, #4]
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7ff fefa 	bl	800fec0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80100cc:	e01b      	b.n	8010106 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f043 0305 	orr.w	r3, r3, #5
 80100d4:	60fb      	str	r3, [r7, #12]
            break;
 80100d6:	bf00      	nop
 80100d8:	e015      	b.n	8010106 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	4618      	mov	r0, r3
 80100e0:	f7ff fe1c 	bl	800fd1c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7ff fe63 	bl	800fdb4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	685b      	ldr	r3, [r3, #4]
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7ff fe26 	bl	800fd44 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7ff fe6d 	bl	800fddc <LL_EXTI_DisableEvent_32_63>
 8010102:	e000      	b.n	8010106 <LL_EXTI_Init+0x1d2>
      }
 8010104:	bf00      	nop
  }

  return status;
 8010106:	68fb      	ldr	r3, [r7, #12]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3710      	adds	r7, #16
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <LL_GPIO_SetPinMode>:
{
 8010110:	b480      	push	{r7}
 8010112:	b089      	sub	sp, #36	; 0x24
 8010114:	af00      	add	r7, sp, #0
 8010116:	60f8      	str	r0, [r7, #12]
 8010118:	60b9      	str	r1, [r7, #8]
 801011a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	fa93 f3a3 	rbit	r3, r3
 801012a:	613b      	str	r3, [r7, #16]
  return result;
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	fab3 f383 	clz	r3, r3
 8010132:	b2db      	uxtb	r3, r3
 8010134:	005b      	lsls	r3, r3, #1
 8010136:	2103      	movs	r1, #3
 8010138:	fa01 f303 	lsl.w	r3, r1, r3
 801013c:	43db      	mvns	r3, r3
 801013e:	401a      	ands	r2, r3
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010144:	69fb      	ldr	r3, [r7, #28]
 8010146:	fa93 f3a3 	rbit	r3, r3
 801014a:	61bb      	str	r3, [r7, #24]
  return result;
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	fab3 f383 	clz	r3, r3
 8010152:	b2db      	uxtb	r3, r3
 8010154:	005b      	lsls	r3, r3, #1
 8010156:	6879      	ldr	r1, [r7, #4]
 8010158:	fa01 f303 	lsl.w	r3, r1, r3
 801015c:	431a      	orrs	r2, r3
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	601a      	str	r2, [r3, #0]
}
 8010162:	bf00      	nop
 8010164:	3724      	adds	r7, #36	; 0x24
 8010166:	46bd      	mov	sp, r7
 8010168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016c:	4770      	bx	lr

0801016e <LL_GPIO_SetPinOutputType>:
{
 801016e:	b480      	push	{r7}
 8010170:	b085      	sub	sp, #20
 8010172:	af00      	add	r7, sp, #0
 8010174:	60f8      	str	r0, [r7, #12]
 8010176:	60b9      	str	r1, [r7, #8]
 8010178:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	685a      	ldr	r2, [r3, #4]
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	43db      	mvns	r3, r3
 8010182:	401a      	ands	r2, r3
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	6879      	ldr	r1, [r7, #4]
 8010188:	fb01 f303 	mul.w	r3, r1, r3
 801018c:	431a      	orrs	r2, r3
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	605a      	str	r2, [r3, #4]
}
 8010192:	bf00      	nop
 8010194:	3714      	adds	r7, #20
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <LL_GPIO_SetPinSpeed>:
{
 801019e:	b480      	push	{r7}
 80101a0:	b089      	sub	sp, #36	; 0x24
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	60f8      	str	r0, [r7, #12]
 80101a6:	60b9      	str	r1, [r7, #8]
 80101a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	689a      	ldr	r2, [r3, #8]
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	fa93 f3a3 	rbit	r3, r3
 80101b8:	613b      	str	r3, [r7, #16]
  return result;
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	fab3 f383 	clz	r3, r3
 80101c0:	b2db      	uxtb	r3, r3
 80101c2:	005b      	lsls	r3, r3, #1
 80101c4:	2103      	movs	r1, #3
 80101c6:	fa01 f303 	lsl.w	r3, r1, r3
 80101ca:	43db      	mvns	r3, r3
 80101cc:	401a      	ands	r2, r3
 80101ce:	68bb      	ldr	r3, [r7, #8]
 80101d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101d2:	69fb      	ldr	r3, [r7, #28]
 80101d4:	fa93 f3a3 	rbit	r3, r3
 80101d8:	61bb      	str	r3, [r7, #24]
  return result;
 80101da:	69bb      	ldr	r3, [r7, #24]
 80101dc:	fab3 f383 	clz	r3, r3
 80101e0:	b2db      	uxtb	r3, r3
 80101e2:	005b      	lsls	r3, r3, #1
 80101e4:	6879      	ldr	r1, [r7, #4]
 80101e6:	fa01 f303 	lsl.w	r3, r1, r3
 80101ea:	431a      	orrs	r2, r3
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	609a      	str	r2, [r3, #8]
}
 80101f0:	bf00      	nop
 80101f2:	3724      	adds	r7, #36	; 0x24
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr

080101fc <LL_GPIO_SetPinPull>:
{
 80101fc:	b480      	push	{r7}
 80101fe:	b089      	sub	sp, #36	; 0x24
 8010200:	af00      	add	r7, sp, #0
 8010202:	60f8      	str	r0, [r7, #12]
 8010204:	60b9      	str	r1, [r7, #8]
 8010206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	68da      	ldr	r2, [r3, #12]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010210:	697b      	ldr	r3, [r7, #20]
 8010212:	fa93 f3a3 	rbit	r3, r3
 8010216:	613b      	str	r3, [r7, #16]
  return result;
 8010218:	693b      	ldr	r3, [r7, #16]
 801021a:	fab3 f383 	clz	r3, r3
 801021e:	b2db      	uxtb	r3, r3
 8010220:	005b      	lsls	r3, r3, #1
 8010222:	2103      	movs	r1, #3
 8010224:	fa01 f303 	lsl.w	r3, r1, r3
 8010228:	43db      	mvns	r3, r3
 801022a:	401a      	ands	r2, r3
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010230:	69fb      	ldr	r3, [r7, #28]
 8010232:	fa93 f3a3 	rbit	r3, r3
 8010236:	61bb      	str	r3, [r7, #24]
  return result;
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	fab3 f383 	clz	r3, r3
 801023e:	b2db      	uxtb	r3, r3
 8010240:	005b      	lsls	r3, r3, #1
 8010242:	6879      	ldr	r1, [r7, #4]
 8010244:	fa01 f303 	lsl.w	r3, r1, r3
 8010248:	431a      	orrs	r2, r3
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	60da      	str	r2, [r3, #12]
}
 801024e:	bf00      	nop
 8010250:	3724      	adds	r7, #36	; 0x24
 8010252:	46bd      	mov	sp, r7
 8010254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010258:	4770      	bx	lr

0801025a <LL_GPIO_SetAFPin_0_7>:
{
 801025a:	b480      	push	{r7}
 801025c:	b089      	sub	sp, #36	; 0x24
 801025e:	af00      	add	r7, sp, #0
 8010260:	60f8      	str	r0, [r7, #12]
 8010262:	60b9      	str	r1, [r7, #8]
 8010264:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	6a1a      	ldr	r2, [r3, #32]
 801026a:	68bb      	ldr	r3, [r7, #8]
 801026c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801026e:	697b      	ldr	r3, [r7, #20]
 8010270:	fa93 f3a3 	rbit	r3, r3
 8010274:	613b      	str	r3, [r7, #16]
  return result;
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	fab3 f383 	clz	r3, r3
 801027c:	b2db      	uxtb	r3, r3
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	210f      	movs	r1, #15
 8010282:	fa01 f303 	lsl.w	r3, r1, r3
 8010286:	43db      	mvns	r3, r3
 8010288:	401a      	ands	r2, r3
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801028e:	69fb      	ldr	r3, [r7, #28]
 8010290:	fa93 f3a3 	rbit	r3, r3
 8010294:	61bb      	str	r3, [r7, #24]
  return result;
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	fab3 f383 	clz	r3, r3
 801029c:	b2db      	uxtb	r3, r3
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	6879      	ldr	r1, [r7, #4]
 80102a2:	fa01 f303 	lsl.w	r3, r1, r3
 80102a6:	431a      	orrs	r2, r3
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	621a      	str	r2, [r3, #32]
}
 80102ac:	bf00      	nop
 80102ae:	3724      	adds	r7, #36	; 0x24
 80102b0:	46bd      	mov	sp, r7
 80102b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b6:	4770      	bx	lr

080102b8 <LL_GPIO_SetAFPin_8_15>:
{
 80102b8:	b480      	push	{r7}
 80102ba:	b089      	sub	sp, #36	; 0x24
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102c8:	68bb      	ldr	r3, [r7, #8]
 80102ca:	0a1b      	lsrs	r3, r3, #8
 80102cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	fa93 f3a3 	rbit	r3, r3
 80102d4:	613b      	str	r3, [r7, #16]
  return result;
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	fab3 f383 	clz	r3, r3
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	009b      	lsls	r3, r3, #2
 80102e0:	210f      	movs	r1, #15
 80102e2:	fa01 f303 	lsl.w	r3, r1, r3
 80102e6:	43db      	mvns	r3, r3
 80102e8:	401a      	ands	r2, r3
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	0a1b      	lsrs	r3, r3, #8
 80102ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	fa93 f3a3 	rbit	r3, r3
 80102f6:	61bb      	str	r3, [r7, #24]
  return result;
 80102f8:	69bb      	ldr	r3, [r7, #24]
 80102fa:	fab3 f383 	clz	r3, r3
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	6879      	ldr	r1, [r7, #4]
 8010304:	fa01 f303 	lsl.w	r3, r1, r3
 8010308:	431a      	orrs	r2, r3
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	625a      	str	r2, [r3, #36]	; 0x24
}
 801030e:	bf00      	nop
 8010310:	3724      	adds	r7, #36	; 0x24
 8010312:	46bd      	mov	sp, r7
 8010314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010318:	4770      	bx	lr

0801031a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b086      	sub	sp, #24
 801031e:	af00      	add	r7, sp, #0
 8010320:	6078      	str	r0, [r7, #4]
 8010322:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8010324:	683b      	ldr	r3, [r7, #0]
 8010326:	681b      	ldr	r3, [r3, #0]
 8010328:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	fa93 f3a3 	rbit	r3, r3
 8010330:	60bb      	str	r3, [r7, #8]
  return result;
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	fab3 f383 	clz	r3, r3
 8010338:	b2db      	uxtb	r3, r3
 801033a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 801033c:	e040      	b.n	80103c0 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	681a      	ldr	r2, [r3, #0]
 8010342:	2101      	movs	r1, #1
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	fa01 f303 	lsl.w	r3, r1, r3
 801034a:	4013      	ands	r3, r2
 801034c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d032      	beq.n	80103ba <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010354:	683b      	ldr	r3, [r7, #0]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	461a      	mov	r2, r3
 801035a:	6939      	ldr	r1, [r7, #16]
 801035c:	6878      	ldr	r0, [r7, #4]
 801035e:	f7ff fed7 	bl	8010110 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8010362:	683b      	ldr	r3, [r7, #0]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	2b01      	cmp	r3, #1
 8010368:	d003      	beq.n	8010372 <LL_GPIO_Init+0x58>
 801036a:	683b      	ldr	r3, [r7, #0]
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	2b02      	cmp	r3, #2
 8010370:	d106      	bne.n	8010380 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	689b      	ldr	r3, [r3, #8]
 8010376:	461a      	mov	r2, r3
 8010378:	6939      	ldr	r1, [r7, #16]
 801037a:	6878      	ldr	r0, [r7, #4]
 801037c:	f7ff ff0f 	bl	801019e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	691b      	ldr	r3, [r3, #16]
 8010384:	461a      	mov	r2, r3
 8010386:	6939      	ldr	r1, [r7, #16]
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f7ff ff37 	bl	80101fc <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	685b      	ldr	r3, [r3, #4]
 8010392:	2b02      	cmp	r3, #2
 8010394:	d111      	bne.n	80103ba <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	2bff      	cmp	r3, #255	; 0xff
 801039a:	d807      	bhi.n	80103ac <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 801039c:	683b      	ldr	r3, [r7, #0]
 801039e:	695b      	ldr	r3, [r3, #20]
 80103a0:	461a      	mov	r2, r3
 80103a2:	6939      	ldr	r1, [r7, #16]
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7ff ff58 	bl	801025a <LL_GPIO_SetAFPin_0_7>
 80103aa:	e006      	b.n	80103ba <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	695b      	ldr	r3, [r3, #20]
 80103b0:	461a      	mov	r2, r3
 80103b2:	6939      	ldr	r1, [r7, #16]
 80103b4:	6878      	ldr	r0, [r7, #4]
 80103b6:	f7ff ff7f 	bl	80102b8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	3301      	adds	r3, #1
 80103be:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	681a      	ldr	r2, [r3, #0]
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	fa22 f303 	lsr.w	r3, r2, r3
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d1b7      	bne.n	801033e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	685b      	ldr	r3, [r3, #4]
 80103d2:	2b01      	cmp	r3, #1
 80103d4:	d003      	beq.n	80103de <LL_GPIO_Init+0xc4>
 80103d6:	683b      	ldr	r3, [r7, #0]
 80103d8:	685b      	ldr	r3, [r3, #4]
 80103da:	2b02      	cmp	r3, #2
 80103dc:	d107      	bne.n	80103ee <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	6819      	ldr	r1, [r3, #0]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	68db      	ldr	r3, [r3, #12]
 80103e6:	461a      	mov	r2, r3
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7ff fec0 	bl	801016e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80103ee:	2300      	movs	r3, #0
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3718      	adds	r7, #24
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 80103f8:	b590      	push	{r4, r7, lr}
 80103fa:	b085      	sub	sp, #20
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	4604      	mov	r4, r0
 8010400:	4608      	mov	r0, r1
 8010402:	4611      	mov	r1, r2
 8010404:	461a      	mov	r2, r3
 8010406:	4623      	mov	r3, r4
 8010408:	80fb      	strh	r3, [r7, #6]
 801040a:	4603      	mov	r3, r0
 801040c:	80bb      	strh	r3, [r7, #4]
 801040e:	460b      	mov	r3, r1
 8010410:	70fb      	strb	r3, [r7, #3]
 8010412:	4613      	mov	r3, r2
 8010414:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 8010416:	2300      	movs	r3, #0
 8010418:	60fb      	str	r3, [r7, #12]
 801041a:	e026      	b.n	801046a <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 801041c:	2300      	movs	r3, #0
 801041e:	60bb      	str	r3, [r7, #8]
 8010420:	e01c      	b.n	801045c <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 8010422:	68bb      	ldr	r3, [r7, #8]
 8010424:	b29a      	uxth	r2, r3
 8010426:	88fb      	ldrh	r3, [r7, #6]
 8010428:	4413      	add	r3, r2
 801042a:	b298      	uxth	r0, r3
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	009b      	lsls	r3, r3, #2
 8010430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010432:	4413      	add	r3, r2
 8010434:	681a      	ldr	r2, [r3, #0]
 8010436:	f897 3020 	ldrb.w	r3, [r7, #32]
 801043a:	fbb2 f3f3 	udiv	r3, r2, r3
 801043e:	b29a      	uxth	r2, r3
 8010440:	88bb      	ldrh	r3, [r7, #4]
 8010442:	4413      	add	r3, r2
 8010444:	b29a      	uxth	r2, r3
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	b29b      	uxth	r3, r3
 801044a:	4413      	add	r3, r2
 801044c:	b29b      	uxth	r3, r3
 801044e:	883a      	ldrh	r2, [r7, #0]
 8010450:	4619      	mov	r1, r3
 8010452:	f000 fc1f 	bl	8010c94 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	3301      	adds	r3, #1
 801045a:	60bb      	str	r3, [r7, #8]
 801045c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801045e:	68ba      	ldr	r2, [r7, #8]
 8010460:	429a      	cmp	r2, r3
 8010462:	dbde      	blt.n	8010422 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	3301      	adds	r3, #1
 8010468:	60fb      	str	r3, [r7, #12]
 801046a:	78fb      	ldrb	r3, [r7, #3]
 801046c:	68fa      	ldr	r2, [r7, #12]
 801046e:	429a      	cmp	r2, r3
 8010470:	dbd4      	blt.n	801041c <ILI9341_Draw_Wave+0x24>

		}
	}

}
 8010472:	bf00      	nop
 8010474:	3714      	adds	r7, #20
 8010476:	46bd      	mov	sp, r7
 8010478:	bd90      	pop	{r4, r7, pc}

0801047a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 801047a:	b590      	push	{r4, r7, lr}
 801047c:	b087      	sub	sp, #28
 801047e:	af02      	add	r7, sp, #8
 8010480:	4604      	mov	r4, r0
 8010482:	4608      	mov	r0, r1
 8010484:	4611      	mov	r1, r2
 8010486:	461a      	mov	r2, r3
 8010488:	4623      	mov	r3, r4
 801048a:	80fb      	strh	r3, [r7, #6]
 801048c:	4603      	mov	r3, r0
 801048e:	80bb      	strh	r3, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	807b      	strh	r3, [r7, #2]
 8010494:	4613      	mov	r3, r2
 8010496:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 8010498:	2300      	movs	r3, #0
 801049a:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 801049c:	7bfa      	ldrb	r2, [r7, #15]
 801049e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104a2:	429a      	cmp	r2, r3
 80104a4:	d939      	bls.n	801051a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80104a6:	88ba      	ldrh	r2, [r7, #4]
 80104a8:	7bfb      	ldrb	r3, [r7, #15]
 80104aa:	441a      	add	r2, r3
 80104ac:	88b9      	ldrh	r1, [r7, #4]
 80104ae:	883b      	ldrh	r3, [r7, #0]
 80104b0:	4419      	add	r1, r3
 80104b2:	7bfb      	ldrb	r3, [r7, #15]
 80104b4:	1acb      	subs	r3, r1, r3
 80104b6:	429a      	cmp	r2, r3
 80104b8:	f000 8089 	beq.w	80105ce <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 80104bc:	88fa      	ldrh	r2, [r7, #6]
 80104be:	7bfb      	ldrb	r3, [r7, #15]
 80104c0:	441a      	add	r2, r3
 80104c2:	88f9      	ldrh	r1, [r7, #6]
 80104c4:	887b      	ldrh	r3, [r7, #2]
 80104c6:	4419      	add	r1, r3
 80104c8:	7bfb      	ldrb	r3, [r7, #15]
 80104ca:	1acb      	subs	r3, r1, r3
 80104cc:	429a      	cmp	r2, r3
 80104ce:	d07e      	beq.n	80105ce <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 80104d0:	7bfb      	ldrb	r3, [r7, #15]
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	88fb      	ldrh	r3, [r7, #6]
 80104d6:	4413      	add	r3, r2
 80104d8:	b298      	uxth	r0, r3
 80104da:	7bfb      	ldrb	r3, [r7, #15]
 80104dc:	b29a      	uxth	r2, r3
 80104de:	88bb      	ldrh	r3, [r7, #4]
 80104e0:	4413      	add	r3, r2
 80104e2:	b299      	uxth	r1, r3
 80104e4:	7bfb      	ldrb	r3, [r7, #15]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	005b      	lsls	r3, r3, #1
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	887a      	ldrh	r2, [r7, #2]
 80104ee:	1ad3      	subs	r3, r2, r3
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	3301      	adds	r3, #1
 80104f4:	b29c      	uxth	r4, r3
 80104f6:	7bfb      	ldrb	r3, [r7, #15]
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	005b      	lsls	r3, r3, #1
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	883a      	ldrh	r2, [r7, #0]
 8010500:	1ad3      	subs	r3, r2, r3
 8010502:	b29b      	uxth	r3, r3
 8010504:	3301      	adds	r3, #1
 8010506:	b29a      	uxth	r2, r3
 8010508:	2304      	movs	r3, #4
 801050a:	9301      	str	r3, [sp, #4]
 801050c:	8c3b      	ldrh	r3, [r7, #32]
 801050e:	9300      	str	r3, [sp, #0]
 8010510:	4613      	mov	r3, r2
 8010512:	4622      	mov	r2, r4
 8010514:	f000 fd18 	bl	8010f48 <ILI9341_Draw_Rectangle>
				goto finish;
 8010518:	e05a      	b.n	80105d0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 801051a:	7bfb      	ldrb	r3, [r7, #15]
 801051c:	b29a      	uxth	r2, r3
 801051e:	88fb      	ldrh	r3, [r7, #6]
 8010520:	4413      	add	r3, r2
 8010522:	b298      	uxth	r0, r3
 8010524:	7bfb      	ldrb	r3, [r7, #15]
 8010526:	b29a      	uxth	r2, r3
 8010528:	88bb      	ldrh	r3, [r7, #4]
 801052a:	4413      	add	r3, r2
 801052c:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 801052e:	7bfb      	ldrb	r3, [r7, #15]
 8010530:	b29b      	uxth	r3, r3
 8010532:	887a      	ldrh	r2, [r7, #2]
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010538:	3301      	adds	r3, #1
 801053a:	b29a      	uxth	r2, r3
 801053c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801053e:	f000 fa6b 	bl	8010a18 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010542:	7bfb      	ldrb	r3, [r7, #15]
 8010544:	b29a      	uxth	r2, r3
 8010546:	88fb      	ldrh	r3, [r7, #6]
 8010548:	4413      	add	r3, r2
 801054a:	b298      	uxth	r0, r3
										(y + h) - b,
 801054c:	88ba      	ldrh	r2, [r7, #4]
 801054e:	883b      	ldrh	r3, [r7, #0]
 8010550:	4413      	add	r3, r2
 8010552:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010554:	7bfb      	ldrb	r3, [r7, #15]
 8010556:	b29b      	uxth	r3, r3
 8010558:	1ad3      	subs	r3, r2, r3
 801055a:	b299      	uxth	r1, r3
										(w - b)+1,
 801055c:	7bfb      	ldrb	r3, [r7, #15]
 801055e:	b29b      	uxth	r3, r3
 8010560:	887a      	ldrh	r2, [r7, #2]
 8010562:	1ad3      	subs	r3, r2, r3
 8010564:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010566:	3301      	adds	r3, #1
 8010568:	b29a      	uxth	r2, r3
 801056a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801056c:	f000 fa54 	bl	8010a18 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 8010570:	7bfb      	ldrb	r3, [r7, #15]
 8010572:	b29a      	uxth	r2, r3
 8010574:	88fb      	ldrh	r3, [r7, #6]
 8010576:	4413      	add	r3, r2
 8010578:	b298      	uxth	r0, r3
 801057a:	7bfb      	ldrb	r3, [r7, #15]
 801057c:	b29a      	uxth	r2, r3
 801057e:	88bb      	ldrh	r3, [r7, #4]
 8010580:	4413      	add	r3, r2
 8010582:	b299      	uxth	r1, r3
 8010584:	7bfb      	ldrb	r3, [r7, #15]
 8010586:	b29b      	uxth	r3, r3
 8010588:	005b      	lsls	r3, r3, #1
 801058a:	b29b      	uxth	r3, r3
 801058c:	883a      	ldrh	r2, [r7, #0]
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	b29a      	uxth	r2, r3
 8010592:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010594:	f000 faa4 	bl	8010ae0 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 8010598:	88fa      	ldrh	r2, [r7, #6]
 801059a:	887b      	ldrh	r3, [r7, #2]
 801059c:	4413      	add	r3, r2
 801059e:	b29a      	uxth	r2, r3
 80105a0:	7bfb      	ldrb	r3, [r7, #15]
 80105a2:	b29b      	uxth	r3, r3
 80105a4:	1ad3      	subs	r3, r2, r3
 80105a6:	b298      	uxth	r0, r3
 80105a8:	7bfb      	ldrb	r3, [r7, #15]
 80105aa:	b29a      	uxth	r2, r3
 80105ac:	88bb      	ldrh	r3, [r7, #4]
 80105ae:	4413      	add	r3, r2
 80105b0:	b299      	uxth	r1, r3
 80105b2:	7bfb      	ldrb	r3, [r7, #15]
 80105b4:	b29b      	uxth	r3, r3
 80105b6:	005b      	lsls	r3, r3, #1
 80105b8:	b29b      	uxth	r3, r3
 80105ba:	883a      	ldrh	r2, [r7, #0]
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	b29a      	uxth	r2, r3
 80105c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105c2:	f000 fa8d 	bl	8010ae0 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 80105c6:	7bfb      	ldrb	r3, [r7, #15]
 80105c8:	3301      	adds	r3, #1
 80105ca:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 80105cc:	e766      	b.n	801049c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 80105ce:	bf00      	nop
	// done
	return;
 80105d0:	bf00      	nop
}
 80105d2:	3714      	adds	r7, #20
 80105d4:	46bd      	mov	sp, r7
 80105d6:	bd90      	pop	{r4, r7, pc}

080105d8 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80105d8:	b590      	push	{r4, r7, lr}
 80105da:	b089      	sub	sp, #36	; 0x24
 80105dc:	af02      	add	r7, sp, #8
 80105de:	4604      	mov	r4, r0
 80105e0:	4608      	mov	r0, r1
 80105e2:	4611      	mov	r1, r2
 80105e4:	461a      	mov	r2, r3
 80105e6:	4623      	mov	r3, r4
 80105e8:	71fb      	strb	r3, [r7, #7]
 80105ea:	4603      	mov	r3, r0
 80105ec:	80bb      	strh	r3, [r7, #4]
 80105ee:	460b      	mov	r3, r1
 80105f0:	807b      	strh	r3, [r7, #2]
 80105f2:	4613      	mov	r3, r2
 80105f4:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 80105f6:	79fb      	ldrb	r3, [r7, #7]
 80105f8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 80105fa:	7dfb      	ldrb	r3, [r7, #23]
 80105fc:	2b1f      	cmp	r3, #31
 80105fe:	d802      	bhi.n	8010606 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8010600:	2300      	movs	r3, #0
 8010602:	71fb      	strb	r3, [r7, #7]
 8010604:	e002      	b.n	801060c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8010606:	7dfb      	ldrb	r3, [r7, #23]
 8010608:	3b20      	subs	r3, #32
 801060a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 801060c:	2300      	movs	r3, #0
 801060e:	753b      	strb	r3, [r7, #20]
 8010610:	e012      	b.n	8010638 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8010612:	7dfa      	ldrb	r2, [r7, #23]
 8010614:	7d38      	ldrb	r0, [r7, #20]
 8010616:	7d39      	ldrb	r1, [r7, #20]
 8010618:	4c48      	ldr	r4, [pc, #288]	; (801073c <ILI9341_Draw_Char+0x164>)
 801061a:	4613      	mov	r3, r2
 801061c:	005b      	lsls	r3, r3, #1
 801061e:	4413      	add	r3, r2
 8010620:	005b      	lsls	r3, r3, #1
 8010622:	4423      	add	r3, r4
 8010624:	4403      	add	r3, r0
 8010626:	781a      	ldrb	r2, [r3, #0]
 8010628:	f107 0318 	add.w	r3, r7, #24
 801062c:	440b      	add	r3, r1
 801062e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010632:	7d3b      	ldrb	r3, [r7, #20]
 8010634:	3301      	adds	r3, #1
 8010636:	753b      	strb	r3, [r7, #20]
 8010638:	7d3b      	ldrb	r3, [r7, #20]
 801063a:	2b05      	cmp	r3, #5
 801063c:	d9e9      	bls.n	8010612 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 801063e:	2300      	movs	r3, #0
 8010640:	757b      	strb	r3, [r7, #21]
 8010642:	e074      	b.n	801072e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8010644:	2300      	movs	r3, #0
 8010646:	75bb      	strb	r3, [r7, #22]
 8010648:	e06b      	b.n	8010722 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 801064a:	7d7b      	ldrb	r3, [r7, #21]
 801064c:	f107 0218 	add.w	r2, r7, #24
 8010650:	4413      	add	r3, r2
 8010652:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8010656:	461a      	mov	r2, r3
 8010658:	7dbb      	ldrb	r3, [r7, #22]
 801065a:	fa42 f303 	asr.w	r3, r2, r3
 801065e:	f003 0301 	and.w	r3, r3, #1
 8010662:	2b00      	cmp	r3, #0
 8010664:	d02d      	beq.n	80106c2 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8010666:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010668:	2b01      	cmp	r3, #1
 801066a:	d10e      	bne.n	801068a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 801066c:	7d7b      	ldrb	r3, [r7, #21]
 801066e:	b29a      	uxth	r2, r3
 8010670:	88bb      	ldrh	r3, [r7, #4]
 8010672:	4413      	add	r3, r2
 8010674:	b298      	uxth	r0, r3
 8010676:	7dbb      	ldrb	r3, [r7, #22]
 8010678:	b29a      	uxth	r2, r3
 801067a:	887b      	ldrh	r3, [r7, #2]
 801067c:	4413      	add	r3, r2
 801067e:	b29b      	uxth	r3, r3
 8010680:	883a      	ldrh	r2, [r7, #0]
 8010682:	4619      	mov	r1, r3
 8010684:	f000 fb06 	bl	8010c94 <ILI9341_Draw_Pixel>
 8010688:	e048      	b.n	801071c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 801068a:	7d7b      	ldrb	r3, [r7, #21]
 801068c:	b29b      	uxth	r3, r3
 801068e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010690:	fb12 f303 	smulbb	r3, r2, r3
 8010694:	b29a      	uxth	r2, r3
 8010696:	88bb      	ldrh	r3, [r7, #4]
 8010698:	4413      	add	r3, r2
 801069a:	b298      	uxth	r0, r3
 801069c:	7dbb      	ldrb	r3, [r7, #22]
 801069e:	b29b      	uxth	r3, r3
 80106a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106a2:	fb12 f303 	smulbb	r3, r2, r3
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	887b      	ldrh	r3, [r7, #2]
 80106aa:	4413      	add	r3, r2
 80106ac:	b299      	uxth	r1, r3
 80106ae:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80106b0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106b2:	2301      	movs	r3, #1
 80106b4:	9301      	str	r3, [sp, #4]
 80106b6:	883b      	ldrh	r3, [r7, #0]
 80106b8:	9300      	str	r3, [sp, #0]
 80106ba:	4623      	mov	r3, r4
 80106bc:	f000 fc44 	bl	8010f48 <ILI9341_Draw_Rectangle>
 80106c0:	e02c      	b.n	801071c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 80106c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d10e      	bne.n	80106e6 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80106c8:	7d7b      	ldrb	r3, [r7, #21]
 80106ca:	b29a      	uxth	r2, r3
 80106cc:	88bb      	ldrh	r3, [r7, #4]
 80106ce:	4413      	add	r3, r2
 80106d0:	b298      	uxth	r0, r3
 80106d2:	7dbb      	ldrb	r3, [r7, #22]
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	887b      	ldrh	r3, [r7, #2]
 80106d8:	4413      	add	r3, r2
 80106da:	b29b      	uxth	r3, r3
 80106dc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80106de:	4619      	mov	r1, r3
 80106e0:	f000 fad8 	bl	8010c94 <ILI9341_Draw_Pixel>
 80106e4:	e01a      	b.n	801071c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 80106e6:	7d7b      	ldrb	r3, [r7, #21]
 80106e8:	b29b      	uxth	r3, r3
 80106ea:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106ec:	fb12 f303 	smulbb	r3, r2, r3
 80106f0:	b29a      	uxth	r2, r3
 80106f2:	88bb      	ldrh	r3, [r7, #4]
 80106f4:	4413      	add	r3, r2
 80106f6:	b298      	uxth	r0, r3
 80106f8:	7dbb      	ldrb	r3, [r7, #22]
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106fe:	fb12 f303 	smulbb	r3, r2, r3
 8010702:	b29a      	uxth	r2, r3
 8010704:	887b      	ldrh	r3, [r7, #2]
 8010706:	4413      	add	r3, r2
 8010708:	b299      	uxth	r1, r3
 801070a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 801070c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801070e:	2301      	movs	r3, #1
 8010710:	9301      	str	r3, [sp, #4]
 8010712:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	4623      	mov	r3, r4
 8010718:	f000 fc16 	bl	8010f48 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 801071c:	7dbb      	ldrb	r3, [r7, #22]
 801071e:	3301      	adds	r3, #1
 8010720:	75bb      	strb	r3, [r7, #22]
 8010722:	7dbb      	ldrb	r3, [r7, #22]
 8010724:	2b07      	cmp	r3, #7
 8010726:	d990      	bls.n	801064a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8010728:	7d7b      	ldrb	r3, [r7, #21]
 801072a:	3301      	adds	r3, #1
 801072c:	757b      	strb	r3, [r7, #21]
 801072e:	7d7b      	ldrb	r3, [r7, #21]
 8010730:	2b05      	cmp	r3, #5
 8010732:	d987      	bls.n	8010644 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8010734:	bf00      	nop
 8010736:	371c      	adds	r7, #28
 8010738:	46bd      	mov	sp, r7
 801073a:	bd90      	pop	{r4, r7, pc}
 801073c:	08016534 	.word	0x08016534

08010740 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8010740:	b590      	push	{r4, r7, lr}
 8010742:	b087      	sub	sp, #28
 8010744:	af02      	add	r7, sp, #8
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	4608      	mov	r0, r1
 801074a:	4611      	mov	r1, r2
 801074c:	461a      	mov	r2, r3
 801074e:	4603      	mov	r3, r0
 8010750:	817b      	strh	r3, [r7, #10]
 8010752:	460b      	mov	r3, r1
 8010754:	813b      	strh	r3, [r7, #8]
 8010756:	4613      	mov	r3, r2
 8010758:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 801075a:	897b      	ldrh	r3, [r7, #10]
 801075c:	3b01      	subs	r3, #1
 801075e:	b298      	uxth	r0, r3
 8010760:	8c3b      	ldrh	r3, [r7, #32]
 8010762:	00db      	lsls	r3, r3, #3
 8010764:	b29a      	uxth	r2, r3
 8010766:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010768:	8939      	ldrh	r1, [r7, #8]
 801076a:	f000 f9b9 	bl	8010ae0 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 801076e:	897b      	ldrh	r3, [r7, #10]
 8010770:	3b02      	subs	r3, #2
 8010772:	b298      	uxth	r0, r3
 8010774:	8c3b      	ldrh	r3, [r7, #32]
 8010776:	00db      	lsls	r3, r3, #3
 8010778:	b29a      	uxth	r2, r3
 801077a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801077c:	8939      	ldrh	r1, [r7, #8]
 801077e:	f000 f9af 	bl	8010ae0 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 8010782:	e016      	b.n	80107b2 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	1c5a      	adds	r2, r3, #1
 8010788:	60fa      	str	r2, [r7, #12]
 801078a:	7818      	ldrb	r0, [r3, #0]
 801078c:	88fc      	ldrh	r4, [r7, #6]
 801078e:	893a      	ldrh	r2, [r7, #8]
 8010790:	8979      	ldrh	r1, [r7, #10]
 8010792:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010794:	9301      	str	r3, [sp, #4]
 8010796:	8c3b      	ldrh	r3, [r7, #32]
 8010798:	9300      	str	r3, [sp, #0]
 801079a:	4623      	mov	r3, r4
 801079c:	f7ff ff1c 	bl	80105d8 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80107a0:	8c3b      	ldrh	r3, [r7, #32]
 80107a2:	461a      	mov	r2, r3
 80107a4:	0052      	lsls	r2, r2, #1
 80107a6:	4413      	add	r3, r2
 80107a8:	005b      	lsls	r3, r3, #1
 80107aa:	b29a      	uxth	r2, r3
 80107ac:	897b      	ldrh	r3, [r7, #10]
 80107ae:	4413      	add	r3, r2
 80107b0:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d1e4      	bne.n	8010784 <ILI9341_Draw_Text+0x44>
    }


}
 80107ba:	bf00      	nop
 80107bc:	3714      	adds	r7, #20
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd90      	pop	{r4, r7, pc}

080107c2 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	af00      	add	r7, sp, #0

	_LCD_Enable();
 80107c6:	f000 fca3 	bl	8011110 <_LCD_Enable>
	ILI9341_SPI_Init();
 80107ca:	f000 f907 	bl	80109dc <ILI9341_SPI_Init>
	_LCD_Reset();
 80107ce:	f000 fcaf 	bl	8011130 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 80107d2:	2001      	movs	r0, #1
 80107d4:	f000 fd7a 	bl	80112cc <_LCD_SendCommand>
	HAL_Delay(2000);
 80107d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80107dc:	f7f8 fd1c 	bl	8009218 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 80107e0:	20cb      	movs	r0, #203	; 0xcb
 80107e2:	f000 fd73 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x39);
 80107e6:	2039      	movs	r0, #57	; 0x39
 80107e8:	f000 fda2 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x2C);
 80107ec:	202c      	movs	r0, #44	; 0x2c
 80107ee:	f000 fd9f 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x00);
 80107f2:	2000      	movs	r0, #0
 80107f4:	f000 fd9c 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x34);
 80107f8:	2034      	movs	r0, #52	; 0x34
 80107fa:	f000 fd99 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x02);
 80107fe:	2002      	movs	r0, #2
 8010800:	f000 fd96 	bl	8011330 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8010804:	20cf      	movs	r0, #207	; 0xcf
 8010806:	f000 fd61 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 801080a:	2000      	movs	r0, #0
 801080c:	f000 fd90 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010810:	20c1      	movs	r0, #193	; 0xc1
 8010812:	f000 fd8d 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x30);
 8010816:	2030      	movs	r0, #48	; 0x30
 8010818:	f000 fd8a 	bl	8011330 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 801081c:	20e8      	movs	r0, #232	; 0xe8
 801081e:	f000 fd55 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8010822:	2085      	movs	r0, #133	; 0x85
 8010824:	f000 fd84 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010828:	2000      	movs	r0, #0
 801082a:	f000 fd81 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x78);
 801082e:	2078      	movs	r0, #120	; 0x78
 8010830:	f000 fd7e 	bl	8011330 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8010834:	20ea      	movs	r0, #234	; 0xea
 8010836:	f000 fd49 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 801083a:	2000      	movs	r0, #0
 801083c:	f000 fd78 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010840:	2000      	movs	r0, #0
 8010842:	f000 fd75 	bl	8011330 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 8010846:	20ed      	movs	r0, #237	; 0xed
 8010848:	f000 fd40 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x64);
 801084c:	2064      	movs	r0, #100	; 0x64
 801084e:	f000 fd6f 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010852:	2003      	movs	r0, #3
 8010854:	f000 fd6c 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x12);
 8010858:	2012      	movs	r0, #18
 801085a:	f000 fd69 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x81);
 801085e:	2081      	movs	r0, #129	; 0x81
 8010860:	f000 fd66 	bl	8011330 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8010864:	20f7      	movs	r0, #247	; 0xf7
 8010866:	f000 fd31 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x20);
 801086a:	2020      	movs	r0, #32
 801086c:	f000 fd60 	bl	8011330 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 8010870:	20c0      	movs	r0, #192	; 0xc0
 8010872:	f000 fd2b 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x23);
 8010876:	2023      	movs	r0, #35	; 0x23
 8010878:	f000 fd5a 	bl	8011330 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 801087c:	20c1      	movs	r0, #193	; 0xc1
 801087e:	f000 fd25 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x10);
 8010882:	2010      	movs	r0, #16
 8010884:	f000 fd54 	bl	8011330 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 8010888:	20c5      	movs	r0, #197	; 0xc5
 801088a:	f000 fd1f 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 801088e:	203e      	movs	r0, #62	; 0x3e
 8010890:	f000 fd4e 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x28);
 8010894:	2028      	movs	r0, #40	; 0x28
 8010896:	f000 fd4b 	bl	8011330 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 801089a:	20c7      	movs	r0, #199	; 0xc7
 801089c:	f000 fd16 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x86);
 80108a0:	2086      	movs	r0, #134	; 0x86
 80108a2:	f000 fd45 	bl	8011330 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 80108a6:	2036      	movs	r0, #54	; 0x36
 80108a8:	f000 fd10 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x48);
 80108ac:	2048      	movs	r0, #72	; 0x48
 80108ae:	f000 fd3f 	bl	8011330 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 80108b2:	203a      	movs	r0, #58	; 0x3a
 80108b4:	f000 fd0a 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x55);
 80108b8:	2055      	movs	r0, #85	; 0x55
 80108ba:	f000 fd39 	bl	8011330 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 80108be:	20b1      	movs	r0, #177	; 0xb1
 80108c0:	f000 fd04 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80108c4:	2000      	movs	r0, #0
 80108c6:	f000 fd33 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x18);
 80108ca:	2018      	movs	r0, #24
 80108cc:	f000 fd30 	bl	8011330 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 80108d0:	20b6      	movs	r0, #182	; 0xb6
 80108d2:	f000 fcfb 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x08);
 80108d6:	2008      	movs	r0, #8
 80108d8:	f000 fd2a 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x82);
 80108dc:	2082      	movs	r0, #130	; 0x82
 80108de:	f000 fd27 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x27);
 80108e2:	2027      	movs	r0, #39	; 0x27
 80108e4:	f000 fd24 	bl	8011330 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 80108e8:	20f2      	movs	r0, #242	; 0xf2
 80108ea:	f000 fcef 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80108ee:	2000      	movs	r0, #0
 80108f0:	f000 fd1e 	bl	8011330 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 80108f4:	2026      	movs	r0, #38	; 0x26
 80108f6:	f000 fce9 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x01);
 80108fa:	2001      	movs	r0, #1
 80108fc:	f000 fd18 	bl	8011330 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8010900:	20e0      	movs	r0, #224	; 0xe0
 8010902:	f000 fce3 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 8010906:	200f      	movs	r0, #15
 8010908:	f000 fd12 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x31);
 801090c:	2031      	movs	r0, #49	; 0x31
 801090e:	f000 fd0f 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8010912:	202b      	movs	r0, #43	; 0x2b
 8010914:	f000 fd0c 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x0C);
 8010918:	200c      	movs	r0, #12
 801091a:	f000 fd09 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x0E);
 801091e:	200e      	movs	r0, #14
 8010920:	f000 fd06 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010924:	2008      	movs	r0, #8
 8010926:	f000 fd03 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x4E);
 801092a:	204e      	movs	r0, #78	; 0x4e
 801092c:	f000 fd00 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8010930:	20f1      	movs	r0, #241	; 0xf1
 8010932:	f000 fcfd 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x37);
 8010936:	2037      	movs	r0, #55	; 0x37
 8010938:	f000 fcfa 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x07);
 801093c:	2007      	movs	r0, #7
 801093e:	f000 fcf7 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x10);
 8010942:	2010      	movs	r0, #16
 8010944:	f000 fcf4 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010948:	2003      	movs	r0, #3
 801094a:	f000 fcf1 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x0E);
 801094e:	200e      	movs	r0, #14
 8010950:	f000 fcee 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x09);
 8010954:	2009      	movs	r0, #9
 8010956:	f000 fceb 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x00);
 801095a:	2000      	movs	r0, #0
 801095c:	f000 fce8 	bl	8011330 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8010960:	20e1      	movs	r0, #225	; 0xe1
 8010962:	f000 fcb3 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010966:	2000      	movs	r0, #0
 8010968:	f000 fce2 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x0E);
 801096c:	200e      	movs	r0, #14
 801096e:	f000 fcdf 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x14);
 8010972:	2014      	movs	r0, #20
 8010974:	f000 fcdc 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010978:	2003      	movs	r0, #3
 801097a:	f000 fcd9 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x11);
 801097e:	2011      	movs	r0, #17
 8010980:	f000 fcd6 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010984:	2007      	movs	r0, #7
 8010986:	f000 fcd3 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x31);
 801098a:	2031      	movs	r0, #49	; 0x31
 801098c:	f000 fcd0 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010990:	20c1      	movs	r0, #193	; 0xc1
 8010992:	f000 fccd 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x48);
 8010996:	2048      	movs	r0, #72	; 0x48
 8010998:	f000 fcca 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x08);
 801099c:	2008      	movs	r0, #8
 801099e:	f000 fcc7 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80109a2:	200f      	movs	r0, #15
 80109a4:	f000 fcc4 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x0C);
 80109a8:	200c      	movs	r0, #12
 80109aa:	f000 fcc1 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x31);
 80109ae:	2031      	movs	r0, #49	; 0x31
 80109b0:	f000 fcbe 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x36);
 80109b4:	2036      	movs	r0, #54	; 0x36
 80109b6:	f000 fcbb 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80109ba:	200f      	movs	r0, #15
 80109bc:	f000 fcb8 	bl	8011330 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 80109c0:	2011      	movs	r0, #17
 80109c2:	f000 fc83 	bl	80112cc <_LCD_SendCommand>
	HAL_Delay(240);
 80109c6:	20f0      	movs	r0, #240	; 0xf0
 80109c8:	f7f8 fc26 	bl	8009218 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 80109cc:	2029      	movs	r0, #41	; 0x29
 80109ce:	f000 fc7d 	bl	80112cc <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80109d2:	2000      	movs	r0, #0
 80109d4:	f000 fb4e 	bl	8011074 <ILI9341_Set_Rotation>
}
 80109d8:	bf00      	nop
 80109da:	bd80      	pop	{r7, pc}

080109dc <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 80109dc:	b480      	push	{r7}
 80109de:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80109e0:	4b0b      	ldr	r3, [pc, #44]	; (8010a10 <ILI9341_SPI_Init+0x34>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109e8:	2b40      	cmp	r3, #64	; 0x40
 80109ea:	d005      	beq.n	80109f8 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 80109ec:	4b08      	ldr	r3, [pc, #32]	; (8010a10 <ILI9341_SPI_Init+0x34>)
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	4a07      	ldr	r2, [pc, #28]	; (8010a10 <ILI9341_SPI_Init+0x34>)
 80109f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109f6:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80109f8:	4b06      	ldr	r3, [pc, #24]	; (8010a14 <ILI9341_SPI_Init+0x38>)
 80109fa:	695b      	ldr	r3, [r3, #20]
 80109fc:	4a05      	ldr	r2, [pc, #20]	; (8010a14 <ILI9341_SPI_Init+0x38>)
 80109fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a02:	6153      	str	r3, [r2, #20]
}
 8010a04:	bf00      	nop
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr
 8010a0e:	bf00      	nop
 8010a10:	40003c00 	.word	0x40003c00
 8010a14:	48000400 	.word	0x48000400

08010a18 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8010a18:	b590      	push	{r4, r7, lr}
 8010a1a:	b087      	sub	sp, #28
 8010a1c:	af02      	add	r7, sp, #8
 8010a1e:	4604      	mov	r4, r0
 8010a20:	4608      	mov	r0, r1
 8010a22:	4611      	mov	r1, r2
 8010a24:	461a      	mov	r2, r3
 8010a26:	4623      	mov	r3, r4
 8010a28:	80fb      	strh	r3, [r7, #6]
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	80bb      	strh	r3, [r7, #4]
 8010a2e:	460b      	mov	r3, r1
 8010a30:	807b      	strh	r3, [r7, #2]
 8010a32:	4613      	mov	r3, r2
 8010a34:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010a36:	4b28      	ldr	r3, [pc, #160]	; (8010ad8 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a38:	881b      	ldrh	r3, [r3, #0]
 8010a3a:	b29b      	uxth	r3, r3
 8010a3c:	88fa      	ldrh	r2, [r7, #6]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d246      	bcs.n	8010ad0 <ILI9341_Draw_Horizontal_Line+0xb8>
 8010a42:	4b26      	ldr	r3, [pc, #152]	; (8010adc <ILI9341_Draw_Horizontal_Line+0xc4>)
 8010a44:	881b      	ldrh	r3, [r3, #0]
 8010a46:	b29b      	uxth	r3, r3
 8010a48:	88ba      	ldrh	r2, [r7, #4]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d240      	bcs.n	8010ad0 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8010a4e:	88fa      	ldrh	r2, [r7, #6]
 8010a50:	887b      	ldrh	r3, [r7, #2]
 8010a52:	4413      	add	r3, r2
 8010a54:	3b01      	subs	r3, #1
 8010a56:	4a20      	ldr	r2, [pc, #128]	; (8010ad8 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a58:	8812      	ldrh	r2, [r2, #0]
 8010a5a:	b292      	uxth	r2, r2
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	db05      	blt.n	8010a6c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8010a60:	4b1d      	ldr	r3, [pc, #116]	; (8010ad8 <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a62:	881b      	ldrh	r3, [r3, #0]
 8010a64:	b29a      	uxth	r2, r3
 8010a66:	88fb      	ldrh	r3, [r7, #6]
 8010a68:	1ad3      	subs	r3, r2, r3
 8010a6a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8010a6c:	88fa      	ldrh	r2, [r7, #6]
 8010a6e:	887b      	ldrh	r3, [r7, #2]
 8010a70:	4413      	add	r3, r2
 8010a72:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010a74:	3b01      	subs	r3, #1
 8010a76:	b29a      	uxth	r2, r3
 8010a78:	88bb      	ldrh	r3, [r7, #4]
 8010a7a:	88b9      	ldrh	r1, [r7, #4]
 8010a7c:	88f8      	ldrh	r0, [r7, #6]
 8010a7e:	f000 f893 	bl	8010ba8 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 8010a82:	2300      	movs	r3, #0
 8010a84:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 8010a86:	887b      	ldrh	r3, [r7, #2]
 8010a88:	f003 0301 	and.w	r3, r3, #1
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d009      	beq.n	8010aa4 <ILI9341_Draw_Horizontal_Line+0x8c>
 8010a90:	887b      	ldrh	r3, [r7, #2]
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d906      	bls.n	8010aa4 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 8010a96:	2301      	movs	r3, #1
 8010a98:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 8010a9a:	887b      	ldrh	r3, [r7, #2]
 8010a9c:	085b      	lsrs	r3, r3, #1
 8010a9e:	b29b      	uxth	r3, r3
 8010aa0:	005b      	lsls	r3, r3, #1
 8010aa2:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8010aa4:	887c      	ldrh	r4, [r7, #2]
 8010aa6:	883a      	ldrh	r2, [r7, #0]
 8010aa8:	88b9      	ldrh	r1, [r7, #4]
 8010aaa:	88f8      	ldrh	r0, [r7, #6]
 8010aac:	2303      	movs	r3, #3
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	4623      	mov	r3, r4
 8010ab2:	f000 fb5b 	bl	801116c <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 8010ab6:	7bfb      	ldrb	r3, [r7, #15]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d00a      	beq.n	8010ad2 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 8010abc:	88fa      	ldrh	r2, [r7, #6]
 8010abe:	887b      	ldrh	r3, [r7, #2]
 8010ac0:	4413      	add	r3, r2
 8010ac2:	b29b      	uxth	r3, r3
 8010ac4:	883a      	ldrh	r2, [r7, #0]
 8010ac6:	88b9      	ldrh	r1, [r7, #4]
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f000 f8e3 	bl	8010c94 <ILI9341_Draw_Pixel>
 8010ace:	e000      	b.n	8010ad2 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010ad0:	bf00      	nop
							(ypos),
							colour);
	}


}
 8010ad2:	3714      	adds	r7, #20
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd90      	pop	{r4, r7, pc}
 8010ad8:	20000c42 	.word	0x20000c42
 8010adc:	20000c40 	.word	0x20000c40

08010ae0 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8010ae0:	b590      	push	{r4, r7, lr}
 8010ae2:	b087      	sub	sp, #28
 8010ae4:	af02      	add	r7, sp, #8
 8010ae6:	4604      	mov	r4, r0
 8010ae8:	4608      	mov	r0, r1
 8010aea:	4611      	mov	r1, r2
 8010aec:	461a      	mov	r2, r3
 8010aee:	4623      	mov	r3, r4
 8010af0:	80fb      	strh	r3, [r7, #6]
 8010af2:	4603      	mov	r3, r0
 8010af4:	80bb      	strh	r3, [r7, #4]
 8010af6:	460b      	mov	r3, r1
 8010af8:	807b      	strh	r3, [r7, #2]
 8010afa:	4613      	mov	r3, r2
 8010afc:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010afe:	4b28      	ldr	r3, [pc, #160]	; (8010ba0 <ILI9341_Draw_Vertical_Line+0xc0>)
 8010b00:	881b      	ldrh	r3, [r3, #0]
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	88fa      	ldrh	r2, [r7, #6]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d246      	bcs.n	8010b98 <ILI9341_Draw_Vertical_Line+0xb8>
 8010b0a:	4b26      	ldr	r3, [pc, #152]	; (8010ba4 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b0c:	881b      	ldrh	r3, [r3, #0]
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	88ba      	ldrh	r2, [r7, #4]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d240      	bcs.n	8010b98 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8010b16:	88ba      	ldrh	r2, [r7, #4]
 8010b18:	887b      	ldrh	r3, [r7, #2]
 8010b1a:	4413      	add	r3, r2
 8010b1c:	3b01      	subs	r3, #1
 8010b1e:	4a21      	ldr	r2, [pc, #132]	; (8010ba4 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b20:	8812      	ldrh	r2, [r2, #0]
 8010b22:	b292      	uxth	r2, r2
 8010b24:	4293      	cmp	r3, r2
 8010b26:	db05      	blt.n	8010b34 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 8010b28:	4b1e      	ldr	r3, [pc, #120]	; (8010ba4 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	b29a      	uxth	r2, r3
 8010b2e:	88bb      	ldrh	r3, [r7, #4]
 8010b30:	1ad3      	subs	r3, r2, r3
 8010b32:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8010b34:	88ba      	ldrh	r2, [r7, #4]
 8010b36:	887b      	ldrh	r3, [r7, #2]
 8010b38:	4413      	add	r3, r2
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	3b01      	subs	r3, #1
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	88fa      	ldrh	r2, [r7, #6]
 8010b42:	88b9      	ldrh	r1, [r7, #4]
 8010b44:	88f8      	ldrh	r0, [r7, #6]
 8010b46:	f000 f82f 	bl	8010ba8 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8010b4a:	2300      	movs	r3, #0
 8010b4c:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8010b4e:	887b      	ldrh	r3, [r7, #2]
 8010b50:	f003 0301 	and.w	r3, r3, #1
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d009      	beq.n	8010b6c <ILI9341_Draw_Vertical_Line+0x8c>
 8010b58:	887b      	ldrh	r3, [r7, #2]
 8010b5a:	2b01      	cmp	r3, #1
 8010b5c:	d906      	bls.n	8010b6c <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 8010b62:	887b      	ldrh	r3, [r7, #2]
 8010b64:	085b      	lsrs	r3, r3, #1
 8010b66:	b29b      	uxth	r3, r3
 8010b68:	005b      	lsls	r3, r3, #1
 8010b6a:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 8010b6c:	7bfb      	ldrb	r3, [r7, #15]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d008      	beq.n	8010b84 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8010b72:	88ba      	ldrh	r2, [r7, #4]
 8010b74:	887b      	ldrh	r3, [r7, #2]
 8010b76:	4413      	add	r3, r2
 8010b78:	b299      	uxth	r1, r3
 8010b7a:	883a      	ldrh	r2, [r7, #0]
 8010b7c:	88fb      	ldrh	r3, [r7, #6]
 8010b7e:	4618      	mov	r0, r3
 8010b80:	f000 f888 	bl	8010c94 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8010b84:	887c      	ldrh	r4, [r7, #2]
 8010b86:	883a      	ldrh	r2, [r7, #0]
 8010b88:	88b9      	ldrh	r1, [r7, #4]
 8010b8a:	88f8      	ldrh	r0, [r7, #6]
 8010b8c:	2303      	movs	r3, #3
 8010b8e:	9300      	str	r3, [sp, #0]
 8010b90:	4623      	mov	r3, r4
 8010b92:	f000 faeb 	bl	801116c <_LCD_Write_Frame>
 8010b96:	e000      	b.n	8010b9a <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010b98:	bf00      	nop
}
 8010b9a:	3714      	adds	r7, #20
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd90      	pop	{r4, r7, pc}
 8010ba0:	20000c42 	.word	0x20000c42
 8010ba4:	20000c40 	.word	0x20000c40

08010ba8 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8010ba8:	b590      	push	{r4, r7, lr}
 8010baa:	b083      	sub	sp, #12
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	4604      	mov	r4, r0
 8010bb0:	4608      	mov	r0, r1
 8010bb2:	4611      	mov	r1, r2
 8010bb4:	461a      	mov	r2, r3
 8010bb6:	4623      	mov	r3, r4
 8010bb8:	80fb      	strh	r3, [r7, #6]
 8010bba:	4603      	mov	r3, r0
 8010bbc:	80bb      	strh	r3, [r7, #4]
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	807b      	strh	r3, [r7, #2]
 8010bc2:	4613      	mov	r3, r2
 8010bc4:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8010bc6:	202a      	movs	r0, #42	; 0x2a
 8010bc8:	f000 fb80 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8010bcc:	88fb      	ldrh	r3, [r7, #6]
 8010bce:	0a1b      	lsrs	r3, r3, #8
 8010bd0:	b29b      	uxth	r3, r3
 8010bd2:	b2db      	uxtb	r3, r3
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	f000 fbab 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(sc);
 8010bda:	88fb      	ldrh	r3, [r7, #6]
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	4618      	mov	r0, r3
 8010be0:	f000 fba6 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8010be4:	887b      	ldrh	r3, [r7, #2]
 8010be6:	0a1b      	lsrs	r3, r3, #8
 8010be8:	b29b      	uxth	r3, r3
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	4618      	mov	r0, r3
 8010bee:	f000 fb9f 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(ec);
 8010bf2:	887b      	ldrh	r3, [r7, #2]
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f000 fb9a 	bl	8011330 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8010bfc:	202b      	movs	r0, #43	; 0x2b
 8010bfe:	f000 fb65 	bl	80112cc <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8010c02:	88bb      	ldrh	r3, [r7, #4]
 8010c04:	0a1b      	lsrs	r3, r3, #8
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	b2db      	uxtb	r3, r3
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f000 fb90 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(sp);
 8010c10:	88bb      	ldrh	r3, [r7, #4]
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	4618      	mov	r0, r3
 8010c16:	f000 fb8b 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8010c1a:	883b      	ldrh	r3, [r7, #0]
 8010c1c:	0a1b      	lsrs	r3, r3, #8
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	4618      	mov	r0, r3
 8010c24:	f000 fb84 	bl	8011330 <_LCD_SendData>
	_LCD_SendData(ep);
 8010c28:	883b      	ldrh	r3, [r7, #0]
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f000 fb7f 	bl	8011330 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8010c32:	202c      	movs	r0, #44	; 0x2c
 8010c34:	f000 fb4a 	bl	80112cc <_LCD_SendCommand>
}
 8010c38:	bf00      	nop
 8010c3a:	370c      	adds	r7, #12
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd90      	pop	{r4, r7, pc}

08010c40 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af02      	add	r7, sp, #8
 8010c46:	4603      	mov	r3, r0
 8010c48:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8010c4a:	4b10      	ldr	r3, [pc, #64]	; (8010c8c <ILI9341_Fill_Screen+0x4c>)
 8010c4c:	881b      	ldrh	r3, [r3, #0]
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	4b0f      	ldr	r3, [pc, #60]	; (8010c90 <ILI9341_Fill_Screen+0x50>)
 8010c52:	881b      	ldrh	r3, [r3, #0]
 8010c54:	b29b      	uxth	r3, r3
 8010c56:	2100      	movs	r1, #0
 8010c58:	2000      	movs	r0, #0
 8010c5a:	f7ff ffa5 	bl	8010ba8 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8010c5e:	4b0b      	ldr	r3, [pc, #44]	; (8010c8c <ILI9341_Fill_Screen+0x4c>)
 8010c60:	881b      	ldrh	r3, [r3, #0]
 8010c62:	b29b      	uxth	r3, r3
 8010c64:	461a      	mov	r2, r3
 8010c66:	4b0a      	ldr	r3, [pc, #40]	; (8010c90 <ILI9341_Fill_Screen+0x50>)
 8010c68:	881b      	ldrh	r3, [r3, #0]
 8010c6a:	b29b      	uxth	r3, r3
 8010c6c:	fb03 f302 	mul.w	r3, r3, r2
 8010c70:	4619      	mov	r1, r3
 8010c72:	88fa      	ldrh	r2, [r7, #6]
 8010c74:	2304      	movs	r3, #4
 8010c76:	9300      	str	r3, [sp, #0]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	2100      	movs	r1, #0
 8010c7c:	2000      	movs	r0, #0
 8010c7e:	f000 fa75 	bl	801116c <_LCD_Write_Frame>
}
 8010c82:	bf00      	nop
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	20000c42 	.word	0x20000c42
 8010c90:	20000c40 	.word	0x20000c40

08010c94 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8010c94:	b580      	push	{r7, lr}
 8010c96:	b08e      	sub	sp, #56	; 0x38
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	80fb      	strh	r3, [r7, #6]
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	80bb      	strh	r3, [r7, #4]
 8010ca2:	4613      	mov	r3, r2
 8010ca4:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010ca6:	4b98      	ldr	r3, [pc, #608]	; (8010f08 <ILI9341_Draw_Pixel+0x274>)
 8010ca8:	881b      	ldrh	r3, [r3, #0]
 8010caa:	b29b      	uxth	r3, r3
 8010cac:	88fa      	ldrh	r2, [r7, #6]
 8010cae:	429a      	cmp	r2, r3
 8010cb0:	f080 8143 	bcs.w	8010f3a <ILI9341_Draw_Pixel+0x2a6>
 8010cb4:	4b95      	ldr	r3, [pc, #596]	; (8010f0c <ILI9341_Draw_Pixel+0x278>)
 8010cb6:	881b      	ldrh	r3, [r3, #0]
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	88ba      	ldrh	r2, [r7, #4]
 8010cbc:	429a      	cmp	r2, r3
 8010cbe:	f080 813c 	bcs.w	8010f3a <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010cc2:	4b93      	ldr	r3, [pc, #588]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010cc4:	695b      	ldr	r3, [r3, #20]
 8010cc6:	4a92      	ldr	r2, [pc, #584]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010cc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ccc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010cce:	4b90      	ldr	r3, [pc, #576]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010cd0:	695b      	ldr	r3, [r3, #20]
 8010cd2:	4a8f      	ldr	r2, [pc, #572]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010cd8:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8010cda:	220a      	movs	r2, #10
 8010cdc:	2100      	movs	r1, #0
 8010cde:	202a      	movs	r0, #42	; 0x2a
 8010ce0:	f000 fb58 	bl	8011394 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8010ce8:	e008      	b.n	8010cfc <ILI9341_Draw_Pixel+0x68>
 8010cea:	4b89      	ldr	r3, [pc, #548]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010cec:	695b      	ldr	r3, [r3, #20]
 8010cee:	4a88      	ldr	r2, [pc, #544]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010cf4:	6153      	str	r3, [r2, #20]
 8010cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8010cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cfe:	2b02      	cmp	r3, #2
 8010d00:	ddf3      	ble.n	8010cea <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010d02:	4b83      	ldr	r3, [pc, #524]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	4a82      	ldr	r2, [pc, #520]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d0c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010d0e:	4b80      	ldr	r3, [pc, #512]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d10:	695b      	ldr	r3, [r3, #20]
 8010d12:	4a7f      	ldr	r2, [pc, #508]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d18:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d1a:	4b7d      	ldr	r3, [pc, #500]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d1c:	695b      	ldr	r3, [r3, #20]
 8010d1e:	4a7c      	ldr	r2, [pc, #496]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d24:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8010d26:	88fb      	ldrh	r3, [r7, #6]
 8010d28:	0a1b      	lsrs	r3, r3, #8
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	b2db      	uxtb	r3, r3
 8010d2e:	753b      	strb	r3, [r7, #20]
 8010d30:	88fb      	ldrh	r3, [r7, #6]
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	757b      	strb	r3, [r7, #21]
 8010d36:	88fb      	ldrh	r3, [r7, #6]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	121b      	asrs	r3, r3, #8
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	75bb      	strb	r3, [r7, #22]
 8010d40:	88fb      	ldrh	r3, [r7, #6]
 8010d42:	b2db      	uxtb	r3, r3
 8010d44:	3301      	adds	r3, #1
 8010d46:	b2db      	uxtb	r3, r3
 8010d48:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8010d4a:	f107 0014 	add.w	r0, r7, #20
 8010d4e:	230a      	movs	r3, #10
 8010d50:	2200      	movs	r2, #0
 8010d52:	2104      	movs	r1, #4
 8010d54:	f000 fb50 	bl	80113f8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d58:	2300      	movs	r3, #0
 8010d5a:	633b      	str	r3, [r7, #48]	; 0x30
 8010d5c:	e008      	b.n	8010d70 <ILI9341_Draw_Pixel+0xdc>
 8010d5e:	4b6c      	ldr	r3, [pc, #432]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d60:	695b      	ldr	r3, [r3, #20]
 8010d62:	4a6b      	ldr	r2, [pc, #428]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d68:	6153      	str	r3, [r2, #20]
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	633b      	str	r3, [r7, #48]	; 0x30
 8010d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d72:	2b02      	cmp	r3, #2
 8010d74:	ddf3      	ble.n	8010d5e <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010d76:	4b66      	ldr	r3, [pc, #408]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d78:	695b      	ldr	r3, [r3, #20]
 8010d7a:	4a65      	ldr	r2, [pc, #404]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d80:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010d82:	4b63      	ldr	r3, [pc, #396]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d84:	695b      	ldr	r3, [r3, #20]
 8010d86:	4a62      	ldr	r2, [pc, #392]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d8c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d8e:	4b60      	ldr	r3, [pc, #384]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d90:	695b      	ldr	r3, [r3, #20]
 8010d92:	4a5f      	ldr	r2, [pc, #380]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010d94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d98:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8010d9a:	220a      	movs	r2, #10
 8010d9c:	2100      	movs	r1, #0
 8010d9e:	202b      	movs	r0, #43	; 0x2b
 8010da0:	f000 faf8 	bl	8011394 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010da4:	2300      	movs	r3, #0
 8010da6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010da8:	e008      	b.n	8010dbc <ILI9341_Draw_Pixel+0x128>
 8010daa:	4b59      	ldr	r3, [pc, #356]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010dac:	695b      	ldr	r3, [r3, #20]
 8010dae:	4a58      	ldr	r2, [pc, #352]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010db4:	6153      	str	r3, [r2, #20]
 8010db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db8:	3301      	adds	r3, #1
 8010dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dbe:	2b02      	cmp	r3, #2
 8010dc0:	ddf3      	ble.n	8010daa <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010dc2:	4b53      	ldr	r3, [pc, #332]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010dc4:	695b      	ldr	r3, [r3, #20]
 8010dc6:	4a52      	ldr	r2, [pc, #328]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dcc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010dce:	4b50      	ldr	r3, [pc, #320]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010dd0:	695b      	ldr	r3, [r3, #20]
 8010dd2:	4a4f      	ldr	r2, [pc, #316]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dd8:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010dda:	4b4d      	ldr	r3, [pc, #308]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010ddc:	695b      	ldr	r3, [r3, #20]
 8010dde:	4a4c      	ldr	r2, [pc, #304]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010de0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010de4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8010de6:	88bb      	ldrh	r3, [r7, #4]
 8010de8:	0a1b      	lsrs	r3, r3, #8
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	b2db      	uxtb	r3, r3
 8010dee:	743b      	strb	r3, [r7, #16]
 8010df0:	88bb      	ldrh	r3, [r7, #4]
 8010df2:	b2db      	uxtb	r3, r3
 8010df4:	747b      	strb	r3, [r7, #17]
 8010df6:	88bb      	ldrh	r3, [r7, #4]
 8010df8:	3301      	adds	r3, #1
 8010dfa:	121b      	asrs	r3, r3, #8
 8010dfc:	b2db      	uxtb	r3, r3
 8010dfe:	74bb      	strb	r3, [r7, #18]
 8010e00:	88bb      	ldrh	r3, [r7, #4]
 8010e02:	b2db      	uxtb	r3, r3
 8010e04:	3301      	adds	r3, #1
 8010e06:	b2db      	uxtb	r3, r3
 8010e08:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8010e0a:	f107 0010 	add.w	r0, r7, #16
 8010e0e:	230a      	movs	r3, #10
 8010e10:	2200      	movs	r2, #0
 8010e12:	2104      	movs	r1, #4
 8010e14:	f000 faf0 	bl	80113f8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e18:	2300      	movs	r3, #0
 8010e1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e1c:	e008      	b.n	8010e30 <ILI9341_Draw_Pixel+0x19c>
 8010e1e:	4b3c      	ldr	r3, [pc, #240]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e20:	695b      	ldr	r3, [r3, #20]
 8010e22:	4a3b      	ldr	r2, [pc, #236]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e28:	6153      	str	r3, [r2, #20]
 8010e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e32:	2b02      	cmp	r3, #2
 8010e34:	ddf3      	ble.n	8010e1e <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010e36:	4b36      	ldr	r3, [pc, #216]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e38:	695b      	ldr	r3, [r3, #20]
 8010e3a:	4a35      	ldr	r2, [pc, #212]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e40:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010e42:	4b33      	ldr	r3, [pc, #204]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e44:	695b      	ldr	r3, [r3, #20]
 8010e46:	4a32      	ldr	r2, [pc, #200]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e4c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e4e:	4b30      	ldr	r3, [pc, #192]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e50:	695b      	ldr	r3, [r3, #20]
 8010e52:	4a2f      	ldr	r2, [pc, #188]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e58:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8010e5a:	220a      	movs	r2, #10
 8010e5c:	2100      	movs	r1, #0
 8010e5e:	202c      	movs	r0, #44	; 0x2c
 8010e60:	f000 fa98 	bl	8011394 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e64:	2300      	movs	r3, #0
 8010e66:	627b      	str	r3, [r7, #36]	; 0x24
 8010e68:	e008      	b.n	8010e7c <ILI9341_Draw_Pixel+0x1e8>
 8010e6a:	4b29      	ldr	r3, [pc, #164]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e6c:	695b      	ldr	r3, [r3, #20]
 8010e6e:	4a28      	ldr	r2, [pc, #160]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e74:	6153      	str	r3, [r2, #20]
 8010e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e78:	3301      	adds	r3, #1
 8010e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	2b02      	cmp	r3, #2
 8010e80:	ddf3      	ble.n	8010e6a <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010e82:	4b23      	ldr	r3, [pc, #140]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e84:	695b      	ldr	r3, [r3, #20]
 8010e86:	4a22      	ldr	r2, [pc, #136]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e8c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010e8e:	4b20      	ldr	r3, [pc, #128]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e90:	695b      	ldr	r3, [r3, #20]
 8010e92:	4a1f      	ldr	r2, [pc, #124]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e98:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e9a:	4b1d      	ldr	r3, [pc, #116]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010e9c:	695b      	ldr	r3, [r3, #20]
 8010e9e:	4a1c      	ldr	r2, [pc, #112]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ea4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8010ea6:	887b      	ldrh	r3, [r7, #2]
 8010ea8:	0a1b      	lsrs	r3, r3, #8
 8010eaa:	b29b      	uxth	r3, r3
 8010eac:	b2db      	uxtb	r3, r3
 8010eae:	733b      	strb	r3, [r7, #12]
 8010eb0:	887b      	ldrh	r3, [r7, #2]
 8010eb2:	b2db      	uxtb	r3, r3
 8010eb4:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8010eb6:	f107 000c 	add.w	r0, r7, #12
 8010eba:	2301      	movs	r3, #1
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	2102      	movs	r1, #2
 8010ec0:	f000 fa9a 	bl	80113f8 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	623b      	str	r3, [r7, #32]
 8010ec8:	e008      	b.n	8010edc <ILI9341_Draw_Pixel+0x248>
 8010eca:	4b11      	ldr	r3, [pc, #68]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010ecc:	695b      	ldr	r3, [r3, #20]
 8010ece:	4a10      	ldr	r2, [pc, #64]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010ed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ed4:	6153      	str	r3, [r2, #20]
 8010ed6:	6a3b      	ldr	r3, [r7, #32]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	623b      	str	r3, [r7, #32]
 8010edc:	6a3b      	ldr	r3, [r7, #32]
 8010ede:	2b02      	cmp	r3, #2
 8010ee0:	ddf3      	ble.n	8010eca <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	61fb      	str	r3, [r7, #28]
 8010ee6:	e008      	b.n	8010efa <ILI9341_Draw_Pixel+0x266>
 8010ee8:	4b09      	ldr	r3, [pc, #36]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010eea:	695b      	ldr	r3, [r3, #20]
 8010eec:	4a08      	ldr	r2, [pc, #32]	; (8010f10 <ILI9341_Draw_Pixel+0x27c>)
 8010eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ef2:	6153      	str	r3, [r2, #20]
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	3301      	adds	r3, #1
 8010ef8:	61fb      	str	r3, [r7, #28]
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	2b02      	cmp	r3, #2
 8010efe:	ddf3      	ble.n	8010ee8 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f00:	2300      	movs	r3, #0
 8010f02:	61bb      	str	r3, [r7, #24]
 8010f04:	e00f      	b.n	8010f26 <ILI9341_Draw_Pixel+0x292>
 8010f06:	bf00      	nop
 8010f08:	20000c42 	.word	0x20000c42
 8010f0c:	20000c40 	.word	0x20000c40
 8010f10:	48000400 	.word	0x48000400
 8010f14:	4b0b      	ldr	r3, [pc, #44]	; (8010f44 <ILI9341_Draw_Pixel+0x2b0>)
 8010f16:	695b      	ldr	r3, [r3, #20]
 8010f18:	4a0a      	ldr	r2, [pc, #40]	; (8010f44 <ILI9341_Draw_Pixel+0x2b0>)
 8010f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f1e:	6153      	str	r3, [r2, #20]
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	3301      	adds	r3, #1
 8010f24:	61bb      	str	r3, [r7, #24]
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	2b02      	cmp	r3, #2
 8010f2a:	ddf3      	ble.n	8010f14 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010f2c:	4b05      	ldr	r3, [pc, #20]	; (8010f44 <ILI9341_Draw_Pixel+0x2b0>)
 8010f2e:	695b      	ldr	r3, [r3, #20]
 8010f30:	4a04      	ldr	r2, [pc, #16]	; (8010f44 <ILI9341_Draw_Pixel+0x2b0>)
 8010f32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f36:	6153      	str	r3, [r2, #20]
 8010f38:	e000      	b.n	8010f3c <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010f3a:	bf00      	nop


}
 8010f3c:	3738      	adds	r7, #56	; 0x38
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	bd80      	pop	{r7, pc}
 8010f42:	bf00      	nop
 8010f44:	48000400 	.word	0x48000400

08010f48 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8010f48:	b590      	push	{r4, r7, lr}
 8010f4a:	b087      	sub	sp, #28
 8010f4c:	af02      	add	r7, sp, #8
 8010f4e:	4604      	mov	r4, r0
 8010f50:	4608      	mov	r0, r1
 8010f52:	4611      	mov	r1, r2
 8010f54:	461a      	mov	r2, r3
 8010f56:	4623      	mov	r3, r4
 8010f58:	80fb      	strh	r3, [r7, #6]
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	80bb      	strh	r3, [r7, #4]
 8010f5e:	460b      	mov	r3, r1
 8010f60:	807b      	strh	r3, [r7, #2]
 8010f62:	4613      	mov	r3, r2
 8010f64:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010f66:	4b41      	ldr	r3, [pc, #260]	; (801106c <ILI9341_Draw_Rectangle+0x124>)
 8010f68:	881b      	ldrh	r3, [r3, #0]
 8010f6a:	b29b      	uxth	r3, r3
 8010f6c:	88fa      	ldrh	r2, [r7, #6]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d278      	bcs.n	8011064 <ILI9341_Draw_Rectangle+0x11c>
 8010f72:	4b3f      	ldr	r3, [pc, #252]	; (8011070 <ILI9341_Draw_Rectangle+0x128>)
 8010f74:	881b      	ldrh	r3, [r3, #0]
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	88ba      	ldrh	r2, [r7, #4]
 8010f7a:	429a      	cmp	r2, r3
 8010f7c:	d272      	bcs.n	8011064 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 8010f7e:	88fa      	ldrh	r2, [r7, #6]
 8010f80:	887b      	ldrh	r3, [r7, #2]
 8010f82:	4413      	add	r3, r2
 8010f84:	3b01      	subs	r3, #1
 8010f86:	4a39      	ldr	r2, [pc, #228]	; (801106c <ILI9341_Draw_Rectangle+0x124>)
 8010f88:	8812      	ldrh	r2, [r2, #0]
 8010f8a:	b292      	uxth	r2, r2
 8010f8c:	4293      	cmp	r3, r2
 8010f8e:	db05      	blt.n	8010f9c <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8010f90:	4b36      	ldr	r3, [pc, #216]	; (801106c <ILI9341_Draw_Rectangle+0x124>)
 8010f92:	881b      	ldrh	r3, [r3, #0]
 8010f94:	b29a      	uxth	r2, r3
 8010f96:	88fb      	ldrh	r3, [r7, #6]
 8010f98:	1ad3      	subs	r3, r2, r3
 8010f9a:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8010f9c:	88ba      	ldrh	r2, [r7, #4]
 8010f9e:	883b      	ldrh	r3, [r7, #0]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	4a32      	ldr	r2, [pc, #200]	; (8011070 <ILI9341_Draw_Rectangle+0x128>)
 8010fa6:	8812      	ldrh	r2, [r2, #0]
 8010fa8:	b292      	uxth	r2, r2
 8010faa:	4293      	cmp	r3, r2
 8010fac:	db05      	blt.n	8010fba <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8010fae:	4b30      	ldr	r3, [pc, #192]	; (8011070 <ILI9341_Draw_Rectangle+0x128>)
 8010fb0:	881b      	ldrh	r3, [r3, #0]
 8010fb2:	b29a      	uxth	r2, r3
 8010fb4:	88bb      	ldrh	r3, [r7, #4]
 8010fb6:	1ad3      	subs	r3, r2, r3
 8010fb8:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8010fba:	88fa      	ldrh	r2, [r7, #6]
 8010fbc:	887b      	ldrh	r3, [r7, #2]
 8010fbe:	4413      	add	r3, r2
 8010fc0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010fc2:	3b01      	subs	r3, #1
 8010fc4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8010fc6:	88ba      	ldrh	r2, [r7, #4]
 8010fc8:	883b      	ldrh	r3, [r7, #0]
 8010fca:	4413      	add	r3, r2
 8010fcc:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010fce:	3b01      	subs	r3, #1
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	88b9      	ldrh	r1, [r7, #4]
 8010fd4:	88f8      	ldrh	r0, [r7, #6]
 8010fd6:	4622      	mov	r2, r4
 8010fd8:	f7ff fde6 	bl	8010ba8 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8010fdc:	883a      	ldrh	r2, [r7, #0]
 8010fde:	887b      	ldrh	r3, [r7, #2]
 8010fe0:	fb12 f303 	smulbb	r3, r2, r3
 8010fe4:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8010fe6:	2300      	movs	r3, #0
 8010fe8:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8010fea:	89fb      	ldrh	r3, [r7, #14]
 8010fec:	f003 0301 	and.w	r3, r3, #1
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d009      	beq.n	8011008 <ILI9341_Draw_Rectangle+0xc0>
 8010ff4:	89fb      	ldrh	r3, [r7, #14]
 8010ff6:	2b01      	cmp	r3, #1
 8010ff8:	d906      	bls.n	8011008 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8010ffe:	89fb      	ldrh	r3, [r7, #14]
 8011000:	085b      	lsrs	r3, r3, #1
 8011002:	b29b      	uxth	r3, r3
 8011004:	005b      	lsls	r3, r3, #1
 8011006:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 8011008:	89fc      	ldrh	r4, [r7, #14]
 801100a:	8c3a      	ldrh	r2, [r7, #32]
 801100c:	88b9      	ldrh	r1, [r7, #4]
 801100e:	88f8      	ldrh	r0, [r7, #6]
 8011010:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011014:	9300      	str	r3, [sp, #0]
 8011016:	4623      	mov	r3, r4
 8011018:	f000 f8a8 	bl	801116c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 801101c:	7b7b      	ldrb	r3, [r7, #13]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d021      	beq.n	8011066 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8011022:	88fa      	ldrh	r2, [r7, #6]
 8011024:	887b      	ldrh	r3, [r7, #2]
 8011026:	4413      	add	r3, r2
 8011028:	b29b      	uxth	r3, r3
 801102a:	3b02      	subs	r3, #2
 801102c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 801102e:	88ba      	ldrh	r2, [r7, #4]
 8011030:	883b      	ldrh	r3, [r7, #0]
 8011032:	4413      	add	r3, r2
 8011034:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8011036:	3b01      	subs	r3, #1
 8011038:	b29b      	uxth	r3, r3
 801103a:	8c3a      	ldrh	r2, [r7, #32]
 801103c:	4619      	mov	r1, r3
 801103e:	f7ff fe29 	bl	8010c94 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011042:	88fa      	ldrh	r2, [r7, #6]
 8011044:	887b      	ldrh	r3, [r7, #2]
 8011046:	4413      	add	r3, r2
 8011048:	b29b      	uxth	r3, r3
 801104a:	3b01      	subs	r3, #1
 801104c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 801104e:	88ba      	ldrh	r2, [r7, #4]
 8011050:	883b      	ldrh	r3, [r7, #0]
 8011052:	4413      	add	r3, r2
 8011054:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011056:	3b01      	subs	r3, #1
 8011058:	b29b      	uxth	r3, r3
 801105a:	8c3a      	ldrh	r2, [r7, #32]
 801105c:	4619      	mov	r1, r3
 801105e:	f7ff fe19 	bl	8010c94 <ILI9341_Draw_Pixel>
 8011062:	e000      	b.n	8011066 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011064:	bf00      	nop
							colour);
	}
}
 8011066:	3714      	adds	r7, #20
 8011068:	46bd      	mov	sp, r7
 801106a:	bd90      	pop	{r4, r7, pc}
 801106c:	20000c42 	.word	0x20000c42
 8011070:	20000c40 	.word	0x20000c40

08011074 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8011074:	b580      	push	{r7, lr}
 8011076:	b084      	sub	sp, #16
 8011078:	af00      	add	r7, sp, #0
 801107a:	4603      	mov	r3, r0
 801107c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 801107e:	79fb      	ldrb	r3, [r7, #7]
 8011080:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 8011082:	2036      	movs	r0, #54	; 0x36
 8011084:	f000 f922 	bl	80112cc <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8011088:	7bfb      	ldrb	r3, [r7, #15]
 801108a:	2b03      	cmp	r3, #3
 801108c:	d836      	bhi.n	80110fc <ILI9341_Set_Rotation+0x88>
 801108e:	a201      	add	r2, pc, #4	; (adr r2, 8011094 <ILI9341_Set_Rotation+0x20>)
 8011090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011094:	080110a5 	.word	0x080110a5
 8011098:	080110bb 	.word	0x080110bb
 801109c:	080110d1 	.word	0x080110d1
 80110a0:	080110e7 	.word	0x080110e7
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 80110a4:	2048      	movs	r0, #72	; 0x48
 80110a6:	f000 f943 	bl	8011330 <_LCD_SendData>
			LCD_WIDTH = 240;
 80110aa:	4b17      	ldr	r3, [pc, #92]	; (8011108 <ILI9341_Set_Rotation+0x94>)
 80110ac:	22f0      	movs	r2, #240	; 0xf0
 80110ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80110b0:	4b16      	ldr	r3, [pc, #88]	; (801110c <ILI9341_Set_Rotation+0x98>)
 80110b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110b6:	801a      	strh	r2, [r3, #0]
			break;
 80110b8:	e021      	b.n	80110fe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 80110ba:	2028      	movs	r0, #40	; 0x28
 80110bc:	f000 f938 	bl	8011330 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80110c0:	4b11      	ldr	r3, [pc, #68]	; (8011108 <ILI9341_Set_Rotation+0x94>)
 80110c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80110c8:	4b10      	ldr	r3, [pc, #64]	; (801110c <ILI9341_Set_Rotation+0x98>)
 80110ca:	22f0      	movs	r2, #240	; 0xf0
 80110cc:	801a      	strh	r2, [r3, #0]
			break;
 80110ce:	e016      	b.n	80110fe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 80110d0:	2088      	movs	r0, #136	; 0x88
 80110d2:	f000 f92d 	bl	8011330 <_LCD_SendData>
			LCD_WIDTH  = 240;
 80110d6:	4b0c      	ldr	r3, [pc, #48]	; (8011108 <ILI9341_Set_Rotation+0x94>)
 80110d8:	22f0      	movs	r2, #240	; 0xf0
 80110da:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80110dc:	4b0b      	ldr	r3, [pc, #44]	; (801110c <ILI9341_Set_Rotation+0x98>)
 80110de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110e2:	801a      	strh	r2, [r3, #0]
			break;
 80110e4:	e00b      	b.n	80110fe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 80110e6:	20e8      	movs	r0, #232	; 0xe8
 80110e8:	f000 f922 	bl	8011330 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80110ec:	4b06      	ldr	r3, [pc, #24]	; (8011108 <ILI9341_Set_Rotation+0x94>)
 80110ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80110f4:	4b05      	ldr	r3, [pc, #20]	; (801110c <ILI9341_Set_Rotation+0x98>)
 80110f6:	22f0      	movs	r2, #240	; 0xf0
 80110f8:	801a      	strh	r2, [r3, #0]
			break;
 80110fa:	e000      	b.n	80110fe <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80110fc:	bf00      	nop
	}
}
 80110fe:	bf00      	nop
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
 8011106:	bf00      	nop
 8011108:	20000c42 	.word	0x20000c42
 801110c:	20000c40 	.word	0x20000c40

08011110 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8011110:	b480      	push	{r7}
 8011112:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011114:	4b05      	ldr	r3, [pc, #20]	; (801112c <_LCD_Enable+0x1c>)
 8011116:	695b      	ldr	r3, [r3, #20]
 8011118:	4a04      	ldr	r2, [pc, #16]	; (801112c <_LCD_Enable+0x1c>)
 801111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801111e:	6153      	str	r3, [r2, #20]
}
 8011120:	bf00      	nop
 8011122:	46bd      	mov	sp, r7
 8011124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011128:	4770      	bx	lr
 801112a:	bf00      	nop
 801112c:	48000400 	.word	0x48000400

08011130 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8011130:	b580      	push	{r7, lr}
 8011132:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8011134:	4b0c      	ldr	r3, [pc, #48]	; (8011168 <_LCD_Reset+0x38>)
 8011136:	695b      	ldr	r3, [r3, #20]
 8011138:	4a0b      	ldr	r2, [pc, #44]	; (8011168 <_LCD_Reset+0x38>)
 801113a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801113e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011140:	20c8      	movs	r0, #200	; 0xc8
 8011142:	f7f8 f869 	bl	8009218 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011146:	4b08      	ldr	r3, [pc, #32]	; (8011168 <_LCD_Reset+0x38>)
 8011148:	695b      	ldr	r3, [r3, #20]
 801114a:	4a07      	ldr	r2, [pc, #28]	; (8011168 <_LCD_Reset+0x38>)
 801114c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011150:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011152:	20c8      	movs	r0, #200	; 0xc8
 8011154:	f7f8 f860 	bl	8009218 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011158:	4b03      	ldr	r3, [pc, #12]	; (8011168 <_LCD_Reset+0x38>)
 801115a:	695b      	ldr	r3, [r3, #20]
 801115c:	4a02      	ldr	r2, [pc, #8]	; (8011168 <_LCD_Reset+0x38>)
 801115e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011162:	6153      	str	r3, [r2, #20]
}
 8011164:	bf00      	nop
 8011166:	bd80      	pop	{r7, pc}
 8011168:	48000400 	.word	0x48000400

0801116c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 801116c:	b5b0      	push	{r4, r5, r7, lr}
 801116e:	b08e      	sub	sp, #56	; 0x38
 8011170:	af00      	add	r7, sp, #0
 8011172:	607b      	str	r3, [r7, #4]
 8011174:	4603      	mov	r3, r0
 8011176:	81fb      	strh	r3, [r7, #14]
 8011178:	460b      	mov	r3, r1
 801117a:	81bb      	strh	r3, [r7, #12]
 801117c:	4613      	mov	r3, r2
 801117e:	817b      	strh	r3, [r7, #10]
 8011180:	466b      	mov	r3, sp
 8011182:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8011184:	2300      	movs	r3, #0
 8011186:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	005b      	lsls	r3, r3, #1
 801118c:	4a4d      	ldr	r2, [pc, #308]	; (80112c4 <_LCD_Write_Frame+0x158>)
 801118e:	8812      	ldrh	r2, [r2, #0]
 8011190:	4293      	cmp	r3, r2
 8011192:	d202      	bcs.n	801119a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011198:	e002      	b.n	80111a0 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 801119a:	4b4a      	ldr	r3, [pc, #296]	; (80112c4 <_LCD_Write_Frame+0x158>)
 801119c:	881b      	ldrh	r3, [r3, #0]
 801119e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 80111a0:	897b      	ldrh	r3, [r7, #10]
 80111a2:	0a1b      	lsrs	r3, r3, #8
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 80111a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111aa:	4603      	mov	r3, r0
 80111ac:	3b01      	subs	r3, #1
 80111ae:	61bb      	str	r3, [r7, #24]
 80111b0:	4601      	mov	r1, r0
 80111b2:	f04f 0200 	mov.w	r2, #0
 80111b6:	f04f 0300 	mov.w	r3, #0
 80111ba:	f04f 0400 	mov.w	r4, #0
 80111be:	00d4      	lsls	r4, r2, #3
 80111c0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80111c4:	00cb      	lsls	r3, r1, #3
 80111c6:	4601      	mov	r1, r0
 80111c8:	f04f 0200 	mov.w	r2, #0
 80111cc:	f04f 0300 	mov.w	r3, #0
 80111d0:	f04f 0400 	mov.w	r4, #0
 80111d4:	00d4      	lsls	r4, r2, #3
 80111d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80111da:	00cb      	lsls	r3, r1, #3
 80111dc:	1dc3      	adds	r3, r0, #7
 80111de:	08db      	lsrs	r3, r3, #3
 80111e0:	00db      	lsls	r3, r3, #3
 80111e2:	ebad 0d03 	sub.w	sp, sp, r3
 80111e6:	466b      	mov	r3, sp
 80111e8:	3300      	adds	r3, #0
 80111ea:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80111ec:	2300      	movs	r3, #0
 80111ee:	633b      	str	r3, [r7, #48]	; 0x30
 80111f0:	e00d      	b.n	801120e <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 80111f2:	697a      	ldr	r2, [r7, #20]
 80111f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f6:	4413      	add	r3, r2
 80111f8:	7ffa      	ldrb	r2, [r7, #31]
 80111fa:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80111fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111fe:	3301      	adds	r3, #1
 8011200:	897a      	ldrh	r2, [r7, #10]
 8011202:	b2d1      	uxtb	r1, r2
 8011204:	697a      	ldr	r2, [r7, #20]
 8011206:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8011208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801120a:	3302      	adds	r3, #2
 801120c:	633b      	str	r3, [r7, #48]	; 0x30
 801120e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011212:	429a      	cmp	r2, r3
 8011214:	d3ed      	bcc.n	80111f2 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	005b      	lsls	r3, r3, #1
 801121a:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 801121c:	2301      	movs	r3, #1
 801121e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8011220:	2300      	movs	r3, #0
 8011222:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d00d      	beq.n	8011246 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 801122a:	693a      	ldr	r2, [r7, #16]
 801122c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011232:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8011234:	693b      	ldr	r3, [r7, #16]
 8011236:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011238:	fbb3 f2f2 	udiv	r2, r3, r2
 801123c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801123e:	fb01 f202 	mul.w	r2, r1, r2
 8011242:	1a9b      	subs	r3, r3, r2
 8011244:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8011246:	4b20      	ldr	r3, [pc, #128]	; (80112c8 <_LCD_Write_Frame+0x15c>)
 8011248:	695b      	ldr	r3, [r3, #20]
 801124a:	4a1f      	ldr	r2, [pc, #124]	; (80112c8 <_LCD_Write_Frame+0x15c>)
 801124c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011250:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011252:	4b1d      	ldr	r3, [pc, #116]	; (80112c8 <_LCD_Write_Frame+0x15c>)
 8011254:	695b      	ldr	r3, [r3, #20]
 8011256:	4a1c      	ldr	r2, [pc, #112]	; (80112c8 <_LCD_Write_Frame+0x15c>)
 8011258:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801125c:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 801125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011260:	2b00      	cmp	r3, #0
 8011262:	d00f      	beq.n	8011284 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011264:	2300      	movs	r3, #0
 8011266:	627b      	str	r3, [r7, #36]	; 0x24
 8011268:	e008      	b.n	801127c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 801126a:	6978      	ldr	r0, [r7, #20]
 801126c:	230a      	movs	r3, #10
 801126e:	2200      	movs	r2, #0
 8011270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011272:	f000 f8c1 	bl	80113f8 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011278:	3301      	adds	r3, #1
 801127a:	627b      	str	r3, [r7, #36]	; 0x24
 801127c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801127e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011280:	429a      	cmp	r2, r3
 8011282:	d3f2      	bcc.n	801126a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8011284:	6978      	ldr	r0, [r7, #20]
 8011286:	230a      	movs	r3, #10
 8011288:	2200      	movs	r2, #0
 801128a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801128c:	f000 f8b4 	bl	80113f8 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011290:	2300      	movs	r3, #0
 8011292:	623b      	str	r3, [r7, #32]
 8011294:	e008      	b.n	80112a8 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011296:	4b0c      	ldr	r3, [pc, #48]	; (80112c8 <_LCD_Write_Frame+0x15c>)
 8011298:	695b      	ldr	r3, [r3, #20]
 801129a:	4a0b      	ldr	r2, [pc, #44]	; (80112c8 <_LCD_Write_Frame+0x15c>)
 801129c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112a0:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80112a2:	6a3b      	ldr	r3, [r7, #32]
 80112a4:	3301      	adds	r3, #1
 80112a6:	623b      	str	r3, [r7, #32]
 80112a8:	6a3b      	ldr	r3, [r7, #32]
 80112aa:	2b02      	cmp	r3, #2
 80112ac:	ddf3      	ble.n	8011296 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80112ae:	4b06      	ldr	r3, [pc, #24]	; (80112c8 <_LCD_Write_Frame+0x15c>)
 80112b0:	695b      	ldr	r3, [r3, #20]
 80112b2:	4a05      	ldr	r2, [pc, #20]	; (80112c8 <_LCD_Write_Frame+0x15c>)
 80112b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112b8:	6153      	str	r3, [r2, #20]
 80112ba:	46ad      	mov	sp, r5

}
 80112bc:	bf00      	nop
 80112be:	3738      	adds	r7, #56	; 0x38
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bdb0      	pop	{r4, r5, r7, pc}
 80112c4:	20000c44 	.word	0x20000c44
 80112c8:	48000400 	.word	0x48000400

080112cc <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b084      	sub	sp, #16
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	4603      	mov	r3, r0
 80112d4:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80112d6:	4b15      	ldr	r3, [pc, #84]	; (801132c <_LCD_SendCommand+0x60>)
 80112d8:	695b      	ldr	r3, [r3, #20]
 80112da:	4a14      	ldr	r2, [pc, #80]	; (801132c <_LCD_SendCommand+0x60>)
 80112dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112e0:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 80112e2:	4b12      	ldr	r3, [pc, #72]	; (801132c <_LCD_SendCommand+0x60>)
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	4a11      	ldr	r2, [pc, #68]	; (801132c <_LCD_SendCommand+0x60>)
 80112e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80112ec:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 80112ee:	79fb      	ldrb	r3, [r7, #7]
 80112f0:	2200      	movs	r2, #0
 80112f2:	2100      	movs	r1, #0
 80112f4:	4618      	mov	r0, r3
 80112f6:	f000 f84d 	bl	8011394 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80112fa:	2300      	movs	r3, #0
 80112fc:	60fb      	str	r3, [r7, #12]
 80112fe:	e008      	b.n	8011312 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011300:	4b0a      	ldr	r3, [pc, #40]	; (801132c <_LCD_SendCommand+0x60>)
 8011302:	695b      	ldr	r3, [r3, #20]
 8011304:	4a09      	ldr	r2, [pc, #36]	; (801132c <_LCD_SendCommand+0x60>)
 8011306:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801130a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	3301      	adds	r3, #1
 8011310:	60fb      	str	r3, [r7, #12]
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2b02      	cmp	r3, #2
 8011316:	ddf3      	ble.n	8011300 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8011318:	4b04      	ldr	r3, [pc, #16]	; (801132c <_LCD_SendCommand+0x60>)
 801131a:	695b      	ldr	r3, [r3, #20]
 801131c:	4a03      	ldr	r2, [pc, #12]	; (801132c <_LCD_SendCommand+0x60>)
 801131e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011322:	6153      	str	r3, [r2, #20]
}
 8011324:	bf00      	nop
 8011326:	3710      	adds	r7, #16
 8011328:	46bd      	mov	sp, r7
 801132a:	bd80      	pop	{r7, pc}
 801132c:	48000400 	.word	0x48000400

08011330 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	4603      	mov	r3, r0
 8011338:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801133a:	4b15      	ldr	r3, [pc, #84]	; (8011390 <_LCD_SendData+0x60>)
 801133c:	695b      	ldr	r3, [r3, #20]
 801133e:	4a14      	ldr	r2, [pc, #80]	; (8011390 <_LCD_SendData+0x60>)
 8011340:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011344:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011346:	4b12      	ldr	r3, [pc, #72]	; (8011390 <_LCD_SendData+0x60>)
 8011348:	695b      	ldr	r3, [r3, #20]
 801134a:	4a11      	ldr	r2, [pc, #68]	; (8011390 <_LCD_SendData+0x60>)
 801134c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011350:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 8011352:	79fb      	ldrb	r3, [r7, #7]
 8011354:	2200      	movs	r2, #0
 8011356:	2100      	movs	r1, #0
 8011358:	4618      	mov	r0, r3
 801135a:	f000 f81b 	bl	8011394 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801135e:	2300      	movs	r3, #0
 8011360:	60fb      	str	r3, [r7, #12]
 8011362:	e008      	b.n	8011376 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011364:	4b0a      	ldr	r3, [pc, #40]	; (8011390 <_LCD_SendData+0x60>)
 8011366:	695b      	ldr	r3, [r3, #20]
 8011368:	4a09      	ldr	r2, [pc, #36]	; (8011390 <_LCD_SendData+0x60>)
 801136a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801136e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	3301      	adds	r3, #1
 8011374:	60fb      	str	r3, [r7, #12]
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2b02      	cmp	r3, #2
 801137a:	ddf3      	ble.n	8011364 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801137c:	4b04      	ldr	r3, [pc, #16]	; (8011390 <_LCD_SendData+0x60>)
 801137e:	695b      	ldr	r3, [r3, #20]
 8011380:	4a03      	ldr	r2, [pc, #12]	; (8011390 <_LCD_SendData+0x60>)
 8011382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011386:	6153      	str	r3, [r2, #20]
}
 8011388:	bf00      	nop
 801138a:	3710      	adds	r7, #16
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}
 8011390:	48000400 	.word	0x48000400

08011394 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8011394:	b480      	push	{r7}
 8011396:	b085      	sub	sp, #20
 8011398:	af00      	add	r7, sp, #0
 801139a:	4603      	mov	r3, r0
 801139c:	71fb      	strb	r3, [r7, #7]
 801139e:	460b      	mov	r3, r1
 80113a0:	71bb      	strb	r3, [r7, #6]
 80113a2:	4613      	mov	r3, r2
 80113a4:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80113a6:	2300      	movs	r3, #0
 80113a8:	60fb      	str	r3, [r7, #12]
 80113aa:	e003      	b.n	80113b4 <_SPI_SendByte+0x20>
   		asm("nop");
 80113ac:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	3301      	adds	r3, #1
 80113b2:	60fb      	str	r3, [r7, #12]
 80113b4:	79bb      	ldrb	r3, [r7, #6]
 80113b6:	68fa      	ldr	r2, [r7, #12]
 80113b8:	429a      	cmp	r2, r3
 80113ba:	dbf7      	blt.n	80113ac <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80113bc:	4b0c      	ldr	r3, [pc, #48]	; (80113f0 <_SPI_SendByte+0x5c>)
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	f003 0302 	and.w	r3, r3, #2
 80113c4:	2b02      	cmp	r3, #2
 80113c6:	d102      	bne.n	80113ce <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80113c8:	4a0a      	ldr	r2, [pc, #40]	; (80113f4 <_SPI_SendByte+0x60>)
 80113ca:	79fb      	ldrb	r3, [r7, #7]
 80113cc:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80113ce:	2300      	movs	r3, #0
 80113d0:	60bb      	str	r3, [r7, #8]
 80113d2:	e003      	b.n	80113dc <_SPI_SendByte+0x48>
   		asm("nop");
 80113d4:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80113d6:	68bb      	ldr	r3, [r7, #8]
 80113d8:	3301      	adds	r3, #1
 80113da:	60bb      	str	r3, [r7, #8]
 80113dc:	797b      	ldrb	r3, [r7, #5]
 80113de:	68ba      	ldr	r2, [r7, #8]
 80113e0:	429a      	cmp	r2, r3
 80113e2:	dbf7      	blt.n	80113d4 <_SPI_SendByte+0x40>

#endif

}
 80113e4:	bf00      	nop
 80113e6:	3714      	adds	r7, #20
 80113e8:	46bd      	mov	sp, r7
 80113ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ee:	4770      	bx	lr
 80113f0:	40003c00 	.word	0x40003c00
 80113f4:	40003c0c 	.word	0x40003c0c

080113f8 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b089      	sub	sp, #36	; 0x24
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	60f8      	str	r0, [r7, #12]
 8011400:	60b9      	str	r1, [r7, #8]
 8011402:	4611      	mov	r1, r2
 8011404:	461a      	mov	r2, r3
 8011406:	460b      	mov	r3, r1
 8011408:	71fb      	strb	r3, [r7, #7]
 801140a:	4613      	mov	r3, r2
 801140c:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 801140e:	2300      	movs	r3, #0
 8011410:	61fb      	str	r3, [r7, #28]
 8011412:	e003      	b.n	801141c <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8011414:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 8011416:	69fb      	ldr	r3, [r7, #28]
 8011418:	3301      	adds	r3, #1
 801141a:	61fb      	str	r3, [r7, #28]
 801141c:	79fb      	ldrb	r3, [r7, #7]
 801141e:	69fa      	ldr	r2, [r7, #28]
 8011420:	429a      	cmp	r2, r3
 8011422:	dbf7      	blt.n	8011414 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 8011428:	e01d      	b.n	8011466 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 801142a:	4b1c      	ldr	r3, [pc, #112]	; (801149c <_SPI_SendByteMultiByte+0xa4>)
 801142c:	689b      	ldr	r3, [r3, #8]
 801142e:	f003 0302 	and.w	r3, r3, #2
 8011432:	2b02      	cmp	r3, #2
 8011434:	d117      	bne.n	8011466 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2b01      	cmp	r3, #1
 801143a:	d90a      	bls.n	8011452 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 801143c:	69bb      	ldr	r3, [r7, #24]
 801143e:	881a      	ldrh	r2, [r3, #0]
 8011440:	4b16      	ldr	r3, [pc, #88]	; (801149c <_SPI_SendByteMultiByte+0xa4>)
 8011442:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8011444:	69bb      	ldr	r3, [r7, #24]
 8011446:	3302      	adds	r3, #2
 8011448:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 801144a:	68bb      	ldr	r3, [r7, #8]
 801144c:	3b02      	subs	r3, #2
 801144e:	60bb      	str	r3, [r7, #8]
 8011450:	e009      	b.n	8011466 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8011452:	4a13      	ldr	r2, [pc, #76]	; (80114a0 <_SPI_SendByteMultiByte+0xa8>)
 8011454:	69bb      	ldr	r3, [r7, #24]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	3301      	adds	r3, #1
 801145e:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8011460:	68bb      	ldr	r3, [r7, #8]
 8011462:	3b01      	subs	r3, #1
 8011464:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8011466:	68bb      	ldr	r3, [r7, #8]
 8011468:	2b00      	cmp	r3, #0
 801146a:	d1de      	bne.n	801142a <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 801146c:	4b0b      	ldr	r3, [pc, #44]	; (801149c <_SPI_SendByteMultiByte+0xa4>)
 801146e:	689b      	ldr	r3, [r3, #8]
 8011470:	4a0a      	ldr	r2, [pc, #40]	; (801149c <_SPI_SendByteMultiByte+0xa4>)
 8011472:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011476:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8011478:	2300      	movs	r3, #0
 801147a:	617b      	str	r3, [r7, #20]
 801147c:	e003      	b.n	8011486 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 801147e:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	3301      	adds	r3, #1
 8011484:	617b      	str	r3, [r7, #20]
 8011486:	79bb      	ldrb	r3, [r7, #6]
 8011488:	697a      	ldr	r2, [r7, #20]
 801148a:	429a      	cmp	r2, r3
 801148c:	dbf7      	blt.n	801147e <_SPI_SendByteMultiByte+0x86>

#endif

}
 801148e:	bf00      	nop
 8011490:	3724      	adds	r7, #36	; 0x24
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	40003c00 	.word	0x40003c00
 80114a0:	40003c0c 	.word	0x40003c0c

080114a4 <__errno>:
 80114a4:	4b01      	ldr	r3, [pc, #4]	; (80114ac <__errno+0x8>)
 80114a6:	6818      	ldr	r0, [r3, #0]
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	20001c38 	.word	0x20001c38

080114b0 <__libc_init_array>:
 80114b0:	b570      	push	{r4, r5, r6, lr}
 80114b2:	4e0d      	ldr	r6, [pc, #52]	; (80114e8 <__libc_init_array+0x38>)
 80114b4:	4c0d      	ldr	r4, [pc, #52]	; (80114ec <__libc_init_array+0x3c>)
 80114b6:	1ba4      	subs	r4, r4, r6
 80114b8:	10a4      	asrs	r4, r4, #2
 80114ba:	2500      	movs	r5, #0
 80114bc:	42a5      	cmp	r5, r4
 80114be:	d109      	bne.n	80114d4 <__libc_init_array+0x24>
 80114c0:	4e0b      	ldr	r6, [pc, #44]	; (80114f0 <__libc_init_array+0x40>)
 80114c2:	4c0c      	ldr	r4, [pc, #48]	; (80114f4 <__libc_init_array+0x44>)
 80114c4:	f004 f89e 	bl	8015604 <_init>
 80114c8:	1ba4      	subs	r4, r4, r6
 80114ca:	10a4      	asrs	r4, r4, #2
 80114cc:	2500      	movs	r5, #0
 80114ce:	42a5      	cmp	r5, r4
 80114d0:	d105      	bne.n	80114de <__libc_init_array+0x2e>
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80114d8:	4798      	blx	r3
 80114da:	3501      	adds	r5, #1
 80114dc:	e7ee      	b.n	80114bc <__libc_init_array+0xc>
 80114de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80114e2:	4798      	blx	r3
 80114e4:	3501      	adds	r5, #1
 80114e6:	e7f2      	b.n	80114ce <__libc_init_array+0x1e>
 80114e8:	08016a80 	.word	0x08016a80
 80114ec:	08016a80 	.word	0x08016a80
 80114f0:	08016a80 	.word	0x08016a80
 80114f4:	08016a84 	.word	0x08016a84

080114f8 <memset>:
 80114f8:	4402      	add	r2, r0
 80114fa:	4603      	mov	r3, r0
 80114fc:	4293      	cmp	r3, r2
 80114fe:	d100      	bne.n	8011502 <memset+0xa>
 8011500:	4770      	bx	lr
 8011502:	f803 1b01 	strb.w	r1, [r3], #1
 8011506:	e7f9      	b.n	80114fc <memset+0x4>

08011508 <__cvt>:
 8011508:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801150c:	ec55 4b10 	vmov	r4, r5, d0
 8011510:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011512:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011516:	2d00      	cmp	r5, #0
 8011518:	460e      	mov	r6, r1
 801151a:	4691      	mov	r9, r2
 801151c:	4619      	mov	r1, r3
 801151e:	bfb8      	it	lt
 8011520:	4622      	movlt	r2, r4
 8011522:	462b      	mov	r3, r5
 8011524:	f027 0720 	bic.w	r7, r7, #32
 8011528:	bfbb      	ittet	lt
 801152a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801152e:	461d      	movlt	r5, r3
 8011530:	2300      	movge	r3, #0
 8011532:	232d      	movlt	r3, #45	; 0x2d
 8011534:	bfb8      	it	lt
 8011536:	4614      	movlt	r4, r2
 8011538:	2f46      	cmp	r7, #70	; 0x46
 801153a:	700b      	strb	r3, [r1, #0]
 801153c:	d004      	beq.n	8011548 <__cvt+0x40>
 801153e:	2f45      	cmp	r7, #69	; 0x45
 8011540:	d100      	bne.n	8011544 <__cvt+0x3c>
 8011542:	3601      	adds	r6, #1
 8011544:	2102      	movs	r1, #2
 8011546:	e000      	b.n	801154a <__cvt+0x42>
 8011548:	2103      	movs	r1, #3
 801154a:	ab03      	add	r3, sp, #12
 801154c:	9301      	str	r3, [sp, #4]
 801154e:	ab02      	add	r3, sp, #8
 8011550:	9300      	str	r3, [sp, #0]
 8011552:	4632      	mov	r2, r6
 8011554:	4653      	mov	r3, sl
 8011556:	ec45 4b10 	vmov	d0, r4, r5
 801155a:	f000 fe3d 	bl	80121d8 <_dtoa_r>
 801155e:	2f47      	cmp	r7, #71	; 0x47
 8011560:	4680      	mov	r8, r0
 8011562:	d102      	bne.n	801156a <__cvt+0x62>
 8011564:	f019 0f01 	tst.w	r9, #1
 8011568:	d026      	beq.n	80115b8 <__cvt+0xb0>
 801156a:	2f46      	cmp	r7, #70	; 0x46
 801156c:	eb08 0906 	add.w	r9, r8, r6
 8011570:	d111      	bne.n	8011596 <__cvt+0x8e>
 8011572:	f898 3000 	ldrb.w	r3, [r8]
 8011576:	2b30      	cmp	r3, #48	; 0x30
 8011578:	d10a      	bne.n	8011590 <__cvt+0x88>
 801157a:	2200      	movs	r2, #0
 801157c:	2300      	movs	r3, #0
 801157e:	4620      	mov	r0, r4
 8011580:	4629      	mov	r1, r5
 8011582:	f7ef fac9 	bl	8000b18 <__aeabi_dcmpeq>
 8011586:	b918      	cbnz	r0, 8011590 <__cvt+0x88>
 8011588:	f1c6 0601 	rsb	r6, r6, #1
 801158c:	f8ca 6000 	str.w	r6, [sl]
 8011590:	f8da 3000 	ldr.w	r3, [sl]
 8011594:	4499      	add	r9, r3
 8011596:	2200      	movs	r2, #0
 8011598:	2300      	movs	r3, #0
 801159a:	4620      	mov	r0, r4
 801159c:	4629      	mov	r1, r5
 801159e:	f7ef fabb 	bl	8000b18 <__aeabi_dcmpeq>
 80115a2:	b938      	cbnz	r0, 80115b4 <__cvt+0xac>
 80115a4:	2230      	movs	r2, #48	; 0x30
 80115a6:	9b03      	ldr	r3, [sp, #12]
 80115a8:	454b      	cmp	r3, r9
 80115aa:	d205      	bcs.n	80115b8 <__cvt+0xb0>
 80115ac:	1c59      	adds	r1, r3, #1
 80115ae:	9103      	str	r1, [sp, #12]
 80115b0:	701a      	strb	r2, [r3, #0]
 80115b2:	e7f8      	b.n	80115a6 <__cvt+0x9e>
 80115b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80115b8:	9b03      	ldr	r3, [sp, #12]
 80115ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115bc:	eba3 0308 	sub.w	r3, r3, r8
 80115c0:	4640      	mov	r0, r8
 80115c2:	6013      	str	r3, [r2, #0]
 80115c4:	b004      	add	sp, #16
 80115c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080115ca <__exponent>:
 80115ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80115cc:	2900      	cmp	r1, #0
 80115ce:	4604      	mov	r4, r0
 80115d0:	bfba      	itte	lt
 80115d2:	4249      	neglt	r1, r1
 80115d4:	232d      	movlt	r3, #45	; 0x2d
 80115d6:	232b      	movge	r3, #43	; 0x2b
 80115d8:	2909      	cmp	r1, #9
 80115da:	f804 2b02 	strb.w	r2, [r4], #2
 80115de:	7043      	strb	r3, [r0, #1]
 80115e0:	dd20      	ble.n	8011624 <__exponent+0x5a>
 80115e2:	f10d 0307 	add.w	r3, sp, #7
 80115e6:	461f      	mov	r7, r3
 80115e8:	260a      	movs	r6, #10
 80115ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80115ee:	fb06 1115 	mls	r1, r6, r5, r1
 80115f2:	3130      	adds	r1, #48	; 0x30
 80115f4:	2d09      	cmp	r5, #9
 80115f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80115fa:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80115fe:	4629      	mov	r1, r5
 8011600:	dc09      	bgt.n	8011616 <__exponent+0x4c>
 8011602:	3130      	adds	r1, #48	; 0x30
 8011604:	3b02      	subs	r3, #2
 8011606:	f802 1c01 	strb.w	r1, [r2, #-1]
 801160a:	42bb      	cmp	r3, r7
 801160c:	4622      	mov	r2, r4
 801160e:	d304      	bcc.n	801161a <__exponent+0x50>
 8011610:	1a10      	subs	r0, r2, r0
 8011612:	b003      	add	sp, #12
 8011614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011616:	4613      	mov	r3, r2
 8011618:	e7e7      	b.n	80115ea <__exponent+0x20>
 801161a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801161e:	f804 2b01 	strb.w	r2, [r4], #1
 8011622:	e7f2      	b.n	801160a <__exponent+0x40>
 8011624:	2330      	movs	r3, #48	; 0x30
 8011626:	4419      	add	r1, r3
 8011628:	7083      	strb	r3, [r0, #2]
 801162a:	1d02      	adds	r2, r0, #4
 801162c:	70c1      	strb	r1, [r0, #3]
 801162e:	e7ef      	b.n	8011610 <__exponent+0x46>

08011630 <_printf_float>:
 8011630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011634:	b08d      	sub	sp, #52	; 0x34
 8011636:	460c      	mov	r4, r1
 8011638:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 801163c:	4616      	mov	r6, r2
 801163e:	461f      	mov	r7, r3
 8011640:	4605      	mov	r5, r0
 8011642:	f001 fcfb 	bl	801303c <_localeconv_r>
 8011646:	6803      	ldr	r3, [r0, #0]
 8011648:	9304      	str	r3, [sp, #16]
 801164a:	4618      	mov	r0, r3
 801164c:	f7ee fde8 	bl	8000220 <strlen>
 8011650:	2300      	movs	r3, #0
 8011652:	930a      	str	r3, [sp, #40]	; 0x28
 8011654:	f8d8 3000 	ldr.w	r3, [r8]
 8011658:	9005      	str	r0, [sp, #20]
 801165a:	3307      	adds	r3, #7
 801165c:	f023 0307 	bic.w	r3, r3, #7
 8011660:	f103 0208 	add.w	r2, r3, #8
 8011664:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011668:	f8d4 b000 	ldr.w	fp, [r4]
 801166c:	f8c8 2000 	str.w	r2, [r8]
 8011670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011674:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011678:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801167c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011680:	9307      	str	r3, [sp, #28]
 8011682:	f8cd 8018 	str.w	r8, [sp, #24]
 8011686:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801168a:	4ba7      	ldr	r3, [pc, #668]	; (8011928 <_printf_float+0x2f8>)
 801168c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011690:	f7ef fa74 	bl	8000b7c <__aeabi_dcmpun>
 8011694:	bb70      	cbnz	r0, 80116f4 <_printf_float+0xc4>
 8011696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801169a:	4ba3      	ldr	r3, [pc, #652]	; (8011928 <_printf_float+0x2f8>)
 801169c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116a0:	f7ef fa4e 	bl	8000b40 <__aeabi_dcmple>
 80116a4:	bb30      	cbnz	r0, 80116f4 <_printf_float+0xc4>
 80116a6:	2200      	movs	r2, #0
 80116a8:	2300      	movs	r3, #0
 80116aa:	4640      	mov	r0, r8
 80116ac:	4649      	mov	r1, r9
 80116ae:	f7ef fa3d 	bl	8000b2c <__aeabi_dcmplt>
 80116b2:	b110      	cbz	r0, 80116ba <_printf_float+0x8a>
 80116b4:	232d      	movs	r3, #45	; 0x2d
 80116b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116ba:	4a9c      	ldr	r2, [pc, #624]	; (801192c <_printf_float+0x2fc>)
 80116bc:	4b9c      	ldr	r3, [pc, #624]	; (8011930 <_printf_float+0x300>)
 80116be:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80116c2:	bf8c      	ite	hi
 80116c4:	4690      	movhi	r8, r2
 80116c6:	4698      	movls	r8, r3
 80116c8:	2303      	movs	r3, #3
 80116ca:	f02b 0204 	bic.w	r2, fp, #4
 80116ce:	6123      	str	r3, [r4, #16]
 80116d0:	6022      	str	r2, [r4, #0]
 80116d2:	f04f 0900 	mov.w	r9, #0
 80116d6:	9700      	str	r7, [sp, #0]
 80116d8:	4633      	mov	r3, r6
 80116da:	aa0b      	add	r2, sp, #44	; 0x2c
 80116dc:	4621      	mov	r1, r4
 80116de:	4628      	mov	r0, r5
 80116e0:	f000 f9e6 	bl	8011ab0 <_printf_common>
 80116e4:	3001      	adds	r0, #1
 80116e6:	f040 808d 	bne.w	8011804 <_printf_float+0x1d4>
 80116ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80116ee:	b00d      	add	sp, #52	; 0x34
 80116f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116f4:	4642      	mov	r2, r8
 80116f6:	464b      	mov	r3, r9
 80116f8:	4640      	mov	r0, r8
 80116fa:	4649      	mov	r1, r9
 80116fc:	f7ef fa3e 	bl	8000b7c <__aeabi_dcmpun>
 8011700:	b110      	cbz	r0, 8011708 <_printf_float+0xd8>
 8011702:	4a8c      	ldr	r2, [pc, #560]	; (8011934 <_printf_float+0x304>)
 8011704:	4b8c      	ldr	r3, [pc, #560]	; (8011938 <_printf_float+0x308>)
 8011706:	e7da      	b.n	80116be <_printf_float+0x8e>
 8011708:	6861      	ldr	r1, [r4, #4]
 801170a:	1c4b      	adds	r3, r1, #1
 801170c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011710:	a80a      	add	r0, sp, #40	; 0x28
 8011712:	d13e      	bne.n	8011792 <_printf_float+0x162>
 8011714:	2306      	movs	r3, #6
 8011716:	6063      	str	r3, [r4, #4]
 8011718:	2300      	movs	r3, #0
 801171a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801171e:	ab09      	add	r3, sp, #36	; 0x24
 8011720:	9300      	str	r3, [sp, #0]
 8011722:	ec49 8b10 	vmov	d0, r8, r9
 8011726:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801172a:	6022      	str	r2, [r4, #0]
 801172c:	f8cd a004 	str.w	sl, [sp, #4]
 8011730:	6861      	ldr	r1, [r4, #4]
 8011732:	4628      	mov	r0, r5
 8011734:	f7ff fee8 	bl	8011508 <__cvt>
 8011738:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 801173c:	2b47      	cmp	r3, #71	; 0x47
 801173e:	4680      	mov	r8, r0
 8011740:	d109      	bne.n	8011756 <_printf_float+0x126>
 8011742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011744:	1cd8      	adds	r0, r3, #3
 8011746:	db02      	blt.n	801174e <_printf_float+0x11e>
 8011748:	6862      	ldr	r2, [r4, #4]
 801174a:	4293      	cmp	r3, r2
 801174c:	dd47      	ble.n	80117de <_printf_float+0x1ae>
 801174e:	f1aa 0a02 	sub.w	sl, sl, #2
 8011752:	fa5f fa8a 	uxtb.w	sl, sl
 8011756:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801175a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801175c:	d824      	bhi.n	80117a8 <_printf_float+0x178>
 801175e:	3901      	subs	r1, #1
 8011760:	4652      	mov	r2, sl
 8011762:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011766:	9109      	str	r1, [sp, #36]	; 0x24
 8011768:	f7ff ff2f 	bl	80115ca <__exponent>
 801176c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801176e:	1813      	adds	r3, r2, r0
 8011770:	2a01      	cmp	r2, #1
 8011772:	4681      	mov	r9, r0
 8011774:	6123      	str	r3, [r4, #16]
 8011776:	dc02      	bgt.n	801177e <_printf_float+0x14e>
 8011778:	6822      	ldr	r2, [r4, #0]
 801177a:	07d1      	lsls	r1, r2, #31
 801177c:	d501      	bpl.n	8011782 <_printf_float+0x152>
 801177e:	3301      	adds	r3, #1
 8011780:	6123      	str	r3, [r4, #16]
 8011782:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011786:	2b00      	cmp	r3, #0
 8011788:	d0a5      	beq.n	80116d6 <_printf_float+0xa6>
 801178a:	232d      	movs	r3, #45	; 0x2d
 801178c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011790:	e7a1      	b.n	80116d6 <_printf_float+0xa6>
 8011792:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011796:	f000 8177 	beq.w	8011a88 <_printf_float+0x458>
 801179a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801179e:	d1bb      	bne.n	8011718 <_printf_float+0xe8>
 80117a0:	2900      	cmp	r1, #0
 80117a2:	d1b9      	bne.n	8011718 <_printf_float+0xe8>
 80117a4:	2301      	movs	r3, #1
 80117a6:	e7b6      	b.n	8011716 <_printf_float+0xe6>
 80117a8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80117ac:	d119      	bne.n	80117e2 <_printf_float+0x1b2>
 80117ae:	2900      	cmp	r1, #0
 80117b0:	6863      	ldr	r3, [r4, #4]
 80117b2:	dd0c      	ble.n	80117ce <_printf_float+0x19e>
 80117b4:	6121      	str	r1, [r4, #16]
 80117b6:	b913      	cbnz	r3, 80117be <_printf_float+0x18e>
 80117b8:	6822      	ldr	r2, [r4, #0]
 80117ba:	07d2      	lsls	r2, r2, #31
 80117bc:	d502      	bpl.n	80117c4 <_printf_float+0x194>
 80117be:	3301      	adds	r3, #1
 80117c0:	440b      	add	r3, r1
 80117c2:	6123      	str	r3, [r4, #16]
 80117c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117c6:	65a3      	str	r3, [r4, #88]	; 0x58
 80117c8:	f04f 0900 	mov.w	r9, #0
 80117cc:	e7d9      	b.n	8011782 <_printf_float+0x152>
 80117ce:	b913      	cbnz	r3, 80117d6 <_printf_float+0x1a6>
 80117d0:	6822      	ldr	r2, [r4, #0]
 80117d2:	07d0      	lsls	r0, r2, #31
 80117d4:	d501      	bpl.n	80117da <_printf_float+0x1aa>
 80117d6:	3302      	adds	r3, #2
 80117d8:	e7f3      	b.n	80117c2 <_printf_float+0x192>
 80117da:	2301      	movs	r3, #1
 80117dc:	e7f1      	b.n	80117c2 <_printf_float+0x192>
 80117de:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80117e2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80117e6:	4293      	cmp	r3, r2
 80117e8:	db05      	blt.n	80117f6 <_printf_float+0x1c6>
 80117ea:	6822      	ldr	r2, [r4, #0]
 80117ec:	6123      	str	r3, [r4, #16]
 80117ee:	07d1      	lsls	r1, r2, #31
 80117f0:	d5e8      	bpl.n	80117c4 <_printf_float+0x194>
 80117f2:	3301      	adds	r3, #1
 80117f4:	e7e5      	b.n	80117c2 <_printf_float+0x192>
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	bfd4      	ite	le
 80117fa:	f1c3 0302 	rsble	r3, r3, #2
 80117fe:	2301      	movgt	r3, #1
 8011800:	4413      	add	r3, r2
 8011802:	e7de      	b.n	80117c2 <_printf_float+0x192>
 8011804:	6823      	ldr	r3, [r4, #0]
 8011806:	055a      	lsls	r2, r3, #21
 8011808:	d407      	bmi.n	801181a <_printf_float+0x1ea>
 801180a:	6923      	ldr	r3, [r4, #16]
 801180c:	4642      	mov	r2, r8
 801180e:	4631      	mov	r1, r6
 8011810:	4628      	mov	r0, r5
 8011812:	47b8      	blx	r7
 8011814:	3001      	adds	r0, #1
 8011816:	d12b      	bne.n	8011870 <_printf_float+0x240>
 8011818:	e767      	b.n	80116ea <_printf_float+0xba>
 801181a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801181e:	f240 80dc 	bls.w	80119da <_printf_float+0x3aa>
 8011822:	2200      	movs	r2, #0
 8011824:	2300      	movs	r3, #0
 8011826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801182a:	f7ef f975 	bl	8000b18 <__aeabi_dcmpeq>
 801182e:	2800      	cmp	r0, #0
 8011830:	d033      	beq.n	801189a <_printf_float+0x26a>
 8011832:	2301      	movs	r3, #1
 8011834:	4a41      	ldr	r2, [pc, #260]	; (801193c <_printf_float+0x30c>)
 8011836:	4631      	mov	r1, r6
 8011838:	4628      	mov	r0, r5
 801183a:	47b8      	blx	r7
 801183c:	3001      	adds	r0, #1
 801183e:	f43f af54 	beq.w	80116ea <_printf_float+0xba>
 8011842:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011846:	429a      	cmp	r2, r3
 8011848:	db02      	blt.n	8011850 <_printf_float+0x220>
 801184a:	6823      	ldr	r3, [r4, #0]
 801184c:	07d8      	lsls	r0, r3, #31
 801184e:	d50f      	bpl.n	8011870 <_printf_float+0x240>
 8011850:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011854:	4631      	mov	r1, r6
 8011856:	4628      	mov	r0, r5
 8011858:	47b8      	blx	r7
 801185a:	3001      	adds	r0, #1
 801185c:	f43f af45 	beq.w	80116ea <_printf_float+0xba>
 8011860:	f04f 0800 	mov.w	r8, #0
 8011864:	f104 091a 	add.w	r9, r4, #26
 8011868:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801186a:	3b01      	subs	r3, #1
 801186c:	4543      	cmp	r3, r8
 801186e:	dc09      	bgt.n	8011884 <_printf_float+0x254>
 8011870:	6823      	ldr	r3, [r4, #0]
 8011872:	079b      	lsls	r3, r3, #30
 8011874:	f100 8103 	bmi.w	8011a7e <_printf_float+0x44e>
 8011878:	68e0      	ldr	r0, [r4, #12]
 801187a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801187c:	4298      	cmp	r0, r3
 801187e:	bfb8      	it	lt
 8011880:	4618      	movlt	r0, r3
 8011882:	e734      	b.n	80116ee <_printf_float+0xbe>
 8011884:	2301      	movs	r3, #1
 8011886:	464a      	mov	r2, r9
 8011888:	4631      	mov	r1, r6
 801188a:	4628      	mov	r0, r5
 801188c:	47b8      	blx	r7
 801188e:	3001      	adds	r0, #1
 8011890:	f43f af2b 	beq.w	80116ea <_printf_float+0xba>
 8011894:	f108 0801 	add.w	r8, r8, #1
 8011898:	e7e6      	b.n	8011868 <_printf_float+0x238>
 801189a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801189c:	2b00      	cmp	r3, #0
 801189e:	dc2b      	bgt.n	80118f8 <_printf_float+0x2c8>
 80118a0:	2301      	movs	r3, #1
 80118a2:	4a26      	ldr	r2, [pc, #152]	; (801193c <_printf_float+0x30c>)
 80118a4:	4631      	mov	r1, r6
 80118a6:	4628      	mov	r0, r5
 80118a8:	47b8      	blx	r7
 80118aa:	3001      	adds	r0, #1
 80118ac:	f43f af1d 	beq.w	80116ea <_printf_float+0xba>
 80118b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b2:	b923      	cbnz	r3, 80118be <_printf_float+0x28e>
 80118b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118b6:	b913      	cbnz	r3, 80118be <_printf_float+0x28e>
 80118b8:	6823      	ldr	r3, [r4, #0]
 80118ba:	07d9      	lsls	r1, r3, #31
 80118bc:	d5d8      	bpl.n	8011870 <_printf_float+0x240>
 80118be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118c2:	4631      	mov	r1, r6
 80118c4:	4628      	mov	r0, r5
 80118c6:	47b8      	blx	r7
 80118c8:	3001      	adds	r0, #1
 80118ca:	f43f af0e 	beq.w	80116ea <_printf_float+0xba>
 80118ce:	f04f 0900 	mov.w	r9, #0
 80118d2:	f104 0a1a 	add.w	sl, r4, #26
 80118d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d8:	425b      	negs	r3, r3
 80118da:	454b      	cmp	r3, r9
 80118dc:	dc01      	bgt.n	80118e2 <_printf_float+0x2b2>
 80118de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118e0:	e794      	b.n	801180c <_printf_float+0x1dc>
 80118e2:	2301      	movs	r3, #1
 80118e4:	4652      	mov	r2, sl
 80118e6:	4631      	mov	r1, r6
 80118e8:	4628      	mov	r0, r5
 80118ea:	47b8      	blx	r7
 80118ec:	3001      	adds	r0, #1
 80118ee:	f43f aefc 	beq.w	80116ea <_printf_float+0xba>
 80118f2:	f109 0901 	add.w	r9, r9, #1
 80118f6:	e7ee      	b.n	80118d6 <_printf_float+0x2a6>
 80118f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80118fc:	429a      	cmp	r2, r3
 80118fe:	bfa8      	it	ge
 8011900:	461a      	movge	r2, r3
 8011902:	2a00      	cmp	r2, #0
 8011904:	4691      	mov	r9, r2
 8011906:	dd07      	ble.n	8011918 <_printf_float+0x2e8>
 8011908:	4613      	mov	r3, r2
 801190a:	4631      	mov	r1, r6
 801190c:	4642      	mov	r2, r8
 801190e:	4628      	mov	r0, r5
 8011910:	47b8      	blx	r7
 8011912:	3001      	adds	r0, #1
 8011914:	f43f aee9 	beq.w	80116ea <_printf_float+0xba>
 8011918:	f104 031a 	add.w	r3, r4, #26
 801191c:	f04f 0b00 	mov.w	fp, #0
 8011920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011924:	9306      	str	r3, [sp, #24]
 8011926:	e015      	b.n	8011954 <_printf_float+0x324>
 8011928:	7fefffff 	.word	0x7fefffff
 801192c:	0801677c 	.word	0x0801677c
 8011930:	08016778 	.word	0x08016778
 8011934:	08016784 	.word	0x08016784
 8011938:	08016780 	.word	0x08016780
 801193c:	08016a34 	.word	0x08016a34
 8011940:	2301      	movs	r3, #1
 8011942:	9a06      	ldr	r2, [sp, #24]
 8011944:	4631      	mov	r1, r6
 8011946:	4628      	mov	r0, r5
 8011948:	47b8      	blx	r7
 801194a:	3001      	adds	r0, #1
 801194c:	f43f aecd 	beq.w	80116ea <_printf_float+0xba>
 8011950:	f10b 0b01 	add.w	fp, fp, #1
 8011954:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8011958:	ebaa 0309 	sub.w	r3, sl, r9
 801195c:	455b      	cmp	r3, fp
 801195e:	dcef      	bgt.n	8011940 <_printf_float+0x310>
 8011960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011964:	429a      	cmp	r2, r3
 8011966:	44d0      	add	r8, sl
 8011968:	db15      	blt.n	8011996 <_printf_float+0x366>
 801196a:	6823      	ldr	r3, [r4, #0]
 801196c:	07da      	lsls	r2, r3, #31
 801196e:	d412      	bmi.n	8011996 <_printf_float+0x366>
 8011970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011972:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011974:	eba3 020a 	sub.w	r2, r3, sl
 8011978:	eba3 0a01 	sub.w	sl, r3, r1
 801197c:	4592      	cmp	sl, r2
 801197e:	bfa8      	it	ge
 8011980:	4692      	movge	sl, r2
 8011982:	f1ba 0f00 	cmp.w	sl, #0
 8011986:	dc0e      	bgt.n	80119a6 <_printf_float+0x376>
 8011988:	f04f 0800 	mov.w	r8, #0
 801198c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011990:	f104 091a 	add.w	r9, r4, #26
 8011994:	e019      	b.n	80119ca <_printf_float+0x39a>
 8011996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801199a:	4631      	mov	r1, r6
 801199c:	4628      	mov	r0, r5
 801199e:	47b8      	blx	r7
 80119a0:	3001      	adds	r0, #1
 80119a2:	d1e5      	bne.n	8011970 <_printf_float+0x340>
 80119a4:	e6a1      	b.n	80116ea <_printf_float+0xba>
 80119a6:	4653      	mov	r3, sl
 80119a8:	4642      	mov	r2, r8
 80119aa:	4631      	mov	r1, r6
 80119ac:	4628      	mov	r0, r5
 80119ae:	47b8      	blx	r7
 80119b0:	3001      	adds	r0, #1
 80119b2:	d1e9      	bne.n	8011988 <_printf_float+0x358>
 80119b4:	e699      	b.n	80116ea <_printf_float+0xba>
 80119b6:	2301      	movs	r3, #1
 80119b8:	464a      	mov	r2, r9
 80119ba:	4631      	mov	r1, r6
 80119bc:	4628      	mov	r0, r5
 80119be:	47b8      	blx	r7
 80119c0:	3001      	adds	r0, #1
 80119c2:	f43f ae92 	beq.w	80116ea <_printf_float+0xba>
 80119c6:	f108 0801 	add.w	r8, r8, #1
 80119ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80119ce:	1a9b      	subs	r3, r3, r2
 80119d0:	eba3 030a 	sub.w	r3, r3, sl
 80119d4:	4543      	cmp	r3, r8
 80119d6:	dcee      	bgt.n	80119b6 <_printf_float+0x386>
 80119d8:	e74a      	b.n	8011870 <_printf_float+0x240>
 80119da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119dc:	2a01      	cmp	r2, #1
 80119de:	dc01      	bgt.n	80119e4 <_printf_float+0x3b4>
 80119e0:	07db      	lsls	r3, r3, #31
 80119e2:	d53a      	bpl.n	8011a5a <_printf_float+0x42a>
 80119e4:	2301      	movs	r3, #1
 80119e6:	4642      	mov	r2, r8
 80119e8:	4631      	mov	r1, r6
 80119ea:	4628      	mov	r0, r5
 80119ec:	47b8      	blx	r7
 80119ee:	3001      	adds	r0, #1
 80119f0:	f43f ae7b 	beq.w	80116ea <_printf_float+0xba>
 80119f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119f8:	4631      	mov	r1, r6
 80119fa:	4628      	mov	r0, r5
 80119fc:	47b8      	blx	r7
 80119fe:	3001      	adds	r0, #1
 8011a00:	f108 0801 	add.w	r8, r8, #1
 8011a04:	f43f ae71 	beq.w	80116ea <_printf_float+0xba>
 8011a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011a10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a14:	2300      	movs	r3, #0
 8011a16:	f7ef f87f 	bl	8000b18 <__aeabi_dcmpeq>
 8011a1a:	b9c8      	cbnz	r0, 8011a50 <_printf_float+0x420>
 8011a1c:	4653      	mov	r3, sl
 8011a1e:	4642      	mov	r2, r8
 8011a20:	4631      	mov	r1, r6
 8011a22:	4628      	mov	r0, r5
 8011a24:	47b8      	blx	r7
 8011a26:	3001      	adds	r0, #1
 8011a28:	d10e      	bne.n	8011a48 <_printf_float+0x418>
 8011a2a:	e65e      	b.n	80116ea <_printf_float+0xba>
 8011a2c:	2301      	movs	r3, #1
 8011a2e:	4652      	mov	r2, sl
 8011a30:	4631      	mov	r1, r6
 8011a32:	4628      	mov	r0, r5
 8011a34:	47b8      	blx	r7
 8011a36:	3001      	adds	r0, #1
 8011a38:	f43f ae57 	beq.w	80116ea <_printf_float+0xba>
 8011a3c:	f108 0801 	add.w	r8, r8, #1
 8011a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a42:	3b01      	subs	r3, #1
 8011a44:	4543      	cmp	r3, r8
 8011a46:	dcf1      	bgt.n	8011a2c <_printf_float+0x3fc>
 8011a48:	464b      	mov	r3, r9
 8011a4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a4e:	e6de      	b.n	801180e <_printf_float+0x1de>
 8011a50:	f04f 0800 	mov.w	r8, #0
 8011a54:	f104 0a1a 	add.w	sl, r4, #26
 8011a58:	e7f2      	b.n	8011a40 <_printf_float+0x410>
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	e7df      	b.n	8011a1e <_printf_float+0x3ee>
 8011a5e:	2301      	movs	r3, #1
 8011a60:	464a      	mov	r2, r9
 8011a62:	4631      	mov	r1, r6
 8011a64:	4628      	mov	r0, r5
 8011a66:	47b8      	blx	r7
 8011a68:	3001      	adds	r0, #1
 8011a6a:	f43f ae3e 	beq.w	80116ea <_printf_float+0xba>
 8011a6e:	f108 0801 	add.w	r8, r8, #1
 8011a72:	68e3      	ldr	r3, [r4, #12]
 8011a74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011a76:	1a9b      	subs	r3, r3, r2
 8011a78:	4543      	cmp	r3, r8
 8011a7a:	dcf0      	bgt.n	8011a5e <_printf_float+0x42e>
 8011a7c:	e6fc      	b.n	8011878 <_printf_float+0x248>
 8011a7e:	f04f 0800 	mov.w	r8, #0
 8011a82:	f104 0919 	add.w	r9, r4, #25
 8011a86:	e7f4      	b.n	8011a72 <_printf_float+0x442>
 8011a88:	2900      	cmp	r1, #0
 8011a8a:	f43f ae8b 	beq.w	80117a4 <_printf_float+0x174>
 8011a8e:	2300      	movs	r3, #0
 8011a90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011a94:	ab09      	add	r3, sp, #36	; 0x24
 8011a96:	9300      	str	r3, [sp, #0]
 8011a98:	ec49 8b10 	vmov	d0, r8, r9
 8011a9c:	6022      	str	r2, [r4, #0]
 8011a9e:	f8cd a004 	str.w	sl, [sp, #4]
 8011aa2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011aa6:	4628      	mov	r0, r5
 8011aa8:	f7ff fd2e 	bl	8011508 <__cvt>
 8011aac:	4680      	mov	r8, r0
 8011aae:	e648      	b.n	8011742 <_printf_float+0x112>

08011ab0 <_printf_common>:
 8011ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ab4:	4691      	mov	r9, r2
 8011ab6:	461f      	mov	r7, r3
 8011ab8:	688a      	ldr	r2, [r1, #8]
 8011aba:	690b      	ldr	r3, [r1, #16]
 8011abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	bfb8      	it	lt
 8011ac4:	4613      	movlt	r3, r2
 8011ac6:	f8c9 3000 	str.w	r3, [r9]
 8011aca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011ace:	4606      	mov	r6, r0
 8011ad0:	460c      	mov	r4, r1
 8011ad2:	b112      	cbz	r2, 8011ada <_printf_common+0x2a>
 8011ad4:	3301      	adds	r3, #1
 8011ad6:	f8c9 3000 	str.w	r3, [r9]
 8011ada:	6823      	ldr	r3, [r4, #0]
 8011adc:	0699      	lsls	r1, r3, #26
 8011ade:	bf42      	ittt	mi
 8011ae0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011ae4:	3302      	addmi	r3, #2
 8011ae6:	f8c9 3000 	strmi.w	r3, [r9]
 8011aea:	6825      	ldr	r5, [r4, #0]
 8011aec:	f015 0506 	ands.w	r5, r5, #6
 8011af0:	d107      	bne.n	8011b02 <_printf_common+0x52>
 8011af2:	f104 0a19 	add.w	sl, r4, #25
 8011af6:	68e3      	ldr	r3, [r4, #12]
 8011af8:	f8d9 2000 	ldr.w	r2, [r9]
 8011afc:	1a9b      	subs	r3, r3, r2
 8011afe:	42ab      	cmp	r3, r5
 8011b00:	dc28      	bgt.n	8011b54 <_printf_common+0xa4>
 8011b02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011b06:	6822      	ldr	r2, [r4, #0]
 8011b08:	3300      	adds	r3, #0
 8011b0a:	bf18      	it	ne
 8011b0c:	2301      	movne	r3, #1
 8011b0e:	0692      	lsls	r2, r2, #26
 8011b10:	d42d      	bmi.n	8011b6e <_printf_common+0xbe>
 8011b12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b16:	4639      	mov	r1, r7
 8011b18:	4630      	mov	r0, r6
 8011b1a:	47c0      	blx	r8
 8011b1c:	3001      	adds	r0, #1
 8011b1e:	d020      	beq.n	8011b62 <_printf_common+0xb2>
 8011b20:	6823      	ldr	r3, [r4, #0]
 8011b22:	68e5      	ldr	r5, [r4, #12]
 8011b24:	f8d9 2000 	ldr.w	r2, [r9]
 8011b28:	f003 0306 	and.w	r3, r3, #6
 8011b2c:	2b04      	cmp	r3, #4
 8011b2e:	bf08      	it	eq
 8011b30:	1aad      	subeq	r5, r5, r2
 8011b32:	68a3      	ldr	r3, [r4, #8]
 8011b34:	6922      	ldr	r2, [r4, #16]
 8011b36:	bf0c      	ite	eq
 8011b38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b3c:	2500      	movne	r5, #0
 8011b3e:	4293      	cmp	r3, r2
 8011b40:	bfc4      	itt	gt
 8011b42:	1a9b      	subgt	r3, r3, r2
 8011b44:	18ed      	addgt	r5, r5, r3
 8011b46:	f04f 0900 	mov.w	r9, #0
 8011b4a:	341a      	adds	r4, #26
 8011b4c:	454d      	cmp	r5, r9
 8011b4e:	d11a      	bne.n	8011b86 <_printf_common+0xd6>
 8011b50:	2000      	movs	r0, #0
 8011b52:	e008      	b.n	8011b66 <_printf_common+0xb6>
 8011b54:	2301      	movs	r3, #1
 8011b56:	4652      	mov	r2, sl
 8011b58:	4639      	mov	r1, r7
 8011b5a:	4630      	mov	r0, r6
 8011b5c:	47c0      	blx	r8
 8011b5e:	3001      	adds	r0, #1
 8011b60:	d103      	bne.n	8011b6a <_printf_common+0xba>
 8011b62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b6a:	3501      	adds	r5, #1
 8011b6c:	e7c3      	b.n	8011af6 <_printf_common+0x46>
 8011b6e:	18e1      	adds	r1, r4, r3
 8011b70:	1c5a      	adds	r2, r3, #1
 8011b72:	2030      	movs	r0, #48	; 0x30
 8011b74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011b78:	4422      	add	r2, r4
 8011b7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011b7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011b82:	3302      	adds	r3, #2
 8011b84:	e7c5      	b.n	8011b12 <_printf_common+0x62>
 8011b86:	2301      	movs	r3, #1
 8011b88:	4622      	mov	r2, r4
 8011b8a:	4639      	mov	r1, r7
 8011b8c:	4630      	mov	r0, r6
 8011b8e:	47c0      	blx	r8
 8011b90:	3001      	adds	r0, #1
 8011b92:	d0e6      	beq.n	8011b62 <_printf_common+0xb2>
 8011b94:	f109 0901 	add.w	r9, r9, #1
 8011b98:	e7d8      	b.n	8011b4c <_printf_common+0x9c>
	...

08011b9c <_printf_i>:
 8011b9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011ba0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011ba4:	460c      	mov	r4, r1
 8011ba6:	7e09      	ldrb	r1, [r1, #24]
 8011ba8:	b085      	sub	sp, #20
 8011baa:	296e      	cmp	r1, #110	; 0x6e
 8011bac:	4617      	mov	r7, r2
 8011bae:	4606      	mov	r6, r0
 8011bb0:	4698      	mov	r8, r3
 8011bb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011bb4:	f000 80b3 	beq.w	8011d1e <_printf_i+0x182>
 8011bb8:	d822      	bhi.n	8011c00 <_printf_i+0x64>
 8011bba:	2963      	cmp	r1, #99	; 0x63
 8011bbc:	d036      	beq.n	8011c2c <_printf_i+0x90>
 8011bbe:	d80a      	bhi.n	8011bd6 <_printf_i+0x3a>
 8011bc0:	2900      	cmp	r1, #0
 8011bc2:	f000 80b9 	beq.w	8011d38 <_printf_i+0x19c>
 8011bc6:	2958      	cmp	r1, #88	; 0x58
 8011bc8:	f000 8083 	beq.w	8011cd2 <_printf_i+0x136>
 8011bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011bd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011bd4:	e032      	b.n	8011c3c <_printf_i+0xa0>
 8011bd6:	2964      	cmp	r1, #100	; 0x64
 8011bd8:	d001      	beq.n	8011bde <_printf_i+0x42>
 8011bda:	2969      	cmp	r1, #105	; 0x69
 8011bdc:	d1f6      	bne.n	8011bcc <_printf_i+0x30>
 8011bde:	6820      	ldr	r0, [r4, #0]
 8011be0:	6813      	ldr	r3, [r2, #0]
 8011be2:	0605      	lsls	r5, r0, #24
 8011be4:	f103 0104 	add.w	r1, r3, #4
 8011be8:	d52a      	bpl.n	8011c40 <_printf_i+0xa4>
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	6011      	str	r1, [r2, #0]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	da03      	bge.n	8011bfa <_printf_i+0x5e>
 8011bf2:	222d      	movs	r2, #45	; 0x2d
 8011bf4:	425b      	negs	r3, r3
 8011bf6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011bfa:	486f      	ldr	r0, [pc, #444]	; (8011db8 <_printf_i+0x21c>)
 8011bfc:	220a      	movs	r2, #10
 8011bfe:	e039      	b.n	8011c74 <_printf_i+0xd8>
 8011c00:	2973      	cmp	r1, #115	; 0x73
 8011c02:	f000 809d 	beq.w	8011d40 <_printf_i+0x1a4>
 8011c06:	d808      	bhi.n	8011c1a <_printf_i+0x7e>
 8011c08:	296f      	cmp	r1, #111	; 0x6f
 8011c0a:	d020      	beq.n	8011c4e <_printf_i+0xb2>
 8011c0c:	2970      	cmp	r1, #112	; 0x70
 8011c0e:	d1dd      	bne.n	8011bcc <_printf_i+0x30>
 8011c10:	6823      	ldr	r3, [r4, #0]
 8011c12:	f043 0320 	orr.w	r3, r3, #32
 8011c16:	6023      	str	r3, [r4, #0]
 8011c18:	e003      	b.n	8011c22 <_printf_i+0x86>
 8011c1a:	2975      	cmp	r1, #117	; 0x75
 8011c1c:	d017      	beq.n	8011c4e <_printf_i+0xb2>
 8011c1e:	2978      	cmp	r1, #120	; 0x78
 8011c20:	d1d4      	bne.n	8011bcc <_printf_i+0x30>
 8011c22:	2378      	movs	r3, #120	; 0x78
 8011c24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c28:	4864      	ldr	r0, [pc, #400]	; (8011dbc <_printf_i+0x220>)
 8011c2a:	e055      	b.n	8011cd8 <_printf_i+0x13c>
 8011c2c:	6813      	ldr	r3, [r2, #0]
 8011c2e:	1d19      	adds	r1, r3, #4
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	6011      	str	r1, [r2, #0]
 8011c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c3c:	2301      	movs	r3, #1
 8011c3e:	e08c      	b.n	8011d5a <_printf_i+0x1be>
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	6011      	str	r1, [r2, #0]
 8011c44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c48:	bf18      	it	ne
 8011c4a:	b21b      	sxthne	r3, r3
 8011c4c:	e7cf      	b.n	8011bee <_printf_i+0x52>
 8011c4e:	6813      	ldr	r3, [r2, #0]
 8011c50:	6825      	ldr	r5, [r4, #0]
 8011c52:	1d18      	adds	r0, r3, #4
 8011c54:	6010      	str	r0, [r2, #0]
 8011c56:	0628      	lsls	r0, r5, #24
 8011c58:	d501      	bpl.n	8011c5e <_printf_i+0xc2>
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	e002      	b.n	8011c64 <_printf_i+0xc8>
 8011c5e:	0668      	lsls	r0, r5, #25
 8011c60:	d5fb      	bpl.n	8011c5a <_printf_i+0xbe>
 8011c62:	881b      	ldrh	r3, [r3, #0]
 8011c64:	4854      	ldr	r0, [pc, #336]	; (8011db8 <_printf_i+0x21c>)
 8011c66:	296f      	cmp	r1, #111	; 0x6f
 8011c68:	bf14      	ite	ne
 8011c6a:	220a      	movne	r2, #10
 8011c6c:	2208      	moveq	r2, #8
 8011c6e:	2100      	movs	r1, #0
 8011c70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011c74:	6865      	ldr	r5, [r4, #4]
 8011c76:	60a5      	str	r5, [r4, #8]
 8011c78:	2d00      	cmp	r5, #0
 8011c7a:	f2c0 8095 	blt.w	8011da8 <_printf_i+0x20c>
 8011c7e:	6821      	ldr	r1, [r4, #0]
 8011c80:	f021 0104 	bic.w	r1, r1, #4
 8011c84:	6021      	str	r1, [r4, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d13d      	bne.n	8011d06 <_printf_i+0x16a>
 8011c8a:	2d00      	cmp	r5, #0
 8011c8c:	f040 808e 	bne.w	8011dac <_printf_i+0x210>
 8011c90:	4665      	mov	r5, ip
 8011c92:	2a08      	cmp	r2, #8
 8011c94:	d10b      	bne.n	8011cae <_printf_i+0x112>
 8011c96:	6823      	ldr	r3, [r4, #0]
 8011c98:	07db      	lsls	r3, r3, #31
 8011c9a:	d508      	bpl.n	8011cae <_printf_i+0x112>
 8011c9c:	6923      	ldr	r3, [r4, #16]
 8011c9e:	6862      	ldr	r2, [r4, #4]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	bfde      	ittt	le
 8011ca4:	2330      	movle	r3, #48	; 0x30
 8011ca6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011caa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011cae:	ebac 0305 	sub.w	r3, ip, r5
 8011cb2:	6123      	str	r3, [r4, #16]
 8011cb4:	f8cd 8000 	str.w	r8, [sp]
 8011cb8:	463b      	mov	r3, r7
 8011cba:	aa03      	add	r2, sp, #12
 8011cbc:	4621      	mov	r1, r4
 8011cbe:	4630      	mov	r0, r6
 8011cc0:	f7ff fef6 	bl	8011ab0 <_printf_common>
 8011cc4:	3001      	adds	r0, #1
 8011cc6:	d14d      	bne.n	8011d64 <_printf_i+0x1c8>
 8011cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ccc:	b005      	add	sp, #20
 8011cce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cd2:	4839      	ldr	r0, [pc, #228]	; (8011db8 <_printf_i+0x21c>)
 8011cd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011cd8:	6813      	ldr	r3, [r2, #0]
 8011cda:	6821      	ldr	r1, [r4, #0]
 8011cdc:	1d1d      	adds	r5, r3, #4
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	6015      	str	r5, [r2, #0]
 8011ce2:	060a      	lsls	r2, r1, #24
 8011ce4:	d50b      	bpl.n	8011cfe <_printf_i+0x162>
 8011ce6:	07ca      	lsls	r2, r1, #31
 8011ce8:	bf44      	itt	mi
 8011cea:	f041 0120 	orrmi.w	r1, r1, #32
 8011cee:	6021      	strmi	r1, [r4, #0]
 8011cf0:	b91b      	cbnz	r3, 8011cfa <_printf_i+0x15e>
 8011cf2:	6822      	ldr	r2, [r4, #0]
 8011cf4:	f022 0220 	bic.w	r2, r2, #32
 8011cf8:	6022      	str	r2, [r4, #0]
 8011cfa:	2210      	movs	r2, #16
 8011cfc:	e7b7      	b.n	8011c6e <_printf_i+0xd2>
 8011cfe:	064d      	lsls	r5, r1, #25
 8011d00:	bf48      	it	mi
 8011d02:	b29b      	uxthmi	r3, r3
 8011d04:	e7ef      	b.n	8011ce6 <_printf_i+0x14a>
 8011d06:	4665      	mov	r5, ip
 8011d08:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d0c:	fb02 3311 	mls	r3, r2, r1, r3
 8011d10:	5cc3      	ldrb	r3, [r0, r3]
 8011d12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011d16:	460b      	mov	r3, r1
 8011d18:	2900      	cmp	r1, #0
 8011d1a:	d1f5      	bne.n	8011d08 <_printf_i+0x16c>
 8011d1c:	e7b9      	b.n	8011c92 <_printf_i+0xf6>
 8011d1e:	6813      	ldr	r3, [r2, #0]
 8011d20:	6825      	ldr	r5, [r4, #0]
 8011d22:	6961      	ldr	r1, [r4, #20]
 8011d24:	1d18      	adds	r0, r3, #4
 8011d26:	6010      	str	r0, [r2, #0]
 8011d28:	0628      	lsls	r0, r5, #24
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	d501      	bpl.n	8011d32 <_printf_i+0x196>
 8011d2e:	6019      	str	r1, [r3, #0]
 8011d30:	e002      	b.n	8011d38 <_printf_i+0x19c>
 8011d32:	066a      	lsls	r2, r5, #25
 8011d34:	d5fb      	bpl.n	8011d2e <_printf_i+0x192>
 8011d36:	8019      	strh	r1, [r3, #0]
 8011d38:	2300      	movs	r3, #0
 8011d3a:	6123      	str	r3, [r4, #16]
 8011d3c:	4665      	mov	r5, ip
 8011d3e:	e7b9      	b.n	8011cb4 <_printf_i+0x118>
 8011d40:	6813      	ldr	r3, [r2, #0]
 8011d42:	1d19      	adds	r1, r3, #4
 8011d44:	6011      	str	r1, [r2, #0]
 8011d46:	681d      	ldr	r5, [r3, #0]
 8011d48:	6862      	ldr	r2, [r4, #4]
 8011d4a:	2100      	movs	r1, #0
 8011d4c:	4628      	mov	r0, r5
 8011d4e:	f7ee fa6f 	bl	8000230 <memchr>
 8011d52:	b108      	cbz	r0, 8011d58 <_printf_i+0x1bc>
 8011d54:	1b40      	subs	r0, r0, r5
 8011d56:	6060      	str	r0, [r4, #4]
 8011d58:	6863      	ldr	r3, [r4, #4]
 8011d5a:	6123      	str	r3, [r4, #16]
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d62:	e7a7      	b.n	8011cb4 <_printf_i+0x118>
 8011d64:	6923      	ldr	r3, [r4, #16]
 8011d66:	462a      	mov	r2, r5
 8011d68:	4639      	mov	r1, r7
 8011d6a:	4630      	mov	r0, r6
 8011d6c:	47c0      	blx	r8
 8011d6e:	3001      	adds	r0, #1
 8011d70:	d0aa      	beq.n	8011cc8 <_printf_i+0x12c>
 8011d72:	6823      	ldr	r3, [r4, #0]
 8011d74:	079b      	lsls	r3, r3, #30
 8011d76:	d413      	bmi.n	8011da0 <_printf_i+0x204>
 8011d78:	68e0      	ldr	r0, [r4, #12]
 8011d7a:	9b03      	ldr	r3, [sp, #12]
 8011d7c:	4298      	cmp	r0, r3
 8011d7e:	bfb8      	it	lt
 8011d80:	4618      	movlt	r0, r3
 8011d82:	e7a3      	b.n	8011ccc <_printf_i+0x130>
 8011d84:	2301      	movs	r3, #1
 8011d86:	464a      	mov	r2, r9
 8011d88:	4639      	mov	r1, r7
 8011d8a:	4630      	mov	r0, r6
 8011d8c:	47c0      	blx	r8
 8011d8e:	3001      	adds	r0, #1
 8011d90:	d09a      	beq.n	8011cc8 <_printf_i+0x12c>
 8011d92:	3501      	adds	r5, #1
 8011d94:	68e3      	ldr	r3, [r4, #12]
 8011d96:	9a03      	ldr	r2, [sp, #12]
 8011d98:	1a9b      	subs	r3, r3, r2
 8011d9a:	42ab      	cmp	r3, r5
 8011d9c:	dcf2      	bgt.n	8011d84 <_printf_i+0x1e8>
 8011d9e:	e7eb      	b.n	8011d78 <_printf_i+0x1dc>
 8011da0:	2500      	movs	r5, #0
 8011da2:	f104 0919 	add.w	r9, r4, #25
 8011da6:	e7f5      	b.n	8011d94 <_printf_i+0x1f8>
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d1ac      	bne.n	8011d06 <_printf_i+0x16a>
 8011dac:	7803      	ldrb	r3, [r0, #0]
 8011dae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011db6:	e76c      	b.n	8011c92 <_printf_i+0xf6>
 8011db8:	08016788 	.word	0x08016788
 8011dbc:	08016799 	.word	0x08016799

08011dc0 <iprintf>:
 8011dc0:	b40f      	push	{r0, r1, r2, r3}
 8011dc2:	4b0a      	ldr	r3, [pc, #40]	; (8011dec <iprintf+0x2c>)
 8011dc4:	b513      	push	{r0, r1, r4, lr}
 8011dc6:	681c      	ldr	r4, [r3, #0]
 8011dc8:	b124      	cbz	r4, 8011dd4 <iprintf+0x14>
 8011dca:	69a3      	ldr	r3, [r4, #24]
 8011dcc:	b913      	cbnz	r3, 8011dd4 <iprintf+0x14>
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f001 f8aa 	bl	8012f28 <__sinit>
 8011dd4:	ab05      	add	r3, sp, #20
 8011dd6:	9a04      	ldr	r2, [sp, #16]
 8011dd8:	68a1      	ldr	r1, [r4, #8]
 8011dda:	9301      	str	r3, [sp, #4]
 8011ddc:	4620      	mov	r0, r4
 8011dde:	f001 febf 	bl	8013b60 <_vfiprintf_r>
 8011de2:	b002      	add	sp, #8
 8011de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011de8:	b004      	add	sp, #16
 8011dea:	4770      	bx	lr
 8011dec:	20001c38 	.word	0x20001c38

08011df0 <_puts_r>:
 8011df0:	b570      	push	{r4, r5, r6, lr}
 8011df2:	460e      	mov	r6, r1
 8011df4:	4605      	mov	r5, r0
 8011df6:	b118      	cbz	r0, 8011e00 <_puts_r+0x10>
 8011df8:	6983      	ldr	r3, [r0, #24]
 8011dfa:	b90b      	cbnz	r3, 8011e00 <_puts_r+0x10>
 8011dfc:	f001 f894 	bl	8012f28 <__sinit>
 8011e00:	69ab      	ldr	r3, [r5, #24]
 8011e02:	68ac      	ldr	r4, [r5, #8]
 8011e04:	b913      	cbnz	r3, 8011e0c <_puts_r+0x1c>
 8011e06:	4628      	mov	r0, r5
 8011e08:	f001 f88e 	bl	8012f28 <__sinit>
 8011e0c:	4b23      	ldr	r3, [pc, #140]	; (8011e9c <_puts_r+0xac>)
 8011e0e:	429c      	cmp	r4, r3
 8011e10:	d117      	bne.n	8011e42 <_puts_r+0x52>
 8011e12:	686c      	ldr	r4, [r5, #4]
 8011e14:	89a3      	ldrh	r3, [r4, #12]
 8011e16:	071b      	lsls	r3, r3, #28
 8011e18:	d51d      	bpl.n	8011e56 <_puts_r+0x66>
 8011e1a:	6923      	ldr	r3, [r4, #16]
 8011e1c:	b1db      	cbz	r3, 8011e56 <_puts_r+0x66>
 8011e1e:	3e01      	subs	r6, #1
 8011e20:	68a3      	ldr	r3, [r4, #8]
 8011e22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e26:	3b01      	subs	r3, #1
 8011e28:	60a3      	str	r3, [r4, #8]
 8011e2a:	b9e9      	cbnz	r1, 8011e68 <_puts_r+0x78>
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	da2e      	bge.n	8011e8e <_puts_r+0x9e>
 8011e30:	4622      	mov	r2, r4
 8011e32:	210a      	movs	r1, #10
 8011e34:	4628      	mov	r0, r5
 8011e36:	f000 f883 	bl	8011f40 <__swbuf_r>
 8011e3a:	3001      	adds	r0, #1
 8011e3c:	d011      	beq.n	8011e62 <_puts_r+0x72>
 8011e3e:	200a      	movs	r0, #10
 8011e40:	e011      	b.n	8011e66 <_puts_r+0x76>
 8011e42:	4b17      	ldr	r3, [pc, #92]	; (8011ea0 <_puts_r+0xb0>)
 8011e44:	429c      	cmp	r4, r3
 8011e46:	d101      	bne.n	8011e4c <_puts_r+0x5c>
 8011e48:	68ac      	ldr	r4, [r5, #8]
 8011e4a:	e7e3      	b.n	8011e14 <_puts_r+0x24>
 8011e4c:	4b15      	ldr	r3, [pc, #84]	; (8011ea4 <_puts_r+0xb4>)
 8011e4e:	429c      	cmp	r4, r3
 8011e50:	bf08      	it	eq
 8011e52:	68ec      	ldreq	r4, [r5, #12]
 8011e54:	e7de      	b.n	8011e14 <_puts_r+0x24>
 8011e56:	4621      	mov	r1, r4
 8011e58:	4628      	mov	r0, r5
 8011e5a:	f000 f8c3 	bl	8011fe4 <__swsetup_r>
 8011e5e:	2800      	cmp	r0, #0
 8011e60:	d0dd      	beq.n	8011e1e <_puts_r+0x2e>
 8011e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e66:	bd70      	pop	{r4, r5, r6, pc}
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	da04      	bge.n	8011e76 <_puts_r+0x86>
 8011e6c:	69a2      	ldr	r2, [r4, #24]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	dc06      	bgt.n	8011e80 <_puts_r+0x90>
 8011e72:	290a      	cmp	r1, #10
 8011e74:	d004      	beq.n	8011e80 <_puts_r+0x90>
 8011e76:	6823      	ldr	r3, [r4, #0]
 8011e78:	1c5a      	adds	r2, r3, #1
 8011e7a:	6022      	str	r2, [r4, #0]
 8011e7c:	7019      	strb	r1, [r3, #0]
 8011e7e:	e7cf      	b.n	8011e20 <_puts_r+0x30>
 8011e80:	4622      	mov	r2, r4
 8011e82:	4628      	mov	r0, r5
 8011e84:	f000 f85c 	bl	8011f40 <__swbuf_r>
 8011e88:	3001      	adds	r0, #1
 8011e8a:	d1c9      	bne.n	8011e20 <_puts_r+0x30>
 8011e8c:	e7e9      	b.n	8011e62 <_puts_r+0x72>
 8011e8e:	6823      	ldr	r3, [r4, #0]
 8011e90:	200a      	movs	r0, #10
 8011e92:	1c5a      	adds	r2, r3, #1
 8011e94:	6022      	str	r2, [r4, #0]
 8011e96:	7018      	strb	r0, [r3, #0]
 8011e98:	e7e5      	b.n	8011e66 <_puts_r+0x76>
 8011e9a:	bf00      	nop
 8011e9c:	080167d8 	.word	0x080167d8
 8011ea0:	080167f8 	.word	0x080167f8
 8011ea4:	080167b8 	.word	0x080167b8

08011ea8 <puts>:
 8011ea8:	4b02      	ldr	r3, [pc, #8]	; (8011eb4 <puts+0xc>)
 8011eaa:	4601      	mov	r1, r0
 8011eac:	6818      	ldr	r0, [r3, #0]
 8011eae:	f7ff bf9f 	b.w	8011df0 <_puts_r>
 8011eb2:	bf00      	nop
 8011eb4:	20001c38 	.word	0x20001c38

08011eb8 <sniprintf>:
 8011eb8:	b40c      	push	{r2, r3}
 8011eba:	b530      	push	{r4, r5, lr}
 8011ebc:	4b17      	ldr	r3, [pc, #92]	; (8011f1c <sniprintf+0x64>)
 8011ebe:	1e0c      	subs	r4, r1, #0
 8011ec0:	b09d      	sub	sp, #116	; 0x74
 8011ec2:	681d      	ldr	r5, [r3, #0]
 8011ec4:	da08      	bge.n	8011ed8 <sniprintf+0x20>
 8011ec6:	238b      	movs	r3, #139	; 0x8b
 8011ec8:	602b      	str	r3, [r5, #0]
 8011eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ece:	b01d      	add	sp, #116	; 0x74
 8011ed0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ed4:	b002      	add	sp, #8
 8011ed6:	4770      	bx	lr
 8011ed8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011edc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011ee0:	bf14      	ite	ne
 8011ee2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011ee6:	4623      	moveq	r3, r4
 8011ee8:	9304      	str	r3, [sp, #16]
 8011eea:	9307      	str	r3, [sp, #28]
 8011eec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ef0:	9002      	str	r0, [sp, #8]
 8011ef2:	9006      	str	r0, [sp, #24]
 8011ef4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011ef8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011efa:	ab21      	add	r3, sp, #132	; 0x84
 8011efc:	a902      	add	r1, sp, #8
 8011efe:	4628      	mov	r0, r5
 8011f00:	9301      	str	r3, [sp, #4]
 8011f02:	f001 fd0b 	bl	801391c <_svfiprintf_r>
 8011f06:	1c43      	adds	r3, r0, #1
 8011f08:	bfbc      	itt	lt
 8011f0a:	238b      	movlt	r3, #139	; 0x8b
 8011f0c:	602b      	strlt	r3, [r5, #0]
 8011f0e:	2c00      	cmp	r4, #0
 8011f10:	d0dd      	beq.n	8011ece <sniprintf+0x16>
 8011f12:	9b02      	ldr	r3, [sp, #8]
 8011f14:	2200      	movs	r2, #0
 8011f16:	701a      	strb	r2, [r3, #0]
 8011f18:	e7d9      	b.n	8011ece <sniprintf+0x16>
 8011f1a:	bf00      	nop
 8011f1c:	20001c38 	.word	0x20001c38

08011f20 <strcat>:
 8011f20:	b510      	push	{r4, lr}
 8011f22:	4603      	mov	r3, r0
 8011f24:	781a      	ldrb	r2, [r3, #0]
 8011f26:	1c5c      	adds	r4, r3, #1
 8011f28:	b93a      	cbnz	r2, 8011f3a <strcat+0x1a>
 8011f2a:	3b01      	subs	r3, #1
 8011f2c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f30:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f34:	2a00      	cmp	r2, #0
 8011f36:	d1f9      	bne.n	8011f2c <strcat+0xc>
 8011f38:	bd10      	pop	{r4, pc}
 8011f3a:	4623      	mov	r3, r4
 8011f3c:	e7f2      	b.n	8011f24 <strcat+0x4>
	...

08011f40 <__swbuf_r>:
 8011f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f42:	460e      	mov	r6, r1
 8011f44:	4614      	mov	r4, r2
 8011f46:	4605      	mov	r5, r0
 8011f48:	b118      	cbz	r0, 8011f52 <__swbuf_r+0x12>
 8011f4a:	6983      	ldr	r3, [r0, #24]
 8011f4c:	b90b      	cbnz	r3, 8011f52 <__swbuf_r+0x12>
 8011f4e:	f000 ffeb 	bl	8012f28 <__sinit>
 8011f52:	4b21      	ldr	r3, [pc, #132]	; (8011fd8 <__swbuf_r+0x98>)
 8011f54:	429c      	cmp	r4, r3
 8011f56:	d12a      	bne.n	8011fae <__swbuf_r+0x6e>
 8011f58:	686c      	ldr	r4, [r5, #4]
 8011f5a:	69a3      	ldr	r3, [r4, #24]
 8011f5c:	60a3      	str	r3, [r4, #8]
 8011f5e:	89a3      	ldrh	r3, [r4, #12]
 8011f60:	071a      	lsls	r2, r3, #28
 8011f62:	d52e      	bpl.n	8011fc2 <__swbuf_r+0x82>
 8011f64:	6923      	ldr	r3, [r4, #16]
 8011f66:	b363      	cbz	r3, 8011fc2 <__swbuf_r+0x82>
 8011f68:	6923      	ldr	r3, [r4, #16]
 8011f6a:	6820      	ldr	r0, [r4, #0]
 8011f6c:	1ac0      	subs	r0, r0, r3
 8011f6e:	6963      	ldr	r3, [r4, #20]
 8011f70:	b2f6      	uxtb	r6, r6
 8011f72:	4283      	cmp	r3, r0
 8011f74:	4637      	mov	r7, r6
 8011f76:	dc04      	bgt.n	8011f82 <__swbuf_r+0x42>
 8011f78:	4621      	mov	r1, r4
 8011f7a:	4628      	mov	r0, r5
 8011f7c:	f000 ff6a 	bl	8012e54 <_fflush_r>
 8011f80:	bb28      	cbnz	r0, 8011fce <__swbuf_r+0x8e>
 8011f82:	68a3      	ldr	r3, [r4, #8]
 8011f84:	3b01      	subs	r3, #1
 8011f86:	60a3      	str	r3, [r4, #8]
 8011f88:	6823      	ldr	r3, [r4, #0]
 8011f8a:	1c5a      	adds	r2, r3, #1
 8011f8c:	6022      	str	r2, [r4, #0]
 8011f8e:	701e      	strb	r6, [r3, #0]
 8011f90:	6963      	ldr	r3, [r4, #20]
 8011f92:	3001      	adds	r0, #1
 8011f94:	4283      	cmp	r3, r0
 8011f96:	d004      	beq.n	8011fa2 <__swbuf_r+0x62>
 8011f98:	89a3      	ldrh	r3, [r4, #12]
 8011f9a:	07db      	lsls	r3, r3, #31
 8011f9c:	d519      	bpl.n	8011fd2 <__swbuf_r+0x92>
 8011f9e:	2e0a      	cmp	r6, #10
 8011fa0:	d117      	bne.n	8011fd2 <__swbuf_r+0x92>
 8011fa2:	4621      	mov	r1, r4
 8011fa4:	4628      	mov	r0, r5
 8011fa6:	f000 ff55 	bl	8012e54 <_fflush_r>
 8011faa:	b190      	cbz	r0, 8011fd2 <__swbuf_r+0x92>
 8011fac:	e00f      	b.n	8011fce <__swbuf_r+0x8e>
 8011fae:	4b0b      	ldr	r3, [pc, #44]	; (8011fdc <__swbuf_r+0x9c>)
 8011fb0:	429c      	cmp	r4, r3
 8011fb2:	d101      	bne.n	8011fb8 <__swbuf_r+0x78>
 8011fb4:	68ac      	ldr	r4, [r5, #8]
 8011fb6:	e7d0      	b.n	8011f5a <__swbuf_r+0x1a>
 8011fb8:	4b09      	ldr	r3, [pc, #36]	; (8011fe0 <__swbuf_r+0xa0>)
 8011fba:	429c      	cmp	r4, r3
 8011fbc:	bf08      	it	eq
 8011fbe:	68ec      	ldreq	r4, [r5, #12]
 8011fc0:	e7cb      	b.n	8011f5a <__swbuf_r+0x1a>
 8011fc2:	4621      	mov	r1, r4
 8011fc4:	4628      	mov	r0, r5
 8011fc6:	f000 f80d 	bl	8011fe4 <__swsetup_r>
 8011fca:	2800      	cmp	r0, #0
 8011fcc:	d0cc      	beq.n	8011f68 <__swbuf_r+0x28>
 8011fce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011fd2:	4638      	mov	r0, r7
 8011fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	080167d8 	.word	0x080167d8
 8011fdc:	080167f8 	.word	0x080167f8
 8011fe0:	080167b8 	.word	0x080167b8

08011fe4 <__swsetup_r>:
 8011fe4:	4b32      	ldr	r3, [pc, #200]	; (80120b0 <__swsetup_r+0xcc>)
 8011fe6:	b570      	push	{r4, r5, r6, lr}
 8011fe8:	681d      	ldr	r5, [r3, #0]
 8011fea:	4606      	mov	r6, r0
 8011fec:	460c      	mov	r4, r1
 8011fee:	b125      	cbz	r5, 8011ffa <__swsetup_r+0x16>
 8011ff0:	69ab      	ldr	r3, [r5, #24]
 8011ff2:	b913      	cbnz	r3, 8011ffa <__swsetup_r+0x16>
 8011ff4:	4628      	mov	r0, r5
 8011ff6:	f000 ff97 	bl	8012f28 <__sinit>
 8011ffa:	4b2e      	ldr	r3, [pc, #184]	; (80120b4 <__swsetup_r+0xd0>)
 8011ffc:	429c      	cmp	r4, r3
 8011ffe:	d10f      	bne.n	8012020 <__swsetup_r+0x3c>
 8012000:	686c      	ldr	r4, [r5, #4]
 8012002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012006:	b29a      	uxth	r2, r3
 8012008:	0715      	lsls	r5, r2, #28
 801200a:	d42c      	bmi.n	8012066 <__swsetup_r+0x82>
 801200c:	06d0      	lsls	r0, r2, #27
 801200e:	d411      	bmi.n	8012034 <__swsetup_r+0x50>
 8012010:	2209      	movs	r2, #9
 8012012:	6032      	str	r2, [r6, #0]
 8012014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012018:	81a3      	strh	r3, [r4, #12]
 801201a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801201e:	e03e      	b.n	801209e <__swsetup_r+0xba>
 8012020:	4b25      	ldr	r3, [pc, #148]	; (80120b8 <__swsetup_r+0xd4>)
 8012022:	429c      	cmp	r4, r3
 8012024:	d101      	bne.n	801202a <__swsetup_r+0x46>
 8012026:	68ac      	ldr	r4, [r5, #8]
 8012028:	e7eb      	b.n	8012002 <__swsetup_r+0x1e>
 801202a:	4b24      	ldr	r3, [pc, #144]	; (80120bc <__swsetup_r+0xd8>)
 801202c:	429c      	cmp	r4, r3
 801202e:	bf08      	it	eq
 8012030:	68ec      	ldreq	r4, [r5, #12]
 8012032:	e7e6      	b.n	8012002 <__swsetup_r+0x1e>
 8012034:	0751      	lsls	r1, r2, #29
 8012036:	d512      	bpl.n	801205e <__swsetup_r+0x7a>
 8012038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801203a:	b141      	cbz	r1, 801204e <__swsetup_r+0x6a>
 801203c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012040:	4299      	cmp	r1, r3
 8012042:	d002      	beq.n	801204a <__swsetup_r+0x66>
 8012044:	4630      	mov	r0, r6
 8012046:	f001 fb67 	bl	8013718 <_free_r>
 801204a:	2300      	movs	r3, #0
 801204c:	6363      	str	r3, [r4, #52]	; 0x34
 801204e:	89a3      	ldrh	r3, [r4, #12]
 8012050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012054:	81a3      	strh	r3, [r4, #12]
 8012056:	2300      	movs	r3, #0
 8012058:	6063      	str	r3, [r4, #4]
 801205a:	6923      	ldr	r3, [r4, #16]
 801205c:	6023      	str	r3, [r4, #0]
 801205e:	89a3      	ldrh	r3, [r4, #12]
 8012060:	f043 0308 	orr.w	r3, r3, #8
 8012064:	81a3      	strh	r3, [r4, #12]
 8012066:	6923      	ldr	r3, [r4, #16]
 8012068:	b94b      	cbnz	r3, 801207e <__swsetup_r+0x9a>
 801206a:	89a3      	ldrh	r3, [r4, #12]
 801206c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012074:	d003      	beq.n	801207e <__swsetup_r+0x9a>
 8012076:	4621      	mov	r1, r4
 8012078:	4630      	mov	r0, r6
 801207a:	f001 f811 	bl	80130a0 <__smakebuf_r>
 801207e:	89a2      	ldrh	r2, [r4, #12]
 8012080:	f012 0301 	ands.w	r3, r2, #1
 8012084:	d00c      	beq.n	80120a0 <__swsetup_r+0xbc>
 8012086:	2300      	movs	r3, #0
 8012088:	60a3      	str	r3, [r4, #8]
 801208a:	6963      	ldr	r3, [r4, #20]
 801208c:	425b      	negs	r3, r3
 801208e:	61a3      	str	r3, [r4, #24]
 8012090:	6923      	ldr	r3, [r4, #16]
 8012092:	b953      	cbnz	r3, 80120aa <__swsetup_r+0xc6>
 8012094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012098:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801209c:	d1ba      	bne.n	8012014 <__swsetup_r+0x30>
 801209e:	bd70      	pop	{r4, r5, r6, pc}
 80120a0:	0792      	lsls	r2, r2, #30
 80120a2:	bf58      	it	pl
 80120a4:	6963      	ldrpl	r3, [r4, #20]
 80120a6:	60a3      	str	r3, [r4, #8]
 80120a8:	e7f2      	b.n	8012090 <__swsetup_r+0xac>
 80120aa:	2000      	movs	r0, #0
 80120ac:	e7f7      	b.n	801209e <__swsetup_r+0xba>
 80120ae:	bf00      	nop
 80120b0:	20001c38 	.word	0x20001c38
 80120b4:	080167d8 	.word	0x080167d8
 80120b8:	080167f8 	.word	0x080167f8
 80120bc:	080167b8 	.word	0x080167b8

080120c0 <quorem>:
 80120c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c4:	6903      	ldr	r3, [r0, #16]
 80120c6:	690c      	ldr	r4, [r1, #16]
 80120c8:	42a3      	cmp	r3, r4
 80120ca:	4680      	mov	r8, r0
 80120cc:	f2c0 8082 	blt.w	80121d4 <quorem+0x114>
 80120d0:	3c01      	subs	r4, #1
 80120d2:	f101 0714 	add.w	r7, r1, #20
 80120d6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80120da:	f100 0614 	add.w	r6, r0, #20
 80120de:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80120e2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80120e6:	eb06 030c 	add.w	r3, r6, ip
 80120ea:	3501      	adds	r5, #1
 80120ec:	eb07 090c 	add.w	r9, r7, ip
 80120f0:	9301      	str	r3, [sp, #4]
 80120f2:	fbb0 f5f5 	udiv	r5, r0, r5
 80120f6:	b395      	cbz	r5, 801215e <quorem+0x9e>
 80120f8:	f04f 0a00 	mov.w	sl, #0
 80120fc:	4638      	mov	r0, r7
 80120fe:	46b6      	mov	lr, r6
 8012100:	46d3      	mov	fp, sl
 8012102:	f850 2b04 	ldr.w	r2, [r0], #4
 8012106:	b293      	uxth	r3, r2
 8012108:	fb05 a303 	mla	r3, r5, r3, sl
 801210c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012110:	b29b      	uxth	r3, r3
 8012112:	ebab 0303 	sub.w	r3, fp, r3
 8012116:	0c12      	lsrs	r2, r2, #16
 8012118:	f8de b000 	ldr.w	fp, [lr]
 801211c:	fb05 a202 	mla	r2, r5, r2, sl
 8012120:	fa13 f38b 	uxtah	r3, r3, fp
 8012124:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012128:	fa1f fb82 	uxth.w	fp, r2
 801212c:	f8de 2000 	ldr.w	r2, [lr]
 8012130:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012134:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012138:	b29b      	uxth	r3, r3
 801213a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801213e:	4581      	cmp	r9, r0
 8012140:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012144:	f84e 3b04 	str.w	r3, [lr], #4
 8012148:	d2db      	bcs.n	8012102 <quorem+0x42>
 801214a:	f856 300c 	ldr.w	r3, [r6, ip]
 801214e:	b933      	cbnz	r3, 801215e <quorem+0x9e>
 8012150:	9b01      	ldr	r3, [sp, #4]
 8012152:	3b04      	subs	r3, #4
 8012154:	429e      	cmp	r6, r3
 8012156:	461a      	mov	r2, r3
 8012158:	d330      	bcc.n	80121bc <quorem+0xfc>
 801215a:	f8c8 4010 	str.w	r4, [r8, #16]
 801215e:	4640      	mov	r0, r8
 8012160:	f001 fa06 	bl	8013570 <__mcmp>
 8012164:	2800      	cmp	r0, #0
 8012166:	db25      	blt.n	80121b4 <quorem+0xf4>
 8012168:	3501      	adds	r5, #1
 801216a:	4630      	mov	r0, r6
 801216c:	f04f 0c00 	mov.w	ip, #0
 8012170:	f857 2b04 	ldr.w	r2, [r7], #4
 8012174:	f8d0 e000 	ldr.w	lr, [r0]
 8012178:	b293      	uxth	r3, r2
 801217a:	ebac 0303 	sub.w	r3, ip, r3
 801217e:	0c12      	lsrs	r2, r2, #16
 8012180:	fa13 f38e 	uxtah	r3, r3, lr
 8012184:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012188:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801218c:	b29b      	uxth	r3, r3
 801218e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012192:	45b9      	cmp	r9, r7
 8012194:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012198:	f840 3b04 	str.w	r3, [r0], #4
 801219c:	d2e8      	bcs.n	8012170 <quorem+0xb0>
 801219e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80121a2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80121a6:	b92a      	cbnz	r2, 80121b4 <quorem+0xf4>
 80121a8:	3b04      	subs	r3, #4
 80121aa:	429e      	cmp	r6, r3
 80121ac:	461a      	mov	r2, r3
 80121ae:	d30b      	bcc.n	80121c8 <quorem+0x108>
 80121b0:	f8c8 4010 	str.w	r4, [r8, #16]
 80121b4:	4628      	mov	r0, r5
 80121b6:	b003      	add	sp, #12
 80121b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121bc:	6812      	ldr	r2, [r2, #0]
 80121be:	3b04      	subs	r3, #4
 80121c0:	2a00      	cmp	r2, #0
 80121c2:	d1ca      	bne.n	801215a <quorem+0x9a>
 80121c4:	3c01      	subs	r4, #1
 80121c6:	e7c5      	b.n	8012154 <quorem+0x94>
 80121c8:	6812      	ldr	r2, [r2, #0]
 80121ca:	3b04      	subs	r3, #4
 80121cc:	2a00      	cmp	r2, #0
 80121ce:	d1ef      	bne.n	80121b0 <quorem+0xf0>
 80121d0:	3c01      	subs	r4, #1
 80121d2:	e7ea      	b.n	80121aa <quorem+0xea>
 80121d4:	2000      	movs	r0, #0
 80121d6:	e7ee      	b.n	80121b6 <quorem+0xf6>

080121d8 <_dtoa_r>:
 80121d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121dc:	ec57 6b10 	vmov	r6, r7, d0
 80121e0:	b097      	sub	sp, #92	; 0x5c
 80121e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80121e4:	9106      	str	r1, [sp, #24]
 80121e6:	4604      	mov	r4, r0
 80121e8:	920b      	str	r2, [sp, #44]	; 0x2c
 80121ea:	9312      	str	r3, [sp, #72]	; 0x48
 80121ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80121f0:	e9cd 6700 	strd	r6, r7, [sp]
 80121f4:	b93d      	cbnz	r5, 8012206 <_dtoa_r+0x2e>
 80121f6:	2010      	movs	r0, #16
 80121f8:	f000 ff92 	bl	8013120 <malloc>
 80121fc:	6260      	str	r0, [r4, #36]	; 0x24
 80121fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012202:	6005      	str	r5, [r0, #0]
 8012204:	60c5      	str	r5, [r0, #12]
 8012206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012208:	6819      	ldr	r1, [r3, #0]
 801220a:	b151      	cbz	r1, 8012222 <_dtoa_r+0x4a>
 801220c:	685a      	ldr	r2, [r3, #4]
 801220e:	604a      	str	r2, [r1, #4]
 8012210:	2301      	movs	r3, #1
 8012212:	4093      	lsls	r3, r2
 8012214:	608b      	str	r3, [r1, #8]
 8012216:	4620      	mov	r0, r4
 8012218:	f000 ffc9 	bl	80131ae <_Bfree>
 801221c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801221e:	2200      	movs	r2, #0
 8012220:	601a      	str	r2, [r3, #0]
 8012222:	1e3b      	subs	r3, r7, #0
 8012224:	bfbb      	ittet	lt
 8012226:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801222a:	9301      	strlt	r3, [sp, #4]
 801222c:	2300      	movge	r3, #0
 801222e:	2201      	movlt	r2, #1
 8012230:	bfac      	ite	ge
 8012232:	f8c8 3000 	strge.w	r3, [r8]
 8012236:	f8c8 2000 	strlt.w	r2, [r8]
 801223a:	4baf      	ldr	r3, [pc, #700]	; (80124f8 <_dtoa_r+0x320>)
 801223c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012240:	ea33 0308 	bics.w	r3, r3, r8
 8012244:	d114      	bne.n	8012270 <_dtoa_r+0x98>
 8012246:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012248:	f242 730f 	movw	r3, #9999	; 0x270f
 801224c:	6013      	str	r3, [r2, #0]
 801224e:	9b00      	ldr	r3, [sp, #0]
 8012250:	b923      	cbnz	r3, 801225c <_dtoa_r+0x84>
 8012252:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012256:	2800      	cmp	r0, #0
 8012258:	f000 8542 	beq.w	8012ce0 <_dtoa_r+0xb08>
 801225c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801225e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801250c <_dtoa_r+0x334>
 8012262:	2b00      	cmp	r3, #0
 8012264:	f000 8544 	beq.w	8012cf0 <_dtoa_r+0xb18>
 8012268:	f10b 0303 	add.w	r3, fp, #3
 801226c:	f000 bd3e 	b.w	8012cec <_dtoa_r+0xb14>
 8012270:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012274:	2200      	movs	r2, #0
 8012276:	2300      	movs	r3, #0
 8012278:	4630      	mov	r0, r6
 801227a:	4639      	mov	r1, r7
 801227c:	f7ee fc4c 	bl	8000b18 <__aeabi_dcmpeq>
 8012280:	4681      	mov	r9, r0
 8012282:	b168      	cbz	r0, 80122a0 <_dtoa_r+0xc8>
 8012284:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012286:	2301      	movs	r3, #1
 8012288:	6013      	str	r3, [r2, #0]
 801228a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801228c:	2b00      	cmp	r3, #0
 801228e:	f000 8524 	beq.w	8012cda <_dtoa_r+0xb02>
 8012292:	4b9a      	ldr	r3, [pc, #616]	; (80124fc <_dtoa_r+0x324>)
 8012294:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012296:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801229a:	6013      	str	r3, [r2, #0]
 801229c:	f000 bd28 	b.w	8012cf0 <_dtoa_r+0xb18>
 80122a0:	aa14      	add	r2, sp, #80	; 0x50
 80122a2:	a915      	add	r1, sp, #84	; 0x54
 80122a4:	ec47 6b10 	vmov	d0, r6, r7
 80122a8:	4620      	mov	r0, r4
 80122aa:	f001 f9d8 	bl	801365e <__d2b>
 80122ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80122b2:	9004      	str	r0, [sp, #16]
 80122b4:	2d00      	cmp	r5, #0
 80122b6:	d07c      	beq.n	80123b2 <_dtoa_r+0x1da>
 80122b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80122bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80122c0:	46b2      	mov	sl, r6
 80122c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80122c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80122ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80122ce:	2200      	movs	r2, #0
 80122d0:	4b8b      	ldr	r3, [pc, #556]	; (8012500 <_dtoa_r+0x328>)
 80122d2:	4650      	mov	r0, sl
 80122d4:	4659      	mov	r1, fp
 80122d6:	f7ed ffff 	bl	80002d8 <__aeabi_dsub>
 80122da:	a381      	add	r3, pc, #516	; (adr r3, 80124e0 <_dtoa_r+0x308>)
 80122dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122e0:	f7ee f9b2 	bl	8000648 <__aeabi_dmul>
 80122e4:	a380      	add	r3, pc, #512	; (adr r3, 80124e8 <_dtoa_r+0x310>)
 80122e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ea:	f7ed fff7 	bl	80002dc <__adddf3>
 80122ee:	4606      	mov	r6, r0
 80122f0:	4628      	mov	r0, r5
 80122f2:	460f      	mov	r7, r1
 80122f4:	f7ee f93e 	bl	8000574 <__aeabi_i2d>
 80122f8:	a37d      	add	r3, pc, #500	; (adr r3, 80124f0 <_dtoa_r+0x318>)
 80122fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fe:	f7ee f9a3 	bl	8000648 <__aeabi_dmul>
 8012302:	4602      	mov	r2, r0
 8012304:	460b      	mov	r3, r1
 8012306:	4630      	mov	r0, r6
 8012308:	4639      	mov	r1, r7
 801230a:	f7ed ffe7 	bl	80002dc <__adddf3>
 801230e:	4606      	mov	r6, r0
 8012310:	460f      	mov	r7, r1
 8012312:	f7ee fc49 	bl	8000ba8 <__aeabi_d2iz>
 8012316:	2200      	movs	r2, #0
 8012318:	4682      	mov	sl, r0
 801231a:	2300      	movs	r3, #0
 801231c:	4630      	mov	r0, r6
 801231e:	4639      	mov	r1, r7
 8012320:	f7ee fc04 	bl	8000b2c <__aeabi_dcmplt>
 8012324:	b148      	cbz	r0, 801233a <_dtoa_r+0x162>
 8012326:	4650      	mov	r0, sl
 8012328:	f7ee f924 	bl	8000574 <__aeabi_i2d>
 801232c:	4632      	mov	r2, r6
 801232e:	463b      	mov	r3, r7
 8012330:	f7ee fbf2 	bl	8000b18 <__aeabi_dcmpeq>
 8012334:	b908      	cbnz	r0, 801233a <_dtoa_r+0x162>
 8012336:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801233a:	f1ba 0f16 	cmp.w	sl, #22
 801233e:	d859      	bhi.n	80123f4 <_dtoa_r+0x21c>
 8012340:	4970      	ldr	r1, [pc, #448]	; (8012504 <_dtoa_r+0x32c>)
 8012342:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012346:	e9dd 2300 	ldrd	r2, r3, [sp]
 801234a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801234e:	f7ee fc0b 	bl	8000b68 <__aeabi_dcmpgt>
 8012352:	2800      	cmp	r0, #0
 8012354:	d050      	beq.n	80123f8 <_dtoa_r+0x220>
 8012356:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801235a:	2300      	movs	r3, #0
 801235c:	930f      	str	r3, [sp, #60]	; 0x3c
 801235e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012360:	1b5d      	subs	r5, r3, r5
 8012362:	f1b5 0801 	subs.w	r8, r5, #1
 8012366:	bf49      	itett	mi
 8012368:	f1c5 0301 	rsbmi	r3, r5, #1
 801236c:	2300      	movpl	r3, #0
 801236e:	9305      	strmi	r3, [sp, #20]
 8012370:	f04f 0800 	movmi.w	r8, #0
 8012374:	bf58      	it	pl
 8012376:	9305      	strpl	r3, [sp, #20]
 8012378:	f1ba 0f00 	cmp.w	sl, #0
 801237c:	db3e      	blt.n	80123fc <_dtoa_r+0x224>
 801237e:	2300      	movs	r3, #0
 8012380:	44d0      	add	r8, sl
 8012382:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012386:	9307      	str	r3, [sp, #28]
 8012388:	9b06      	ldr	r3, [sp, #24]
 801238a:	2b09      	cmp	r3, #9
 801238c:	f200 8090 	bhi.w	80124b0 <_dtoa_r+0x2d8>
 8012390:	2b05      	cmp	r3, #5
 8012392:	bfc4      	itt	gt
 8012394:	3b04      	subgt	r3, #4
 8012396:	9306      	strgt	r3, [sp, #24]
 8012398:	9b06      	ldr	r3, [sp, #24]
 801239a:	f1a3 0302 	sub.w	r3, r3, #2
 801239e:	bfcc      	ite	gt
 80123a0:	2500      	movgt	r5, #0
 80123a2:	2501      	movle	r5, #1
 80123a4:	2b03      	cmp	r3, #3
 80123a6:	f200 808f 	bhi.w	80124c8 <_dtoa_r+0x2f0>
 80123aa:	e8df f003 	tbb	[pc, r3]
 80123ae:	7f7d      	.short	0x7f7d
 80123b0:	7131      	.short	0x7131
 80123b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80123b6:	441d      	add	r5, r3
 80123b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80123bc:	2820      	cmp	r0, #32
 80123be:	dd13      	ble.n	80123e8 <_dtoa_r+0x210>
 80123c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80123c4:	9b00      	ldr	r3, [sp, #0]
 80123c6:	fa08 f800 	lsl.w	r8, r8, r0
 80123ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80123ce:	fa23 f000 	lsr.w	r0, r3, r0
 80123d2:	ea48 0000 	orr.w	r0, r8, r0
 80123d6:	f7ee f8bd 	bl	8000554 <__aeabi_ui2d>
 80123da:	2301      	movs	r3, #1
 80123dc:	4682      	mov	sl, r0
 80123de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80123e2:	3d01      	subs	r5, #1
 80123e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80123e6:	e772      	b.n	80122ce <_dtoa_r+0xf6>
 80123e8:	9b00      	ldr	r3, [sp, #0]
 80123ea:	f1c0 0020 	rsb	r0, r0, #32
 80123ee:	fa03 f000 	lsl.w	r0, r3, r0
 80123f2:	e7f0      	b.n	80123d6 <_dtoa_r+0x1fe>
 80123f4:	2301      	movs	r3, #1
 80123f6:	e7b1      	b.n	801235c <_dtoa_r+0x184>
 80123f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80123fa:	e7b0      	b.n	801235e <_dtoa_r+0x186>
 80123fc:	9b05      	ldr	r3, [sp, #20]
 80123fe:	eba3 030a 	sub.w	r3, r3, sl
 8012402:	9305      	str	r3, [sp, #20]
 8012404:	f1ca 0300 	rsb	r3, sl, #0
 8012408:	9307      	str	r3, [sp, #28]
 801240a:	2300      	movs	r3, #0
 801240c:	930e      	str	r3, [sp, #56]	; 0x38
 801240e:	e7bb      	b.n	8012388 <_dtoa_r+0x1b0>
 8012410:	2301      	movs	r3, #1
 8012412:	930a      	str	r3, [sp, #40]	; 0x28
 8012414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012416:	2b00      	cmp	r3, #0
 8012418:	dd59      	ble.n	80124ce <_dtoa_r+0x2f6>
 801241a:	9302      	str	r3, [sp, #8]
 801241c:	4699      	mov	r9, r3
 801241e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012420:	2200      	movs	r2, #0
 8012422:	6072      	str	r2, [r6, #4]
 8012424:	2204      	movs	r2, #4
 8012426:	f102 0014 	add.w	r0, r2, #20
 801242a:	4298      	cmp	r0, r3
 801242c:	6871      	ldr	r1, [r6, #4]
 801242e:	d953      	bls.n	80124d8 <_dtoa_r+0x300>
 8012430:	4620      	mov	r0, r4
 8012432:	f000 fe88 	bl	8013146 <_Balloc>
 8012436:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012438:	6030      	str	r0, [r6, #0]
 801243a:	f1b9 0f0e 	cmp.w	r9, #14
 801243e:	f8d3 b000 	ldr.w	fp, [r3]
 8012442:	f200 80e6 	bhi.w	8012612 <_dtoa_r+0x43a>
 8012446:	2d00      	cmp	r5, #0
 8012448:	f000 80e3 	beq.w	8012612 <_dtoa_r+0x43a>
 801244c:	ed9d 7b00 	vldr	d7, [sp]
 8012450:	f1ba 0f00 	cmp.w	sl, #0
 8012454:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012458:	dd74      	ble.n	8012544 <_dtoa_r+0x36c>
 801245a:	4a2a      	ldr	r2, [pc, #168]	; (8012504 <_dtoa_r+0x32c>)
 801245c:	f00a 030f 	and.w	r3, sl, #15
 8012460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012464:	ed93 7b00 	vldr	d7, [r3]
 8012468:	ea4f 162a 	mov.w	r6, sl, asr #4
 801246c:	06f0      	lsls	r0, r6, #27
 801246e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012472:	d565      	bpl.n	8012540 <_dtoa_r+0x368>
 8012474:	4b24      	ldr	r3, [pc, #144]	; (8012508 <_dtoa_r+0x330>)
 8012476:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801247a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801247e:	f7ee fa0d 	bl	800089c <__aeabi_ddiv>
 8012482:	e9cd 0100 	strd	r0, r1, [sp]
 8012486:	f006 060f 	and.w	r6, r6, #15
 801248a:	2503      	movs	r5, #3
 801248c:	4f1e      	ldr	r7, [pc, #120]	; (8012508 <_dtoa_r+0x330>)
 801248e:	e04c      	b.n	801252a <_dtoa_r+0x352>
 8012490:	2301      	movs	r3, #1
 8012492:	930a      	str	r3, [sp, #40]	; 0x28
 8012494:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012496:	4453      	add	r3, sl
 8012498:	f103 0901 	add.w	r9, r3, #1
 801249c:	9302      	str	r3, [sp, #8]
 801249e:	464b      	mov	r3, r9
 80124a0:	2b01      	cmp	r3, #1
 80124a2:	bfb8      	it	lt
 80124a4:	2301      	movlt	r3, #1
 80124a6:	e7ba      	b.n	801241e <_dtoa_r+0x246>
 80124a8:	2300      	movs	r3, #0
 80124aa:	e7b2      	b.n	8012412 <_dtoa_r+0x23a>
 80124ac:	2300      	movs	r3, #0
 80124ae:	e7f0      	b.n	8012492 <_dtoa_r+0x2ba>
 80124b0:	2501      	movs	r5, #1
 80124b2:	2300      	movs	r3, #0
 80124b4:	9306      	str	r3, [sp, #24]
 80124b6:	950a      	str	r5, [sp, #40]	; 0x28
 80124b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124bc:	9302      	str	r3, [sp, #8]
 80124be:	4699      	mov	r9, r3
 80124c0:	2200      	movs	r2, #0
 80124c2:	2312      	movs	r3, #18
 80124c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80124c6:	e7aa      	b.n	801241e <_dtoa_r+0x246>
 80124c8:	2301      	movs	r3, #1
 80124ca:	930a      	str	r3, [sp, #40]	; 0x28
 80124cc:	e7f4      	b.n	80124b8 <_dtoa_r+0x2e0>
 80124ce:	2301      	movs	r3, #1
 80124d0:	9302      	str	r3, [sp, #8]
 80124d2:	4699      	mov	r9, r3
 80124d4:	461a      	mov	r2, r3
 80124d6:	e7f5      	b.n	80124c4 <_dtoa_r+0x2ec>
 80124d8:	3101      	adds	r1, #1
 80124da:	6071      	str	r1, [r6, #4]
 80124dc:	0052      	lsls	r2, r2, #1
 80124de:	e7a2      	b.n	8012426 <_dtoa_r+0x24e>
 80124e0:	636f4361 	.word	0x636f4361
 80124e4:	3fd287a7 	.word	0x3fd287a7
 80124e8:	8b60c8b3 	.word	0x8b60c8b3
 80124ec:	3fc68a28 	.word	0x3fc68a28
 80124f0:	509f79fb 	.word	0x509f79fb
 80124f4:	3fd34413 	.word	0x3fd34413
 80124f8:	7ff00000 	.word	0x7ff00000
 80124fc:	08016a35 	.word	0x08016a35
 8012500:	3ff80000 	.word	0x3ff80000
 8012504:	08016840 	.word	0x08016840
 8012508:	08016818 	.word	0x08016818
 801250c:	080167b3 	.word	0x080167b3
 8012510:	07f1      	lsls	r1, r6, #31
 8012512:	d508      	bpl.n	8012526 <_dtoa_r+0x34e>
 8012514:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012518:	e9d7 2300 	ldrd	r2, r3, [r7]
 801251c:	f7ee f894 	bl	8000648 <__aeabi_dmul>
 8012520:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012524:	3501      	adds	r5, #1
 8012526:	1076      	asrs	r6, r6, #1
 8012528:	3708      	adds	r7, #8
 801252a:	2e00      	cmp	r6, #0
 801252c:	d1f0      	bne.n	8012510 <_dtoa_r+0x338>
 801252e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012532:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012536:	f7ee f9b1 	bl	800089c <__aeabi_ddiv>
 801253a:	e9cd 0100 	strd	r0, r1, [sp]
 801253e:	e01a      	b.n	8012576 <_dtoa_r+0x39e>
 8012540:	2502      	movs	r5, #2
 8012542:	e7a3      	b.n	801248c <_dtoa_r+0x2b4>
 8012544:	f000 80a0 	beq.w	8012688 <_dtoa_r+0x4b0>
 8012548:	f1ca 0600 	rsb	r6, sl, #0
 801254c:	4b9f      	ldr	r3, [pc, #636]	; (80127cc <_dtoa_r+0x5f4>)
 801254e:	4fa0      	ldr	r7, [pc, #640]	; (80127d0 <_dtoa_r+0x5f8>)
 8012550:	f006 020f 	and.w	r2, r6, #15
 8012554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012558:	e9d3 2300 	ldrd	r2, r3, [r3]
 801255c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012560:	f7ee f872 	bl	8000648 <__aeabi_dmul>
 8012564:	e9cd 0100 	strd	r0, r1, [sp]
 8012568:	1136      	asrs	r6, r6, #4
 801256a:	2300      	movs	r3, #0
 801256c:	2502      	movs	r5, #2
 801256e:	2e00      	cmp	r6, #0
 8012570:	d17f      	bne.n	8012672 <_dtoa_r+0x49a>
 8012572:	2b00      	cmp	r3, #0
 8012574:	d1e1      	bne.n	801253a <_dtoa_r+0x362>
 8012576:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012578:	2b00      	cmp	r3, #0
 801257a:	f000 8087 	beq.w	801268c <_dtoa_r+0x4b4>
 801257e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012582:	2200      	movs	r2, #0
 8012584:	4b93      	ldr	r3, [pc, #588]	; (80127d4 <_dtoa_r+0x5fc>)
 8012586:	4630      	mov	r0, r6
 8012588:	4639      	mov	r1, r7
 801258a:	f7ee facf 	bl	8000b2c <__aeabi_dcmplt>
 801258e:	2800      	cmp	r0, #0
 8012590:	d07c      	beq.n	801268c <_dtoa_r+0x4b4>
 8012592:	f1b9 0f00 	cmp.w	r9, #0
 8012596:	d079      	beq.n	801268c <_dtoa_r+0x4b4>
 8012598:	9b02      	ldr	r3, [sp, #8]
 801259a:	2b00      	cmp	r3, #0
 801259c:	dd35      	ble.n	801260a <_dtoa_r+0x432>
 801259e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80125a2:	9308      	str	r3, [sp, #32]
 80125a4:	4639      	mov	r1, r7
 80125a6:	2200      	movs	r2, #0
 80125a8:	4b8b      	ldr	r3, [pc, #556]	; (80127d8 <_dtoa_r+0x600>)
 80125aa:	4630      	mov	r0, r6
 80125ac:	f7ee f84c 	bl	8000648 <__aeabi_dmul>
 80125b0:	e9cd 0100 	strd	r0, r1, [sp]
 80125b4:	9f02      	ldr	r7, [sp, #8]
 80125b6:	3501      	adds	r5, #1
 80125b8:	4628      	mov	r0, r5
 80125ba:	f7ed ffdb 	bl	8000574 <__aeabi_i2d>
 80125be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125c2:	f7ee f841 	bl	8000648 <__aeabi_dmul>
 80125c6:	2200      	movs	r2, #0
 80125c8:	4b84      	ldr	r3, [pc, #528]	; (80127dc <_dtoa_r+0x604>)
 80125ca:	f7ed fe87 	bl	80002dc <__adddf3>
 80125ce:	4605      	mov	r5, r0
 80125d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80125d4:	2f00      	cmp	r7, #0
 80125d6:	d15d      	bne.n	8012694 <_dtoa_r+0x4bc>
 80125d8:	2200      	movs	r2, #0
 80125da:	4b81      	ldr	r3, [pc, #516]	; (80127e0 <_dtoa_r+0x608>)
 80125dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80125e0:	f7ed fe7a 	bl	80002d8 <__aeabi_dsub>
 80125e4:	462a      	mov	r2, r5
 80125e6:	4633      	mov	r3, r6
 80125e8:	e9cd 0100 	strd	r0, r1, [sp]
 80125ec:	f7ee fabc 	bl	8000b68 <__aeabi_dcmpgt>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	f040 8288 	bne.w	8012b06 <_dtoa_r+0x92e>
 80125f6:	462a      	mov	r2, r5
 80125f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80125fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012600:	f7ee fa94 	bl	8000b2c <__aeabi_dcmplt>
 8012604:	2800      	cmp	r0, #0
 8012606:	f040 827c 	bne.w	8012b02 <_dtoa_r+0x92a>
 801260a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801260e:	e9cd 2300 	strd	r2, r3, [sp]
 8012612:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012614:	2b00      	cmp	r3, #0
 8012616:	f2c0 8150 	blt.w	80128ba <_dtoa_r+0x6e2>
 801261a:	f1ba 0f0e 	cmp.w	sl, #14
 801261e:	f300 814c 	bgt.w	80128ba <_dtoa_r+0x6e2>
 8012622:	4b6a      	ldr	r3, [pc, #424]	; (80127cc <_dtoa_r+0x5f4>)
 8012624:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012628:	ed93 7b00 	vldr	d7, [r3]
 801262c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801262e:	2b00      	cmp	r3, #0
 8012630:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012634:	f280 80d8 	bge.w	80127e8 <_dtoa_r+0x610>
 8012638:	f1b9 0f00 	cmp.w	r9, #0
 801263c:	f300 80d4 	bgt.w	80127e8 <_dtoa_r+0x610>
 8012640:	f040 825e 	bne.w	8012b00 <_dtoa_r+0x928>
 8012644:	2200      	movs	r2, #0
 8012646:	4b66      	ldr	r3, [pc, #408]	; (80127e0 <_dtoa_r+0x608>)
 8012648:	ec51 0b17 	vmov	r0, r1, d7
 801264c:	f7ed fffc 	bl	8000648 <__aeabi_dmul>
 8012650:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012654:	f7ee fa7e 	bl	8000b54 <__aeabi_dcmpge>
 8012658:	464f      	mov	r7, r9
 801265a:	464e      	mov	r6, r9
 801265c:	2800      	cmp	r0, #0
 801265e:	f040 8234 	bne.w	8012aca <_dtoa_r+0x8f2>
 8012662:	2331      	movs	r3, #49	; 0x31
 8012664:	f10b 0501 	add.w	r5, fp, #1
 8012668:	f88b 3000 	strb.w	r3, [fp]
 801266c:	f10a 0a01 	add.w	sl, sl, #1
 8012670:	e22f      	b.n	8012ad2 <_dtoa_r+0x8fa>
 8012672:	07f2      	lsls	r2, r6, #31
 8012674:	d505      	bpl.n	8012682 <_dtoa_r+0x4aa>
 8012676:	e9d7 2300 	ldrd	r2, r3, [r7]
 801267a:	f7ed ffe5 	bl	8000648 <__aeabi_dmul>
 801267e:	3501      	adds	r5, #1
 8012680:	2301      	movs	r3, #1
 8012682:	1076      	asrs	r6, r6, #1
 8012684:	3708      	adds	r7, #8
 8012686:	e772      	b.n	801256e <_dtoa_r+0x396>
 8012688:	2502      	movs	r5, #2
 801268a:	e774      	b.n	8012576 <_dtoa_r+0x39e>
 801268c:	f8cd a020 	str.w	sl, [sp, #32]
 8012690:	464f      	mov	r7, r9
 8012692:	e791      	b.n	80125b8 <_dtoa_r+0x3e0>
 8012694:	4b4d      	ldr	r3, [pc, #308]	; (80127cc <_dtoa_r+0x5f4>)
 8012696:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801269a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801269e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d047      	beq.n	8012734 <_dtoa_r+0x55c>
 80126a4:	4602      	mov	r2, r0
 80126a6:	460b      	mov	r3, r1
 80126a8:	2000      	movs	r0, #0
 80126aa:	494e      	ldr	r1, [pc, #312]	; (80127e4 <_dtoa_r+0x60c>)
 80126ac:	f7ee f8f6 	bl	800089c <__aeabi_ddiv>
 80126b0:	462a      	mov	r2, r5
 80126b2:	4633      	mov	r3, r6
 80126b4:	f7ed fe10 	bl	80002d8 <__aeabi_dsub>
 80126b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80126bc:	465d      	mov	r5, fp
 80126be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126c2:	f7ee fa71 	bl	8000ba8 <__aeabi_d2iz>
 80126c6:	4606      	mov	r6, r0
 80126c8:	f7ed ff54 	bl	8000574 <__aeabi_i2d>
 80126cc:	4602      	mov	r2, r0
 80126ce:	460b      	mov	r3, r1
 80126d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126d4:	f7ed fe00 	bl	80002d8 <__aeabi_dsub>
 80126d8:	3630      	adds	r6, #48	; 0x30
 80126da:	f805 6b01 	strb.w	r6, [r5], #1
 80126de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80126e2:	e9cd 0100 	strd	r0, r1, [sp]
 80126e6:	f7ee fa21 	bl	8000b2c <__aeabi_dcmplt>
 80126ea:	2800      	cmp	r0, #0
 80126ec:	d163      	bne.n	80127b6 <_dtoa_r+0x5de>
 80126ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80126f2:	2000      	movs	r0, #0
 80126f4:	4937      	ldr	r1, [pc, #220]	; (80127d4 <_dtoa_r+0x5fc>)
 80126f6:	f7ed fdef 	bl	80002d8 <__aeabi_dsub>
 80126fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80126fe:	f7ee fa15 	bl	8000b2c <__aeabi_dcmplt>
 8012702:	2800      	cmp	r0, #0
 8012704:	f040 80b7 	bne.w	8012876 <_dtoa_r+0x69e>
 8012708:	eba5 030b 	sub.w	r3, r5, fp
 801270c:	429f      	cmp	r7, r3
 801270e:	f77f af7c 	ble.w	801260a <_dtoa_r+0x432>
 8012712:	2200      	movs	r2, #0
 8012714:	4b30      	ldr	r3, [pc, #192]	; (80127d8 <_dtoa_r+0x600>)
 8012716:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801271a:	f7ed ff95 	bl	8000648 <__aeabi_dmul>
 801271e:	2200      	movs	r2, #0
 8012720:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012724:	4b2c      	ldr	r3, [pc, #176]	; (80127d8 <_dtoa_r+0x600>)
 8012726:	e9dd 0100 	ldrd	r0, r1, [sp]
 801272a:	f7ed ff8d 	bl	8000648 <__aeabi_dmul>
 801272e:	e9cd 0100 	strd	r0, r1, [sp]
 8012732:	e7c4      	b.n	80126be <_dtoa_r+0x4e6>
 8012734:	462a      	mov	r2, r5
 8012736:	4633      	mov	r3, r6
 8012738:	f7ed ff86 	bl	8000648 <__aeabi_dmul>
 801273c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012740:	eb0b 0507 	add.w	r5, fp, r7
 8012744:	465e      	mov	r6, fp
 8012746:	e9dd 0100 	ldrd	r0, r1, [sp]
 801274a:	f7ee fa2d 	bl	8000ba8 <__aeabi_d2iz>
 801274e:	4607      	mov	r7, r0
 8012750:	f7ed ff10 	bl	8000574 <__aeabi_i2d>
 8012754:	3730      	adds	r7, #48	; 0x30
 8012756:	4602      	mov	r2, r0
 8012758:	460b      	mov	r3, r1
 801275a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801275e:	f7ed fdbb 	bl	80002d8 <__aeabi_dsub>
 8012762:	f806 7b01 	strb.w	r7, [r6], #1
 8012766:	42ae      	cmp	r6, r5
 8012768:	e9cd 0100 	strd	r0, r1, [sp]
 801276c:	f04f 0200 	mov.w	r2, #0
 8012770:	d126      	bne.n	80127c0 <_dtoa_r+0x5e8>
 8012772:	4b1c      	ldr	r3, [pc, #112]	; (80127e4 <_dtoa_r+0x60c>)
 8012774:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012778:	f7ed fdb0 	bl	80002dc <__adddf3>
 801277c:	4602      	mov	r2, r0
 801277e:	460b      	mov	r3, r1
 8012780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012784:	f7ee f9f0 	bl	8000b68 <__aeabi_dcmpgt>
 8012788:	2800      	cmp	r0, #0
 801278a:	d174      	bne.n	8012876 <_dtoa_r+0x69e>
 801278c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012790:	2000      	movs	r0, #0
 8012792:	4914      	ldr	r1, [pc, #80]	; (80127e4 <_dtoa_r+0x60c>)
 8012794:	f7ed fda0 	bl	80002d8 <__aeabi_dsub>
 8012798:	4602      	mov	r2, r0
 801279a:	460b      	mov	r3, r1
 801279c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127a0:	f7ee f9c4 	bl	8000b2c <__aeabi_dcmplt>
 80127a4:	2800      	cmp	r0, #0
 80127a6:	f43f af30 	beq.w	801260a <_dtoa_r+0x432>
 80127aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80127ae:	2b30      	cmp	r3, #48	; 0x30
 80127b0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80127b4:	d002      	beq.n	80127bc <_dtoa_r+0x5e4>
 80127b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80127ba:	e04a      	b.n	8012852 <_dtoa_r+0x67a>
 80127bc:	4615      	mov	r5, r2
 80127be:	e7f4      	b.n	80127aa <_dtoa_r+0x5d2>
 80127c0:	4b05      	ldr	r3, [pc, #20]	; (80127d8 <_dtoa_r+0x600>)
 80127c2:	f7ed ff41 	bl	8000648 <__aeabi_dmul>
 80127c6:	e9cd 0100 	strd	r0, r1, [sp]
 80127ca:	e7bc      	b.n	8012746 <_dtoa_r+0x56e>
 80127cc:	08016840 	.word	0x08016840
 80127d0:	08016818 	.word	0x08016818
 80127d4:	3ff00000 	.word	0x3ff00000
 80127d8:	40240000 	.word	0x40240000
 80127dc:	401c0000 	.word	0x401c0000
 80127e0:	40140000 	.word	0x40140000
 80127e4:	3fe00000 	.word	0x3fe00000
 80127e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80127ec:	465d      	mov	r5, fp
 80127ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80127f2:	4630      	mov	r0, r6
 80127f4:	4639      	mov	r1, r7
 80127f6:	f7ee f851 	bl	800089c <__aeabi_ddiv>
 80127fa:	f7ee f9d5 	bl	8000ba8 <__aeabi_d2iz>
 80127fe:	4680      	mov	r8, r0
 8012800:	f7ed feb8 	bl	8000574 <__aeabi_i2d>
 8012804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012808:	f7ed ff1e 	bl	8000648 <__aeabi_dmul>
 801280c:	4602      	mov	r2, r0
 801280e:	460b      	mov	r3, r1
 8012810:	4630      	mov	r0, r6
 8012812:	4639      	mov	r1, r7
 8012814:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012818:	f7ed fd5e 	bl	80002d8 <__aeabi_dsub>
 801281c:	f805 6b01 	strb.w	r6, [r5], #1
 8012820:	eba5 060b 	sub.w	r6, r5, fp
 8012824:	45b1      	cmp	r9, r6
 8012826:	4602      	mov	r2, r0
 8012828:	460b      	mov	r3, r1
 801282a:	d139      	bne.n	80128a0 <_dtoa_r+0x6c8>
 801282c:	f7ed fd56 	bl	80002dc <__adddf3>
 8012830:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012834:	4606      	mov	r6, r0
 8012836:	460f      	mov	r7, r1
 8012838:	f7ee f996 	bl	8000b68 <__aeabi_dcmpgt>
 801283c:	b9c8      	cbnz	r0, 8012872 <_dtoa_r+0x69a>
 801283e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012842:	4630      	mov	r0, r6
 8012844:	4639      	mov	r1, r7
 8012846:	f7ee f967 	bl	8000b18 <__aeabi_dcmpeq>
 801284a:	b110      	cbz	r0, 8012852 <_dtoa_r+0x67a>
 801284c:	f018 0f01 	tst.w	r8, #1
 8012850:	d10f      	bne.n	8012872 <_dtoa_r+0x69a>
 8012852:	9904      	ldr	r1, [sp, #16]
 8012854:	4620      	mov	r0, r4
 8012856:	f000 fcaa 	bl	80131ae <_Bfree>
 801285a:	2300      	movs	r3, #0
 801285c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801285e:	702b      	strb	r3, [r5, #0]
 8012860:	f10a 0301 	add.w	r3, sl, #1
 8012864:	6013      	str	r3, [r2, #0]
 8012866:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012868:	2b00      	cmp	r3, #0
 801286a:	f000 8241 	beq.w	8012cf0 <_dtoa_r+0xb18>
 801286e:	601d      	str	r5, [r3, #0]
 8012870:	e23e      	b.n	8012cf0 <_dtoa_r+0xb18>
 8012872:	f8cd a020 	str.w	sl, [sp, #32]
 8012876:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801287a:	2a39      	cmp	r2, #57	; 0x39
 801287c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8012880:	d108      	bne.n	8012894 <_dtoa_r+0x6bc>
 8012882:	459b      	cmp	fp, r3
 8012884:	d10a      	bne.n	801289c <_dtoa_r+0x6c4>
 8012886:	9b08      	ldr	r3, [sp, #32]
 8012888:	3301      	adds	r3, #1
 801288a:	9308      	str	r3, [sp, #32]
 801288c:	2330      	movs	r3, #48	; 0x30
 801288e:	f88b 3000 	strb.w	r3, [fp]
 8012892:	465b      	mov	r3, fp
 8012894:	781a      	ldrb	r2, [r3, #0]
 8012896:	3201      	adds	r2, #1
 8012898:	701a      	strb	r2, [r3, #0]
 801289a:	e78c      	b.n	80127b6 <_dtoa_r+0x5de>
 801289c:	461d      	mov	r5, r3
 801289e:	e7ea      	b.n	8012876 <_dtoa_r+0x69e>
 80128a0:	2200      	movs	r2, #0
 80128a2:	4b9b      	ldr	r3, [pc, #620]	; (8012b10 <_dtoa_r+0x938>)
 80128a4:	f7ed fed0 	bl	8000648 <__aeabi_dmul>
 80128a8:	2200      	movs	r2, #0
 80128aa:	2300      	movs	r3, #0
 80128ac:	4606      	mov	r6, r0
 80128ae:	460f      	mov	r7, r1
 80128b0:	f7ee f932 	bl	8000b18 <__aeabi_dcmpeq>
 80128b4:	2800      	cmp	r0, #0
 80128b6:	d09a      	beq.n	80127ee <_dtoa_r+0x616>
 80128b8:	e7cb      	b.n	8012852 <_dtoa_r+0x67a>
 80128ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128bc:	2a00      	cmp	r2, #0
 80128be:	f000 808b 	beq.w	80129d8 <_dtoa_r+0x800>
 80128c2:	9a06      	ldr	r2, [sp, #24]
 80128c4:	2a01      	cmp	r2, #1
 80128c6:	dc6e      	bgt.n	80129a6 <_dtoa_r+0x7ce>
 80128c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80128ca:	2a00      	cmp	r2, #0
 80128cc:	d067      	beq.n	801299e <_dtoa_r+0x7c6>
 80128ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80128d2:	9f07      	ldr	r7, [sp, #28]
 80128d4:	9d05      	ldr	r5, [sp, #20]
 80128d6:	9a05      	ldr	r2, [sp, #20]
 80128d8:	2101      	movs	r1, #1
 80128da:	441a      	add	r2, r3
 80128dc:	4620      	mov	r0, r4
 80128de:	9205      	str	r2, [sp, #20]
 80128e0:	4498      	add	r8, r3
 80128e2:	f000 fd04 	bl	80132ee <__i2b>
 80128e6:	4606      	mov	r6, r0
 80128e8:	2d00      	cmp	r5, #0
 80128ea:	dd0c      	ble.n	8012906 <_dtoa_r+0x72e>
 80128ec:	f1b8 0f00 	cmp.w	r8, #0
 80128f0:	dd09      	ble.n	8012906 <_dtoa_r+0x72e>
 80128f2:	4545      	cmp	r5, r8
 80128f4:	9a05      	ldr	r2, [sp, #20]
 80128f6:	462b      	mov	r3, r5
 80128f8:	bfa8      	it	ge
 80128fa:	4643      	movge	r3, r8
 80128fc:	1ad2      	subs	r2, r2, r3
 80128fe:	9205      	str	r2, [sp, #20]
 8012900:	1aed      	subs	r5, r5, r3
 8012902:	eba8 0803 	sub.w	r8, r8, r3
 8012906:	9b07      	ldr	r3, [sp, #28]
 8012908:	b1eb      	cbz	r3, 8012946 <_dtoa_r+0x76e>
 801290a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801290c:	2b00      	cmp	r3, #0
 801290e:	d067      	beq.n	80129e0 <_dtoa_r+0x808>
 8012910:	b18f      	cbz	r7, 8012936 <_dtoa_r+0x75e>
 8012912:	4631      	mov	r1, r6
 8012914:	463a      	mov	r2, r7
 8012916:	4620      	mov	r0, r4
 8012918:	f000 fd88 	bl	801342c <__pow5mult>
 801291c:	9a04      	ldr	r2, [sp, #16]
 801291e:	4601      	mov	r1, r0
 8012920:	4606      	mov	r6, r0
 8012922:	4620      	mov	r0, r4
 8012924:	f000 fcec 	bl	8013300 <__multiply>
 8012928:	9904      	ldr	r1, [sp, #16]
 801292a:	9008      	str	r0, [sp, #32]
 801292c:	4620      	mov	r0, r4
 801292e:	f000 fc3e 	bl	80131ae <_Bfree>
 8012932:	9b08      	ldr	r3, [sp, #32]
 8012934:	9304      	str	r3, [sp, #16]
 8012936:	9b07      	ldr	r3, [sp, #28]
 8012938:	1bda      	subs	r2, r3, r7
 801293a:	d004      	beq.n	8012946 <_dtoa_r+0x76e>
 801293c:	9904      	ldr	r1, [sp, #16]
 801293e:	4620      	mov	r0, r4
 8012940:	f000 fd74 	bl	801342c <__pow5mult>
 8012944:	9004      	str	r0, [sp, #16]
 8012946:	2101      	movs	r1, #1
 8012948:	4620      	mov	r0, r4
 801294a:	f000 fcd0 	bl	80132ee <__i2b>
 801294e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012950:	4607      	mov	r7, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	f000 81d0 	beq.w	8012cf8 <_dtoa_r+0xb20>
 8012958:	461a      	mov	r2, r3
 801295a:	4601      	mov	r1, r0
 801295c:	4620      	mov	r0, r4
 801295e:	f000 fd65 	bl	801342c <__pow5mult>
 8012962:	9b06      	ldr	r3, [sp, #24]
 8012964:	2b01      	cmp	r3, #1
 8012966:	4607      	mov	r7, r0
 8012968:	dc40      	bgt.n	80129ec <_dtoa_r+0x814>
 801296a:	9b00      	ldr	r3, [sp, #0]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d139      	bne.n	80129e4 <_dtoa_r+0x80c>
 8012970:	9b01      	ldr	r3, [sp, #4]
 8012972:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012976:	2b00      	cmp	r3, #0
 8012978:	d136      	bne.n	80129e8 <_dtoa_r+0x810>
 801297a:	9b01      	ldr	r3, [sp, #4]
 801297c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012980:	0d1b      	lsrs	r3, r3, #20
 8012982:	051b      	lsls	r3, r3, #20
 8012984:	b12b      	cbz	r3, 8012992 <_dtoa_r+0x7ba>
 8012986:	9b05      	ldr	r3, [sp, #20]
 8012988:	3301      	adds	r3, #1
 801298a:	9305      	str	r3, [sp, #20]
 801298c:	f108 0801 	add.w	r8, r8, #1
 8012990:	2301      	movs	r3, #1
 8012992:	9307      	str	r3, [sp, #28]
 8012994:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012996:	2b00      	cmp	r3, #0
 8012998:	d12a      	bne.n	80129f0 <_dtoa_r+0x818>
 801299a:	2001      	movs	r0, #1
 801299c:	e030      	b.n	8012a00 <_dtoa_r+0x828>
 801299e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80129a4:	e795      	b.n	80128d2 <_dtoa_r+0x6fa>
 80129a6:	9b07      	ldr	r3, [sp, #28]
 80129a8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80129ac:	42bb      	cmp	r3, r7
 80129ae:	bfbf      	itttt	lt
 80129b0:	9b07      	ldrlt	r3, [sp, #28]
 80129b2:	9707      	strlt	r7, [sp, #28]
 80129b4:	1afa      	sublt	r2, r7, r3
 80129b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80129b8:	bfbb      	ittet	lt
 80129ba:	189b      	addlt	r3, r3, r2
 80129bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80129be:	1bdf      	subge	r7, r3, r7
 80129c0:	2700      	movlt	r7, #0
 80129c2:	f1b9 0f00 	cmp.w	r9, #0
 80129c6:	bfb5      	itete	lt
 80129c8:	9b05      	ldrlt	r3, [sp, #20]
 80129ca:	9d05      	ldrge	r5, [sp, #20]
 80129cc:	eba3 0509 	sublt.w	r5, r3, r9
 80129d0:	464b      	movge	r3, r9
 80129d2:	bfb8      	it	lt
 80129d4:	2300      	movlt	r3, #0
 80129d6:	e77e      	b.n	80128d6 <_dtoa_r+0x6fe>
 80129d8:	9f07      	ldr	r7, [sp, #28]
 80129da:	9d05      	ldr	r5, [sp, #20]
 80129dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80129de:	e783      	b.n	80128e8 <_dtoa_r+0x710>
 80129e0:	9a07      	ldr	r2, [sp, #28]
 80129e2:	e7ab      	b.n	801293c <_dtoa_r+0x764>
 80129e4:	2300      	movs	r3, #0
 80129e6:	e7d4      	b.n	8012992 <_dtoa_r+0x7ba>
 80129e8:	9b00      	ldr	r3, [sp, #0]
 80129ea:	e7d2      	b.n	8012992 <_dtoa_r+0x7ba>
 80129ec:	2300      	movs	r3, #0
 80129ee:	9307      	str	r3, [sp, #28]
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80129f6:	6918      	ldr	r0, [r3, #16]
 80129f8:	f000 fc2b 	bl	8013252 <__hi0bits>
 80129fc:	f1c0 0020 	rsb	r0, r0, #32
 8012a00:	4440      	add	r0, r8
 8012a02:	f010 001f 	ands.w	r0, r0, #31
 8012a06:	d047      	beq.n	8012a98 <_dtoa_r+0x8c0>
 8012a08:	f1c0 0320 	rsb	r3, r0, #32
 8012a0c:	2b04      	cmp	r3, #4
 8012a0e:	dd3b      	ble.n	8012a88 <_dtoa_r+0x8b0>
 8012a10:	9b05      	ldr	r3, [sp, #20]
 8012a12:	f1c0 001c 	rsb	r0, r0, #28
 8012a16:	4403      	add	r3, r0
 8012a18:	9305      	str	r3, [sp, #20]
 8012a1a:	4405      	add	r5, r0
 8012a1c:	4480      	add	r8, r0
 8012a1e:	9b05      	ldr	r3, [sp, #20]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	dd05      	ble.n	8012a30 <_dtoa_r+0x858>
 8012a24:	461a      	mov	r2, r3
 8012a26:	9904      	ldr	r1, [sp, #16]
 8012a28:	4620      	mov	r0, r4
 8012a2a:	f000 fd4d 	bl	80134c8 <__lshift>
 8012a2e:	9004      	str	r0, [sp, #16]
 8012a30:	f1b8 0f00 	cmp.w	r8, #0
 8012a34:	dd05      	ble.n	8012a42 <_dtoa_r+0x86a>
 8012a36:	4639      	mov	r1, r7
 8012a38:	4642      	mov	r2, r8
 8012a3a:	4620      	mov	r0, r4
 8012a3c:	f000 fd44 	bl	80134c8 <__lshift>
 8012a40:	4607      	mov	r7, r0
 8012a42:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a44:	b353      	cbz	r3, 8012a9c <_dtoa_r+0x8c4>
 8012a46:	4639      	mov	r1, r7
 8012a48:	9804      	ldr	r0, [sp, #16]
 8012a4a:	f000 fd91 	bl	8013570 <__mcmp>
 8012a4e:	2800      	cmp	r0, #0
 8012a50:	da24      	bge.n	8012a9c <_dtoa_r+0x8c4>
 8012a52:	2300      	movs	r3, #0
 8012a54:	220a      	movs	r2, #10
 8012a56:	9904      	ldr	r1, [sp, #16]
 8012a58:	4620      	mov	r0, r4
 8012a5a:	f000 fbbf 	bl	80131dc <__multadd>
 8012a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a60:	9004      	str	r0, [sp, #16]
 8012a62:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	f000 814d 	beq.w	8012d06 <_dtoa_r+0xb2e>
 8012a6c:	2300      	movs	r3, #0
 8012a6e:	4631      	mov	r1, r6
 8012a70:	220a      	movs	r2, #10
 8012a72:	4620      	mov	r0, r4
 8012a74:	f000 fbb2 	bl	80131dc <__multadd>
 8012a78:	9b02      	ldr	r3, [sp, #8]
 8012a7a:	2b00      	cmp	r3, #0
 8012a7c:	4606      	mov	r6, r0
 8012a7e:	dc4f      	bgt.n	8012b20 <_dtoa_r+0x948>
 8012a80:	9b06      	ldr	r3, [sp, #24]
 8012a82:	2b02      	cmp	r3, #2
 8012a84:	dd4c      	ble.n	8012b20 <_dtoa_r+0x948>
 8012a86:	e011      	b.n	8012aac <_dtoa_r+0x8d4>
 8012a88:	d0c9      	beq.n	8012a1e <_dtoa_r+0x846>
 8012a8a:	9a05      	ldr	r2, [sp, #20]
 8012a8c:	331c      	adds	r3, #28
 8012a8e:	441a      	add	r2, r3
 8012a90:	9205      	str	r2, [sp, #20]
 8012a92:	441d      	add	r5, r3
 8012a94:	4498      	add	r8, r3
 8012a96:	e7c2      	b.n	8012a1e <_dtoa_r+0x846>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	e7f6      	b.n	8012a8a <_dtoa_r+0x8b2>
 8012a9c:	f1b9 0f00 	cmp.w	r9, #0
 8012aa0:	dc38      	bgt.n	8012b14 <_dtoa_r+0x93c>
 8012aa2:	9b06      	ldr	r3, [sp, #24]
 8012aa4:	2b02      	cmp	r3, #2
 8012aa6:	dd35      	ble.n	8012b14 <_dtoa_r+0x93c>
 8012aa8:	f8cd 9008 	str.w	r9, [sp, #8]
 8012aac:	9b02      	ldr	r3, [sp, #8]
 8012aae:	b963      	cbnz	r3, 8012aca <_dtoa_r+0x8f2>
 8012ab0:	4639      	mov	r1, r7
 8012ab2:	2205      	movs	r2, #5
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	f000 fb91 	bl	80131dc <__multadd>
 8012aba:	4601      	mov	r1, r0
 8012abc:	4607      	mov	r7, r0
 8012abe:	9804      	ldr	r0, [sp, #16]
 8012ac0:	f000 fd56 	bl	8013570 <__mcmp>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	f73f adcc 	bgt.w	8012662 <_dtoa_r+0x48a>
 8012aca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012acc:	465d      	mov	r5, fp
 8012ace:	ea6f 0a03 	mvn.w	sl, r3
 8012ad2:	f04f 0900 	mov.w	r9, #0
 8012ad6:	4639      	mov	r1, r7
 8012ad8:	4620      	mov	r0, r4
 8012ada:	f000 fb68 	bl	80131ae <_Bfree>
 8012ade:	2e00      	cmp	r6, #0
 8012ae0:	f43f aeb7 	beq.w	8012852 <_dtoa_r+0x67a>
 8012ae4:	f1b9 0f00 	cmp.w	r9, #0
 8012ae8:	d005      	beq.n	8012af6 <_dtoa_r+0x91e>
 8012aea:	45b1      	cmp	r9, r6
 8012aec:	d003      	beq.n	8012af6 <_dtoa_r+0x91e>
 8012aee:	4649      	mov	r1, r9
 8012af0:	4620      	mov	r0, r4
 8012af2:	f000 fb5c 	bl	80131ae <_Bfree>
 8012af6:	4631      	mov	r1, r6
 8012af8:	4620      	mov	r0, r4
 8012afa:	f000 fb58 	bl	80131ae <_Bfree>
 8012afe:	e6a8      	b.n	8012852 <_dtoa_r+0x67a>
 8012b00:	2700      	movs	r7, #0
 8012b02:	463e      	mov	r6, r7
 8012b04:	e7e1      	b.n	8012aca <_dtoa_r+0x8f2>
 8012b06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b0a:	463e      	mov	r6, r7
 8012b0c:	e5a9      	b.n	8012662 <_dtoa_r+0x48a>
 8012b0e:	bf00      	nop
 8012b10:	40240000 	.word	0x40240000
 8012b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b16:	f8cd 9008 	str.w	r9, [sp, #8]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	f000 80fa 	beq.w	8012d14 <_dtoa_r+0xb3c>
 8012b20:	2d00      	cmp	r5, #0
 8012b22:	dd05      	ble.n	8012b30 <_dtoa_r+0x958>
 8012b24:	4631      	mov	r1, r6
 8012b26:	462a      	mov	r2, r5
 8012b28:	4620      	mov	r0, r4
 8012b2a:	f000 fccd 	bl	80134c8 <__lshift>
 8012b2e:	4606      	mov	r6, r0
 8012b30:	9b07      	ldr	r3, [sp, #28]
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d04c      	beq.n	8012bd0 <_dtoa_r+0x9f8>
 8012b36:	6871      	ldr	r1, [r6, #4]
 8012b38:	4620      	mov	r0, r4
 8012b3a:	f000 fb04 	bl	8013146 <_Balloc>
 8012b3e:	6932      	ldr	r2, [r6, #16]
 8012b40:	3202      	adds	r2, #2
 8012b42:	4605      	mov	r5, r0
 8012b44:	0092      	lsls	r2, r2, #2
 8012b46:	f106 010c 	add.w	r1, r6, #12
 8012b4a:	300c      	adds	r0, #12
 8012b4c:	f000 faf0 	bl	8013130 <memcpy>
 8012b50:	2201      	movs	r2, #1
 8012b52:	4629      	mov	r1, r5
 8012b54:	4620      	mov	r0, r4
 8012b56:	f000 fcb7 	bl	80134c8 <__lshift>
 8012b5a:	9b00      	ldr	r3, [sp, #0]
 8012b5c:	f8cd b014 	str.w	fp, [sp, #20]
 8012b60:	f003 0301 	and.w	r3, r3, #1
 8012b64:	46b1      	mov	r9, r6
 8012b66:	9307      	str	r3, [sp, #28]
 8012b68:	4606      	mov	r6, r0
 8012b6a:	4639      	mov	r1, r7
 8012b6c:	9804      	ldr	r0, [sp, #16]
 8012b6e:	f7ff faa7 	bl	80120c0 <quorem>
 8012b72:	4649      	mov	r1, r9
 8012b74:	4605      	mov	r5, r0
 8012b76:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012b7a:	9804      	ldr	r0, [sp, #16]
 8012b7c:	f000 fcf8 	bl	8013570 <__mcmp>
 8012b80:	4632      	mov	r2, r6
 8012b82:	9000      	str	r0, [sp, #0]
 8012b84:	4639      	mov	r1, r7
 8012b86:	4620      	mov	r0, r4
 8012b88:	f000 fd0c 	bl	80135a4 <__mdiff>
 8012b8c:	68c3      	ldr	r3, [r0, #12]
 8012b8e:	4602      	mov	r2, r0
 8012b90:	bb03      	cbnz	r3, 8012bd4 <_dtoa_r+0x9fc>
 8012b92:	4601      	mov	r1, r0
 8012b94:	9008      	str	r0, [sp, #32]
 8012b96:	9804      	ldr	r0, [sp, #16]
 8012b98:	f000 fcea 	bl	8013570 <__mcmp>
 8012b9c:	9a08      	ldr	r2, [sp, #32]
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	4611      	mov	r1, r2
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	9308      	str	r3, [sp, #32]
 8012ba6:	f000 fb02 	bl	80131ae <_Bfree>
 8012baa:	9b08      	ldr	r3, [sp, #32]
 8012bac:	b9a3      	cbnz	r3, 8012bd8 <_dtoa_r+0xa00>
 8012bae:	9a06      	ldr	r2, [sp, #24]
 8012bb0:	b992      	cbnz	r2, 8012bd8 <_dtoa_r+0xa00>
 8012bb2:	9a07      	ldr	r2, [sp, #28]
 8012bb4:	b982      	cbnz	r2, 8012bd8 <_dtoa_r+0xa00>
 8012bb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012bba:	d029      	beq.n	8012c10 <_dtoa_r+0xa38>
 8012bbc:	9b00      	ldr	r3, [sp, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	dd01      	ble.n	8012bc6 <_dtoa_r+0x9ee>
 8012bc2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012bc6:	9b05      	ldr	r3, [sp, #20]
 8012bc8:	1c5d      	adds	r5, r3, #1
 8012bca:	f883 8000 	strb.w	r8, [r3]
 8012bce:	e782      	b.n	8012ad6 <_dtoa_r+0x8fe>
 8012bd0:	4630      	mov	r0, r6
 8012bd2:	e7c2      	b.n	8012b5a <_dtoa_r+0x982>
 8012bd4:	2301      	movs	r3, #1
 8012bd6:	e7e3      	b.n	8012ba0 <_dtoa_r+0x9c8>
 8012bd8:	9a00      	ldr	r2, [sp, #0]
 8012bda:	2a00      	cmp	r2, #0
 8012bdc:	db04      	blt.n	8012be8 <_dtoa_r+0xa10>
 8012bde:	d125      	bne.n	8012c2c <_dtoa_r+0xa54>
 8012be0:	9a06      	ldr	r2, [sp, #24]
 8012be2:	bb1a      	cbnz	r2, 8012c2c <_dtoa_r+0xa54>
 8012be4:	9a07      	ldr	r2, [sp, #28]
 8012be6:	bb0a      	cbnz	r2, 8012c2c <_dtoa_r+0xa54>
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	ddec      	ble.n	8012bc6 <_dtoa_r+0x9ee>
 8012bec:	2201      	movs	r2, #1
 8012bee:	9904      	ldr	r1, [sp, #16]
 8012bf0:	4620      	mov	r0, r4
 8012bf2:	f000 fc69 	bl	80134c8 <__lshift>
 8012bf6:	4639      	mov	r1, r7
 8012bf8:	9004      	str	r0, [sp, #16]
 8012bfa:	f000 fcb9 	bl	8013570 <__mcmp>
 8012bfe:	2800      	cmp	r0, #0
 8012c00:	dc03      	bgt.n	8012c0a <_dtoa_r+0xa32>
 8012c02:	d1e0      	bne.n	8012bc6 <_dtoa_r+0x9ee>
 8012c04:	f018 0f01 	tst.w	r8, #1
 8012c08:	d0dd      	beq.n	8012bc6 <_dtoa_r+0x9ee>
 8012c0a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012c0e:	d1d8      	bne.n	8012bc2 <_dtoa_r+0x9ea>
 8012c10:	9b05      	ldr	r3, [sp, #20]
 8012c12:	9a05      	ldr	r2, [sp, #20]
 8012c14:	1c5d      	adds	r5, r3, #1
 8012c16:	2339      	movs	r3, #57	; 0x39
 8012c18:	7013      	strb	r3, [r2, #0]
 8012c1a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012c1e:	2b39      	cmp	r3, #57	; 0x39
 8012c20:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012c24:	d04f      	beq.n	8012cc6 <_dtoa_r+0xaee>
 8012c26:	3301      	adds	r3, #1
 8012c28:	7013      	strb	r3, [r2, #0]
 8012c2a:	e754      	b.n	8012ad6 <_dtoa_r+0x8fe>
 8012c2c:	9a05      	ldr	r2, [sp, #20]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	f102 0501 	add.w	r5, r2, #1
 8012c34:	dd06      	ble.n	8012c44 <_dtoa_r+0xa6c>
 8012c36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012c3a:	d0e9      	beq.n	8012c10 <_dtoa_r+0xa38>
 8012c3c:	f108 0801 	add.w	r8, r8, #1
 8012c40:	9b05      	ldr	r3, [sp, #20]
 8012c42:	e7c2      	b.n	8012bca <_dtoa_r+0x9f2>
 8012c44:	9a02      	ldr	r2, [sp, #8]
 8012c46:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012c4a:	eba5 030b 	sub.w	r3, r5, fp
 8012c4e:	4293      	cmp	r3, r2
 8012c50:	d021      	beq.n	8012c96 <_dtoa_r+0xabe>
 8012c52:	2300      	movs	r3, #0
 8012c54:	220a      	movs	r2, #10
 8012c56:	9904      	ldr	r1, [sp, #16]
 8012c58:	4620      	mov	r0, r4
 8012c5a:	f000 fabf 	bl	80131dc <__multadd>
 8012c5e:	45b1      	cmp	r9, r6
 8012c60:	9004      	str	r0, [sp, #16]
 8012c62:	f04f 0300 	mov.w	r3, #0
 8012c66:	f04f 020a 	mov.w	r2, #10
 8012c6a:	4649      	mov	r1, r9
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	d105      	bne.n	8012c7c <_dtoa_r+0xaa4>
 8012c70:	f000 fab4 	bl	80131dc <__multadd>
 8012c74:	4681      	mov	r9, r0
 8012c76:	4606      	mov	r6, r0
 8012c78:	9505      	str	r5, [sp, #20]
 8012c7a:	e776      	b.n	8012b6a <_dtoa_r+0x992>
 8012c7c:	f000 faae 	bl	80131dc <__multadd>
 8012c80:	4631      	mov	r1, r6
 8012c82:	4681      	mov	r9, r0
 8012c84:	2300      	movs	r3, #0
 8012c86:	220a      	movs	r2, #10
 8012c88:	4620      	mov	r0, r4
 8012c8a:	f000 faa7 	bl	80131dc <__multadd>
 8012c8e:	4606      	mov	r6, r0
 8012c90:	e7f2      	b.n	8012c78 <_dtoa_r+0xaa0>
 8012c92:	f04f 0900 	mov.w	r9, #0
 8012c96:	2201      	movs	r2, #1
 8012c98:	9904      	ldr	r1, [sp, #16]
 8012c9a:	4620      	mov	r0, r4
 8012c9c:	f000 fc14 	bl	80134c8 <__lshift>
 8012ca0:	4639      	mov	r1, r7
 8012ca2:	9004      	str	r0, [sp, #16]
 8012ca4:	f000 fc64 	bl	8013570 <__mcmp>
 8012ca8:	2800      	cmp	r0, #0
 8012caa:	dcb6      	bgt.n	8012c1a <_dtoa_r+0xa42>
 8012cac:	d102      	bne.n	8012cb4 <_dtoa_r+0xadc>
 8012cae:	f018 0f01 	tst.w	r8, #1
 8012cb2:	d1b2      	bne.n	8012c1a <_dtoa_r+0xa42>
 8012cb4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012cb8:	2b30      	cmp	r3, #48	; 0x30
 8012cba:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012cbe:	f47f af0a 	bne.w	8012ad6 <_dtoa_r+0x8fe>
 8012cc2:	4615      	mov	r5, r2
 8012cc4:	e7f6      	b.n	8012cb4 <_dtoa_r+0xadc>
 8012cc6:	4593      	cmp	fp, r2
 8012cc8:	d105      	bne.n	8012cd6 <_dtoa_r+0xafe>
 8012cca:	2331      	movs	r3, #49	; 0x31
 8012ccc:	f10a 0a01 	add.w	sl, sl, #1
 8012cd0:	f88b 3000 	strb.w	r3, [fp]
 8012cd4:	e6ff      	b.n	8012ad6 <_dtoa_r+0x8fe>
 8012cd6:	4615      	mov	r5, r2
 8012cd8:	e79f      	b.n	8012c1a <_dtoa_r+0xa42>
 8012cda:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012d40 <_dtoa_r+0xb68>
 8012cde:	e007      	b.n	8012cf0 <_dtoa_r+0xb18>
 8012ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012ce2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012d44 <_dtoa_r+0xb6c>
 8012ce6:	b11b      	cbz	r3, 8012cf0 <_dtoa_r+0xb18>
 8012ce8:	f10b 0308 	add.w	r3, fp, #8
 8012cec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012cee:	6013      	str	r3, [r2, #0]
 8012cf0:	4658      	mov	r0, fp
 8012cf2:	b017      	add	sp, #92	; 0x5c
 8012cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cf8:	9b06      	ldr	r3, [sp, #24]
 8012cfa:	2b01      	cmp	r3, #1
 8012cfc:	f77f ae35 	ble.w	801296a <_dtoa_r+0x792>
 8012d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d02:	9307      	str	r3, [sp, #28]
 8012d04:	e649      	b.n	801299a <_dtoa_r+0x7c2>
 8012d06:	9b02      	ldr	r3, [sp, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	dc03      	bgt.n	8012d14 <_dtoa_r+0xb3c>
 8012d0c:	9b06      	ldr	r3, [sp, #24]
 8012d0e:	2b02      	cmp	r3, #2
 8012d10:	f73f aecc 	bgt.w	8012aac <_dtoa_r+0x8d4>
 8012d14:	465d      	mov	r5, fp
 8012d16:	4639      	mov	r1, r7
 8012d18:	9804      	ldr	r0, [sp, #16]
 8012d1a:	f7ff f9d1 	bl	80120c0 <quorem>
 8012d1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d22:	f805 8b01 	strb.w	r8, [r5], #1
 8012d26:	9a02      	ldr	r2, [sp, #8]
 8012d28:	eba5 030b 	sub.w	r3, r5, fp
 8012d2c:	429a      	cmp	r2, r3
 8012d2e:	ddb0      	ble.n	8012c92 <_dtoa_r+0xaba>
 8012d30:	2300      	movs	r3, #0
 8012d32:	220a      	movs	r2, #10
 8012d34:	9904      	ldr	r1, [sp, #16]
 8012d36:	4620      	mov	r0, r4
 8012d38:	f000 fa50 	bl	80131dc <__multadd>
 8012d3c:	9004      	str	r0, [sp, #16]
 8012d3e:	e7ea      	b.n	8012d16 <_dtoa_r+0xb3e>
 8012d40:	08016a34 	.word	0x08016a34
 8012d44:	080167aa 	.word	0x080167aa

08012d48 <__sflush_r>:
 8012d48:	898a      	ldrh	r2, [r1, #12]
 8012d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d4e:	4605      	mov	r5, r0
 8012d50:	0710      	lsls	r0, r2, #28
 8012d52:	460c      	mov	r4, r1
 8012d54:	d458      	bmi.n	8012e08 <__sflush_r+0xc0>
 8012d56:	684b      	ldr	r3, [r1, #4]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	dc05      	bgt.n	8012d68 <__sflush_r+0x20>
 8012d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	dc02      	bgt.n	8012d68 <__sflush_r+0x20>
 8012d62:	2000      	movs	r0, #0
 8012d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d6a:	2e00      	cmp	r6, #0
 8012d6c:	d0f9      	beq.n	8012d62 <__sflush_r+0x1a>
 8012d6e:	2300      	movs	r3, #0
 8012d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012d74:	682f      	ldr	r7, [r5, #0]
 8012d76:	6a21      	ldr	r1, [r4, #32]
 8012d78:	602b      	str	r3, [r5, #0]
 8012d7a:	d032      	beq.n	8012de2 <__sflush_r+0x9a>
 8012d7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012d7e:	89a3      	ldrh	r3, [r4, #12]
 8012d80:	075a      	lsls	r2, r3, #29
 8012d82:	d505      	bpl.n	8012d90 <__sflush_r+0x48>
 8012d84:	6863      	ldr	r3, [r4, #4]
 8012d86:	1ac0      	subs	r0, r0, r3
 8012d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012d8a:	b10b      	cbz	r3, 8012d90 <__sflush_r+0x48>
 8012d8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012d8e:	1ac0      	subs	r0, r0, r3
 8012d90:	2300      	movs	r3, #0
 8012d92:	4602      	mov	r2, r0
 8012d94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012d96:	6a21      	ldr	r1, [r4, #32]
 8012d98:	4628      	mov	r0, r5
 8012d9a:	47b0      	blx	r6
 8012d9c:	1c43      	adds	r3, r0, #1
 8012d9e:	89a3      	ldrh	r3, [r4, #12]
 8012da0:	d106      	bne.n	8012db0 <__sflush_r+0x68>
 8012da2:	6829      	ldr	r1, [r5, #0]
 8012da4:	291d      	cmp	r1, #29
 8012da6:	d848      	bhi.n	8012e3a <__sflush_r+0xf2>
 8012da8:	4a29      	ldr	r2, [pc, #164]	; (8012e50 <__sflush_r+0x108>)
 8012daa:	40ca      	lsrs	r2, r1
 8012dac:	07d6      	lsls	r6, r2, #31
 8012dae:	d544      	bpl.n	8012e3a <__sflush_r+0xf2>
 8012db0:	2200      	movs	r2, #0
 8012db2:	6062      	str	r2, [r4, #4]
 8012db4:	04d9      	lsls	r1, r3, #19
 8012db6:	6922      	ldr	r2, [r4, #16]
 8012db8:	6022      	str	r2, [r4, #0]
 8012dba:	d504      	bpl.n	8012dc6 <__sflush_r+0x7e>
 8012dbc:	1c42      	adds	r2, r0, #1
 8012dbe:	d101      	bne.n	8012dc4 <__sflush_r+0x7c>
 8012dc0:	682b      	ldr	r3, [r5, #0]
 8012dc2:	b903      	cbnz	r3, 8012dc6 <__sflush_r+0x7e>
 8012dc4:	6560      	str	r0, [r4, #84]	; 0x54
 8012dc6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012dc8:	602f      	str	r7, [r5, #0]
 8012dca:	2900      	cmp	r1, #0
 8012dcc:	d0c9      	beq.n	8012d62 <__sflush_r+0x1a>
 8012dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012dd2:	4299      	cmp	r1, r3
 8012dd4:	d002      	beq.n	8012ddc <__sflush_r+0x94>
 8012dd6:	4628      	mov	r0, r5
 8012dd8:	f000 fc9e 	bl	8013718 <_free_r>
 8012ddc:	2000      	movs	r0, #0
 8012dde:	6360      	str	r0, [r4, #52]	; 0x34
 8012de0:	e7c0      	b.n	8012d64 <__sflush_r+0x1c>
 8012de2:	2301      	movs	r3, #1
 8012de4:	4628      	mov	r0, r5
 8012de6:	47b0      	blx	r6
 8012de8:	1c41      	adds	r1, r0, #1
 8012dea:	d1c8      	bne.n	8012d7e <__sflush_r+0x36>
 8012dec:	682b      	ldr	r3, [r5, #0]
 8012dee:	2b00      	cmp	r3, #0
 8012df0:	d0c5      	beq.n	8012d7e <__sflush_r+0x36>
 8012df2:	2b1d      	cmp	r3, #29
 8012df4:	d001      	beq.n	8012dfa <__sflush_r+0xb2>
 8012df6:	2b16      	cmp	r3, #22
 8012df8:	d101      	bne.n	8012dfe <__sflush_r+0xb6>
 8012dfa:	602f      	str	r7, [r5, #0]
 8012dfc:	e7b1      	b.n	8012d62 <__sflush_r+0x1a>
 8012dfe:	89a3      	ldrh	r3, [r4, #12]
 8012e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e04:	81a3      	strh	r3, [r4, #12]
 8012e06:	e7ad      	b.n	8012d64 <__sflush_r+0x1c>
 8012e08:	690f      	ldr	r7, [r1, #16]
 8012e0a:	2f00      	cmp	r7, #0
 8012e0c:	d0a9      	beq.n	8012d62 <__sflush_r+0x1a>
 8012e0e:	0793      	lsls	r3, r2, #30
 8012e10:	680e      	ldr	r6, [r1, #0]
 8012e12:	bf08      	it	eq
 8012e14:	694b      	ldreq	r3, [r1, #20]
 8012e16:	600f      	str	r7, [r1, #0]
 8012e18:	bf18      	it	ne
 8012e1a:	2300      	movne	r3, #0
 8012e1c:	eba6 0807 	sub.w	r8, r6, r7
 8012e20:	608b      	str	r3, [r1, #8]
 8012e22:	f1b8 0f00 	cmp.w	r8, #0
 8012e26:	dd9c      	ble.n	8012d62 <__sflush_r+0x1a>
 8012e28:	4643      	mov	r3, r8
 8012e2a:	463a      	mov	r2, r7
 8012e2c:	6a21      	ldr	r1, [r4, #32]
 8012e2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012e30:	4628      	mov	r0, r5
 8012e32:	47b0      	blx	r6
 8012e34:	2800      	cmp	r0, #0
 8012e36:	dc06      	bgt.n	8012e46 <__sflush_r+0xfe>
 8012e38:	89a3      	ldrh	r3, [r4, #12]
 8012e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e3e:	81a3      	strh	r3, [r4, #12]
 8012e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e44:	e78e      	b.n	8012d64 <__sflush_r+0x1c>
 8012e46:	4407      	add	r7, r0
 8012e48:	eba8 0800 	sub.w	r8, r8, r0
 8012e4c:	e7e9      	b.n	8012e22 <__sflush_r+0xda>
 8012e4e:	bf00      	nop
 8012e50:	20400001 	.word	0x20400001

08012e54 <_fflush_r>:
 8012e54:	b538      	push	{r3, r4, r5, lr}
 8012e56:	690b      	ldr	r3, [r1, #16]
 8012e58:	4605      	mov	r5, r0
 8012e5a:	460c      	mov	r4, r1
 8012e5c:	b1db      	cbz	r3, 8012e96 <_fflush_r+0x42>
 8012e5e:	b118      	cbz	r0, 8012e68 <_fflush_r+0x14>
 8012e60:	6983      	ldr	r3, [r0, #24]
 8012e62:	b90b      	cbnz	r3, 8012e68 <_fflush_r+0x14>
 8012e64:	f000 f860 	bl	8012f28 <__sinit>
 8012e68:	4b0c      	ldr	r3, [pc, #48]	; (8012e9c <_fflush_r+0x48>)
 8012e6a:	429c      	cmp	r4, r3
 8012e6c:	d109      	bne.n	8012e82 <_fflush_r+0x2e>
 8012e6e:	686c      	ldr	r4, [r5, #4]
 8012e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e74:	b17b      	cbz	r3, 8012e96 <_fflush_r+0x42>
 8012e76:	4621      	mov	r1, r4
 8012e78:	4628      	mov	r0, r5
 8012e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e7e:	f7ff bf63 	b.w	8012d48 <__sflush_r>
 8012e82:	4b07      	ldr	r3, [pc, #28]	; (8012ea0 <_fflush_r+0x4c>)
 8012e84:	429c      	cmp	r4, r3
 8012e86:	d101      	bne.n	8012e8c <_fflush_r+0x38>
 8012e88:	68ac      	ldr	r4, [r5, #8]
 8012e8a:	e7f1      	b.n	8012e70 <_fflush_r+0x1c>
 8012e8c:	4b05      	ldr	r3, [pc, #20]	; (8012ea4 <_fflush_r+0x50>)
 8012e8e:	429c      	cmp	r4, r3
 8012e90:	bf08      	it	eq
 8012e92:	68ec      	ldreq	r4, [r5, #12]
 8012e94:	e7ec      	b.n	8012e70 <_fflush_r+0x1c>
 8012e96:	2000      	movs	r0, #0
 8012e98:	bd38      	pop	{r3, r4, r5, pc}
 8012e9a:	bf00      	nop
 8012e9c:	080167d8 	.word	0x080167d8
 8012ea0:	080167f8 	.word	0x080167f8
 8012ea4:	080167b8 	.word	0x080167b8

08012ea8 <std>:
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	b510      	push	{r4, lr}
 8012eac:	4604      	mov	r4, r0
 8012eae:	e9c0 3300 	strd	r3, r3, [r0]
 8012eb2:	6083      	str	r3, [r0, #8]
 8012eb4:	8181      	strh	r1, [r0, #12]
 8012eb6:	6643      	str	r3, [r0, #100]	; 0x64
 8012eb8:	81c2      	strh	r2, [r0, #14]
 8012eba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ebe:	6183      	str	r3, [r0, #24]
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	2208      	movs	r2, #8
 8012ec4:	305c      	adds	r0, #92	; 0x5c
 8012ec6:	f7fe fb17 	bl	80114f8 <memset>
 8012eca:	4b05      	ldr	r3, [pc, #20]	; (8012ee0 <std+0x38>)
 8012ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8012ece:	4b05      	ldr	r3, [pc, #20]	; (8012ee4 <std+0x3c>)
 8012ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8012ed2:	4b05      	ldr	r3, [pc, #20]	; (8012ee8 <std+0x40>)
 8012ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012ed6:	4b05      	ldr	r3, [pc, #20]	; (8012eec <std+0x44>)
 8012ed8:	6224      	str	r4, [r4, #32]
 8012eda:	6323      	str	r3, [r4, #48]	; 0x30
 8012edc:	bd10      	pop	{r4, pc}
 8012ede:	bf00      	nop
 8012ee0:	08013dad 	.word	0x08013dad
 8012ee4:	08013dcf 	.word	0x08013dcf
 8012ee8:	08013e07 	.word	0x08013e07
 8012eec:	08013e2b 	.word	0x08013e2b

08012ef0 <_cleanup_r>:
 8012ef0:	4901      	ldr	r1, [pc, #4]	; (8012ef8 <_cleanup_r+0x8>)
 8012ef2:	f000 b885 	b.w	8013000 <_fwalk_reent>
 8012ef6:	bf00      	nop
 8012ef8:	08012e55 	.word	0x08012e55

08012efc <__sfmoreglue>:
 8012efc:	b570      	push	{r4, r5, r6, lr}
 8012efe:	1e4a      	subs	r2, r1, #1
 8012f00:	2568      	movs	r5, #104	; 0x68
 8012f02:	4355      	muls	r5, r2
 8012f04:	460e      	mov	r6, r1
 8012f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012f0a:	f000 fc53 	bl	80137b4 <_malloc_r>
 8012f0e:	4604      	mov	r4, r0
 8012f10:	b140      	cbz	r0, 8012f24 <__sfmoreglue+0x28>
 8012f12:	2100      	movs	r1, #0
 8012f14:	e9c0 1600 	strd	r1, r6, [r0]
 8012f18:	300c      	adds	r0, #12
 8012f1a:	60a0      	str	r0, [r4, #8]
 8012f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012f20:	f7fe faea 	bl	80114f8 <memset>
 8012f24:	4620      	mov	r0, r4
 8012f26:	bd70      	pop	{r4, r5, r6, pc}

08012f28 <__sinit>:
 8012f28:	6983      	ldr	r3, [r0, #24]
 8012f2a:	b510      	push	{r4, lr}
 8012f2c:	4604      	mov	r4, r0
 8012f2e:	bb33      	cbnz	r3, 8012f7e <__sinit+0x56>
 8012f30:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012f34:	6503      	str	r3, [r0, #80]	; 0x50
 8012f36:	4b12      	ldr	r3, [pc, #72]	; (8012f80 <__sinit+0x58>)
 8012f38:	4a12      	ldr	r2, [pc, #72]	; (8012f84 <__sinit+0x5c>)
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	6282      	str	r2, [r0, #40]	; 0x28
 8012f3e:	4298      	cmp	r0, r3
 8012f40:	bf04      	itt	eq
 8012f42:	2301      	moveq	r3, #1
 8012f44:	6183      	streq	r3, [r0, #24]
 8012f46:	f000 f81f 	bl	8012f88 <__sfp>
 8012f4a:	6060      	str	r0, [r4, #4]
 8012f4c:	4620      	mov	r0, r4
 8012f4e:	f000 f81b 	bl	8012f88 <__sfp>
 8012f52:	60a0      	str	r0, [r4, #8]
 8012f54:	4620      	mov	r0, r4
 8012f56:	f000 f817 	bl	8012f88 <__sfp>
 8012f5a:	2200      	movs	r2, #0
 8012f5c:	60e0      	str	r0, [r4, #12]
 8012f5e:	2104      	movs	r1, #4
 8012f60:	6860      	ldr	r0, [r4, #4]
 8012f62:	f7ff ffa1 	bl	8012ea8 <std>
 8012f66:	2201      	movs	r2, #1
 8012f68:	2109      	movs	r1, #9
 8012f6a:	68a0      	ldr	r0, [r4, #8]
 8012f6c:	f7ff ff9c 	bl	8012ea8 <std>
 8012f70:	2202      	movs	r2, #2
 8012f72:	2112      	movs	r1, #18
 8012f74:	68e0      	ldr	r0, [r4, #12]
 8012f76:	f7ff ff97 	bl	8012ea8 <std>
 8012f7a:	2301      	movs	r3, #1
 8012f7c:	61a3      	str	r3, [r4, #24]
 8012f7e:	bd10      	pop	{r4, pc}
 8012f80:	08016774 	.word	0x08016774
 8012f84:	08012ef1 	.word	0x08012ef1

08012f88 <__sfp>:
 8012f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012f8a:	4b1b      	ldr	r3, [pc, #108]	; (8012ff8 <__sfp+0x70>)
 8012f8c:	681e      	ldr	r6, [r3, #0]
 8012f8e:	69b3      	ldr	r3, [r6, #24]
 8012f90:	4607      	mov	r7, r0
 8012f92:	b913      	cbnz	r3, 8012f9a <__sfp+0x12>
 8012f94:	4630      	mov	r0, r6
 8012f96:	f7ff ffc7 	bl	8012f28 <__sinit>
 8012f9a:	3648      	adds	r6, #72	; 0x48
 8012f9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012fa0:	3b01      	subs	r3, #1
 8012fa2:	d503      	bpl.n	8012fac <__sfp+0x24>
 8012fa4:	6833      	ldr	r3, [r6, #0]
 8012fa6:	b133      	cbz	r3, 8012fb6 <__sfp+0x2e>
 8012fa8:	6836      	ldr	r6, [r6, #0]
 8012faa:	e7f7      	b.n	8012f9c <__sfp+0x14>
 8012fac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fb0:	b16d      	cbz	r5, 8012fce <__sfp+0x46>
 8012fb2:	3468      	adds	r4, #104	; 0x68
 8012fb4:	e7f4      	b.n	8012fa0 <__sfp+0x18>
 8012fb6:	2104      	movs	r1, #4
 8012fb8:	4638      	mov	r0, r7
 8012fba:	f7ff ff9f 	bl	8012efc <__sfmoreglue>
 8012fbe:	6030      	str	r0, [r6, #0]
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d1f1      	bne.n	8012fa8 <__sfp+0x20>
 8012fc4:	230c      	movs	r3, #12
 8012fc6:	603b      	str	r3, [r7, #0]
 8012fc8:	4604      	mov	r4, r0
 8012fca:	4620      	mov	r0, r4
 8012fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012fce:	4b0b      	ldr	r3, [pc, #44]	; (8012ffc <__sfp+0x74>)
 8012fd0:	6665      	str	r5, [r4, #100]	; 0x64
 8012fd2:	e9c4 5500 	strd	r5, r5, [r4]
 8012fd6:	60a5      	str	r5, [r4, #8]
 8012fd8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8012fdc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012fe0:	2208      	movs	r2, #8
 8012fe2:	4629      	mov	r1, r5
 8012fe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012fe8:	f7fe fa86 	bl	80114f8 <memset>
 8012fec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8012ff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8012ff4:	e7e9      	b.n	8012fca <__sfp+0x42>
 8012ff6:	bf00      	nop
 8012ff8:	08016774 	.word	0x08016774
 8012ffc:	ffff0001 	.word	0xffff0001

08013000 <_fwalk_reent>:
 8013000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013004:	4680      	mov	r8, r0
 8013006:	4689      	mov	r9, r1
 8013008:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801300c:	2600      	movs	r6, #0
 801300e:	b914      	cbnz	r4, 8013016 <_fwalk_reent+0x16>
 8013010:	4630      	mov	r0, r6
 8013012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013016:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801301a:	3f01      	subs	r7, #1
 801301c:	d501      	bpl.n	8013022 <_fwalk_reent+0x22>
 801301e:	6824      	ldr	r4, [r4, #0]
 8013020:	e7f5      	b.n	801300e <_fwalk_reent+0xe>
 8013022:	89ab      	ldrh	r3, [r5, #12]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d907      	bls.n	8013038 <_fwalk_reent+0x38>
 8013028:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801302c:	3301      	adds	r3, #1
 801302e:	d003      	beq.n	8013038 <_fwalk_reent+0x38>
 8013030:	4629      	mov	r1, r5
 8013032:	4640      	mov	r0, r8
 8013034:	47c8      	blx	r9
 8013036:	4306      	orrs	r6, r0
 8013038:	3568      	adds	r5, #104	; 0x68
 801303a:	e7ee      	b.n	801301a <_fwalk_reent+0x1a>

0801303c <_localeconv_r>:
 801303c:	4b04      	ldr	r3, [pc, #16]	; (8013050 <_localeconv_r+0x14>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	6a18      	ldr	r0, [r3, #32]
 8013042:	4b04      	ldr	r3, [pc, #16]	; (8013054 <_localeconv_r+0x18>)
 8013044:	2800      	cmp	r0, #0
 8013046:	bf08      	it	eq
 8013048:	4618      	moveq	r0, r3
 801304a:	30f0      	adds	r0, #240	; 0xf0
 801304c:	4770      	bx	lr
 801304e:	bf00      	nop
 8013050:	20001c38 	.word	0x20001c38
 8013054:	20001c9c 	.word	0x20001c9c

08013058 <__swhatbuf_r>:
 8013058:	b570      	push	{r4, r5, r6, lr}
 801305a:	460e      	mov	r6, r1
 801305c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013060:	2900      	cmp	r1, #0
 8013062:	b096      	sub	sp, #88	; 0x58
 8013064:	4614      	mov	r4, r2
 8013066:	461d      	mov	r5, r3
 8013068:	da07      	bge.n	801307a <__swhatbuf_r+0x22>
 801306a:	2300      	movs	r3, #0
 801306c:	602b      	str	r3, [r5, #0]
 801306e:	89b3      	ldrh	r3, [r6, #12]
 8013070:	061a      	lsls	r2, r3, #24
 8013072:	d410      	bmi.n	8013096 <__swhatbuf_r+0x3e>
 8013074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013078:	e00e      	b.n	8013098 <__swhatbuf_r+0x40>
 801307a:	466a      	mov	r2, sp
 801307c:	f000 fefc 	bl	8013e78 <_fstat_r>
 8013080:	2800      	cmp	r0, #0
 8013082:	dbf2      	blt.n	801306a <__swhatbuf_r+0x12>
 8013084:	9a01      	ldr	r2, [sp, #4]
 8013086:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801308a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801308e:	425a      	negs	r2, r3
 8013090:	415a      	adcs	r2, r3
 8013092:	602a      	str	r2, [r5, #0]
 8013094:	e7ee      	b.n	8013074 <__swhatbuf_r+0x1c>
 8013096:	2340      	movs	r3, #64	; 0x40
 8013098:	2000      	movs	r0, #0
 801309a:	6023      	str	r3, [r4, #0]
 801309c:	b016      	add	sp, #88	; 0x58
 801309e:	bd70      	pop	{r4, r5, r6, pc}

080130a0 <__smakebuf_r>:
 80130a0:	898b      	ldrh	r3, [r1, #12]
 80130a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130a4:	079d      	lsls	r5, r3, #30
 80130a6:	4606      	mov	r6, r0
 80130a8:	460c      	mov	r4, r1
 80130aa:	d507      	bpl.n	80130bc <__smakebuf_r+0x1c>
 80130ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80130b0:	6023      	str	r3, [r4, #0]
 80130b2:	6123      	str	r3, [r4, #16]
 80130b4:	2301      	movs	r3, #1
 80130b6:	6163      	str	r3, [r4, #20]
 80130b8:	b002      	add	sp, #8
 80130ba:	bd70      	pop	{r4, r5, r6, pc}
 80130bc:	ab01      	add	r3, sp, #4
 80130be:	466a      	mov	r2, sp
 80130c0:	f7ff ffca 	bl	8013058 <__swhatbuf_r>
 80130c4:	9900      	ldr	r1, [sp, #0]
 80130c6:	4605      	mov	r5, r0
 80130c8:	4630      	mov	r0, r6
 80130ca:	f000 fb73 	bl	80137b4 <_malloc_r>
 80130ce:	b948      	cbnz	r0, 80130e4 <__smakebuf_r+0x44>
 80130d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80130d4:	059a      	lsls	r2, r3, #22
 80130d6:	d4ef      	bmi.n	80130b8 <__smakebuf_r+0x18>
 80130d8:	f023 0303 	bic.w	r3, r3, #3
 80130dc:	f043 0302 	orr.w	r3, r3, #2
 80130e0:	81a3      	strh	r3, [r4, #12]
 80130e2:	e7e3      	b.n	80130ac <__smakebuf_r+0xc>
 80130e4:	4b0d      	ldr	r3, [pc, #52]	; (801311c <__smakebuf_r+0x7c>)
 80130e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80130e8:	89a3      	ldrh	r3, [r4, #12]
 80130ea:	6020      	str	r0, [r4, #0]
 80130ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130f0:	81a3      	strh	r3, [r4, #12]
 80130f2:	9b00      	ldr	r3, [sp, #0]
 80130f4:	6163      	str	r3, [r4, #20]
 80130f6:	9b01      	ldr	r3, [sp, #4]
 80130f8:	6120      	str	r0, [r4, #16]
 80130fa:	b15b      	cbz	r3, 8013114 <__smakebuf_r+0x74>
 80130fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013100:	4630      	mov	r0, r6
 8013102:	f000 fecb 	bl	8013e9c <_isatty_r>
 8013106:	b128      	cbz	r0, 8013114 <__smakebuf_r+0x74>
 8013108:	89a3      	ldrh	r3, [r4, #12]
 801310a:	f023 0303 	bic.w	r3, r3, #3
 801310e:	f043 0301 	orr.w	r3, r3, #1
 8013112:	81a3      	strh	r3, [r4, #12]
 8013114:	89a3      	ldrh	r3, [r4, #12]
 8013116:	431d      	orrs	r5, r3
 8013118:	81a5      	strh	r5, [r4, #12]
 801311a:	e7cd      	b.n	80130b8 <__smakebuf_r+0x18>
 801311c:	08012ef1 	.word	0x08012ef1

08013120 <malloc>:
 8013120:	4b02      	ldr	r3, [pc, #8]	; (801312c <malloc+0xc>)
 8013122:	4601      	mov	r1, r0
 8013124:	6818      	ldr	r0, [r3, #0]
 8013126:	f000 bb45 	b.w	80137b4 <_malloc_r>
 801312a:	bf00      	nop
 801312c:	20001c38 	.word	0x20001c38

08013130 <memcpy>:
 8013130:	b510      	push	{r4, lr}
 8013132:	1e43      	subs	r3, r0, #1
 8013134:	440a      	add	r2, r1
 8013136:	4291      	cmp	r1, r2
 8013138:	d100      	bne.n	801313c <memcpy+0xc>
 801313a:	bd10      	pop	{r4, pc}
 801313c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013140:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013144:	e7f7      	b.n	8013136 <memcpy+0x6>

08013146 <_Balloc>:
 8013146:	b570      	push	{r4, r5, r6, lr}
 8013148:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801314a:	4604      	mov	r4, r0
 801314c:	460e      	mov	r6, r1
 801314e:	b93d      	cbnz	r5, 8013160 <_Balloc+0x1a>
 8013150:	2010      	movs	r0, #16
 8013152:	f7ff ffe5 	bl	8013120 <malloc>
 8013156:	6260      	str	r0, [r4, #36]	; 0x24
 8013158:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801315c:	6005      	str	r5, [r0, #0]
 801315e:	60c5      	str	r5, [r0, #12]
 8013160:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013162:	68eb      	ldr	r3, [r5, #12]
 8013164:	b183      	cbz	r3, 8013188 <_Balloc+0x42>
 8013166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013168:	68db      	ldr	r3, [r3, #12]
 801316a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801316e:	b9b8      	cbnz	r0, 80131a0 <_Balloc+0x5a>
 8013170:	2101      	movs	r1, #1
 8013172:	fa01 f506 	lsl.w	r5, r1, r6
 8013176:	1d6a      	adds	r2, r5, #5
 8013178:	0092      	lsls	r2, r2, #2
 801317a:	4620      	mov	r0, r4
 801317c:	f000 fabe 	bl	80136fc <_calloc_r>
 8013180:	b160      	cbz	r0, 801319c <_Balloc+0x56>
 8013182:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013186:	e00e      	b.n	80131a6 <_Balloc+0x60>
 8013188:	2221      	movs	r2, #33	; 0x21
 801318a:	2104      	movs	r1, #4
 801318c:	4620      	mov	r0, r4
 801318e:	f000 fab5 	bl	80136fc <_calloc_r>
 8013192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013194:	60e8      	str	r0, [r5, #12]
 8013196:	68db      	ldr	r3, [r3, #12]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d1e4      	bne.n	8013166 <_Balloc+0x20>
 801319c:	2000      	movs	r0, #0
 801319e:	bd70      	pop	{r4, r5, r6, pc}
 80131a0:	6802      	ldr	r2, [r0, #0]
 80131a2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80131a6:	2300      	movs	r3, #0
 80131a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80131ac:	e7f7      	b.n	801319e <_Balloc+0x58>

080131ae <_Bfree>:
 80131ae:	b570      	push	{r4, r5, r6, lr}
 80131b0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80131b2:	4606      	mov	r6, r0
 80131b4:	460d      	mov	r5, r1
 80131b6:	b93c      	cbnz	r4, 80131c8 <_Bfree+0x1a>
 80131b8:	2010      	movs	r0, #16
 80131ba:	f7ff ffb1 	bl	8013120 <malloc>
 80131be:	6270      	str	r0, [r6, #36]	; 0x24
 80131c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131c4:	6004      	str	r4, [r0, #0]
 80131c6:	60c4      	str	r4, [r0, #12]
 80131c8:	b13d      	cbz	r5, 80131da <_Bfree+0x2c>
 80131ca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80131cc:	686a      	ldr	r2, [r5, #4]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80131d4:	6029      	str	r1, [r5, #0]
 80131d6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80131da:	bd70      	pop	{r4, r5, r6, pc}

080131dc <__multadd>:
 80131dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131e0:	690d      	ldr	r5, [r1, #16]
 80131e2:	461f      	mov	r7, r3
 80131e4:	4606      	mov	r6, r0
 80131e6:	460c      	mov	r4, r1
 80131e8:	f101 0c14 	add.w	ip, r1, #20
 80131ec:	2300      	movs	r3, #0
 80131ee:	f8dc 0000 	ldr.w	r0, [ip]
 80131f2:	b281      	uxth	r1, r0
 80131f4:	fb02 7101 	mla	r1, r2, r1, r7
 80131f8:	0c0f      	lsrs	r7, r1, #16
 80131fa:	0c00      	lsrs	r0, r0, #16
 80131fc:	fb02 7000 	mla	r0, r2, r0, r7
 8013200:	b289      	uxth	r1, r1
 8013202:	3301      	adds	r3, #1
 8013204:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013208:	429d      	cmp	r5, r3
 801320a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801320e:	f84c 1b04 	str.w	r1, [ip], #4
 8013212:	dcec      	bgt.n	80131ee <__multadd+0x12>
 8013214:	b1d7      	cbz	r7, 801324c <__multadd+0x70>
 8013216:	68a3      	ldr	r3, [r4, #8]
 8013218:	42ab      	cmp	r3, r5
 801321a:	dc12      	bgt.n	8013242 <__multadd+0x66>
 801321c:	6861      	ldr	r1, [r4, #4]
 801321e:	4630      	mov	r0, r6
 8013220:	3101      	adds	r1, #1
 8013222:	f7ff ff90 	bl	8013146 <_Balloc>
 8013226:	6922      	ldr	r2, [r4, #16]
 8013228:	3202      	adds	r2, #2
 801322a:	f104 010c 	add.w	r1, r4, #12
 801322e:	4680      	mov	r8, r0
 8013230:	0092      	lsls	r2, r2, #2
 8013232:	300c      	adds	r0, #12
 8013234:	f7ff ff7c 	bl	8013130 <memcpy>
 8013238:	4621      	mov	r1, r4
 801323a:	4630      	mov	r0, r6
 801323c:	f7ff ffb7 	bl	80131ae <_Bfree>
 8013240:	4644      	mov	r4, r8
 8013242:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013246:	3501      	adds	r5, #1
 8013248:	615f      	str	r7, [r3, #20]
 801324a:	6125      	str	r5, [r4, #16]
 801324c:	4620      	mov	r0, r4
 801324e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013252 <__hi0bits>:
 8013252:	0c02      	lsrs	r2, r0, #16
 8013254:	0412      	lsls	r2, r2, #16
 8013256:	4603      	mov	r3, r0
 8013258:	b9b2      	cbnz	r2, 8013288 <__hi0bits+0x36>
 801325a:	0403      	lsls	r3, r0, #16
 801325c:	2010      	movs	r0, #16
 801325e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013262:	bf04      	itt	eq
 8013264:	021b      	lsleq	r3, r3, #8
 8013266:	3008      	addeq	r0, #8
 8013268:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801326c:	bf04      	itt	eq
 801326e:	011b      	lsleq	r3, r3, #4
 8013270:	3004      	addeq	r0, #4
 8013272:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013276:	bf04      	itt	eq
 8013278:	009b      	lsleq	r3, r3, #2
 801327a:	3002      	addeq	r0, #2
 801327c:	2b00      	cmp	r3, #0
 801327e:	db06      	blt.n	801328e <__hi0bits+0x3c>
 8013280:	005b      	lsls	r3, r3, #1
 8013282:	d503      	bpl.n	801328c <__hi0bits+0x3a>
 8013284:	3001      	adds	r0, #1
 8013286:	4770      	bx	lr
 8013288:	2000      	movs	r0, #0
 801328a:	e7e8      	b.n	801325e <__hi0bits+0xc>
 801328c:	2020      	movs	r0, #32
 801328e:	4770      	bx	lr

08013290 <__lo0bits>:
 8013290:	6803      	ldr	r3, [r0, #0]
 8013292:	f013 0207 	ands.w	r2, r3, #7
 8013296:	4601      	mov	r1, r0
 8013298:	d00b      	beq.n	80132b2 <__lo0bits+0x22>
 801329a:	07da      	lsls	r2, r3, #31
 801329c:	d423      	bmi.n	80132e6 <__lo0bits+0x56>
 801329e:	0798      	lsls	r0, r3, #30
 80132a0:	bf49      	itett	mi
 80132a2:	085b      	lsrmi	r3, r3, #1
 80132a4:	089b      	lsrpl	r3, r3, #2
 80132a6:	2001      	movmi	r0, #1
 80132a8:	600b      	strmi	r3, [r1, #0]
 80132aa:	bf5c      	itt	pl
 80132ac:	600b      	strpl	r3, [r1, #0]
 80132ae:	2002      	movpl	r0, #2
 80132b0:	4770      	bx	lr
 80132b2:	b298      	uxth	r0, r3
 80132b4:	b9a8      	cbnz	r0, 80132e2 <__lo0bits+0x52>
 80132b6:	0c1b      	lsrs	r3, r3, #16
 80132b8:	2010      	movs	r0, #16
 80132ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80132be:	bf04      	itt	eq
 80132c0:	0a1b      	lsreq	r3, r3, #8
 80132c2:	3008      	addeq	r0, #8
 80132c4:	071a      	lsls	r2, r3, #28
 80132c6:	bf04      	itt	eq
 80132c8:	091b      	lsreq	r3, r3, #4
 80132ca:	3004      	addeq	r0, #4
 80132cc:	079a      	lsls	r2, r3, #30
 80132ce:	bf04      	itt	eq
 80132d0:	089b      	lsreq	r3, r3, #2
 80132d2:	3002      	addeq	r0, #2
 80132d4:	07da      	lsls	r2, r3, #31
 80132d6:	d402      	bmi.n	80132de <__lo0bits+0x4e>
 80132d8:	085b      	lsrs	r3, r3, #1
 80132da:	d006      	beq.n	80132ea <__lo0bits+0x5a>
 80132dc:	3001      	adds	r0, #1
 80132de:	600b      	str	r3, [r1, #0]
 80132e0:	4770      	bx	lr
 80132e2:	4610      	mov	r0, r2
 80132e4:	e7e9      	b.n	80132ba <__lo0bits+0x2a>
 80132e6:	2000      	movs	r0, #0
 80132e8:	4770      	bx	lr
 80132ea:	2020      	movs	r0, #32
 80132ec:	4770      	bx	lr

080132ee <__i2b>:
 80132ee:	b510      	push	{r4, lr}
 80132f0:	460c      	mov	r4, r1
 80132f2:	2101      	movs	r1, #1
 80132f4:	f7ff ff27 	bl	8013146 <_Balloc>
 80132f8:	2201      	movs	r2, #1
 80132fa:	6144      	str	r4, [r0, #20]
 80132fc:	6102      	str	r2, [r0, #16]
 80132fe:	bd10      	pop	{r4, pc}

08013300 <__multiply>:
 8013300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013304:	4614      	mov	r4, r2
 8013306:	690a      	ldr	r2, [r1, #16]
 8013308:	6923      	ldr	r3, [r4, #16]
 801330a:	429a      	cmp	r2, r3
 801330c:	bfb8      	it	lt
 801330e:	460b      	movlt	r3, r1
 8013310:	4688      	mov	r8, r1
 8013312:	bfbc      	itt	lt
 8013314:	46a0      	movlt	r8, r4
 8013316:	461c      	movlt	r4, r3
 8013318:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801331c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013320:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013324:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013328:	eb07 0609 	add.w	r6, r7, r9
 801332c:	42b3      	cmp	r3, r6
 801332e:	bfb8      	it	lt
 8013330:	3101      	addlt	r1, #1
 8013332:	f7ff ff08 	bl	8013146 <_Balloc>
 8013336:	f100 0514 	add.w	r5, r0, #20
 801333a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801333e:	462b      	mov	r3, r5
 8013340:	2200      	movs	r2, #0
 8013342:	4573      	cmp	r3, lr
 8013344:	d316      	bcc.n	8013374 <__multiply+0x74>
 8013346:	f104 0214 	add.w	r2, r4, #20
 801334a:	f108 0114 	add.w	r1, r8, #20
 801334e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013352:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013356:	9300      	str	r3, [sp, #0]
 8013358:	9b00      	ldr	r3, [sp, #0]
 801335a:	9201      	str	r2, [sp, #4]
 801335c:	4293      	cmp	r3, r2
 801335e:	d80c      	bhi.n	801337a <__multiply+0x7a>
 8013360:	2e00      	cmp	r6, #0
 8013362:	dd03      	ble.n	801336c <__multiply+0x6c>
 8013364:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013368:	2b00      	cmp	r3, #0
 801336a:	d05d      	beq.n	8013428 <__multiply+0x128>
 801336c:	6106      	str	r6, [r0, #16]
 801336e:	b003      	add	sp, #12
 8013370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013374:	f843 2b04 	str.w	r2, [r3], #4
 8013378:	e7e3      	b.n	8013342 <__multiply+0x42>
 801337a:	f8b2 b000 	ldrh.w	fp, [r2]
 801337e:	f1bb 0f00 	cmp.w	fp, #0
 8013382:	d023      	beq.n	80133cc <__multiply+0xcc>
 8013384:	4689      	mov	r9, r1
 8013386:	46ac      	mov	ip, r5
 8013388:	f04f 0800 	mov.w	r8, #0
 801338c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013390:	f8dc a000 	ldr.w	sl, [ip]
 8013394:	b2a3      	uxth	r3, r4
 8013396:	fa1f fa8a 	uxth.w	sl, sl
 801339a:	fb0b a303 	mla	r3, fp, r3, sl
 801339e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80133a2:	f8dc 4000 	ldr.w	r4, [ip]
 80133a6:	4443      	add	r3, r8
 80133a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80133ac:	fb0b 840a 	mla	r4, fp, sl, r8
 80133b0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80133b4:	46e2      	mov	sl, ip
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80133bc:	454f      	cmp	r7, r9
 80133be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80133c2:	f84a 3b04 	str.w	r3, [sl], #4
 80133c6:	d82b      	bhi.n	8013420 <__multiply+0x120>
 80133c8:	f8cc 8004 	str.w	r8, [ip, #4]
 80133cc:	9b01      	ldr	r3, [sp, #4]
 80133ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80133d2:	3204      	adds	r2, #4
 80133d4:	f1ba 0f00 	cmp.w	sl, #0
 80133d8:	d020      	beq.n	801341c <__multiply+0x11c>
 80133da:	682b      	ldr	r3, [r5, #0]
 80133dc:	4689      	mov	r9, r1
 80133de:	46a8      	mov	r8, r5
 80133e0:	f04f 0b00 	mov.w	fp, #0
 80133e4:	f8b9 c000 	ldrh.w	ip, [r9]
 80133e8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80133ec:	fb0a 440c 	mla	r4, sl, ip, r4
 80133f0:	445c      	add	r4, fp
 80133f2:	46c4      	mov	ip, r8
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80133fa:	f84c 3b04 	str.w	r3, [ip], #4
 80133fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8013402:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013406:	0c1b      	lsrs	r3, r3, #16
 8013408:	fb0a b303 	mla	r3, sl, r3, fp
 801340c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013410:	454f      	cmp	r7, r9
 8013412:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013416:	d805      	bhi.n	8013424 <__multiply+0x124>
 8013418:	f8c8 3004 	str.w	r3, [r8, #4]
 801341c:	3504      	adds	r5, #4
 801341e:	e79b      	b.n	8013358 <__multiply+0x58>
 8013420:	46d4      	mov	ip, sl
 8013422:	e7b3      	b.n	801338c <__multiply+0x8c>
 8013424:	46e0      	mov	r8, ip
 8013426:	e7dd      	b.n	80133e4 <__multiply+0xe4>
 8013428:	3e01      	subs	r6, #1
 801342a:	e799      	b.n	8013360 <__multiply+0x60>

0801342c <__pow5mult>:
 801342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013430:	4615      	mov	r5, r2
 8013432:	f012 0203 	ands.w	r2, r2, #3
 8013436:	4606      	mov	r6, r0
 8013438:	460f      	mov	r7, r1
 801343a:	d007      	beq.n	801344c <__pow5mult+0x20>
 801343c:	3a01      	subs	r2, #1
 801343e:	4c21      	ldr	r4, [pc, #132]	; (80134c4 <__pow5mult+0x98>)
 8013440:	2300      	movs	r3, #0
 8013442:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013446:	f7ff fec9 	bl	80131dc <__multadd>
 801344a:	4607      	mov	r7, r0
 801344c:	10ad      	asrs	r5, r5, #2
 801344e:	d035      	beq.n	80134bc <__pow5mult+0x90>
 8013450:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013452:	b93c      	cbnz	r4, 8013464 <__pow5mult+0x38>
 8013454:	2010      	movs	r0, #16
 8013456:	f7ff fe63 	bl	8013120 <malloc>
 801345a:	6270      	str	r0, [r6, #36]	; 0x24
 801345c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013460:	6004      	str	r4, [r0, #0]
 8013462:	60c4      	str	r4, [r0, #12]
 8013464:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013468:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801346c:	b94c      	cbnz	r4, 8013482 <__pow5mult+0x56>
 801346e:	f240 2171 	movw	r1, #625	; 0x271
 8013472:	4630      	mov	r0, r6
 8013474:	f7ff ff3b 	bl	80132ee <__i2b>
 8013478:	2300      	movs	r3, #0
 801347a:	f8c8 0008 	str.w	r0, [r8, #8]
 801347e:	4604      	mov	r4, r0
 8013480:	6003      	str	r3, [r0, #0]
 8013482:	f04f 0800 	mov.w	r8, #0
 8013486:	07eb      	lsls	r3, r5, #31
 8013488:	d50a      	bpl.n	80134a0 <__pow5mult+0x74>
 801348a:	4639      	mov	r1, r7
 801348c:	4622      	mov	r2, r4
 801348e:	4630      	mov	r0, r6
 8013490:	f7ff ff36 	bl	8013300 <__multiply>
 8013494:	4639      	mov	r1, r7
 8013496:	4681      	mov	r9, r0
 8013498:	4630      	mov	r0, r6
 801349a:	f7ff fe88 	bl	80131ae <_Bfree>
 801349e:	464f      	mov	r7, r9
 80134a0:	106d      	asrs	r5, r5, #1
 80134a2:	d00b      	beq.n	80134bc <__pow5mult+0x90>
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	b938      	cbnz	r0, 80134b8 <__pow5mult+0x8c>
 80134a8:	4622      	mov	r2, r4
 80134aa:	4621      	mov	r1, r4
 80134ac:	4630      	mov	r0, r6
 80134ae:	f7ff ff27 	bl	8013300 <__multiply>
 80134b2:	6020      	str	r0, [r4, #0]
 80134b4:	f8c0 8000 	str.w	r8, [r0]
 80134b8:	4604      	mov	r4, r0
 80134ba:	e7e4      	b.n	8013486 <__pow5mult+0x5a>
 80134bc:	4638      	mov	r0, r7
 80134be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134c2:	bf00      	nop
 80134c4:	08016908 	.word	0x08016908

080134c8 <__lshift>:
 80134c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134cc:	460c      	mov	r4, r1
 80134ce:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80134d2:	6923      	ldr	r3, [r4, #16]
 80134d4:	6849      	ldr	r1, [r1, #4]
 80134d6:	eb0a 0903 	add.w	r9, sl, r3
 80134da:	68a3      	ldr	r3, [r4, #8]
 80134dc:	4607      	mov	r7, r0
 80134de:	4616      	mov	r6, r2
 80134e0:	f109 0501 	add.w	r5, r9, #1
 80134e4:	42ab      	cmp	r3, r5
 80134e6:	db32      	blt.n	801354e <__lshift+0x86>
 80134e8:	4638      	mov	r0, r7
 80134ea:	f7ff fe2c 	bl	8013146 <_Balloc>
 80134ee:	2300      	movs	r3, #0
 80134f0:	4680      	mov	r8, r0
 80134f2:	f100 0114 	add.w	r1, r0, #20
 80134f6:	461a      	mov	r2, r3
 80134f8:	4553      	cmp	r3, sl
 80134fa:	db2b      	blt.n	8013554 <__lshift+0x8c>
 80134fc:	6920      	ldr	r0, [r4, #16]
 80134fe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013502:	f104 0314 	add.w	r3, r4, #20
 8013506:	f016 021f 	ands.w	r2, r6, #31
 801350a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801350e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013512:	d025      	beq.n	8013560 <__lshift+0x98>
 8013514:	f1c2 0e20 	rsb	lr, r2, #32
 8013518:	2000      	movs	r0, #0
 801351a:	681e      	ldr	r6, [r3, #0]
 801351c:	468a      	mov	sl, r1
 801351e:	4096      	lsls	r6, r2
 8013520:	4330      	orrs	r0, r6
 8013522:	f84a 0b04 	str.w	r0, [sl], #4
 8013526:	f853 0b04 	ldr.w	r0, [r3], #4
 801352a:	459c      	cmp	ip, r3
 801352c:	fa20 f00e 	lsr.w	r0, r0, lr
 8013530:	d814      	bhi.n	801355c <__lshift+0x94>
 8013532:	6048      	str	r0, [r1, #4]
 8013534:	b108      	cbz	r0, 801353a <__lshift+0x72>
 8013536:	f109 0502 	add.w	r5, r9, #2
 801353a:	3d01      	subs	r5, #1
 801353c:	4638      	mov	r0, r7
 801353e:	f8c8 5010 	str.w	r5, [r8, #16]
 8013542:	4621      	mov	r1, r4
 8013544:	f7ff fe33 	bl	80131ae <_Bfree>
 8013548:	4640      	mov	r0, r8
 801354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801354e:	3101      	adds	r1, #1
 8013550:	005b      	lsls	r3, r3, #1
 8013552:	e7c7      	b.n	80134e4 <__lshift+0x1c>
 8013554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013558:	3301      	adds	r3, #1
 801355a:	e7cd      	b.n	80134f8 <__lshift+0x30>
 801355c:	4651      	mov	r1, sl
 801355e:	e7dc      	b.n	801351a <__lshift+0x52>
 8013560:	3904      	subs	r1, #4
 8013562:	f853 2b04 	ldr.w	r2, [r3], #4
 8013566:	f841 2f04 	str.w	r2, [r1, #4]!
 801356a:	459c      	cmp	ip, r3
 801356c:	d8f9      	bhi.n	8013562 <__lshift+0x9a>
 801356e:	e7e4      	b.n	801353a <__lshift+0x72>

08013570 <__mcmp>:
 8013570:	6903      	ldr	r3, [r0, #16]
 8013572:	690a      	ldr	r2, [r1, #16]
 8013574:	1a9b      	subs	r3, r3, r2
 8013576:	b530      	push	{r4, r5, lr}
 8013578:	d10c      	bne.n	8013594 <__mcmp+0x24>
 801357a:	0092      	lsls	r2, r2, #2
 801357c:	3014      	adds	r0, #20
 801357e:	3114      	adds	r1, #20
 8013580:	1884      	adds	r4, r0, r2
 8013582:	4411      	add	r1, r2
 8013584:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013588:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801358c:	4295      	cmp	r5, r2
 801358e:	d003      	beq.n	8013598 <__mcmp+0x28>
 8013590:	d305      	bcc.n	801359e <__mcmp+0x2e>
 8013592:	2301      	movs	r3, #1
 8013594:	4618      	mov	r0, r3
 8013596:	bd30      	pop	{r4, r5, pc}
 8013598:	42a0      	cmp	r0, r4
 801359a:	d3f3      	bcc.n	8013584 <__mcmp+0x14>
 801359c:	e7fa      	b.n	8013594 <__mcmp+0x24>
 801359e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135a2:	e7f7      	b.n	8013594 <__mcmp+0x24>

080135a4 <__mdiff>:
 80135a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135a8:	460d      	mov	r5, r1
 80135aa:	4607      	mov	r7, r0
 80135ac:	4611      	mov	r1, r2
 80135ae:	4628      	mov	r0, r5
 80135b0:	4614      	mov	r4, r2
 80135b2:	f7ff ffdd 	bl	8013570 <__mcmp>
 80135b6:	1e06      	subs	r6, r0, #0
 80135b8:	d108      	bne.n	80135cc <__mdiff+0x28>
 80135ba:	4631      	mov	r1, r6
 80135bc:	4638      	mov	r0, r7
 80135be:	f7ff fdc2 	bl	8013146 <_Balloc>
 80135c2:	2301      	movs	r3, #1
 80135c4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80135c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80135cc:	bfa4      	itt	ge
 80135ce:	4623      	movge	r3, r4
 80135d0:	462c      	movge	r4, r5
 80135d2:	4638      	mov	r0, r7
 80135d4:	6861      	ldr	r1, [r4, #4]
 80135d6:	bfa6      	itte	ge
 80135d8:	461d      	movge	r5, r3
 80135da:	2600      	movge	r6, #0
 80135dc:	2601      	movlt	r6, #1
 80135de:	f7ff fdb2 	bl	8013146 <_Balloc>
 80135e2:	692b      	ldr	r3, [r5, #16]
 80135e4:	60c6      	str	r6, [r0, #12]
 80135e6:	6926      	ldr	r6, [r4, #16]
 80135e8:	f105 0914 	add.w	r9, r5, #20
 80135ec:	f104 0214 	add.w	r2, r4, #20
 80135f0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80135f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80135f8:	f100 0514 	add.w	r5, r0, #20
 80135fc:	f04f 0e00 	mov.w	lr, #0
 8013600:	f852 ab04 	ldr.w	sl, [r2], #4
 8013604:	f859 4b04 	ldr.w	r4, [r9], #4
 8013608:	fa1e f18a 	uxtah	r1, lr, sl
 801360c:	b2a3      	uxth	r3, r4
 801360e:	1ac9      	subs	r1, r1, r3
 8013610:	0c23      	lsrs	r3, r4, #16
 8013612:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013616:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801361a:	b289      	uxth	r1, r1
 801361c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013620:	45c8      	cmp	r8, r9
 8013622:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013626:	4694      	mov	ip, r2
 8013628:	f845 3b04 	str.w	r3, [r5], #4
 801362c:	d8e8      	bhi.n	8013600 <__mdiff+0x5c>
 801362e:	45bc      	cmp	ip, r7
 8013630:	d304      	bcc.n	801363c <__mdiff+0x98>
 8013632:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013636:	b183      	cbz	r3, 801365a <__mdiff+0xb6>
 8013638:	6106      	str	r6, [r0, #16]
 801363a:	e7c5      	b.n	80135c8 <__mdiff+0x24>
 801363c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013640:	fa1e f381 	uxtah	r3, lr, r1
 8013644:	141a      	asrs	r2, r3, #16
 8013646:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801364a:	b29b      	uxth	r3, r3
 801364c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013650:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013654:	f845 3b04 	str.w	r3, [r5], #4
 8013658:	e7e9      	b.n	801362e <__mdiff+0x8a>
 801365a:	3e01      	subs	r6, #1
 801365c:	e7e9      	b.n	8013632 <__mdiff+0x8e>

0801365e <__d2b>:
 801365e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013662:	460e      	mov	r6, r1
 8013664:	2101      	movs	r1, #1
 8013666:	ec59 8b10 	vmov	r8, r9, d0
 801366a:	4615      	mov	r5, r2
 801366c:	f7ff fd6b 	bl	8013146 <_Balloc>
 8013670:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013674:	4607      	mov	r7, r0
 8013676:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801367a:	bb34      	cbnz	r4, 80136ca <__d2b+0x6c>
 801367c:	9301      	str	r3, [sp, #4]
 801367e:	f1b8 0300 	subs.w	r3, r8, #0
 8013682:	d027      	beq.n	80136d4 <__d2b+0x76>
 8013684:	a802      	add	r0, sp, #8
 8013686:	f840 3d08 	str.w	r3, [r0, #-8]!
 801368a:	f7ff fe01 	bl	8013290 <__lo0bits>
 801368e:	9900      	ldr	r1, [sp, #0]
 8013690:	b1f0      	cbz	r0, 80136d0 <__d2b+0x72>
 8013692:	9a01      	ldr	r2, [sp, #4]
 8013694:	f1c0 0320 	rsb	r3, r0, #32
 8013698:	fa02 f303 	lsl.w	r3, r2, r3
 801369c:	430b      	orrs	r3, r1
 801369e:	40c2      	lsrs	r2, r0
 80136a0:	617b      	str	r3, [r7, #20]
 80136a2:	9201      	str	r2, [sp, #4]
 80136a4:	9b01      	ldr	r3, [sp, #4]
 80136a6:	61bb      	str	r3, [r7, #24]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	bf14      	ite	ne
 80136ac:	2102      	movne	r1, #2
 80136ae:	2101      	moveq	r1, #1
 80136b0:	6139      	str	r1, [r7, #16]
 80136b2:	b1c4      	cbz	r4, 80136e6 <__d2b+0x88>
 80136b4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80136b8:	4404      	add	r4, r0
 80136ba:	6034      	str	r4, [r6, #0]
 80136bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80136c0:	6028      	str	r0, [r5, #0]
 80136c2:	4638      	mov	r0, r7
 80136c4:	b003      	add	sp, #12
 80136c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80136ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80136ce:	e7d5      	b.n	801367c <__d2b+0x1e>
 80136d0:	6179      	str	r1, [r7, #20]
 80136d2:	e7e7      	b.n	80136a4 <__d2b+0x46>
 80136d4:	a801      	add	r0, sp, #4
 80136d6:	f7ff fddb 	bl	8013290 <__lo0bits>
 80136da:	9b01      	ldr	r3, [sp, #4]
 80136dc:	617b      	str	r3, [r7, #20]
 80136de:	2101      	movs	r1, #1
 80136e0:	6139      	str	r1, [r7, #16]
 80136e2:	3020      	adds	r0, #32
 80136e4:	e7e5      	b.n	80136b2 <__d2b+0x54>
 80136e6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80136ea:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80136ee:	6030      	str	r0, [r6, #0]
 80136f0:	6918      	ldr	r0, [r3, #16]
 80136f2:	f7ff fdae 	bl	8013252 <__hi0bits>
 80136f6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80136fa:	e7e1      	b.n	80136c0 <__d2b+0x62>

080136fc <_calloc_r>:
 80136fc:	b538      	push	{r3, r4, r5, lr}
 80136fe:	fb02 f401 	mul.w	r4, r2, r1
 8013702:	4621      	mov	r1, r4
 8013704:	f000 f856 	bl	80137b4 <_malloc_r>
 8013708:	4605      	mov	r5, r0
 801370a:	b118      	cbz	r0, 8013714 <_calloc_r+0x18>
 801370c:	4622      	mov	r2, r4
 801370e:	2100      	movs	r1, #0
 8013710:	f7fd fef2 	bl	80114f8 <memset>
 8013714:	4628      	mov	r0, r5
 8013716:	bd38      	pop	{r3, r4, r5, pc}

08013718 <_free_r>:
 8013718:	b538      	push	{r3, r4, r5, lr}
 801371a:	4605      	mov	r5, r0
 801371c:	2900      	cmp	r1, #0
 801371e:	d045      	beq.n	80137ac <_free_r+0x94>
 8013720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013724:	1f0c      	subs	r4, r1, #4
 8013726:	2b00      	cmp	r3, #0
 8013728:	bfb8      	it	lt
 801372a:	18e4      	addlt	r4, r4, r3
 801372c:	f000 fc03 	bl	8013f36 <__malloc_lock>
 8013730:	4a1f      	ldr	r2, [pc, #124]	; (80137b0 <_free_r+0x98>)
 8013732:	6813      	ldr	r3, [r2, #0]
 8013734:	4610      	mov	r0, r2
 8013736:	b933      	cbnz	r3, 8013746 <_free_r+0x2e>
 8013738:	6063      	str	r3, [r4, #4]
 801373a:	6014      	str	r4, [r2, #0]
 801373c:	4628      	mov	r0, r5
 801373e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013742:	f000 bbf9 	b.w	8013f38 <__malloc_unlock>
 8013746:	42a3      	cmp	r3, r4
 8013748:	d90c      	bls.n	8013764 <_free_r+0x4c>
 801374a:	6821      	ldr	r1, [r4, #0]
 801374c:	1862      	adds	r2, r4, r1
 801374e:	4293      	cmp	r3, r2
 8013750:	bf04      	itt	eq
 8013752:	681a      	ldreq	r2, [r3, #0]
 8013754:	685b      	ldreq	r3, [r3, #4]
 8013756:	6063      	str	r3, [r4, #4]
 8013758:	bf04      	itt	eq
 801375a:	1852      	addeq	r2, r2, r1
 801375c:	6022      	streq	r2, [r4, #0]
 801375e:	6004      	str	r4, [r0, #0]
 8013760:	e7ec      	b.n	801373c <_free_r+0x24>
 8013762:	4613      	mov	r3, r2
 8013764:	685a      	ldr	r2, [r3, #4]
 8013766:	b10a      	cbz	r2, 801376c <_free_r+0x54>
 8013768:	42a2      	cmp	r2, r4
 801376a:	d9fa      	bls.n	8013762 <_free_r+0x4a>
 801376c:	6819      	ldr	r1, [r3, #0]
 801376e:	1858      	adds	r0, r3, r1
 8013770:	42a0      	cmp	r0, r4
 8013772:	d10b      	bne.n	801378c <_free_r+0x74>
 8013774:	6820      	ldr	r0, [r4, #0]
 8013776:	4401      	add	r1, r0
 8013778:	1858      	adds	r0, r3, r1
 801377a:	4282      	cmp	r2, r0
 801377c:	6019      	str	r1, [r3, #0]
 801377e:	d1dd      	bne.n	801373c <_free_r+0x24>
 8013780:	6810      	ldr	r0, [r2, #0]
 8013782:	6852      	ldr	r2, [r2, #4]
 8013784:	605a      	str	r2, [r3, #4]
 8013786:	4401      	add	r1, r0
 8013788:	6019      	str	r1, [r3, #0]
 801378a:	e7d7      	b.n	801373c <_free_r+0x24>
 801378c:	d902      	bls.n	8013794 <_free_r+0x7c>
 801378e:	230c      	movs	r3, #12
 8013790:	602b      	str	r3, [r5, #0]
 8013792:	e7d3      	b.n	801373c <_free_r+0x24>
 8013794:	6820      	ldr	r0, [r4, #0]
 8013796:	1821      	adds	r1, r4, r0
 8013798:	428a      	cmp	r2, r1
 801379a:	bf04      	itt	eq
 801379c:	6811      	ldreq	r1, [r2, #0]
 801379e:	6852      	ldreq	r2, [r2, #4]
 80137a0:	6062      	str	r2, [r4, #4]
 80137a2:	bf04      	itt	eq
 80137a4:	1809      	addeq	r1, r1, r0
 80137a6:	6021      	streq	r1, [r4, #0]
 80137a8:	605c      	str	r4, [r3, #4]
 80137aa:	e7c7      	b.n	801373c <_free_r+0x24>
 80137ac:	bd38      	pop	{r3, r4, r5, pc}
 80137ae:	bf00      	nop
 80137b0:	20001ea4 	.word	0x20001ea4

080137b4 <_malloc_r>:
 80137b4:	b570      	push	{r4, r5, r6, lr}
 80137b6:	1ccd      	adds	r5, r1, #3
 80137b8:	f025 0503 	bic.w	r5, r5, #3
 80137bc:	3508      	adds	r5, #8
 80137be:	2d0c      	cmp	r5, #12
 80137c0:	bf38      	it	cc
 80137c2:	250c      	movcc	r5, #12
 80137c4:	2d00      	cmp	r5, #0
 80137c6:	4606      	mov	r6, r0
 80137c8:	db01      	blt.n	80137ce <_malloc_r+0x1a>
 80137ca:	42a9      	cmp	r1, r5
 80137cc:	d903      	bls.n	80137d6 <_malloc_r+0x22>
 80137ce:	230c      	movs	r3, #12
 80137d0:	6033      	str	r3, [r6, #0]
 80137d2:	2000      	movs	r0, #0
 80137d4:	bd70      	pop	{r4, r5, r6, pc}
 80137d6:	f000 fbae 	bl	8013f36 <__malloc_lock>
 80137da:	4a21      	ldr	r2, [pc, #132]	; (8013860 <_malloc_r+0xac>)
 80137dc:	6814      	ldr	r4, [r2, #0]
 80137de:	4621      	mov	r1, r4
 80137e0:	b991      	cbnz	r1, 8013808 <_malloc_r+0x54>
 80137e2:	4c20      	ldr	r4, [pc, #128]	; (8013864 <_malloc_r+0xb0>)
 80137e4:	6823      	ldr	r3, [r4, #0]
 80137e6:	b91b      	cbnz	r3, 80137f0 <_malloc_r+0x3c>
 80137e8:	4630      	mov	r0, r6
 80137ea:	f000 facf 	bl	8013d8c <_sbrk_r>
 80137ee:	6020      	str	r0, [r4, #0]
 80137f0:	4629      	mov	r1, r5
 80137f2:	4630      	mov	r0, r6
 80137f4:	f000 faca 	bl	8013d8c <_sbrk_r>
 80137f8:	1c43      	adds	r3, r0, #1
 80137fa:	d124      	bne.n	8013846 <_malloc_r+0x92>
 80137fc:	230c      	movs	r3, #12
 80137fe:	6033      	str	r3, [r6, #0]
 8013800:	4630      	mov	r0, r6
 8013802:	f000 fb99 	bl	8013f38 <__malloc_unlock>
 8013806:	e7e4      	b.n	80137d2 <_malloc_r+0x1e>
 8013808:	680b      	ldr	r3, [r1, #0]
 801380a:	1b5b      	subs	r3, r3, r5
 801380c:	d418      	bmi.n	8013840 <_malloc_r+0x8c>
 801380e:	2b0b      	cmp	r3, #11
 8013810:	d90f      	bls.n	8013832 <_malloc_r+0x7e>
 8013812:	600b      	str	r3, [r1, #0]
 8013814:	50cd      	str	r5, [r1, r3]
 8013816:	18cc      	adds	r4, r1, r3
 8013818:	4630      	mov	r0, r6
 801381a:	f000 fb8d 	bl	8013f38 <__malloc_unlock>
 801381e:	f104 000b 	add.w	r0, r4, #11
 8013822:	1d23      	adds	r3, r4, #4
 8013824:	f020 0007 	bic.w	r0, r0, #7
 8013828:	1ac3      	subs	r3, r0, r3
 801382a:	d0d3      	beq.n	80137d4 <_malloc_r+0x20>
 801382c:	425a      	negs	r2, r3
 801382e:	50e2      	str	r2, [r4, r3]
 8013830:	e7d0      	b.n	80137d4 <_malloc_r+0x20>
 8013832:	428c      	cmp	r4, r1
 8013834:	684b      	ldr	r3, [r1, #4]
 8013836:	bf16      	itet	ne
 8013838:	6063      	strne	r3, [r4, #4]
 801383a:	6013      	streq	r3, [r2, #0]
 801383c:	460c      	movne	r4, r1
 801383e:	e7eb      	b.n	8013818 <_malloc_r+0x64>
 8013840:	460c      	mov	r4, r1
 8013842:	6849      	ldr	r1, [r1, #4]
 8013844:	e7cc      	b.n	80137e0 <_malloc_r+0x2c>
 8013846:	1cc4      	adds	r4, r0, #3
 8013848:	f024 0403 	bic.w	r4, r4, #3
 801384c:	42a0      	cmp	r0, r4
 801384e:	d005      	beq.n	801385c <_malloc_r+0xa8>
 8013850:	1a21      	subs	r1, r4, r0
 8013852:	4630      	mov	r0, r6
 8013854:	f000 fa9a 	bl	8013d8c <_sbrk_r>
 8013858:	3001      	adds	r0, #1
 801385a:	d0cf      	beq.n	80137fc <_malloc_r+0x48>
 801385c:	6025      	str	r5, [r4, #0]
 801385e:	e7db      	b.n	8013818 <_malloc_r+0x64>
 8013860:	20001ea4 	.word	0x20001ea4
 8013864:	20001ea8 	.word	0x20001ea8

08013868 <__ssputs_r>:
 8013868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801386c:	688e      	ldr	r6, [r1, #8]
 801386e:	429e      	cmp	r6, r3
 8013870:	4682      	mov	sl, r0
 8013872:	460c      	mov	r4, r1
 8013874:	4690      	mov	r8, r2
 8013876:	4699      	mov	r9, r3
 8013878:	d837      	bhi.n	80138ea <__ssputs_r+0x82>
 801387a:	898a      	ldrh	r2, [r1, #12]
 801387c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013880:	d031      	beq.n	80138e6 <__ssputs_r+0x7e>
 8013882:	6825      	ldr	r5, [r4, #0]
 8013884:	6909      	ldr	r1, [r1, #16]
 8013886:	1a6f      	subs	r7, r5, r1
 8013888:	6965      	ldr	r5, [r4, #20]
 801388a:	2302      	movs	r3, #2
 801388c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013890:	fb95 f5f3 	sdiv	r5, r5, r3
 8013894:	f109 0301 	add.w	r3, r9, #1
 8013898:	443b      	add	r3, r7
 801389a:	429d      	cmp	r5, r3
 801389c:	bf38      	it	cc
 801389e:	461d      	movcc	r5, r3
 80138a0:	0553      	lsls	r3, r2, #21
 80138a2:	d530      	bpl.n	8013906 <__ssputs_r+0x9e>
 80138a4:	4629      	mov	r1, r5
 80138a6:	f7ff ff85 	bl	80137b4 <_malloc_r>
 80138aa:	4606      	mov	r6, r0
 80138ac:	b950      	cbnz	r0, 80138c4 <__ssputs_r+0x5c>
 80138ae:	230c      	movs	r3, #12
 80138b0:	f8ca 3000 	str.w	r3, [sl]
 80138b4:	89a3      	ldrh	r3, [r4, #12]
 80138b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138ba:	81a3      	strh	r3, [r4, #12]
 80138bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138c4:	463a      	mov	r2, r7
 80138c6:	6921      	ldr	r1, [r4, #16]
 80138c8:	f7ff fc32 	bl	8013130 <memcpy>
 80138cc:	89a3      	ldrh	r3, [r4, #12]
 80138ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80138d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138d6:	81a3      	strh	r3, [r4, #12]
 80138d8:	6126      	str	r6, [r4, #16]
 80138da:	6165      	str	r5, [r4, #20]
 80138dc:	443e      	add	r6, r7
 80138de:	1bed      	subs	r5, r5, r7
 80138e0:	6026      	str	r6, [r4, #0]
 80138e2:	60a5      	str	r5, [r4, #8]
 80138e4:	464e      	mov	r6, r9
 80138e6:	454e      	cmp	r6, r9
 80138e8:	d900      	bls.n	80138ec <__ssputs_r+0x84>
 80138ea:	464e      	mov	r6, r9
 80138ec:	4632      	mov	r2, r6
 80138ee:	4641      	mov	r1, r8
 80138f0:	6820      	ldr	r0, [r4, #0]
 80138f2:	f000 fb07 	bl	8013f04 <memmove>
 80138f6:	68a3      	ldr	r3, [r4, #8]
 80138f8:	1b9b      	subs	r3, r3, r6
 80138fa:	60a3      	str	r3, [r4, #8]
 80138fc:	6823      	ldr	r3, [r4, #0]
 80138fe:	441e      	add	r6, r3
 8013900:	6026      	str	r6, [r4, #0]
 8013902:	2000      	movs	r0, #0
 8013904:	e7dc      	b.n	80138c0 <__ssputs_r+0x58>
 8013906:	462a      	mov	r2, r5
 8013908:	f000 fb17 	bl	8013f3a <_realloc_r>
 801390c:	4606      	mov	r6, r0
 801390e:	2800      	cmp	r0, #0
 8013910:	d1e2      	bne.n	80138d8 <__ssputs_r+0x70>
 8013912:	6921      	ldr	r1, [r4, #16]
 8013914:	4650      	mov	r0, sl
 8013916:	f7ff feff 	bl	8013718 <_free_r>
 801391a:	e7c8      	b.n	80138ae <__ssputs_r+0x46>

0801391c <_svfiprintf_r>:
 801391c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013920:	461d      	mov	r5, r3
 8013922:	898b      	ldrh	r3, [r1, #12]
 8013924:	061f      	lsls	r7, r3, #24
 8013926:	b09d      	sub	sp, #116	; 0x74
 8013928:	4680      	mov	r8, r0
 801392a:	460c      	mov	r4, r1
 801392c:	4616      	mov	r6, r2
 801392e:	d50f      	bpl.n	8013950 <_svfiprintf_r+0x34>
 8013930:	690b      	ldr	r3, [r1, #16]
 8013932:	b96b      	cbnz	r3, 8013950 <_svfiprintf_r+0x34>
 8013934:	2140      	movs	r1, #64	; 0x40
 8013936:	f7ff ff3d 	bl	80137b4 <_malloc_r>
 801393a:	6020      	str	r0, [r4, #0]
 801393c:	6120      	str	r0, [r4, #16]
 801393e:	b928      	cbnz	r0, 801394c <_svfiprintf_r+0x30>
 8013940:	230c      	movs	r3, #12
 8013942:	f8c8 3000 	str.w	r3, [r8]
 8013946:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801394a:	e0c8      	b.n	8013ade <_svfiprintf_r+0x1c2>
 801394c:	2340      	movs	r3, #64	; 0x40
 801394e:	6163      	str	r3, [r4, #20]
 8013950:	2300      	movs	r3, #0
 8013952:	9309      	str	r3, [sp, #36]	; 0x24
 8013954:	2320      	movs	r3, #32
 8013956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801395a:	2330      	movs	r3, #48	; 0x30
 801395c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013960:	9503      	str	r5, [sp, #12]
 8013962:	f04f 0b01 	mov.w	fp, #1
 8013966:	4637      	mov	r7, r6
 8013968:	463d      	mov	r5, r7
 801396a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801396e:	b10b      	cbz	r3, 8013974 <_svfiprintf_r+0x58>
 8013970:	2b25      	cmp	r3, #37	; 0x25
 8013972:	d13e      	bne.n	80139f2 <_svfiprintf_r+0xd6>
 8013974:	ebb7 0a06 	subs.w	sl, r7, r6
 8013978:	d00b      	beq.n	8013992 <_svfiprintf_r+0x76>
 801397a:	4653      	mov	r3, sl
 801397c:	4632      	mov	r2, r6
 801397e:	4621      	mov	r1, r4
 8013980:	4640      	mov	r0, r8
 8013982:	f7ff ff71 	bl	8013868 <__ssputs_r>
 8013986:	3001      	adds	r0, #1
 8013988:	f000 80a4 	beq.w	8013ad4 <_svfiprintf_r+0x1b8>
 801398c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801398e:	4453      	add	r3, sl
 8013990:	9309      	str	r3, [sp, #36]	; 0x24
 8013992:	783b      	ldrb	r3, [r7, #0]
 8013994:	2b00      	cmp	r3, #0
 8013996:	f000 809d 	beq.w	8013ad4 <_svfiprintf_r+0x1b8>
 801399a:	2300      	movs	r3, #0
 801399c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80139a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139a4:	9304      	str	r3, [sp, #16]
 80139a6:	9307      	str	r3, [sp, #28]
 80139a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139ac:	931a      	str	r3, [sp, #104]	; 0x68
 80139ae:	462f      	mov	r7, r5
 80139b0:	2205      	movs	r2, #5
 80139b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80139b6:	4850      	ldr	r0, [pc, #320]	; (8013af8 <_svfiprintf_r+0x1dc>)
 80139b8:	f7ec fc3a 	bl	8000230 <memchr>
 80139bc:	9b04      	ldr	r3, [sp, #16]
 80139be:	b9d0      	cbnz	r0, 80139f6 <_svfiprintf_r+0xda>
 80139c0:	06d9      	lsls	r1, r3, #27
 80139c2:	bf44      	itt	mi
 80139c4:	2220      	movmi	r2, #32
 80139c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80139ca:	071a      	lsls	r2, r3, #28
 80139cc:	bf44      	itt	mi
 80139ce:	222b      	movmi	r2, #43	; 0x2b
 80139d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80139d4:	782a      	ldrb	r2, [r5, #0]
 80139d6:	2a2a      	cmp	r2, #42	; 0x2a
 80139d8:	d015      	beq.n	8013a06 <_svfiprintf_r+0xea>
 80139da:	9a07      	ldr	r2, [sp, #28]
 80139dc:	462f      	mov	r7, r5
 80139de:	2000      	movs	r0, #0
 80139e0:	250a      	movs	r5, #10
 80139e2:	4639      	mov	r1, r7
 80139e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80139e8:	3b30      	subs	r3, #48	; 0x30
 80139ea:	2b09      	cmp	r3, #9
 80139ec:	d94d      	bls.n	8013a8a <_svfiprintf_r+0x16e>
 80139ee:	b1b8      	cbz	r0, 8013a20 <_svfiprintf_r+0x104>
 80139f0:	e00f      	b.n	8013a12 <_svfiprintf_r+0xf6>
 80139f2:	462f      	mov	r7, r5
 80139f4:	e7b8      	b.n	8013968 <_svfiprintf_r+0x4c>
 80139f6:	4a40      	ldr	r2, [pc, #256]	; (8013af8 <_svfiprintf_r+0x1dc>)
 80139f8:	1a80      	subs	r0, r0, r2
 80139fa:	fa0b f000 	lsl.w	r0, fp, r0
 80139fe:	4318      	orrs	r0, r3
 8013a00:	9004      	str	r0, [sp, #16]
 8013a02:	463d      	mov	r5, r7
 8013a04:	e7d3      	b.n	80139ae <_svfiprintf_r+0x92>
 8013a06:	9a03      	ldr	r2, [sp, #12]
 8013a08:	1d11      	adds	r1, r2, #4
 8013a0a:	6812      	ldr	r2, [r2, #0]
 8013a0c:	9103      	str	r1, [sp, #12]
 8013a0e:	2a00      	cmp	r2, #0
 8013a10:	db01      	blt.n	8013a16 <_svfiprintf_r+0xfa>
 8013a12:	9207      	str	r2, [sp, #28]
 8013a14:	e004      	b.n	8013a20 <_svfiprintf_r+0x104>
 8013a16:	4252      	negs	r2, r2
 8013a18:	f043 0302 	orr.w	r3, r3, #2
 8013a1c:	9207      	str	r2, [sp, #28]
 8013a1e:	9304      	str	r3, [sp, #16]
 8013a20:	783b      	ldrb	r3, [r7, #0]
 8013a22:	2b2e      	cmp	r3, #46	; 0x2e
 8013a24:	d10c      	bne.n	8013a40 <_svfiprintf_r+0x124>
 8013a26:	787b      	ldrb	r3, [r7, #1]
 8013a28:	2b2a      	cmp	r3, #42	; 0x2a
 8013a2a:	d133      	bne.n	8013a94 <_svfiprintf_r+0x178>
 8013a2c:	9b03      	ldr	r3, [sp, #12]
 8013a2e:	1d1a      	adds	r2, r3, #4
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	9203      	str	r2, [sp, #12]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	bfb8      	it	lt
 8013a38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a3c:	3702      	adds	r7, #2
 8013a3e:	9305      	str	r3, [sp, #20]
 8013a40:	4d2e      	ldr	r5, [pc, #184]	; (8013afc <_svfiprintf_r+0x1e0>)
 8013a42:	7839      	ldrb	r1, [r7, #0]
 8013a44:	2203      	movs	r2, #3
 8013a46:	4628      	mov	r0, r5
 8013a48:	f7ec fbf2 	bl	8000230 <memchr>
 8013a4c:	b138      	cbz	r0, 8013a5e <_svfiprintf_r+0x142>
 8013a4e:	2340      	movs	r3, #64	; 0x40
 8013a50:	1b40      	subs	r0, r0, r5
 8013a52:	fa03 f000 	lsl.w	r0, r3, r0
 8013a56:	9b04      	ldr	r3, [sp, #16]
 8013a58:	4303      	orrs	r3, r0
 8013a5a:	3701      	adds	r7, #1
 8013a5c:	9304      	str	r3, [sp, #16]
 8013a5e:	7839      	ldrb	r1, [r7, #0]
 8013a60:	4827      	ldr	r0, [pc, #156]	; (8013b00 <_svfiprintf_r+0x1e4>)
 8013a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a66:	2206      	movs	r2, #6
 8013a68:	1c7e      	adds	r6, r7, #1
 8013a6a:	f7ec fbe1 	bl	8000230 <memchr>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d038      	beq.n	8013ae4 <_svfiprintf_r+0x1c8>
 8013a72:	4b24      	ldr	r3, [pc, #144]	; (8013b04 <_svfiprintf_r+0x1e8>)
 8013a74:	bb13      	cbnz	r3, 8013abc <_svfiprintf_r+0x1a0>
 8013a76:	9b03      	ldr	r3, [sp, #12]
 8013a78:	3307      	adds	r3, #7
 8013a7a:	f023 0307 	bic.w	r3, r3, #7
 8013a7e:	3308      	adds	r3, #8
 8013a80:	9303      	str	r3, [sp, #12]
 8013a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013a84:	444b      	add	r3, r9
 8013a86:	9309      	str	r3, [sp, #36]	; 0x24
 8013a88:	e76d      	b.n	8013966 <_svfiprintf_r+0x4a>
 8013a8a:	fb05 3202 	mla	r2, r5, r2, r3
 8013a8e:	2001      	movs	r0, #1
 8013a90:	460f      	mov	r7, r1
 8013a92:	e7a6      	b.n	80139e2 <_svfiprintf_r+0xc6>
 8013a94:	2300      	movs	r3, #0
 8013a96:	3701      	adds	r7, #1
 8013a98:	9305      	str	r3, [sp, #20]
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	250a      	movs	r5, #10
 8013a9e:	4638      	mov	r0, r7
 8013aa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013aa4:	3a30      	subs	r2, #48	; 0x30
 8013aa6:	2a09      	cmp	r2, #9
 8013aa8:	d903      	bls.n	8013ab2 <_svfiprintf_r+0x196>
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d0c8      	beq.n	8013a40 <_svfiprintf_r+0x124>
 8013aae:	9105      	str	r1, [sp, #20]
 8013ab0:	e7c6      	b.n	8013a40 <_svfiprintf_r+0x124>
 8013ab2:	fb05 2101 	mla	r1, r5, r1, r2
 8013ab6:	2301      	movs	r3, #1
 8013ab8:	4607      	mov	r7, r0
 8013aba:	e7f0      	b.n	8013a9e <_svfiprintf_r+0x182>
 8013abc:	ab03      	add	r3, sp, #12
 8013abe:	9300      	str	r3, [sp, #0]
 8013ac0:	4622      	mov	r2, r4
 8013ac2:	4b11      	ldr	r3, [pc, #68]	; (8013b08 <_svfiprintf_r+0x1ec>)
 8013ac4:	a904      	add	r1, sp, #16
 8013ac6:	4640      	mov	r0, r8
 8013ac8:	f7fd fdb2 	bl	8011630 <_printf_float>
 8013acc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013ad0:	4681      	mov	r9, r0
 8013ad2:	d1d6      	bne.n	8013a82 <_svfiprintf_r+0x166>
 8013ad4:	89a3      	ldrh	r3, [r4, #12]
 8013ad6:	065b      	lsls	r3, r3, #25
 8013ad8:	f53f af35 	bmi.w	8013946 <_svfiprintf_r+0x2a>
 8013adc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013ade:	b01d      	add	sp, #116	; 0x74
 8013ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013ae4:	ab03      	add	r3, sp, #12
 8013ae6:	9300      	str	r3, [sp, #0]
 8013ae8:	4622      	mov	r2, r4
 8013aea:	4b07      	ldr	r3, [pc, #28]	; (8013b08 <_svfiprintf_r+0x1ec>)
 8013aec:	a904      	add	r1, sp, #16
 8013aee:	4640      	mov	r0, r8
 8013af0:	f7fe f854 	bl	8011b9c <_printf_i>
 8013af4:	e7ea      	b.n	8013acc <_svfiprintf_r+0x1b0>
 8013af6:	bf00      	nop
 8013af8:	08016914 	.word	0x08016914
 8013afc:	0801691a 	.word	0x0801691a
 8013b00:	0801691e 	.word	0x0801691e
 8013b04:	08011631 	.word	0x08011631
 8013b08:	08013869 	.word	0x08013869

08013b0c <__sfputc_r>:
 8013b0c:	6893      	ldr	r3, [r2, #8]
 8013b0e:	3b01      	subs	r3, #1
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	b410      	push	{r4}
 8013b14:	6093      	str	r3, [r2, #8]
 8013b16:	da08      	bge.n	8013b2a <__sfputc_r+0x1e>
 8013b18:	6994      	ldr	r4, [r2, #24]
 8013b1a:	42a3      	cmp	r3, r4
 8013b1c:	db01      	blt.n	8013b22 <__sfputc_r+0x16>
 8013b1e:	290a      	cmp	r1, #10
 8013b20:	d103      	bne.n	8013b2a <__sfputc_r+0x1e>
 8013b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b26:	f7fe ba0b 	b.w	8011f40 <__swbuf_r>
 8013b2a:	6813      	ldr	r3, [r2, #0]
 8013b2c:	1c58      	adds	r0, r3, #1
 8013b2e:	6010      	str	r0, [r2, #0]
 8013b30:	7019      	strb	r1, [r3, #0]
 8013b32:	4608      	mov	r0, r1
 8013b34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b38:	4770      	bx	lr

08013b3a <__sfputs_r>:
 8013b3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b3c:	4606      	mov	r6, r0
 8013b3e:	460f      	mov	r7, r1
 8013b40:	4614      	mov	r4, r2
 8013b42:	18d5      	adds	r5, r2, r3
 8013b44:	42ac      	cmp	r4, r5
 8013b46:	d101      	bne.n	8013b4c <__sfputs_r+0x12>
 8013b48:	2000      	movs	r0, #0
 8013b4a:	e007      	b.n	8013b5c <__sfputs_r+0x22>
 8013b4c:	463a      	mov	r2, r7
 8013b4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b52:	4630      	mov	r0, r6
 8013b54:	f7ff ffda 	bl	8013b0c <__sfputc_r>
 8013b58:	1c43      	adds	r3, r0, #1
 8013b5a:	d1f3      	bne.n	8013b44 <__sfputs_r+0xa>
 8013b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b60 <_vfiprintf_r>:
 8013b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b64:	460c      	mov	r4, r1
 8013b66:	b09d      	sub	sp, #116	; 0x74
 8013b68:	4617      	mov	r7, r2
 8013b6a:	461d      	mov	r5, r3
 8013b6c:	4606      	mov	r6, r0
 8013b6e:	b118      	cbz	r0, 8013b78 <_vfiprintf_r+0x18>
 8013b70:	6983      	ldr	r3, [r0, #24]
 8013b72:	b90b      	cbnz	r3, 8013b78 <_vfiprintf_r+0x18>
 8013b74:	f7ff f9d8 	bl	8012f28 <__sinit>
 8013b78:	4b7c      	ldr	r3, [pc, #496]	; (8013d6c <_vfiprintf_r+0x20c>)
 8013b7a:	429c      	cmp	r4, r3
 8013b7c:	d158      	bne.n	8013c30 <_vfiprintf_r+0xd0>
 8013b7e:	6874      	ldr	r4, [r6, #4]
 8013b80:	89a3      	ldrh	r3, [r4, #12]
 8013b82:	0718      	lsls	r0, r3, #28
 8013b84:	d55e      	bpl.n	8013c44 <_vfiprintf_r+0xe4>
 8013b86:	6923      	ldr	r3, [r4, #16]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d05b      	beq.n	8013c44 <_vfiprintf_r+0xe4>
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8013b90:	2320      	movs	r3, #32
 8013b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013b96:	2330      	movs	r3, #48	; 0x30
 8013b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013b9c:	9503      	str	r5, [sp, #12]
 8013b9e:	f04f 0b01 	mov.w	fp, #1
 8013ba2:	46b8      	mov	r8, r7
 8013ba4:	4645      	mov	r5, r8
 8013ba6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013baa:	b10b      	cbz	r3, 8013bb0 <_vfiprintf_r+0x50>
 8013bac:	2b25      	cmp	r3, #37	; 0x25
 8013bae:	d154      	bne.n	8013c5a <_vfiprintf_r+0xfa>
 8013bb0:	ebb8 0a07 	subs.w	sl, r8, r7
 8013bb4:	d00b      	beq.n	8013bce <_vfiprintf_r+0x6e>
 8013bb6:	4653      	mov	r3, sl
 8013bb8:	463a      	mov	r2, r7
 8013bba:	4621      	mov	r1, r4
 8013bbc:	4630      	mov	r0, r6
 8013bbe:	f7ff ffbc 	bl	8013b3a <__sfputs_r>
 8013bc2:	3001      	adds	r0, #1
 8013bc4:	f000 80c2 	beq.w	8013d4c <_vfiprintf_r+0x1ec>
 8013bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bca:	4453      	add	r3, sl
 8013bcc:	9309      	str	r3, [sp, #36]	; 0x24
 8013bce:	f898 3000 	ldrb.w	r3, [r8]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	f000 80ba 	beq.w	8013d4c <_vfiprintf_r+0x1ec>
 8013bd8:	2300      	movs	r3, #0
 8013bda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013be2:	9304      	str	r3, [sp, #16]
 8013be4:	9307      	str	r3, [sp, #28]
 8013be6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013bea:	931a      	str	r3, [sp, #104]	; 0x68
 8013bec:	46a8      	mov	r8, r5
 8013bee:	2205      	movs	r2, #5
 8013bf0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013bf4:	485e      	ldr	r0, [pc, #376]	; (8013d70 <_vfiprintf_r+0x210>)
 8013bf6:	f7ec fb1b 	bl	8000230 <memchr>
 8013bfa:	9b04      	ldr	r3, [sp, #16]
 8013bfc:	bb78      	cbnz	r0, 8013c5e <_vfiprintf_r+0xfe>
 8013bfe:	06d9      	lsls	r1, r3, #27
 8013c00:	bf44      	itt	mi
 8013c02:	2220      	movmi	r2, #32
 8013c04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c08:	071a      	lsls	r2, r3, #28
 8013c0a:	bf44      	itt	mi
 8013c0c:	222b      	movmi	r2, #43	; 0x2b
 8013c0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c12:	782a      	ldrb	r2, [r5, #0]
 8013c14:	2a2a      	cmp	r2, #42	; 0x2a
 8013c16:	d02a      	beq.n	8013c6e <_vfiprintf_r+0x10e>
 8013c18:	9a07      	ldr	r2, [sp, #28]
 8013c1a:	46a8      	mov	r8, r5
 8013c1c:	2000      	movs	r0, #0
 8013c1e:	250a      	movs	r5, #10
 8013c20:	4641      	mov	r1, r8
 8013c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c26:	3b30      	subs	r3, #48	; 0x30
 8013c28:	2b09      	cmp	r3, #9
 8013c2a:	d969      	bls.n	8013d00 <_vfiprintf_r+0x1a0>
 8013c2c:	b360      	cbz	r0, 8013c88 <_vfiprintf_r+0x128>
 8013c2e:	e024      	b.n	8013c7a <_vfiprintf_r+0x11a>
 8013c30:	4b50      	ldr	r3, [pc, #320]	; (8013d74 <_vfiprintf_r+0x214>)
 8013c32:	429c      	cmp	r4, r3
 8013c34:	d101      	bne.n	8013c3a <_vfiprintf_r+0xda>
 8013c36:	68b4      	ldr	r4, [r6, #8]
 8013c38:	e7a2      	b.n	8013b80 <_vfiprintf_r+0x20>
 8013c3a:	4b4f      	ldr	r3, [pc, #316]	; (8013d78 <_vfiprintf_r+0x218>)
 8013c3c:	429c      	cmp	r4, r3
 8013c3e:	bf08      	it	eq
 8013c40:	68f4      	ldreq	r4, [r6, #12]
 8013c42:	e79d      	b.n	8013b80 <_vfiprintf_r+0x20>
 8013c44:	4621      	mov	r1, r4
 8013c46:	4630      	mov	r0, r6
 8013c48:	f7fe f9cc 	bl	8011fe4 <__swsetup_r>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	d09d      	beq.n	8013b8c <_vfiprintf_r+0x2c>
 8013c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c54:	b01d      	add	sp, #116	; 0x74
 8013c56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c5a:	46a8      	mov	r8, r5
 8013c5c:	e7a2      	b.n	8013ba4 <_vfiprintf_r+0x44>
 8013c5e:	4a44      	ldr	r2, [pc, #272]	; (8013d70 <_vfiprintf_r+0x210>)
 8013c60:	1a80      	subs	r0, r0, r2
 8013c62:	fa0b f000 	lsl.w	r0, fp, r0
 8013c66:	4318      	orrs	r0, r3
 8013c68:	9004      	str	r0, [sp, #16]
 8013c6a:	4645      	mov	r5, r8
 8013c6c:	e7be      	b.n	8013bec <_vfiprintf_r+0x8c>
 8013c6e:	9a03      	ldr	r2, [sp, #12]
 8013c70:	1d11      	adds	r1, r2, #4
 8013c72:	6812      	ldr	r2, [r2, #0]
 8013c74:	9103      	str	r1, [sp, #12]
 8013c76:	2a00      	cmp	r2, #0
 8013c78:	db01      	blt.n	8013c7e <_vfiprintf_r+0x11e>
 8013c7a:	9207      	str	r2, [sp, #28]
 8013c7c:	e004      	b.n	8013c88 <_vfiprintf_r+0x128>
 8013c7e:	4252      	negs	r2, r2
 8013c80:	f043 0302 	orr.w	r3, r3, #2
 8013c84:	9207      	str	r2, [sp, #28]
 8013c86:	9304      	str	r3, [sp, #16]
 8013c88:	f898 3000 	ldrb.w	r3, [r8]
 8013c8c:	2b2e      	cmp	r3, #46	; 0x2e
 8013c8e:	d10e      	bne.n	8013cae <_vfiprintf_r+0x14e>
 8013c90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013c94:	2b2a      	cmp	r3, #42	; 0x2a
 8013c96:	d138      	bne.n	8013d0a <_vfiprintf_r+0x1aa>
 8013c98:	9b03      	ldr	r3, [sp, #12]
 8013c9a:	1d1a      	adds	r2, r3, #4
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	9203      	str	r2, [sp, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	bfb8      	it	lt
 8013ca4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013ca8:	f108 0802 	add.w	r8, r8, #2
 8013cac:	9305      	str	r3, [sp, #20]
 8013cae:	4d33      	ldr	r5, [pc, #204]	; (8013d7c <_vfiprintf_r+0x21c>)
 8013cb0:	f898 1000 	ldrb.w	r1, [r8]
 8013cb4:	2203      	movs	r2, #3
 8013cb6:	4628      	mov	r0, r5
 8013cb8:	f7ec faba 	bl	8000230 <memchr>
 8013cbc:	b140      	cbz	r0, 8013cd0 <_vfiprintf_r+0x170>
 8013cbe:	2340      	movs	r3, #64	; 0x40
 8013cc0:	1b40      	subs	r0, r0, r5
 8013cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8013cc6:	9b04      	ldr	r3, [sp, #16]
 8013cc8:	4303      	orrs	r3, r0
 8013cca:	f108 0801 	add.w	r8, r8, #1
 8013cce:	9304      	str	r3, [sp, #16]
 8013cd0:	f898 1000 	ldrb.w	r1, [r8]
 8013cd4:	482a      	ldr	r0, [pc, #168]	; (8013d80 <_vfiprintf_r+0x220>)
 8013cd6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013cda:	2206      	movs	r2, #6
 8013cdc:	f108 0701 	add.w	r7, r8, #1
 8013ce0:	f7ec faa6 	bl	8000230 <memchr>
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	d037      	beq.n	8013d58 <_vfiprintf_r+0x1f8>
 8013ce8:	4b26      	ldr	r3, [pc, #152]	; (8013d84 <_vfiprintf_r+0x224>)
 8013cea:	bb1b      	cbnz	r3, 8013d34 <_vfiprintf_r+0x1d4>
 8013cec:	9b03      	ldr	r3, [sp, #12]
 8013cee:	3307      	adds	r3, #7
 8013cf0:	f023 0307 	bic.w	r3, r3, #7
 8013cf4:	3308      	adds	r3, #8
 8013cf6:	9303      	str	r3, [sp, #12]
 8013cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013cfa:	444b      	add	r3, r9
 8013cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8013cfe:	e750      	b.n	8013ba2 <_vfiprintf_r+0x42>
 8013d00:	fb05 3202 	mla	r2, r5, r2, r3
 8013d04:	2001      	movs	r0, #1
 8013d06:	4688      	mov	r8, r1
 8013d08:	e78a      	b.n	8013c20 <_vfiprintf_r+0xc0>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	f108 0801 	add.w	r8, r8, #1
 8013d10:	9305      	str	r3, [sp, #20]
 8013d12:	4619      	mov	r1, r3
 8013d14:	250a      	movs	r5, #10
 8013d16:	4640      	mov	r0, r8
 8013d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d1c:	3a30      	subs	r2, #48	; 0x30
 8013d1e:	2a09      	cmp	r2, #9
 8013d20:	d903      	bls.n	8013d2a <_vfiprintf_r+0x1ca>
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d0c3      	beq.n	8013cae <_vfiprintf_r+0x14e>
 8013d26:	9105      	str	r1, [sp, #20]
 8013d28:	e7c1      	b.n	8013cae <_vfiprintf_r+0x14e>
 8013d2a:	fb05 2101 	mla	r1, r5, r1, r2
 8013d2e:	2301      	movs	r3, #1
 8013d30:	4680      	mov	r8, r0
 8013d32:	e7f0      	b.n	8013d16 <_vfiprintf_r+0x1b6>
 8013d34:	ab03      	add	r3, sp, #12
 8013d36:	9300      	str	r3, [sp, #0]
 8013d38:	4622      	mov	r2, r4
 8013d3a:	4b13      	ldr	r3, [pc, #76]	; (8013d88 <_vfiprintf_r+0x228>)
 8013d3c:	a904      	add	r1, sp, #16
 8013d3e:	4630      	mov	r0, r6
 8013d40:	f7fd fc76 	bl	8011630 <_printf_float>
 8013d44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013d48:	4681      	mov	r9, r0
 8013d4a:	d1d5      	bne.n	8013cf8 <_vfiprintf_r+0x198>
 8013d4c:	89a3      	ldrh	r3, [r4, #12]
 8013d4e:	065b      	lsls	r3, r3, #25
 8013d50:	f53f af7e 	bmi.w	8013c50 <_vfiprintf_r+0xf0>
 8013d54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d56:	e77d      	b.n	8013c54 <_vfiprintf_r+0xf4>
 8013d58:	ab03      	add	r3, sp, #12
 8013d5a:	9300      	str	r3, [sp, #0]
 8013d5c:	4622      	mov	r2, r4
 8013d5e:	4b0a      	ldr	r3, [pc, #40]	; (8013d88 <_vfiprintf_r+0x228>)
 8013d60:	a904      	add	r1, sp, #16
 8013d62:	4630      	mov	r0, r6
 8013d64:	f7fd ff1a 	bl	8011b9c <_printf_i>
 8013d68:	e7ec      	b.n	8013d44 <_vfiprintf_r+0x1e4>
 8013d6a:	bf00      	nop
 8013d6c:	080167d8 	.word	0x080167d8
 8013d70:	08016914 	.word	0x08016914
 8013d74:	080167f8 	.word	0x080167f8
 8013d78:	080167b8 	.word	0x080167b8
 8013d7c:	0801691a 	.word	0x0801691a
 8013d80:	0801691e 	.word	0x0801691e
 8013d84:	08011631 	.word	0x08011631
 8013d88:	08013b3b 	.word	0x08013b3b

08013d8c <_sbrk_r>:
 8013d8c:	b538      	push	{r3, r4, r5, lr}
 8013d8e:	4c06      	ldr	r4, [pc, #24]	; (8013da8 <_sbrk_r+0x1c>)
 8013d90:	2300      	movs	r3, #0
 8013d92:	4605      	mov	r5, r0
 8013d94:	4608      	mov	r0, r1
 8013d96:	6023      	str	r3, [r4, #0]
 8013d98:	f7f4 fd10 	bl	80087bc <_sbrk>
 8013d9c:	1c43      	adds	r3, r0, #1
 8013d9e:	d102      	bne.n	8013da6 <_sbrk_r+0x1a>
 8013da0:	6823      	ldr	r3, [r4, #0]
 8013da2:	b103      	cbz	r3, 8013da6 <_sbrk_r+0x1a>
 8013da4:	602b      	str	r3, [r5, #0]
 8013da6:	bd38      	pop	{r3, r4, r5, pc}
 8013da8:	20002a08 	.word	0x20002a08

08013dac <__sread>:
 8013dac:	b510      	push	{r4, lr}
 8013dae:	460c      	mov	r4, r1
 8013db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013db4:	f000 f8e8 	bl	8013f88 <_read_r>
 8013db8:	2800      	cmp	r0, #0
 8013dba:	bfab      	itete	ge
 8013dbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013dbe:	89a3      	ldrhlt	r3, [r4, #12]
 8013dc0:	181b      	addge	r3, r3, r0
 8013dc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013dc6:	bfac      	ite	ge
 8013dc8:	6563      	strge	r3, [r4, #84]	; 0x54
 8013dca:	81a3      	strhlt	r3, [r4, #12]
 8013dcc:	bd10      	pop	{r4, pc}

08013dce <__swrite>:
 8013dce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013dd2:	461f      	mov	r7, r3
 8013dd4:	898b      	ldrh	r3, [r1, #12]
 8013dd6:	05db      	lsls	r3, r3, #23
 8013dd8:	4605      	mov	r5, r0
 8013dda:	460c      	mov	r4, r1
 8013ddc:	4616      	mov	r6, r2
 8013dde:	d505      	bpl.n	8013dec <__swrite+0x1e>
 8013de0:	2302      	movs	r3, #2
 8013de2:	2200      	movs	r2, #0
 8013de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013de8:	f000 f868 	bl	8013ebc <_lseek_r>
 8013dec:	89a3      	ldrh	r3, [r4, #12]
 8013dee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013df2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013df6:	81a3      	strh	r3, [r4, #12]
 8013df8:	4632      	mov	r2, r6
 8013dfa:	463b      	mov	r3, r7
 8013dfc:	4628      	mov	r0, r5
 8013dfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e02:	f000 b817 	b.w	8013e34 <_write_r>

08013e06 <__sseek>:
 8013e06:	b510      	push	{r4, lr}
 8013e08:	460c      	mov	r4, r1
 8013e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e0e:	f000 f855 	bl	8013ebc <_lseek_r>
 8013e12:	1c43      	adds	r3, r0, #1
 8013e14:	89a3      	ldrh	r3, [r4, #12]
 8013e16:	bf15      	itete	ne
 8013e18:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e22:	81a3      	strheq	r3, [r4, #12]
 8013e24:	bf18      	it	ne
 8013e26:	81a3      	strhne	r3, [r4, #12]
 8013e28:	bd10      	pop	{r4, pc}

08013e2a <__sclose>:
 8013e2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e2e:	f000 b813 	b.w	8013e58 <_close_r>
	...

08013e34 <_write_r>:
 8013e34:	b538      	push	{r3, r4, r5, lr}
 8013e36:	4c07      	ldr	r4, [pc, #28]	; (8013e54 <_write_r+0x20>)
 8013e38:	4605      	mov	r5, r0
 8013e3a:	4608      	mov	r0, r1
 8013e3c:	4611      	mov	r1, r2
 8013e3e:	2200      	movs	r2, #0
 8013e40:	6022      	str	r2, [r4, #0]
 8013e42:	461a      	mov	r2, r3
 8013e44:	f7f4 f96b 	bl	800811e <_write>
 8013e48:	1c43      	adds	r3, r0, #1
 8013e4a:	d102      	bne.n	8013e52 <_write_r+0x1e>
 8013e4c:	6823      	ldr	r3, [r4, #0]
 8013e4e:	b103      	cbz	r3, 8013e52 <_write_r+0x1e>
 8013e50:	602b      	str	r3, [r5, #0]
 8013e52:	bd38      	pop	{r3, r4, r5, pc}
 8013e54:	20002a08 	.word	0x20002a08

08013e58 <_close_r>:
 8013e58:	b538      	push	{r3, r4, r5, lr}
 8013e5a:	4c06      	ldr	r4, [pc, #24]	; (8013e74 <_close_r+0x1c>)
 8013e5c:	2300      	movs	r3, #0
 8013e5e:	4605      	mov	r5, r0
 8013e60:	4608      	mov	r0, r1
 8013e62:	6023      	str	r3, [r4, #0]
 8013e64:	f7f4 fc75 	bl	8008752 <_close>
 8013e68:	1c43      	adds	r3, r0, #1
 8013e6a:	d102      	bne.n	8013e72 <_close_r+0x1a>
 8013e6c:	6823      	ldr	r3, [r4, #0]
 8013e6e:	b103      	cbz	r3, 8013e72 <_close_r+0x1a>
 8013e70:	602b      	str	r3, [r5, #0]
 8013e72:	bd38      	pop	{r3, r4, r5, pc}
 8013e74:	20002a08 	.word	0x20002a08

08013e78 <_fstat_r>:
 8013e78:	b538      	push	{r3, r4, r5, lr}
 8013e7a:	4c07      	ldr	r4, [pc, #28]	; (8013e98 <_fstat_r+0x20>)
 8013e7c:	2300      	movs	r3, #0
 8013e7e:	4605      	mov	r5, r0
 8013e80:	4608      	mov	r0, r1
 8013e82:	4611      	mov	r1, r2
 8013e84:	6023      	str	r3, [r4, #0]
 8013e86:	f7f4 fc70 	bl	800876a <_fstat>
 8013e8a:	1c43      	adds	r3, r0, #1
 8013e8c:	d102      	bne.n	8013e94 <_fstat_r+0x1c>
 8013e8e:	6823      	ldr	r3, [r4, #0]
 8013e90:	b103      	cbz	r3, 8013e94 <_fstat_r+0x1c>
 8013e92:	602b      	str	r3, [r5, #0]
 8013e94:	bd38      	pop	{r3, r4, r5, pc}
 8013e96:	bf00      	nop
 8013e98:	20002a08 	.word	0x20002a08

08013e9c <_isatty_r>:
 8013e9c:	b538      	push	{r3, r4, r5, lr}
 8013e9e:	4c06      	ldr	r4, [pc, #24]	; (8013eb8 <_isatty_r+0x1c>)
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	4605      	mov	r5, r0
 8013ea4:	4608      	mov	r0, r1
 8013ea6:	6023      	str	r3, [r4, #0]
 8013ea8:	f7f4 fc6f 	bl	800878a <_isatty>
 8013eac:	1c43      	adds	r3, r0, #1
 8013eae:	d102      	bne.n	8013eb6 <_isatty_r+0x1a>
 8013eb0:	6823      	ldr	r3, [r4, #0]
 8013eb2:	b103      	cbz	r3, 8013eb6 <_isatty_r+0x1a>
 8013eb4:	602b      	str	r3, [r5, #0]
 8013eb6:	bd38      	pop	{r3, r4, r5, pc}
 8013eb8:	20002a08 	.word	0x20002a08

08013ebc <_lseek_r>:
 8013ebc:	b538      	push	{r3, r4, r5, lr}
 8013ebe:	4c07      	ldr	r4, [pc, #28]	; (8013edc <_lseek_r+0x20>)
 8013ec0:	4605      	mov	r5, r0
 8013ec2:	4608      	mov	r0, r1
 8013ec4:	4611      	mov	r1, r2
 8013ec6:	2200      	movs	r2, #0
 8013ec8:	6022      	str	r2, [r4, #0]
 8013eca:	461a      	mov	r2, r3
 8013ecc:	f7f4 fc68 	bl	80087a0 <_lseek>
 8013ed0:	1c43      	adds	r3, r0, #1
 8013ed2:	d102      	bne.n	8013eda <_lseek_r+0x1e>
 8013ed4:	6823      	ldr	r3, [r4, #0]
 8013ed6:	b103      	cbz	r3, 8013eda <_lseek_r+0x1e>
 8013ed8:	602b      	str	r3, [r5, #0]
 8013eda:	bd38      	pop	{r3, r4, r5, pc}
 8013edc:	20002a08 	.word	0x20002a08

08013ee0 <__ascii_mbtowc>:
 8013ee0:	b082      	sub	sp, #8
 8013ee2:	b901      	cbnz	r1, 8013ee6 <__ascii_mbtowc+0x6>
 8013ee4:	a901      	add	r1, sp, #4
 8013ee6:	b142      	cbz	r2, 8013efa <__ascii_mbtowc+0x1a>
 8013ee8:	b14b      	cbz	r3, 8013efe <__ascii_mbtowc+0x1e>
 8013eea:	7813      	ldrb	r3, [r2, #0]
 8013eec:	600b      	str	r3, [r1, #0]
 8013eee:	7812      	ldrb	r2, [r2, #0]
 8013ef0:	1c10      	adds	r0, r2, #0
 8013ef2:	bf18      	it	ne
 8013ef4:	2001      	movne	r0, #1
 8013ef6:	b002      	add	sp, #8
 8013ef8:	4770      	bx	lr
 8013efa:	4610      	mov	r0, r2
 8013efc:	e7fb      	b.n	8013ef6 <__ascii_mbtowc+0x16>
 8013efe:	f06f 0001 	mvn.w	r0, #1
 8013f02:	e7f8      	b.n	8013ef6 <__ascii_mbtowc+0x16>

08013f04 <memmove>:
 8013f04:	4288      	cmp	r0, r1
 8013f06:	b510      	push	{r4, lr}
 8013f08:	eb01 0302 	add.w	r3, r1, r2
 8013f0c:	d807      	bhi.n	8013f1e <memmove+0x1a>
 8013f0e:	1e42      	subs	r2, r0, #1
 8013f10:	4299      	cmp	r1, r3
 8013f12:	d00a      	beq.n	8013f2a <memmove+0x26>
 8013f14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f18:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013f1c:	e7f8      	b.n	8013f10 <memmove+0xc>
 8013f1e:	4283      	cmp	r3, r0
 8013f20:	d9f5      	bls.n	8013f0e <memmove+0xa>
 8013f22:	1881      	adds	r1, r0, r2
 8013f24:	1ad2      	subs	r2, r2, r3
 8013f26:	42d3      	cmn	r3, r2
 8013f28:	d100      	bne.n	8013f2c <memmove+0x28>
 8013f2a:	bd10      	pop	{r4, pc}
 8013f2c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f30:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013f34:	e7f7      	b.n	8013f26 <memmove+0x22>

08013f36 <__malloc_lock>:
 8013f36:	4770      	bx	lr

08013f38 <__malloc_unlock>:
 8013f38:	4770      	bx	lr

08013f3a <_realloc_r>:
 8013f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f3c:	4607      	mov	r7, r0
 8013f3e:	4614      	mov	r4, r2
 8013f40:	460e      	mov	r6, r1
 8013f42:	b921      	cbnz	r1, 8013f4e <_realloc_r+0x14>
 8013f44:	4611      	mov	r1, r2
 8013f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013f4a:	f7ff bc33 	b.w	80137b4 <_malloc_r>
 8013f4e:	b922      	cbnz	r2, 8013f5a <_realloc_r+0x20>
 8013f50:	f7ff fbe2 	bl	8013718 <_free_r>
 8013f54:	4625      	mov	r5, r4
 8013f56:	4628      	mov	r0, r5
 8013f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f5a:	f000 f834 	bl	8013fc6 <_malloc_usable_size_r>
 8013f5e:	42a0      	cmp	r0, r4
 8013f60:	d20f      	bcs.n	8013f82 <_realloc_r+0x48>
 8013f62:	4621      	mov	r1, r4
 8013f64:	4638      	mov	r0, r7
 8013f66:	f7ff fc25 	bl	80137b4 <_malloc_r>
 8013f6a:	4605      	mov	r5, r0
 8013f6c:	2800      	cmp	r0, #0
 8013f6e:	d0f2      	beq.n	8013f56 <_realloc_r+0x1c>
 8013f70:	4631      	mov	r1, r6
 8013f72:	4622      	mov	r2, r4
 8013f74:	f7ff f8dc 	bl	8013130 <memcpy>
 8013f78:	4631      	mov	r1, r6
 8013f7a:	4638      	mov	r0, r7
 8013f7c:	f7ff fbcc 	bl	8013718 <_free_r>
 8013f80:	e7e9      	b.n	8013f56 <_realloc_r+0x1c>
 8013f82:	4635      	mov	r5, r6
 8013f84:	e7e7      	b.n	8013f56 <_realloc_r+0x1c>
	...

08013f88 <_read_r>:
 8013f88:	b538      	push	{r3, r4, r5, lr}
 8013f8a:	4c07      	ldr	r4, [pc, #28]	; (8013fa8 <_read_r+0x20>)
 8013f8c:	4605      	mov	r5, r0
 8013f8e:	4608      	mov	r0, r1
 8013f90:	4611      	mov	r1, r2
 8013f92:	2200      	movs	r2, #0
 8013f94:	6022      	str	r2, [r4, #0]
 8013f96:	461a      	mov	r2, r3
 8013f98:	f7f4 fbbe 	bl	8008718 <_read>
 8013f9c:	1c43      	adds	r3, r0, #1
 8013f9e:	d102      	bne.n	8013fa6 <_read_r+0x1e>
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	b103      	cbz	r3, 8013fa6 <_read_r+0x1e>
 8013fa4:	602b      	str	r3, [r5, #0]
 8013fa6:	bd38      	pop	{r3, r4, r5, pc}
 8013fa8:	20002a08 	.word	0x20002a08

08013fac <__ascii_wctomb>:
 8013fac:	b149      	cbz	r1, 8013fc2 <__ascii_wctomb+0x16>
 8013fae:	2aff      	cmp	r2, #255	; 0xff
 8013fb0:	bf85      	ittet	hi
 8013fb2:	238a      	movhi	r3, #138	; 0x8a
 8013fb4:	6003      	strhi	r3, [r0, #0]
 8013fb6:	700a      	strbls	r2, [r1, #0]
 8013fb8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013fbc:	bf98      	it	ls
 8013fbe:	2001      	movls	r0, #1
 8013fc0:	4770      	bx	lr
 8013fc2:	4608      	mov	r0, r1
 8013fc4:	4770      	bx	lr

08013fc6 <_malloc_usable_size_r>:
 8013fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013fca:	1f18      	subs	r0, r3, #4
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	bfbc      	itt	lt
 8013fd0:	580b      	ldrlt	r3, [r1, r0]
 8013fd2:	18c0      	addlt	r0, r0, r3
 8013fd4:	4770      	bx	lr
	...

08013fd8 <log10>:
 8013fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013fda:	ed2d 8b02 	vpush	{d8}
 8013fde:	b08b      	sub	sp, #44	; 0x2c
 8013fe0:	ec55 4b10 	vmov	r4, r5, d0
 8013fe4:	f000 f9e8 	bl	80143b8 <__ieee754_log10>
 8013fe8:	4b36      	ldr	r3, [pc, #216]	; (80140c4 <log10+0xec>)
 8013fea:	eeb0 8a40 	vmov.f32	s16, s0
 8013fee:	eef0 8a60 	vmov.f32	s17, s1
 8013ff2:	f993 6000 	ldrsb.w	r6, [r3]
 8013ff6:	1c73      	adds	r3, r6, #1
 8013ff8:	d05c      	beq.n	80140b4 <log10+0xdc>
 8013ffa:	4622      	mov	r2, r4
 8013ffc:	462b      	mov	r3, r5
 8013ffe:	4620      	mov	r0, r4
 8014000:	4629      	mov	r1, r5
 8014002:	f7ec fdbb 	bl	8000b7c <__aeabi_dcmpun>
 8014006:	4607      	mov	r7, r0
 8014008:	2800      	cmp	r0, #0
 801400a:	d153      	bne.n	80140b4 <log10+0xdc>
 801400c:	2200      	movs	r2, #0
 801400e:	2300      	movs	r3, #0
 8014010:	4620      	mov	r0, r4
 8014012:	4629      	mov	r1, r5
 8014014:	f7ec fd94 	bl	8000b40 <__aeabi_dcmple>
 8014018:	2800      	cmp	r0, #0
 801401a:	d04b      	beq.n	80140b4 <log10+0xdc>
 801401c:	4b2a      	ldr	r3, [pc, #168]	; (80140c8 <log10+0xf0>)
 801401e:	9301      	str	r3, [sp, #4]
 8014020:	9708      	str	r7, [sp, #32]
 8014022:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014026:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801402a:	b9a6      	cbnz	r6, 8014056 <log10+0x7e>
 801402c:	4b27      	ldr	r3, [pc, #156]	; (80140cc <log10+0xf4>)
 801402e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014032:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014036:	4620      	mov	r0, r4
 8014038:	2200      	movs	r2, #0
 801403a:	2300      	movs	r3, #0
 801403c:	4629      	mov	r1, r5
 801403e:	f7ec fd6b 	bl	8000b18 <__aeabi_dcmpeq>
 8014042:	bb40      	cbnz	r0, 8014096 <log10+0xbe>
 8014044:	2301      	movs	r3, #1
 8014046:	2e02      	cmp	r6, #2
 8014048:	9300      	str	r3, [sp, #0]
 801404a:	d119      	bne.n	8014080 <log10+0xa8>
 801404c:	f7fd fa2a 	bl	80114a4 <__errno>
 8014050:	2321      	movs	r3, #33	; 0x21
 8014052:	6003      	str	r3, [r0, #0]
 8014054:	e019      	b.n	801408a <log10+0xb2>
 8014056:	4b1e      	ldr	r3, [pc, #120]	; (80140d0 <log10+0xf8>)
 8014058:	2200      	movs	r2, #0
 801405a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801405e:	4620      	mov	r0, r4
 8014060:	2200      	movs	r2, #0
 8014062:	2300      	movs	r3, #0
 8014064:	4629      	mov	r1, r5
 8014066:	f7ec fd57 	bl	8000b18 <__aeabi_dcmpeq>
 801406a:	2800      	cmp	r0, #0
 801406c:	d0ea      	beq.n	8014044 <log10+0x6c>
 801406e:	2302      	movs	r3, #2
 8014070:	429e      	cmp	r6, r3
 8014072:	9300      	str	r3, [sp, #0]
 8014074:	d111      	bne.n	801409a <log10+0xc2>
 8014076:	f7fd fa15 	bl	80114a4 <__errno>
 801407a:	2322      	movs	r3, #34	; 0x22
 801407c:	6003      	str	r3, [r0, #0]
 801407e:	e011      	b.n	80140a4 <log10+0xcc>
 8014080:	4668      	mov	r0, sp
 8014082:	f000 fff4 	bl	801506e <matherr>
 8014086:	2800      	cmp	r0, #0
 8014088:	d0e0      	beq.n	801404c <log10+0x74>
 801408a:	4812      	ldr	r0, [pc, #72]	; (80140d4 <log10+0xfc>)
 801408c:	f000 fff4 	bl	8015078 <nan>
 8014090:	ed8d 0b06 	vstr	d0, [sp, #24]
 8014094:	e006      	b.n	80140a4 <log10+0xcc>
 8014096:	2302      	movs	r3, #2
 8014098:	9300      	str	r3, [sp, #0]
 801409a:	4668      	mov	r0, sp
 801409c:	f000 ffe7 	bl	801506e <matherr>
 80140a0:	2800      	cmp	r0, #0
 80140a2:	d0e8      	beq.n	8014076 <log10+0x9e>
 80140a4:	9b08      	ldr	r3, [sp, #32]
 80140a6:	b11b      	cbz	r3, 80140b0 <log10+0xd8>
 80140a8:	f7fd f9fc 	bl	80114a4 <__errno>
 80140ac:	9b08      	ldr	r3, [sp, #32]
 80140ae:	6003      	str	r3, [r0, #0]
 80140b0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80140b4:	eeb0 0a48 	vmov.f32	s0, s16
 80140b8:	eef0 0a68 	vmov.f32	s1, s17
 80140bc:	b00b      	add	sp, #44	; 0x2c
 80140be:	ecbd 8b02 	vpop	{d8}
 80140c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140c4:	20001e08 	.word	0x20001e08
 80140c8:	08016a30 	.word	0x08016a30
 80140cc:	c7efffff 	.word	0xc7efffff
 80140d0:	fff00000 	.word	0xfff00000
 80140d4:	08016919 	.word	0x08016919

080140d8 <pow>:
 80140d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140dc:	ed2d 8b04 	vpush	{d8-d9}
 80140e0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80143b4 <pow+0x2dc>
 80140e4:	b08d      	sub	sp, #52	; 0x34
 80140e6:	ec57 6b10 	vmov	r6, r7, d0
 80140ea:	ec55 4b11 	vmov	r4, r5, d1
 80140ee:	f000 f9ef 	bl	80144d0 <__ieee754_pow>
 80140f2:	f999 3000 	ldrsb.w	r3, [r9]
 80140f6:	9300      	str	r3, [sp, #0]
 80140f8:	3301      	adds	r3, #1
 80140fa:	eeb0 8a40 	vmov.f32	s16, s0
 80140fe:	eef0 8a60 	vmov.f32	s17, s1
 8014102:	46c8      	mov	r8, r9
 8014104:	d05f      	beq.n	80141c6 <pow+0xee>
 8014106:	4622      	mov	r2, r4
 8014108:	462b      	mov	r3, r5
 801410a:	4620      	mov	r0, r4
 801410c:	4629      	mov	r1, r5
 801410e:	f7ec fd35 	bl	8000b7c <__aeabi_dcmpun>
 8014112:	4683      	mov	fp, r0
 8014114:	2800      	cmp	r0, #0
 8014116:	d156      	bne.n	80141c6 <pow+0xee>
 8014118:	4632      	mov	r2, r6
 801411a:	463b      	mov	r3, r7
 801411c:	4630      	mov	r0, r6
 801411e:	4639      	mov	r1, r7
 8014120:	f7ec fd2c 	bl	8000b7c <__aeabi_dcmpun>
 8014124:	9001      	str	r0, [sp, #4]
 8014126:	b1e8      	cbz	r0, 8014164 <pow+0x8c>
 8014128:	2200      	movs	r2, #0
 801412a:	2300      	movs	r3, #0
 801412c:	4620      	mov	r0, r4
 801412e:	4629      	mov	r1, r5
 8014130:	f7ec fcf2 	bl	8000b18 <__aeabi_dcmpeq>
 8014134:	2800      	cmp	r0, #0
 8014136:	d046      	beq.n	80141c6 <pow+0xee>
 8014138:	2301      	movs	r3, #1
 801413a:	9302      	str	r3, [sp, #8]
 801413c:	4b96      	ldr	r3, [pc, #600]	; (8014398 <pow+0x2c0>)
 801413e:	9303      	str	r3, [sp, #12]
 8014140:	4b96      	ldr	r3, [pc, #600]	; (801439c <pow+0x2c4>)
 8014142:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8014146:	2200      	movs	r2, #0
 8014148:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801414c:	9b00      	ldr	r3, [sp, #0]
 801414e:	2b02      	cmp	r3, #2
 8014150:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014154:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014158:	d033      	beq.n	80141c2 <pow+0xea>
 801415a:	a802      	add	r0, sp, #8
 801415c:	f000 ff87 	bl	801506e <matherr>
 8014160:	bb48      	cbnz	r0, 80141b6 <pow+0xde>
 8014162:	e05d      	b.n	8014220 <pow+0x148>
 8014164:	f04f 0a00 	mov.w	sl, #0
 8014168:	f04f 0b00 	mov.w	fp, #0
 801416c:	4652      	mov	r2, sl
 801416e:	465b      	mov	r3, fp
 8014170:	4630      	mov	r0, r6
 8014172:	4639      	mov	r1, r7
 8014174:	f7ec fcd0 	bl	8000b18 <__aeabi_dcmpeq>
 8014178:	ec4b ab19 	vmov	d9, sl, fp
 801417c:	2800      	cmp	r0, #0
 801417e:	d054      	beq.n	801422a <pow+0x152>
 8014180:	4652      	mov	r2, sl
 8014182:	465b      	mov	r3, fp
 8014184:	4620      	mov	r0, r4
 8014186:	4629      	mov	r1, r5
 8014188:	f7ec fcc6 	bl	8000b18 <__aeabi_dcmpeq>
 801418c:	4680      	mov	r8, r0
 801418e:	b318      	cbz	r0, 80141d8 <pow+0x100>
 8014190:	2301      	movs	r3, #1
 8014192:	9302      	str	r3, [sp, #8]
 8014194:	4b80      	ldr	r3, [pc, #512]	; (8014398 <pow+0x2c0>)
 8014196:	9303      	str	r3, [sp, #12]
 8014198:	9b01      	ldr	r3, [sp, #4]
 801419a:	930a      	str	r3, [sp, #40]	; 0x28
 801419c:	9b00      	ldr	r3, [sp, #0]
 801419e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80141a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80141a6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d0d5      	beq.n	801415a <pow+0x82>
 80141ae:	4b7b      	ldr	r3, [pc, #492]	; (801439c <pow+0x2c4>)
 80141b0:	2200      	movs	r2, #0
 80141b2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80141b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141b8:	b11b      	cbz	r3, 80141c2 <pow+0xea>
 80141ba:	f7fd f973 	bl	80114a4 <__errno>
 80141be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141c0:	6003      	str	r3, [r0, #0]
 80141c2:	ed9d 8b08 	vldr	d8, [sp, #32]
 80141c6:	eeb0 0a48 	vmov.f32	s0, s16
 80141ca:	eef0 0a68 	vmov.f32	s1, s17
 80141ce:	b00d      	add	sp, #52	; 0x34
 80141d0:	ecbd 8b04 	vpop	{d8-d9}
 80141d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141d8:	ec45 4b10 	vmov	d0, r4, r5
 80141dc:	f000 ff3f 	bl	801505e <finite>
 80141e0:	2800      	cmp	r0, #0
 80141e2:	d0f0      	beq.n	80141c6 <pow+0xee>
 80141e4:	4652      	mov	r2, sl
 80141e6:	465b      	mov	r3, fp
 80141e8:	4620      	mov	r0, r4
 80141ea:	4629      	mov	r1, r5
 80141ec:	f7ec fc9e 	bl	8000b2c <__aeabi_dcmplt>
 80141f0:	2800      	cmp	r0, #0
 80141f2:	d0e8      	beq.n	80141c6 <pow+0xee>
 80141f4:	2301      	movs	r3, #1
 80141f6:	9302      	str	r3, [sp, #8]
 80141f8:	4b67      	ldr	r3, [pc, #412]	; (8014398 <pow+0x2c0>)
 80141fa:	9303      	str	r3, [sp, #12]
 80141fc:	f999 3000 	ldrsb.w	r3, [r9]
 8014200:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014204:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014208:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801420c:	b913      	cbnz	r3, 8014214 <pow+0x13c>
 801420e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014212:	e7a2      	b.n	801415a <pow+0x82>
 8014214:	4962      	ldr	r1, [pc, #392]	; (80143a0 <pow+0x2c8>)
 8014216:	2000      	movs	r0, #0
 8014218:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801421c:	2b02      	cmp	r3, #2
 801421e:	d19c      	bne.n	801415a <pow+0x82>
 8014220:	f7fd f940 	bl	80114a4 <__errno>
 8014224:	2321      	movs	r3, #33	; 0x21
 8014226:	6003      	str	r3, [r0, #0]
 8014228:	e7c5      	b.n	80141b6 <pow+0xde>
 801422a:	eeb0 0a48 	vmov.f32	s0, s16
 801422e:	eef0 0a68 	vmov.f32	s1, s17
 8014232:	f000 ff14 	bl	801505e <finite>
 8014236:	9000      	str	r0, [sp, #0]
 8014238:	2800      	cmp	r0, #0
 801423a:	f040 8081 	bne.w	8014340 <pow+0x268>
 801423e:	ec47 6b10 	vmov	d0, r6, r7
 8014242:	f000 ff0c 	bl	801505e <finite>
 8014246:	2800      	cmp	r0, #0
 8014248:	d07a      	beq.n	8014340 <pow+0x268>
 801424a:	ec45 4b10 	vmov	d0, r4, r5
 801424e:	f000 ff06 	bl	801505e <finite>
 8014252:	2800      	cmp	r0, #0
 8014254:	d074      	beq.n	8014340 <pow+0x268>
 8014256:	ec53 2b18 	vmov	r2, r3, d8
 801425a:	ee18 0a10 	vmov	r0, s16
 801425e:	4619      	mov	r1, r3
 8014260:	f7ec fc8c 	bl	8000b7c <__aeabi_dcmpun>
 8014264:	f999 9000 	ldrsb.w	r9, [r9]
 8014268:	4b4b      	ldr	r3, [pc, #300]	; (8014398 <pow+0x2c0>)
 801426a:	b1b0      	cbz	r0, 801429a <pow+0x1c2>
 801426c:	2201      	movs	r2, #1
 801426e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014272:	9b00      	ldr	r3, [sp, #0]
 8014274:	930a      	str	r3, [sp, #40]	; 0x28
 8014276:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801427a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801427e:	f1b9 0f00 	cmp.w	r9, #0
 8014282:	d0c4      	beq.n	801420e <pow+0x136>
 8014284:	4652      	mov	r2, sl
 8014286:	465b      	mov	r3, fp
 8014288:	4650      	mov	r0, sl
 801428a:	4659      	mov	r1, fp
 801428c:	f7ec fb06 	bl	800089c <__aeabi_ddiv>
 8014290:	f1b9 0f02 	cmp.w	r9, #2
 8014294:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014298:	e7c1      	b.n	801421e <pow+0x146>
 801429a:	2203      	movs	r2, #3
 801429c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142a0:	900a      	str	r0, [sp, #40]	; 0x28
 80142a2:	4629      	mov	r1, r5
 80142a4:	4620      	mov	r0, r4
 80142a6:	2200      	movs	r2, #0
 80142a8:	4b3e      	ldr	r3, [pc, #248]	; (80143a4 <pow+0x2cc>)
 80142aa:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80142ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80142b2:	f7ec f9c9 	bl	8000648 <__aeabi_dmul>
 80142b6:	4604      	mov	r4, r0
 80142b8:	460d      	mov	r5, r1
 80142ba:	f1b9 0f00 	cmp.w	r9, #0
 80142be:	d124      	bne.n	801430a <pow+0x232>
 80142c0:	4b39      	ldr	r3, [pc, #228]	; (80143a8 <pow+0x2d0>)
 80142c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80142c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80142ca:	4630      	mov	r0, r6
 80142cc:	4652      	mov	r2, sl
 80142ce:	465b      	mov	r3, fp
 80142d0:	4639      	mov	r1, r7
 80142d2:	f7ec fc2b 	bl	8000b2c <__aeabi_dcmplt>
 80142d6:	2800      	cmp	r0, #0
 80142d8:	d056      	beq.n	8014388 <pow+0x2b0>
 80142da:	ec45 4b10 	vmov	d0, r4, r5
 80142de:	f000 fed3 	bl	8015088 <rint>
 80142e2:	4622      	mov	r2, r4
 80142e4:	462b      	mov	r3, r5
 80142e6:	ec51 0b10 	vmov	r0, r1, d0
 80142ea:	f7ec fc15 	bl	8000b18 <__aeabi_dcmpeq>
 80142ee:	b920      	cbnz	r0, 80142fa <pow+0x222>
 80142f0:	4b2e      	ldr	r3, [pc, #184]	; (80143ac <pow+0x2d4>)
 80142f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80142f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80142fa:	f998 3000 	ldrsb.w	r3, [r8]
 80142fe:	2b02      	cmp	r3, #2
 8014300:	d142      	bne.n	8014388 <pow+0x2b0>
 8014302:	f7fd f8cf 	bl	80114a4 <__errno>
 8014306:	2322      	movs	r3, #34	; 0x22
 8014308:	e78d      	b.n	8014226 <pow+0x14e>
 801430a:	4b29      	ldr	r3, [pc, #164]	; (80143b0 <pow+0x2d8>)
 801430c:	2200      	movs	r2, #0
 801430e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014312:	4630      	mov	r0, r6
 8014314:	4652      	mov	r2, sl
 8014316:	465b      	mov	r3, fp
 8014318:	4639      	mov	r1, r7
 801431a:	f7ec fc07 	bl	8000b2c <__aeabi_dcmplt>
 801431e:	2800      	cmp	r0, #0
 8014320:	d0eb      	beq.n	80142fa <pow+0x222>
 8014322:	ec45 4b10 	vmov	d0, r4, r5
 8014326:	f000 feaf 	bl	8015088 <rint>
 801432a:	4622      	mov	r2, r4
 801432c:	462b      	mov	r3, r5
 801432e:	ec51 0b10 	vmov	r0, r1, d0
 8014332:	f7ec fbf1 	bl	8000b18 <__aeabi_dcmpeq>
 8014336:	2800      	cmp	r0, #0
 8014338:	d1df      	bne.n	80142fa <pow+0x222>
 801433a:	2200      	movs	r2, #0
 801433c:	4b18      	ldr	r3, [pc, #96]	; (80143a0 <pow+0x2c8>)
 801433e:	e7da      	b.n	80142f6 <pow+0x21e>
 8014340:	2200      	movs	r2, #0
 8014342:	2300      	movs	r3, #0
 8014344:	ec51 0b18 	vmov	r0, r1, d8
 8014348:	f7ec fbe6 	bl	8000b18 <__aeabi_dcmpeq>
 801434c:	2800      	cmp	r0, #0
 801434e:	f43f af3a 	beq.w	80141c6 <pow+0xee>
 8014352:	ec47 6b10 	vmov	d0, r6, r7
 8014356:	f000 fe82 	bl	801505e <finite>
 801435a:	2800      	cmp	r0, #0
 801435c:	f43f af33 	beq.w	80141c6 <pow+0xee>
 8014360:	ec45 4b10 	vmov	d0, r4, r5
 8014364:	f000 fe7b 	bl	801505e <finite>
 8014368:	2800      	cmp	r0, #0
 801436a:	f43f af2c 	beq.w	80141c6 <pow+0xee>
 801436e:	2304      	movs	r3, #4
 8014370:	9302      	str	r3, [sp, #8]
 8014372:	4b09      	ldr	r3, [pc, #36]	; (8014398 <pow+0x2c0>)
 8014374:	9303      	str	r3, [sp, #12]
 8014376:	2300      	movs	r3, #0
 8014378:	930a      	str	r3, [sp, #40]	; 0x28
 801437a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801437e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014382:	ed8d 9b08 	vstr	d9, [sp, #32]
 8014386:	e7b8      	b.n	80142fa <pow+0x222>
 8014388:	a802      	add	r0, sp, #8
 801438a:	f000 fe70 	bl	801506e <matherr>
 801438e:	2800      	cmp	r0, #0
 8014390:	f47f af11 	bne.w	80141b6 <pow+0xde>
 8014394:	e7b5      	b.n	8014302 <pow+0x22a>
 8014396:	bf00      	nop
 8014398:	08016a36 	.word	0x08016a36
 801439c:	3ff00000 	.word	0x3ff00000
 80143a0:	fff00000 	.word	0xfff00000
 80143a4:	3fe00000 	.word	0x3fe00000
 80143a8:	47efffff 	.word	0x47efffff
 80143ac:	c7efffff 	.word	0xc7efffff
 80143b0:	7ff00000 	.word	0x7ff00000
 80143b4:	20001e08 	.word	0x20001e08

080143b8 <__ieee754_log10>:
 80143b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143bc:	ec55 4b10 	vmov	r4, r5, d0
 80143c0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80143c4:	462b      	mov	r3, r5
 80143c6:	da2f      	bge.n	8014428 <__ieee754_log10+0x70>
 80143c8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80143cc:	4322      	orrs	r2, r4
 80143ce:	d10a      	bne.n	80143e6 <__ieee754_log10+0x2e>
 80143d0:	493b      	ldr	r1, [pc, #236]	; (80144c0 <__ieee754_log10+0x108>)
 80143d2:	2200      	movs	r2, #0
 80143d4:	2300      	movs	r3, #0
 80143d6:	2000      	movs	r0, #0
 80143d8:	f7ec fa60 	bl	800089c <__aeabi_ddiv>
 80143dc:	ec41 0b10 	vmov	d0, r0, r1
 80143e0:	b003      	add	sp, #12
 80143e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143e6:	2d00      	cmp	r5, #0
 80143e8:	da08      	bge.n	80143fc <__ieee754_log10+0x44>
 80143ea:	ee10 2a10 	vmov	r2, s0
 80143ee:	4620      	mov	r0, r4
 80143f0:	4629      	mov	r1, r5
 80143f2:	f7eb ff71 	bl	80002d8 <__aeabi_dsub>
 80143f6:	2200      	movs	r2, #0
 80143f8:	2300      	movs	r3, #0
 80143fa:	e7ed      	b.n	80143d8 <__ieee754_log10+0x20>
 80143fc:	2200      	movs	r2, #0
 80143fe:	4b31      	ldr	r3, [pc, #196]	; (80144c4 <__ieee754_log10+0x10c>)
 8014400:	4629      	mov	r1, r5
 8014402:	ee10 0a10 	vmov	r0, s0
 8014406:	f7ec f91f 	bl	8000648 <__aeabi_dmul>
 801440a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801440e:	4604      	mov	r4, r0
 8014410:	460d      	mov	r5, r1
 8014412:	460b      	mov	r3, r1
 8014414:	492c      	ldr	r1, [pc, #176]	; (80144c8 <__ieee754_log10+0x110>)
 8014416:	428b      	cmp	r3, r1
 8014418:	dd08      	ble.n	801442c <__ieee754_log10+0x74>
 801441a:	4622      	mov	r2, r4
 801441c:	462b      	mov	r3, r5
 801441e:	4620      	mov	r0, r4
 8014420:	4629      	mov	r1, r5
 8014422:	f7eb ff5b 	bl	80002dc <__adddf3>
 8014426:	e7d9      	b.n	80143dc <__ieee754_log10+0x24>
 8014428:	2200      	movs	r2, #0
 801442a:	e7f3      	b.n	8014414 <__ieee754_log10+0x5c>
 801442c:	1518      	asrs	r0, r3, #20
 801442e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8014432:	4410      	add	r0, r2
 8014434:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8014438:	4448      	add	r0, r9
 801443a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 801443e:	f7ec f899 	bl	8000574 <__aeabi_i2d>
 8014442:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8014446:	3303      	adds	r3, #3
 8014448:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 801444c:	ec45 4b10 	vmov	d0, r4, r5
 8014450:	4606      	mov	r6, r0
 8014452:	460f      	mov	r7, r1
 8014454:	f000 ff14 	bl	8015280 <__ieee754_log>
 8014458:	a313      	add	r3, pc, #76	; (adr r3, 80144a8 <__ieee754_log10+0xf0>)
 801445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801445e:	4630      	mov	r0, r6
 8014460:	4639      	mov	r1, r7
 8014462:	ed8d 0b00 	vstr	d0, [sp]
 8014466:	f7ec f8ef 	bl	8000648 <__aeabi_dmul>
 801446a:	ed9d 0b00 	vldr	d0, [sp]
 801446e:	4604      	mov	r4, r0
 8014470:	460d      	mov	r5, r1
 8014472:	a30f      	add	r3, pc, #60	; (adr r3, 80144b0 <__ieee754_log10+0xf8>)
 8014474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014478:	ec51 0b10 	vmov	r0, r1, d0
 801447c:	f7ec f8e4 	bl	8000648 <__aeabi_dmul>
 8014480:	4602      	mov	r2, r0
 8014482:	460b      	mov	r3, r1
 8014484:	4620      	mov	r0, r4
 8014486:	4629      	mov	r1, r5
 8014488:	f7eb ff28 	bl	80002dc <__adddf3>
 801448c:	a30a      	add	r3, pc, #40	; (adr r3, 80144b8 <__ieee754_log10+0x100>)
 801448e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014492:	4604      	mov	r4, r0
 8014494:	460d      	mov	r5, r1
 8014496:	4630      	mov	r0, r6
 8014498:	4639      	mov	r1, r7
 801449a:	f7ec f8d5 	bl	8000648 <__aeabi_dmul>
 801449e:	4602      	mov	r2, r0
 80144a0:	460b      	mov	r3, r1
 80144a2:	4620      	mov	r0, r4
 80144a4:	4629      	mov	r1, r5
 80144a6:	e7bc      	b.n	8014422 <__ieee754_log10+0x6a>
 80144a8:	11f12b36 	.word	0x11f12b36
 80144ac:	3d59fef3 	.word	0x3d59fef3
 80144b0:	1526e50e 	.word	0x1526e50e
 80144b4:	3fdbcb7b 	.word	0x3fdbcb7b
 80144b8:	509f6000 	.word	0x509f6000
 80144bc:	3fd34413 	.word	0x3fd34413
 80144c0:	c3500000 	.word	0xc3500000
 80144c4:	43500000 	.word	0x43500000
 80144c8:	7fefffff 	.word	0x7fefffff
 80144cc:	00000000 	.word	0x00000000

080144d0 <__ieee754_pow>:
 80144d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144d4:	b091      	sub	sp, #68	; 0x44
 80144d6:	ed8d 1b00 	vstr	d1, [sp]
 80144da:	e9dd 2900 	ldrd	r2, r9, [sp]
 80144de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80144e2:	ea58 0302 	orrs.w	r3, r8, r2
 80144e6:	ec57 6b10 	vmov	r6, r7, d0
 80144ea:	f000 84be 	beq.w	8014e6a <__ieee754_pow+0x99a>
 80144ee:	4b7a      	ldr	r3, [pc, #488]	; (80146d8 <__ieee754_pow+0x208>)
 80144f0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80144f4:	429c      	cmp	r4, r3
 80144f6:	463d      	mov	r5, r7
 80144f8:	ee10 aa10 	vmov	sl, s0
 80144fc:	dc09      	bgt.n	8014512 <__ieee754_pow+0x42>
 80144fe:	d103      	bne.n	8014508 <__ieee754_pow+0x38>
 8014500:	b93e      	cbnz	r6, 8014512 <__ieee754_pow+0x42>
 8014502:	45a0      	cmp	r8, r4
 8014504:	dc0d      	bgt.n	8014522 <__ieee754_pow+0x52>
 8014506:	e001      	b.n	801450c <__ieee754_pow+0x3c>
 8014508:	4598      	cmp	r8, r3
 801450a:	dc02      	bgt.n	8014512 <__ieee754_pow+0x42>
 801450c:	4598      	cmp	r8, r3
 801450e:	d10e      	bne.n	801452e <__ieee754_pow+0x5e>
 8014510:	b16a      	cbz	r2, 801452e <__ieee754_pow+0x5e>
 8014512:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014516:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801451a:	ea54 030a 	orrs.w	r3, r4, sl
 801451e:	f000 84a4 	beq.w	8014e6a <__ieee754_pow+0x99a>
 8014522:	486e      	ldr	r0, [pc, #440]	; (80146dc <__ieee754_pow+0x20c>)
 8014524:	b011      	add	sp, #68	; 0x44
 8014526:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801452a:	f000 bda5 	b.w	8015078 <nan>
 801452e:	2d00      	cmp	r5, #0
 8014530:	da53      	bge.n	80145da <__ieee754_pow+0x10a>
 8014532:	4b6b      	ldr	r3, [pc, #428]	; (80146e0 <__ieee754_pow+0x210>)
 8014534:	4598      	cmp	r8, r3
 8014536:	dc4d      	bgt.n	80145d4 <__ieee754_pow+0x104>
 8014538:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801453c:	4598      	cmp	r8, r3
 801453e:	dd4c      	ble.n	80145da <__ieee754_pow+0x10a>
 8014540:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014544:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014548:	2b14      	cmp	r3, #20
 801454a:	dd26      	ble.n	801459a <__ieee754_pow+0xca>
 801454c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014550:	fa22 f103 	lsr.w	r1, r2, r3
 8014554:	fa01 f303 	lsl.w	r3, r1, r3
 8014558:	4293      	cmp	r3, r2
 801455a:	d13e      	bne.n	80145da <__ieee754_pow+0x10a>
 801455c:	f001 0101 	and.w	r1, r1, #1
 8014560:	f1c1 0b02 	rsb	fp, r1, #2
 8014564:	2a00      	cmp	r2, #0
 8014566:	d15b      	bne.n	8014620 <__ieee754_pow+0x150>
 8014568:	4b5b      	ldr	r3, [pc, #364]	; (80146d8 <__ieee754_pow+0x208>)
 801456a:	4598      	cmp	r8, r3
 801456c:	d124      	bne.n	80145b8 <__ieee754_pow+0xe8>
 801456e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014572:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014576:	ea53 030a 	orrs.w	r3, r3, sl
 801457a:	f000 8476 	beq.w	8014e6a <__ieee754_pow+0x99a>
 801457e:	4b59      	ldr	r3, [pc, #356]	; (80146e4 <__ieee754_pow+0x214>)
 8014580:	429c      	cmp	r4, r3
 8014582:	dd2d      	ble.n	80145e0 <__ieee754_pow+0x110>
 8014584:	f1b9 0f00 	cmp.w	r9, #0
 8014588:	f280 8473 	bge.w	8014e72 <__ieee754_pow+0x9a2>
 801458c:	2000      	movs	r0, #0
 801458e:	2100      	movs	r1, #0
 8014590:	ec41 0b10 	vmov	d0, r0, r1
 8014594:	b011      	add	sp, #68	; 0x44
 8014596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801459a:	2a00      	cmp	r2, #0
 801459c:	d13e      	bne.n	801461c <__ieee754_pow+0x14c>
 801459e:	f1c3 0314 	rsb	r3, r3, #20
 80145a2:	fa48 f103 	asr.w	r1, r8, r3
 80145a6:	fa01 f303 	lsl.w	r3, r1, r3
 80145aa:	4543      	cmp	r3, r8
 80145ac:	f040 8469 	bne.w	8014e82 <__ieee754_pow+0x9b2>
 80145b0:	f001 0101 	and.w	r1, r1, #1
 80145b4:	f1c1 0b02 	rsb	fp, r1, #2
 80145b8:	4b4b      	ldr	r3, [pc, #300]	; (80146e8 <__ieee754_pow+0x218>)
 80145ba:	4598      	cmp	r8, r3
 80145bc:	d118      	bne.n	80145f0 <__ieee754_pow+0x120>
 80145be:	f1b9 0f00 	cmp.w	r9, #0
 80145c2:	f280 845a 	bge.w	8014e7a <__ieee754_pow+0x9aa>
 80145c6:	4948      	ldr	r1, [pc, #288]	; (80146e8 <__ieee754_pow+0x218>)
 80145c8:	4632      	mov	r2, r6
 80145ca:	463b      	mov	r3, r7
 80145cc:	2000      	movs	r0, #0
 80145ce:	f7ec f965 	bl	800089c <__aeabi_ddiv>
 80145d2:	e7dd      	b.n	8014590 <__ieee754_pow+0xc0>
 80145d4:	f04f 0b02 	mov.w	fp, #2
 80145d8:	e7c4      	b.n	8014564 <__ieee754_pow+0x94>
 80145da:	f04f 0b00 	mov.w	fp, #0
 80145de:	e7c1      	b.n	8014564 <__ieee754_pow+0x94>
 80145e0:	f1b9 0f00 	cmp.w	r9, #0
 80145e4:	dad2      	bge.n	801458c <__ieee754_pow+0xbc>
 80145e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80145ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80145ee:	e7cf      	b.n	8014590 <__ieee754_pow+0xc0>
 80145f0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80145f4:	d106      	bne.n	8014604 <__ieee754_pow+0x134>
 80145f6:	4632      	mov	r2, r6
 80145f8:	463b      	mov	r3, r7
 80145fa:	4610      	mov	r0, r2
 80145fc:	4619      	mov	r1, r3
 80145fe:	f7ec f823 	bl	8000648 <__aeabi_dmul>
 8014602:	e7c5      	b.n	8014590 <__ieee754_pow+0xc0>
 8014604:	4b39      	ldr	r3, [pc, #228]	; (80146ec <__ieee754_pow+0x21c>)
 8014606:	4599      	cmp	r9, r3
 8014608:	d10a      	bne.n	8014620 <__ieee754_pow+0x150>
 801460a:	2d00      	cmp	r5, #0
 801460c:	db08      	blt.n	8014620 <__ieee754_pow+0x150>
 801460e:	ec47 6b10 	vmov	d0, r6, r7
 8014612:	b011      	add	sp, #68	; 0x44
 8014614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014618:	f000 bc68 	b.w	8014eec <__ieee754_sqrt>
 801461c:	f04f 0b00 	mov.w	fp, #0
 8014620:	ec47 6b10 	vmov	d0, r6, r7
 8014624:	f000 fd12 	bl	801504c <fabs>
 8014628:	ec51 0b10 	vmov	r0, r1, d0
 801462c:	f1ba 0f00 	cmp.w	sl, #0
 8014630:	d127      	bne.n	8014682 <__ieee754_pow+0x1b2>
 8014632:	b124      	cbz	r4, 801463e <__ieee754_pow+0x16e>
 8014634:	4b2c      	ldr	r3, [pc, #176]	; (80146e8 <__ieee754_pow+0x218>)
 8014636:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801463a:	429a      	cmp	r2, r3
 801463c:	d121      	bne.n	8014682 <__ieee754_pow+0x1b2>
 801463e:	f1b9 0f00 	cmp.w	r9, #0
 8014642:	da05      	bge.n	8014650 <__ieee754_pow+0x180>
 8014644:	4602      	mov	r2, r0
 8014646:	460b      	mov	r3, r1
 8014648:	2000      	movs	r0, #0
 801464a:	4927      	ldr	r1, [pc, #156]	; (80146e8 <__ieee754_pow+0x218>)
 801464c:	f7ec f926 	bl	800089c <__aeabi_ddiv>
 8014650:	2d00      	cmp	r5, #0
 8014652:	da9d      	bge.n	8014590 <__ieee754_pow+0xc0>
 8014654:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014658:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801465c:	ea54 030b 	orrs.w	r3, r4, fp
 8014660:	d108      	bne.n	8014674 <__ieee754_pow+0x1a4>
 8014662:	4602      	mov	r2, r0
 8014664:	460b      	mov	r3, r1
 8014666:	4610      	mov	r0, r2
 8014668:	4619      	mov	r1, r3
 801466a:	f7eb fe35 	bl	80002d8 <__aeabi_dsub>
 801466e:	4602      	mov	r2, r0
 8014670:	460b      	mov	r3, r1
 8014672:	e7ac      	b.n	80145ce <__ieee754_pow+0xfe>
 8014674:	f1bb 0f01 	cmp.w	fp, #1
 8014678:	d18a      	bne.n	8014590 <__ieee754_pow+0xc0>
 801467a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801467e:	4619      	mov	r1, r3
 8014680:	e786      	b.n	8014590 <__ieee754_pow+0xc0>
 8014682:	0fed      	lsrs	r5, r5, #31
 8014684:	1e6b      	subs	r3, r5, #1
 8014686:	930d      	str	r3, [sp, #52]	; 0x34
 8014688:	ea5b 0303 	orrs.w	r3, fp, r3
 801468c:	d102      	bne.n	8014694 <__ieee754_pow+0x1c4>
 801468e:	4632      	mov	r2, r6
 8014690:	463b      	mov	r3, r7
 8014692:	e7e8      	b.n	8014666 <__ieee754_pow+0x196>
 8014694:	4b16      	ldr	r3, [pc, #88]	; (80146f0 <__ieee754_pow+0x220>)
 8014696:	4598      	cmp	r8, r3
 8014698:	f340 80fe 	ble.w	8014898 <__ieee754_pow+0x3c8>
 801469c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80146a0:	4598      	cmp	r8, r3
 80146a2:	dd0a      	ble.n	80146ba <__ieee754_pow+0x1ea>
 80146a4:	4b0f      	ldr	r3, [pc, #60]	; (80146e4 <__ieee754_pow+0x214>)
 80146a6:	429c      	cmp	r4, r3
 80146a8:	dc0d      	bgt.n	80146c6 <__ieee754_pow+0x1f6>
 80146aa:	f1b9 0f00 	cmp.w	r9, #0
 80146ae:	f6bf af6d 	bge.w	801458c <__ieee754_pow+0xbc>
 80146b2:	a307      	add	r3, pc, #28	; (adr r3, 80146d0 <__ieee754_pow+0x200>)
 80146b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b8:	e79f      	b.n	80145fa <__ieee754_pow+0x12a>
 80146ba:	4b0e      	ldr	r3, [pc, #56]	; (80146f4 <__ieee754_pow+0x224>)
 80146bc:	429c      	cmp	r4, r3
 80146be:	ddf4      	ble.n	80146aa <__ieee754_pow+0x1da>
 80146c0:	4b09      	ldr	r3, [pc, #36]	; (80146e8 <__ieee754_pow+0x218>)
 80146c2:	429c      	cmp	r4, r3
 80146c4:	dd18      	ble.n	80146f8 <__ieee754_pow+0x228>
 80146c6:	f1b9 0f00 	cmp.w	r9, #0
 80146ca:	dcf2      	bgt.n	80146b2 <__ieee754_pow+0x1e2>
 80146cc:	e75e      	b.n	801458c <__ieee754_pow+0xbc>
 80146ce:	bf00      	nop
 80146d0:	8800759c 	.word	0x8800759c
 80146d4:	7e37e43c 	.word	0x7e37e43c
 80146d8:	7ff00000 	.word	0x7ff00000
 80146dc:	08016919 	.word	0x08016919
 80146e0:	433fffff 	.word	0x433fffff
 80146e4:	3fefffff 	.word	0x3fefffff
 80146e8:	3ff00000 	.word	0x3ff00000
 80146ec:	3fe00000 	.word	0x3fe00000
 80146f0:	41e00000 	.word	0x41e00000
 80146f4:	3feffffe 	.word	0x3feffffe
 80146f8:	2200      	movs	r2, #0
 80146fa:	4b63      	ldr	r3, [pc, #396]	; (8014888 <__ieee754_pow+0x3b8>)
 80146fc:	f7eb fdec 	bl	80002d8 <__aeabi_dsub>
 8014700:	a355      	add	r3, pc, #340	; (adr r3, 8014858 <__ieee754_pow+0x388>)
 8014702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014706:	4604      	mov	r4, r0
 8014708:	460d      	mov	r5, r1
 801470a:	f7eb ff9d 	bl	8000648 <__aeabi_dmul>
 801470e:	a354      	add	r3, pc, #336	; (adr r3, 8014860 <__ieee754_pow+0x390>)
 8014710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014714:	4606      	mov	r6, r0
 8014716:	460f      	mov	r7, r1
 8014718:	4620      	mov	r0, r4
 801471a:	4629      	mov	r1, r5
 801471c:	f7eb ff94 	bl	8000648 <__aeabi_dmul>
 8014720:	2200      	movs	r2, #0
 8014722:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014726:	4b59      	ldr	r3, [pc, #356]	; (801488c <__ieee754_pow+0x3bc>)
 8014728:	4620      	mov	r0, r4
 801472a:	4629      	mov	r1, r5
 801472c:	f7eb ff8c 	bl	8000648 <__aeabi_dmul>
 8014730:	4602      	mov	r2, r0
 8014732:	460b      	mov	r3, r1
 8014734:	a14c      	add	r1, pc, #304	; (adr r1, 8014868 <__ieee754_pow+0x398>)
 8014736:	e9d1 0100 	ldrd	r0, r1, [r1]
 801473a:	f7eb fdcd 	bl	80002d8 <__aeabi_dsub>
 801473e:	4622      	mov	r2, r4
 8014740:	462b      	mov	r3, r5
 8014742:	f7eb ff81 	bl	8000648 <__aeabi_dmul>
 8014746:	4602      	mov	r2, r0
 8014748:	460b      	mov	r3, r1
 801474a:	2000      	movs	r0, #0
 801474c:	4950      	ldr	r1, [pc, #320]	; (8014890 <__ieee754_pow+0x3c0>)
 801474e:	f7eb fdc3 	bl	80002d8 <__aeabi_dsub>
 8014752:	4622      	mov	r2, r4
 8014754:	462b      	mov	r3, r5
 8014756:	4680      	mov	r8, r0
 8014758:	4689      	mov	r9, r1
 801475a:	4620      	mov	r0, r4
 801475c:	4629      	mov	r1, r5
 801475e:	f7eb ff73 	bl	8000648 <__aeabi_dmul>
 8014762:	4602      	mov	r2, r0
 8014764:	460b      	mov	r3, r1
 8014766:	4640      	mov	r0, r8
 8014768:	4649      	mov	r1, r9
 801476a:	f7eb ff6d 	bl	8000648 <__aeabi_dmul>
 801476e:	a340      	add	r3, pc, #256	; (adr r3, 8014870 <__ieee754_pow+0x3a0>)
 8014770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014774:	f7eb ff68 	bl	8000648 <__aeabi_dmul>
 8014778:	4602      	mov	r2, r0
 801477a:	460b      	mov	r3, r1
 801477c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014780:	f7eb fdaa 	bl	80002d8 <__aeabi_dsub>
 8014784:	4602      	mov	r2, r0
 8014786:	460b      	mov	r3, r1
 8014788:	4604      	mov	r4, r0
 801478a:	460d      	mov	r5, r1
 801478c:	4630      	mov	r0, r6
 801478e:	4639      	mov	r1, r7
 8014790:	f7eb fda4 	bl	80002dc <__adddf3>
 8014794:	2000      	movs	r0, #0
 8014796:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801479a:	4632      	mov	r2, r6
 801479c:	463b      	mov	r3, r7
 801479e:	f7eb fd9b 	bl	80002d8 <__aeabi_dsub>
 80147a2:	4602      	mov	r2, r0
 80147a4:	460b      	mov	r3, r1
 80147a6:	4620      	mov	r0, r4
 80147a8:	4629      	mov	r1, r5
 80147aa:	f7eb fd95 	bl	80002d8 <__aeabi_dsub>
 80147ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147b0:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80147b4:	4313      	orrs	r3, r2
 80147b6:	4606      	mov	r6, r0
 80147b8:	460f      	mov	r7, r1
 80147ba:	f040 81eb 	bne.w	8014b94 <__ieee754_pow+0x6c4>
 80147be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8014878 <__ieee754_pow+0x3a8>
 80147c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80147c6:	2400      	movs	r4, #0
 80147c8:	4622      	mov	r2, r4
 80147ca:	462b      	mov	r3, r5
 80147cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80147d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80147d4:	f7eb fd80 	bl	80002d8 <__aeabi_dsub>
 80147d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80147dc:	f7eb ff34 	bl	8000648 <__aeabi_dmul>
 80147e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80147e4:	4680      	mov	r8, r0
 80147e6:	4689      	mov	r9, r1
 80147e8:	4630      	mov	r0, r6
 80147ea:	4639      	mov	r1, r7
 80147ec:	f7eb ff2c 	bl	8000648 <__aeabi_dmul>
 80147f0:	4602      	mov	r2, r0
 80147f2:	460b      	mov	r3, r1
 80147f4:	4640      	mov	r0, r8
 80147f6:	4649      	mov	r1, r9
 80147f8:	f7eb fd70 	bl	80002dc <__adddf3>
 80147fc:	4622      	mov	r2, r4
 80147fe:	462b      	mov	r3, r5
 8014800:	4680      	mov	r8, r0
 8014802:	4689      	mov	r9, r1
 8014804:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014808:	f7eb ff1e 	bl	8000648 <__aeabi_dmul>
 801480c:	460b      	mov	r3, r1
 801480e:	4604      	mov	r4, r0
 8014810:	460d      	mov	r5, r1
 8014812:	4602      	mov	r2, r0
 8014814:	4649      	mov	r1, r9
 8014816:	4640      	mov	r0, r8
 8014818:	e9cd 4500 	strd	r4, r5, [sp]
 801481c:	f7eb fd5e 	bl	80002dc <__adddf3>
 8014820:	4b1c      	ldr	r3, [pc, #112]	; (8014894 <__ieee754_pow+0x3c4>)
 8014822:	4299      	cmp	r1, r3
 8014824:	4606      	mov	r6, r0
 8014826:	460f      	mov	r7, r1
 8014828:	468b      	mov	fp, r1
 801482a:	f340 82f7 	ble.w	8014e1c <__ieee754_pow+0x94c>
 801482e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014832:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014836:	4303      	orrs	r3, r0
 8014838:	f000 81ea 	beq.w	8014c10 <__ieee754_pow+0x740>
 801483c:	a310      	add	r3, pc, #64	; (adr r3, 8014880 <__ieee754_pow+0x3b0>)
 801483e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014842:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014846:	f7eb feff 	bl	8000648 <__aeabi_dmul>
 801484a:	a30d      	add	r3, pc, #52	; (adr r3, 8014880 <__ieee754_pow+0x3b0>)
 801484c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014850:	e6d5      	b.n	80145fe <__ieee754_pow+0x12e>
 8014852:	bf00      	nop
 8014854:	f3af 8000 	nop.w
 8014858:	60000000 	.word	0x60000000
 801485c:	3ff71547 	.word	0x3ff71547
 8014860:	f85ddf44 	.word	0xf85ddf44
 8014864:	3e54ae0b 	.word	0x3e54ae0b
 8014868:	55555555 	.word	0x55555555
 801486c:	3fd55555 	.word	0x3fd55555
 8014870:	652b82fe 	.word	0x652b82fe
 8014874:	3ff71547 	.word	0x3ff71547
 8014878:	00000000 	.word	0x00000000
 801487c:	bff00000 	.word	0xbff00000
 8014880:	8800759c 	.word	0x8800759c
 8014884:	7e37e43c 	.word	0x7e37e43c
 8014888:	3ff00000 	.word	0x3ff00000
 801488c:	3fd00000 	.word	0x3fd00000
 8014890:	3fe00000 	.word	0x3fe00000
 8014894:	408fffff 	.word	0x408fffff
 8014898:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801489c:	f04f 0200 	mov.w	r2, #0
 80148a0:	da05      	bge.n	80148ae <__ieee754_pow+0x3de>
 80148a2:	4bd3      	ldr	r3, [pc, #844]	; (8014bf0 <__ieee754_pow+0x720>)
 80148a4:	f7eb fed0 	bl	8000648 <__aeabi_dmul>
 80148a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80148ac:	460c      	mov	r4, r1
 80148ae:	1523      	asrs	r3, r4, #20
 80148b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80148b4:	4413      	add	r3, r2
 80148b6:	9309      	str	r3, [sp, #36]	; 0x24
 80148b8:	4bce      	ldr	r3, [pc, #824]	; (8014bf4 <__ieee754_pow+0x724>)
 80148ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80148be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80148c2:	429c      	cmp	r4, r3
 80148c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80148c8:	dd08      	ble.n	80148dc <__ieee754_pow+0x40c>
 80148ca:	4bcb      	ldr	r3, [pc, #812]	; (8014bf8 <__ieee754_pow+0x728>)
 80148cc:	429c      	cmp	r4, r3
 80148ce:	f340 815e 	ble.w	8014b8e <__ieee754_pow+0x6be>
 80148d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148d4:	3301      	adds	r3, #1
 80148d6:	9309      	str	r3, [sp, #36]	; 0x24
 80148d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80148dc:	f04f 0a00 	mov.w	sl, #0
 80148e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80148e4:	930c      	str	r3, [sp, #48]	; 0x30
 80148e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148e8:	4bc4      	ldr	r3, [pc, #784]	; (8014bfc <__ieee754_pow+0x72c>)
 80148ea:	4413      	add	r3, r2
 80148ec:	ed93 7b00 	vldr	d7, [r3]
 80148f0:	4629      	mov	r1, r5
 80148f2:	ec53 2b17 	vmov	r2, r3, d7
 80148f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80148fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80148fe:	f7eb fceb 	bl	80002d8 <__aeabi_dsub>
 8014902:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014906:	4606      	mov	r6, r0
 8014908:	460f      	mov	r7, r1
 801490a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801490e:	f7eb fce5 	bl	80002dc <__adddf3>
 8014912:	4602      	mov	r2, r0
 8014914:	460b      	mov	r3, r1
 8014916:	2000      	movs	r0, #0
 8014918:	49b9      	ldr	r1, [pc, #740]	; (8014c00 <__ieee754_pow+0x730>)
 801491a:	f7eb ffbf 	bl	800089c <__aeabi_ddiv>
 801491e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8014922:	4602      	mov	r2, r0
 8014924:	460b      	mov	r3, r1
 8014926:	4630      	mov	r0, r6
 8014928:	4639      	mov	r1, r7
 801492a:	f7eb fe8d 	bl	8000648 <__aeabi_dmul>
 801492e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014932:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8014936:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801493a:	2300      	movs	r3, #0
 801493c:	9302      	str	r3, [sp, #8]
 801493e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014942:	106d      	asrs	r5, r5, #1
 8014944:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014948:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801494c:	2200      	movs	r2, #0
 801494e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8014952:	4640      	mov	r0, r8
 8014954:	4649      	mov	r1, r9
 8014956:	4614      	mov	r4, r2
 8014958:	461d      	mov	r5, r3
 801495a:	f7eb fe75 	bl	8000648 <__aeabi_dmul>
 801495e:	4602      	mov	r2, r0
 8014960:	460b      	mov	r3, r1
 8014962:	4630      	mov	r0, r6
 8014964:	4639      	mov	r1, r7
 8014966:	f7eb fcb7 	bl	80002d8 <__aeabi_dsub>
 801496a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801496e:	4606      	mov	r6, r0
 8014970:	460f      	mov	r7, r1
 8014972:	4620      	mov	r0, r4
 8014974:	4629      	mov	r1, r5
 8014976:	f7eb fcaf 	bl	80002d8 <__aeabi_dsub>
 801497a:	4602      	mov	r2, r0
 801497c:	460b      	mov	r3, r1
 801497e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8014982:	f7eb fca9 	bl	80002d8 <__aeabi_dsub>
 8014986:	4642      	mov	r2, r8
 8014988:	464b      	mov	r3, r9
 801498a:	f7eb fe5d 	bl	8000648 <__aeabi_dmul>
 801498e:	4602      	mov	r2, r0
 8014990:	460b      	mov	r3, r1
 8014992:	4630      	mov	r0, r6
 8014994:	4639      	mov	r1, r7
 8014996:	f7eb fc9f 	bl	80002d8 <__aeabi_dsub>
 801499a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801499e:	f7eb fe53 	bl	8000648 <__aeabi_dmul>
 80149a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80149aa:	4610      	mov	r0, r2
 80149ac:	4619      	mov	r1, r3
 80149ae:	f7eb fe4b 	bl	8000648 <__aeabi_dmul>
 80149b2:	a37b      	add	r3, pc, #492	; (adr r3, 8014ba0 <__ieee754_pow+0x6d0>)
 80149b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149b8:	4604      	mov	r4, r0
 80149ba:	460d      	mov	r5, r1
 80149bc:	f7eb fe44 	bl	8000648 <__aeabi_dmul>
 80149c0:	a379      	add	r3, pc, #484	; (adr r3, 8014ba8 <__ieee754_pow+0x6d8>)
 80149c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149c6:	f7eb fc89 	bl	80002dc <__adddf3>
 80149ca:	4622      	mov	r2, r4
 80149cc:	462b      	mov	r3, r5
 80149ce:	f7eb fe3b 	bl	8000648 <__aeabi_dmul>
 80149d2:	a377      	add	r3, pc, #476	; (adr r3, 8014bb0 <__ieee754_pow+0x6e0>)
 80149d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d8:	f7eb fc80 	bl	80002dc <__adddf3>
 80149dc:	4622      	mov	r2, r4
 80149de:	462b      	mov	r3, r5
 80149e0:	f7eb fe32 	bl	8000648 <__aeabi_dmul>
 80149e4:	a374      	add	r3, pc, #464	; (adr r3, 8014bb8 <__ieee754_pow+0x6e8>)
 80149e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ea:	f7eb fc77 	bl	80002dc <__adddf3>
 80149ee:	4622      	mov	r2, r4
 80149f0:	462b      	mov	r3, r5
 80149f2:	f7eb fe29 	bl	8000648 <__aeabi_dmul>
 80149f6:	a372      	add	r3, pc, #456	; (adr r3, 8014bc0 <__ieee754_pow+0x6f0>)
 80149f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fc:	f7eb fc6e 	bl	80002dc <__adddf3>
 8014a00:	4622      	mov	r2, r4
 8014a02:	462b      	mov	r3, r5
 8014a04:	f7eb fe20 	bl	8000648 <__aeabi_dmul>
 8014a08:	a36f      	add	r3, pc, #444	; (adr r3, 8014bc8 <__ieee754_pow+0x6f8>)
 8014a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a0e:	f7eb fc65 	bl	80002dc <__adddf3>
 8014a12:	4622      	mov	r2, r4
 8014a14:	4606      	mov	r6, r0
 8014a16:	460f      	mov	r7, r1
 8014a18:	462b      	mov	r3, r5
 8014a1a:	4620      	mov	r0, r4
 8014a1c:	4629      	mov	r1, r5
 8014a1e:	f7eb fe13 	bl	8000648 <__aeabi_dmul>
 8014a22:	4602      	mov	r2, r0
 8014a24:	460b      	mov	r3, r1
 8014a26:	4630      	mov	r0, r6
 8014a28:	4639      	mov	r1, r7
 8014a2a:	f7eb fe0d 	bl	8000648 <__aeabi_dmul>
 8014a2e:	4642      	mov	r2, r8
 8014a30:	4604      	mov	r4, r0
 8014a32:	460d      	mov	r5, r1
 8014a34:	464b      	mov	r3, r9
 8014a36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a3a:	f7eb fc4f 	bl	80002dc <__adddf3>
 8014a3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014a42:	f7eb fe01 	bl	8000648 <__aeabi_dmul>
 8014a46:	4622      	mov	r2, r4
 8014a48:	462b      	mov	r3, r5
 8014a4a:	f7eb fc47 	bl	80002dc <__adddf3>
 8014a4e:	4642      	mov	r2, r8
 8014a50:	4606      	mov	r6, r0
 8014a52:	460f      	mov	r7, r1
 8014a54:	464b      	mov	r3, r9
 8014a56:	4640      	mov	r0, r8
 8014a58:	4649      	mov	r1, r9
 8014a5a:	f7eb fdf5 	bl	8000648 <__aeabi_dmul>
 8014a5e:	2200      	movs	r2, #0
 8014a60:	4b68      	ldr	r3, [pc, #416]	; (8014c04 <__ieee754_pow+0x734>)
 8014a62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014a66:	f7eb fc39 	bl	80002dc <__adddf3>
 8014a6a:	4632      	mov	r2, r6
 8014a6c:	463b      	mov	r3, r7
 8014a6e:	f7eb fc35 	bl	80002dc <__adddf3>
 8014a72:	9802      	ldr	r0, [sp, #8]
 8014a74:	460d      	mov	r5, r1
 8014a76:	4604      	mov	r4, r0
 8014a78:	4602      	mov	r2, r0
 8014a7a:	460b      	mov	r3, r1
 8014a7c:	4640      	mov	r0, r8
 8014a7e:	4649      	mov	r1, r9
 8014a80:	f7eb fde2 	bl	8000648 <__aeabi_dmul>
 8014a84:	2200      	movs	r2, #0
 8014a86:	4680      	mov	r8, r0
 8014a88:	4689      	mov	r9, r1
 8014a8a:	4b5e      	ldr	r3, [pc, #376]	; (8014c04 <__ieee754_pow+0x734>)
 8014a8c:	4620      	mov	r0, r4
 8014a8e:	4629      	mov	r1, r5
 8014a90:	f7eb fc22 	bl	80002d8 <__aeabi_dsub>
 8014a94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014a98:	f7eb fc1e 	bl	80002d8 <__aeabi_dsub>
 8014a9c:	4602      	mov	r2, r0
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	4630      	mov	r0, r6
 8014aa2:	4639      	mov	r1, r7
 8014aa4:	f7eb fc18 	bl	80002d8 <__aeabi_dsub>
 8014aa8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014aac:	f7eb fdcc 	bl	8000648 <__aeabi_dmul>
 8014ab0:	4622      	mov	r2, r4
 8014ab2:	4606      	mov	r6, r0
 8014ab4:	460f      	mov	r7, r1
 8014ab6:	462b      	mov	r3, r5
 8014ab8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014abc:	f7eb fdc4 	bl	8000648 <__aeabi_dmul>
 8014ac0:	4602      	mov	r2, r0
 8014ac2:	460b      	mov	r3, r1
 8014ac4:	4630      	mov	r0, r6
 8014ac6:	4639      	mov	r1, r7
 8014ac8:	f7eb fc08 	bl	80002dc <__adddf3>
 8014acc:	4606      	mov	r6, r0
 8014ace:	460f      	mov	r7, r1
 8014ad0:	4602      	mov	r2, r0
 8014ad2:	460b      	mov	r3, r1
 8014ad4:	4640      	mov	r0, r8
 8014ad6:	4649      	mov	r1, r9
 8014ad8:	f7eb fc00 	bl	80002dc <__adddf3>
 8014adc:	9802      	ldr	r0, [sp, #8]
 8014ade:	a33c      	add	r3, pc, #240	; (adr r3, 8014bd0 <__ieee754_pow+0x700>)
 8014ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae4:	4604      	mov	r4, r0
 8014ae6:	460d      	mov	r5, r1
 8014ae8:	f7eb fdae 	bl	8000648 <__aeabi_dmul>
 8014aec:	4642      	mov	r2, r8
 8014aee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014af2:	464b      	mov	r3, r9
 8014af4:	4620      	mov	r0, r4
 8014af6:	4629      	mov	r1, r5
 8014af8:	f7eb fbee 	bl	80002d8 <__aeabi_dsub>
 8014afc:	4602      	mov	r2, r0
 8014afe:	460b      	mov	r3, r1
 8014b00:	4630      	mov	r0, r6
 8014b02:	4639      	mov	r1, r7
 8014b04:	f7eb fbe8 	bl	80002d8 <__aeabi_dsub>
 8014b08:	a333      	add	r3, pc, #204	; (adr r3, 8014bd8 <__ieee754_pow+0x708>)
 8014b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0e:	f7eb fd9b 	bl	8000648 <__aeabi_dmul>
 8014b12:	a333      	add	r3, pc, #204	; (adr r3, 8014be0 <__ieee754_pow+0x710>)
 8014b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b18:	4606      	mov	r6, r0
 8014b1a:	460f      	mov	r7, r1
 8014b1c:	4620      	mov	r0, r4
 8014b1e:	4629      	mov	r1, r5
 8014b20:	f7eb fd92 	bl	8000648 <__aeabi_dmul>
 8014b24:	4602      	mov	r2, r0
 8014b26:	460b      	mov	r3, r1
 8014b28:	4630      	mov	r0, r6
 8014b2a:	4639      	mov	r1, r7
 8014b2c:	f7eb fbd6 	bl	80002dc <__adddf3>
 8014b30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b32:	4b35      	ldr	r3, [pc, #212]	; (8014c08 <__ieee754_pow+0x738>)
 8014b34:	4413      	add	r3, r2
 8014b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b3a:	f7eb fbcf 	bl	80002dc <__adddf3>
 8014b3e:	4604      	mov	r4, r0
 8014b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b42:	460d      	mov	r5, r1
 8014b44:	f7eb fd16 	bl	8000574 <__aeabi_i2d>
 8014b48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b4a:	4b30      	ldr	r3, [pc, #192]	; (8014c0c <__ieee754_pow+0x73c>)
 8014b4c:	4413      	add	r3, r2
 8014b4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014b52:	4606      	mov	r6, r0
 8014b54:	460f      	mov	r7, r1
 8014b56:	4622      	mov	r2, r4
 8014b58:	462b      	mov	r3, r5
 8014b5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b5e:	f7eb fbbd 	bl	80002dc <__adddf3>
 8014b62:	4642      	mov	r2, r8
 8014b64:	464b      	mov	r3, r9
 8014b66:	f7eb fbb9 	bl	80002dc <__adddf3>
 8014b6a:	4632      	mov	r2, r6
 8014b6c:	463b      	mov	r3, r7
 8014b6e:	f7eb fbb5 	bl	80002dc <__adddf3>
 8014b72:	9802      	ldr	r0, [sp, #8]
 8014b74:	4632      	mov	r2, r6
 8014b76:	463b      	mov	r3, r7
 8014b78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b7c:	f7eb fbac 	bl	80002d8 <__aeabi_dsub>
 8014b80:	4642      	mov	r2, r8
 8014b82:	464b      	mov	r3, r9
 8014b84:	f7eb fba8 	bl	80002d8 <__aeabi_dsub>
 8014b88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014b8c:	e607      	b.n	801479e <__ieee754_pow+0x2ce>
 8014b8e:	f04f 0a01 	mov.w	sl, #1
 8014b92:	e6a5      	b.n	80148e0 <__ieee754_pow+0x410>
 8014b94:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014be8 <__ieee754_pow+0x718>
 8014b98:	e613      	b.n	80147c2 <__ieee754_pow+0x2f2>
 8014b9a:	bf00      	nop
 8014b9c:	f3af 8000 	nop.w
 8014ba0:	4a454eef 	.word	0x4a454eef
 8014ba4:	3fca7e28 	.word	0x3fca7e28
 8014ba8:	93c9db65 	.word	0x93c9db65
 8014bac:	3fcd864a 	.word	0x3fcd864a
 8014bb0:	a91d4101 	.word	0xa91d4101
 8014bb4:	3fd17460 	.word	0x3fd17460
 8014bb8:	518f264d 	.word	0x518f264d
 8014bbc:	3fd55555 	.word	0x3fd55555
 8014bc0:	db6fabff 	.word	0xdb6fabff
 8014bc4:	3fdb6db6 	.word	0x3fdb6db6
 8014bc8:	33333303 	.word	0x33333303
 8014bcc:	3fe33333 	.word	0x3fe33333
 8014bd0:	e0000000 	.word	0xe0000000
 8014bd4:	3feec709 	.word	0x3feec709
 8014bd8:	dc3a03fd 	.word	0xdc3a03fd
 8014bdc:	3feec709 	.word	0x3feec709
 8014be0:	145b01f5 	.word	0x145b01f5
 8014be4:	be3e2fe0 	.word	0xbe3e2fe0
 8014be8:	00000000 	.word	0x00000000
 8014bec:	3ff00000 	.word	0x3ff00000
 8014bf0:	43400000 	.word	0x43400000
 8014bf4:	0003988e 	.word	0x0003988e
 8014bf8:	000bb679 	.word	0x000bb679
 8014bfc:	08016a40 	.word	0x08016a40
 8014c00:	3ff00000 	.word	0x3ff00000
 8014c04:	40080000 	.word	0x40080000
 8014c08:	08016a60 	.word	0x08016a60
 8014c0c:	08016a50 	.word	0x08016a50
 8014c10:	a3b4      	add	r3, pc, #720	; (adr r3, 8014ee4 <__ieee754_pow+0xa14>)
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	4640      	mov	r0, r8
 8014c18:	4649      	mov	r1, r9
 8014c1a:	f7eb fb5f 	bl	80002dc <__adddf3>
 8014c1e:	4622      	mov	r2, r4
 8014c20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c24:	462b      	mov	r3, r5
 8014c26:	4630      	mov	r0, r6
 8014c28:	4639      	mov	r1, r7
 8014c2a:	f7eb fb55 	bl	80002d8 <__aeabi_dsub>
 8014c2e:	4602      	mov	r2, r0
 8014c30:	460b      	mov	r3, r1
 8014c32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c36:	f7eb ff97 	bl	8000b68 <__aeabi_dcmpgt>
 8014c3a:	2800      	cmp	r0, #0
 8014c3c:	f47f adfe 	bne.w	801483c <__ieee754_pow+0x36c>
 8014c40:	4aa3      	ldr	r2, [pc, #652]	; (8014ed0 <__ieee754_pow+0xa00>)
 8014c42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014c46:	4293      	cmp	r3, r2
 8014c48:	f340 810a 	ble.w	8014e60 <__ieee754_pow+0x990>
 8014c4c:	151b      	asrs	r3, r3, #20
 8014c4e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014c52:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014c56:	fa4a f303 	asr.w	r3, sl, r3
 8014c5a:	445b      	add	r3, fp
 8014c5c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014c60:	4e9c      	ldr	r6, [pc, #624]	; (8014ed4 <__ieee754_pow+0xa04>)
 8014c62:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014c66:	4116      	asrs	r6, r2
 8014c68:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014c6c:	2000      	movs	r0, #0
 8014c6e:	ea23 0106 	bic.w	r1, r3, r6
 8014c72:	f1c2 0214 	rsb	r2, r2, #20
 8014c76:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014c7a:	fa4a fa02 	asr.w	sl, sl, r2
 8014c7e:	f1bb 0f00 	cmp.w	fp, #0
 8014c82:	4602      	mov	r2, r0
 8014c84:	460b      	mov	r3, r1
 8014c86:	4620      	mov	r0, r4
 8014c88:	4629      	mov	r1, r5
 8014c8a:	bfb8      	it	lt
 8014c8c:	f1ca 0a00 	rsblt	sl, sl, #0
 8014c90:	f7eb fb22 	bl	80002d8 <__aeabi_dsub>
 8014c94:	e9cd 0100 	strd	r0, r1, [sp]
 8014c98:	4642      	mov	r2, r8
 8014c9a:	464b      	mov	r3, r9
 8014c9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ca0:	f7eb fb1c 	bl	80002dc <__adddf3>
 8014ca4:	2000      	movs	r0, #0
 8014ca6:	a378      	add	r3, pc, #480	; (adr r3, 8014e88 <__ieee754_pow+0x9b8>)
 8014ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cac:	4604      	mov	r4, r0
 8014cae:	460d      	mov	r5, r1
 8014cb0:	f7eb fcca 	bl	8000648 <__aeabi_dmul>
 8014cb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cb8:	4606      	mov	r6, r0
 8014cba:	460f      	mov	r7, r1
 8014cbc:	4620      	mov	r0, r4
 8014cbe:	4629      	mov	r1, r5
 8014cc0:	f7eb fb0a 	bl	80002d8 <__aeabi_dsub>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	460b      	mov	r3, r1
 8014cc8:	4640      	mov	r0, r8
 8014cca:	4649      	mov	r1, r9
 8014ccc:	f7eb fb04 	bl	80002d8 <__aeabi_dsub>
 8014cd0:	a36f      	add	r3, pc, #444	; (adr r3, 8014e90 <__ieee754_pow+0x9c0>)
 8014cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cd6:	f7eb fcb7 	bl	8000648 <__aeabi_dmul>
 8014cda:	a36f      	add	r3, pc, #444	; (adr r3, 8014e98 <__ieee754_pow+0x9c8>)
 8014cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce0:	4680      	mov	r8, r0
 8014ce2:	4689      	mov	r9, r1
 8014ce4:	4620      	mov	r0, r4
 8014ce6:	4629      	mov	r1, r5
 8014ce8:	f7eb fcae 	bl	8000648 <__aeabi_dmul>
 8014cec:	4602      	mov	r2, r0
 8014cee:	460b      	mov	r3, r1
 8014cf0:	4640      	mov	r0, r8
 8014cf2:	4649      	mov	r1, r9
 8014cf4:	f7eb faf2 	bl	80002dc <__adddf3>
 8014cf8:	4604      	mov	r4, r0
 8014cfa:	460d      	mov	r5, r1
 8014cfc:	4602      	mov	r2, r0
 8014cfe:	460b      	mov	r3, r1
 8014d00:	4630      	mov	r0, r6
 8014d02:	4639      	mov	r1, r7
 8014d04:	f7eb faea 	bl	80002dc <__adddf3>
 8014d08:	4632      	mov	r2, r6
 8014d0a:	463b      	mov	r3, r7
 8014d0c:	4680      	mov	r8, r0
 8014d0e:	4689      	mov	r9, r1
 8014d10:	f7eb fae2 	bl	80002d8 <__aeabi_dsub>
 8014d14:	4602      	mov	r2, r0
 8014d16:	460b      	mov	r3, r1
 8014d18:	4620      	mov	r0, r4
 8014d1a:	4629      	mov	r1, r5
 8014d1c:	f7eb fadc 	bl	80002d8 <__aeabi_dsub>
 8014d20:	4642      	mov	r2, r8
 8014d22:	4606      	mov	r6, r0
 8014d24:	460f      	mov	r7, r1
 8014d26:	464b      	mov	r3, r9
 8014d28:	4640      	mov	r0, r8
 8014d2a:	4649      	mov	r1, r9
 8014d2c:	f7eb fc8c 	bl	8000648 <__aeabi_dmul>
 8014d30:	a35b      	add	r3, pc, #364	; (adr r3, 8014ea0 <__ieee754_pow+0x9d0>)
 8014d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d36:	4604      	mov	r4, r0
 8014d38:	460d      	mov	r5, r1
 8014d3a:	f7eb fc85 	bl	8000648 <__aeabi_dmul>
 8014d3e:	a35a      	add	r3, pc, #360	; (adr r3, 8014ea8 <__ieee754_pow+0x9d8>)
 8014d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d44:	f7eb fac8 	bl	80002d8 <__aeabi_dsub>
 8014d48:	4622      	mov	r2, r4
 8014d4a:	462b      	mov	r3, r5
 8014d4c:	f7eb fc7c 	bl	8000648 <__aeabi_dmul>
 8014d50:	a357      	add	r3, pc, #348	; (adr r3, 8014eb0 <__ieee754_pow+0x9e0>)
 8014d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d56:	f7eb fac1 	bl	80002dc <__adddf3>
 8014d5a:	4622      	mov	r2, r4
 8014d5c:	462b      	mov	r3, r5
 8014d5e:	f7eb fc73 	bl	8000648 <__aeabi_dmul>
 8014d62:	a355      	add	r3, pc, #340	; (adr r3, 8014eb8 <__ieee754_pow+0x9e8>)
 8014d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d68:	f7eb fab6 	bl	80002d8 <__aeabi_dsub>
 8014d6c:	4622      	mov	r2, r4
 8014d6e:	462b      	mov	r3, r5
 8014d70:	f7eb fc6a 	bl	8000648 <__aeabi_dmul>
 8014d74:	a352      	add	r3, pc, #328	; (adr r3, 8014ec0 <__ieee754_pow+0x9f0>)
 8014d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d7a:	f7eb faaf 	bl	80002dc <__adddf3>
 8014d7e:	4622      	mov	r2, r4
 8014d80:	462b      	mov	r3, r5
 8014d82:	f7eb fc61 	bl	8000648 <__aeabi_dmul>
 8014d86:	4602      	mov	r2, r0
 8014d88:	460b      	mov	r3, r1
 8014d8a:	4640      	mov	r0, r8
 8014d8c:	4649      	mov	r1, r9
 8014d8e:	f7eb faa3 	bl	80002d8 <__aeabi_dsub>
 8014d92:	4604      	mov	r4, r0
 8014d94:	460d      	mov	r5, r1
 8014d96:	4602      	mov	r2, r0
 8014d98:	460b      	mov	r3, r1
 8014d9a:	4640      	mov	r0, r8
 8014d9c:	4649      	mov	r1, r9
 8014d9e:	f7eb fc53 	bl	8000648 <__aeabi_dmul>
 8014da2:	2200      	movs	r2, #0
 8014da4:	e9cd 0100 	strd	r0, r1, [sp]
 8014da8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014dac:	4620      	mov	r0, r4
 8014dae:	4629      	mov	r1, r5
 8014db0:	f7eb fa92 	bl	80002d8 <__aeabi_dsub>
 8014db4:	4602      	mov	r2, r0
 8014db6:	460b      	mov	r3, r1
 8014db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014dbc:	f7eb fd6e 	bl	800089c <__aeabi_ddiv>
 8014dc0:	4632      	mov	r2, r6
 8014dc2:	4604      	mov	r4, r0
 8014dc4:	460d      	mov	r5, r1
 8014dc6:	463b      	mov	r3, r7
 8014dc8:	4640      	mov	r0, r8
 8014dca:	4649      	mov	r1, r9
 8014dcc:	f7eb fc3c 	bl	8000648 <__aeabi_dmul>
 8014dd0:	4632      	mov	r2, r6
 8014dd2:	463b      	mov	r3, r7
 8014dd4:	f7eb fa82 	bl	80002dc <__adddf3>
 8014dd8:	4602      	mov	r2, r0
 8014dda:	460b      	mov	r3, r1
 8014ddc:	4620      	mov	r0, r4
 8014dde:	4629      	mov	r1, r5
 8014de0:	f7eb fa7a 	bl	80002d8 <__aeabi_dsub>
 8014de4:	4642      	mov	r2, r8
 8014de6:	464b      	mov	r3, r9
 8014de8:	f7eb fa76 	bl	80002d8 <__aeabi_dsub>
 8014dec:	4602      	mov	r2, r0
 8014dee:	460b      	mov	r3, r1
 8014df0:	2000      	movs	r0, #0
 8014df2:	4939      	ldr	r1, [pc, #228]	; (8014ed8 <__ieee754_pow+0xa08>)
 8014df4:	f7eb fa70 	bl	80002d8 <__aeabi_dsub>
 8014df8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014dfc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014e00:	4602      	mov	r2, r0
 8014e02:	460b      	mov	r3, r1
 8014e04:	da2f      	bge.n	8014e66 <__ieee754_pow+0x996>
 8014e06:	4650      	mov	r0, sl
 8014e08:	ec43 2b10 	vmov	d0, r2, r3
 8014e0c:	f000 f9c0 	bl	8015190 <scalbn>
 8014e10:	ec51 0b10 	vmov	r0, r1, d0
 8014e14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e18:	f7ff bbf1 	b.w	80145fe <__ieee754_pow+0x12e>
 8014e1c:	4b2f      	ldr	r3, [pc, #188]	; (8014edc <__ieee754_pow+0xa0c>)
 8014e1e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014e22:	429e      	cmp	r6, r3
 8014e24:	f77f af0c 	ble.w	8014c40 <__ieee754_pow+0x770>
 8014e28:	4b2d      	ldr	r3, [pc, #180]	; (8014ee0 <__ieee754_pow+0xa10>)
 8014e2a:	440b      	add	r3, r1
 8014e2c:	4303      	orrs	r3, r0
 8014e2e:	d00b      	beq.n	8014e48 <__ieee754_pow+0x978>
 8014e30:	a325      	add	r3, pc, #148	; (adr r3, 8014ec8 <__ieee754_pow+0x9f8>)
 8014e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e3a:	f7eb fc05 	bl	8000648 <__aeabi_dmul>
 8014e3e:	a322      	add	r3, pc, #136	; (adr r3, 8014ec8 <__ieee754_pow+0x9f8>)
 8014e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e44:	f7ff bbdb 	b.w	80145fe <__ieee754_pow+0x12e>
 8014e48:	4622      	mov	r2, r4
 8014e4a:	462b      	mov	r3, r5
 8014e4c:	f7eb fa44 	bl	80002d8 <__aeabi_dsub>
 8014e50:	4642      	mov	r2, r8
 8014e52:	464b      	mov	r3, r9
 8014e54:	f7eb fe7e 	bl	8000b54 <__aeabi_dcmpge>
 8014e58:	2800      	cmp	r0, #0
 8014e5a:	f43f aef1 	beq.w	8014c40 <__ieee754_pow+0x770>
 8014e5e:	e7e7      	b.n	8014e30 <__ieee754_pow+0x960>
 8014e60:	f04f 0a00 	mov.w	sl, #0
 8014e64:	e718      	b.n	8014c98 <__ieee754_pow+0x7c8>
 8014e66:	4621      	mov	r1, r4
 8014e68:	e7d4      	b.n	8014e14 <__ieee754_pow+0x944>
 8014e6a:	2000      	movs	r0, #0
 8014e6c:	491a      	ldr	r1, [pc, #104]	; (8014ed8 <__ieee754_pow+0xa08>)
 8014e6e:	f7ff bb8f 	b.w	8014590 <__ieee754_pow+0xc0>
 8014e72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e76:	f7ff bb8b 	b.w	8014590 <__ieee754_pow+0xc0>
 8014e7a:	4630      	mov	r0, r6
 8014e7c:	4639      	mov	r1, r7
 8014e7e:	f7ff bb87 	b.w	8014590 <__ieee754_pow+0xc0>
 8014e82:	4693      	mov	fp, r2
 8014e84:	f7ff bb98 	b.w	80145b8 <__ieee754_pow+0xe8>
 8014e88:	00000000 	.word	0x00000000
 8014e8c:	3fe62e43 	.word	0x3fe62e43
 8014e90:	fefa39ef 	.word	0xfefa39ef
 8014e94:	3fe62e42 	.word	0x3fe62e42
 8014e98:	0ca86c39 	.word	0x0ca86c39
 8014e9c:	be205c61 	.word	0xbe205c61
 8014ea0:	72bea4d0 	.word	0x72bea4d0
 8014ea4:	3e663769 	.word	0x3e663769
 8014ea8:	c5d26bf1 	.word	0xc5d26bf1
 8014eac:	3ebbbd41 	.word	0x3ebbbd41
 8014eb0:	af25de2c 	.word	0xaf25de2c
 8014eb4:	3f11566a 	.word	0x3f11566a
 8014eb8:	16bebd93 	.word	0x16bebd93
 8014ebc:	3f66c16c 	.word	0x3f66c16c
 8014ec0:	5555553e 	.word	0x5555553e
 8014ec4:	3fc55555 	.word	0x3fc55555
 8014ec8:	c2f8f359 	.word	0xc2f8f359
 8014ecc:	01a56e1f 	.word	0x01a56e1f
 8014ed0:	3fe00000 	.word	0x3fe00000
 8014ed4:	000fffff 	.word	0x000fffff
 8014ed8:	3ff00000 	.word	0x3ff00000
 8014edc:	4090cbff 	.word	0x4090cbff
 8014ee0:	3f6f3400 	.word	0x3f6f3400
 8014ee4:	652b82fe 	.word	0x652b82fe
 8014ee8:	3c971547 	.word	0x3c971547

08014eec <__ieee754_sqrt>:
 8014eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ef0:	4955      	ldr	r1, [pc, #340]	; (8015048 <__ieee754_sqrt+0x15c>)
 8014ef2:	ec55 4b10 	vmov	r4, r5, d0
 8014ef6:	43a9      	bics	r1, r5
 8014ef8:	462b      	mov	r3, r5
 8014efa:	462a      	mov	r2, r5
 8014efc:	d112      	bne.n	8014f24 <__ieee754_sqrt+0x38>
 8014efe:	ee10 2a10 	vmov	r2, s0
 8014f02:	ee10 0a10 	vmov	r0, s0
 8014f06:	4629      	mov	r1, r5
 8014f08:	f7eb fb9e 	bl	8000648 <__aeabi_dmul>
 8014f0c:	4602      	mov	r2, r0
 8014f0e:	460b      	mov	r3, r1
 8014f10:	4620      	mov	r0, r4
 8014f12:	4629      	mov	r1, r5
 8014f14:	f7eb f9e2 	bl	80002dc <__adddf3>
 8014f18:	4604      	mov	r4, r0
 8014f1a:	460d      	mov	r5, r1
 8014f1c:	ec45 4b10 	vmov	d0, r4, r5
 8014f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f24:	2d00      	cmp	r5, #0
 8014f26:	ee10 0a10 	vmov	r0, s0
 8014f2a:	4621      	mov	r1, r4
 8014f2c:	dc0f      	bgt.n	8014f4e <__ieee754_sqrt+0x62>
 8014f2e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014f32:	4330      	orrs	r0, r6
 8014f34:	d0f2      	beq.n	8014f1c <__ieee754_sqrt+0x30>
 8014f36:	b155      	cbz	r5, 8014f4e <__ieee754_sqrt+0x62>
 8014f38:	ee10 2a10 	vmov	r2, s0
 8014f3c:	4620      	mov	r0, r4
 8014f3e:	4629      	mov	r1, r5
 8014f40:	f7eb f9ca 	bl	80002d8 <__aeabi_dsub>
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
 8014f48:	f7eb fca8 	bl	800089c <__aeabi_ddiv>
 8014f4c:	e7e4      	b.n	8014f18 <__ieee754_sqrt+0x2c>
 8014f4e:	151b      	asrs	r3, r3, #20
 8014f50:	d073      	beq.n	801503a <__ieee754_sqrt+0x14e>
 8014f52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014f56:	07dd      	lsls	r5, r3, #31
 8014f58:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014f5c:	bf48      	it	mi
 8014f5e:	0fc8      	lsrmi	r0, r1, #31
 8014f60:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014f64:	bf44      	itt	mi
 8014f66:	0049      	lslmi	r1, r1, #1
 8014f68:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8014f6c:	2500      	movs	r5, #0
 8014f6e:	1058      	asrs	r0, r3, #1
 8014f70:	0fcb      	lsrs	r3, r1, #31
 8014f72:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014f76:	0049      	lsls	r1, r1, #1
 8014f78:	2316      	movs	r3, #22
 8014f7a:	462c      	mov	r4, r5
 8014f7c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014f80:	19a7      	adds	r7, r4, r6
 8014f82:	4297      	cmp	r7, r2
 8014f84:	bfde      	ittt	le
 8014f86:	19bc      	addle	r4, r7, r6
 8014f88:	1bd2      	suble	r2, r2, r7
 8014f8a:	19ad      	addle	r5, r5, r6
 8014f8c:	0fcf      	lsrs	r7, r1, #31
 8014f8e:	3b01      	subs	r3, #1
 8014f90:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014f94:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014f98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014f9c:	d1f0      	bne.n	8014f80 <__ieee754_sqrt+0x94>
 8014f9e:	f04f 0c20 	mov.w	ip, #32
 8014fa2:	469e      	mov	lr, r3
 8014fa4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014fa8:	42a2      	cmp	r2, r4
 8014faa:	eb06 070e 	add.w	r7, r6, lr
 8014fae:	dc02      	bgt.n	8014fb6 <__ieee754_sqrt+0xca>
 8014fb0:	d112      	bne.n	8014fd8 <__ieee754_sqrt+0xec>
 8014fb2:	428f      	cmp	r7, r1
 8014fb4:	d810      	bhi.n	8014fd8 <__ieee754_sqrt+0xec>
 8014fb6:	2f00      	cmp	r7, #0
 8014fb8:	eb07 0e06 	add.w	lr, r7, r6
 8014fbc:	da42      	bge.n	8015044 <__ieee754_sqrt+0x158>
 8014fbe:	f1be 0f00 	cmp.w	lr, #0
 8014fc2:	db3f      	blt.n	8015044 <__ieee754_sqrt+0x158>
 8014fc4:	f104 0801 	add.w	r8, r4, #1
 8014fc8:	1b12      	subs	r2, r2, r4
 8014fca:	428f      	cmp	r7, r1
 8014fcc:	bf88      	it	hi
 8014fce:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8014fd2:	1bc9      	subs	r1, r1, r7
 8014fd4:	4433      	add	r3, r6
 8014fd6:	4644      	mov	r4, r8
 8014fd8:	0052      	lsls	r2, r2, #1
 8014fda:	f1bc 0c01 	subs.w	ip, ip, #1
 8014fde:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014fe2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014fe6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014fea:	d1dd      	bne.n	8014fa8 <__ieee754_sqrt+0xbc>
 8014fec:	430a      	orrs	r2, r1
 8014fee:	d006      	beq.n	8014ffe <__ieee754_sqrt+0x112>
 8014ff0:	1c5c      	adds	r4, r3, #1
 8014ff2:	bf13      	iteet	ne
 8014ff4:	3301      	addne	r3, #1
 8014ff6:	3501      	addeq	r5, #1
 8014ff8:	4663      	moveq	r3, ip
 8014ffa:	f023 0301 	bicne.w	r3, r3, #1
 8014ffe:	106a      	asrs	r2, r5, #1
 8015000:	085b      	lsrs	r3, r3, #1
 8015002:	07e9      	lsls	r1, r5, #31
 8015004:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015008:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801500c:	bf48      	it	mi
 801500e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015012:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015016:	461c      	mov	r4, r3
 8015018:	e780      	b.n	8014f1c <__ieee754_sqrt+0x30>
 801501a:	0aca      	lsrs	r2, r1, #11
 801501c:	3815      	subs	r0, #21
 801501e:	0549      	lsls	r1, r1, #21
 8015020:	2a00      	cmp	r2, #0
 8015022:	d0fa      	beq.n	801501a <__ieee754_sqrt+0x12e>
 8015024:	02d6      	lsls	r6, r2, #11
 8015026:	d50a      	bpl.n	801503e <__ieee754_sqrt+0x152>
 8015028:	f1c3 0420 	rsb	r4, r3, #32
 801502c:	fa21 f404 	lsr.w	r4, r1, r4
 8015030:	1e5d      	subs	r5, r3, #1
 8015032:	4099      	lsls	r1, r3
 8015034:	4322      	orrs	r2, r4
 8015036:	1b43      	subs	r3, r0, r5
 8015038:	e78b      	b.n	8014f52 <__ieee754_sqrt+0x66>
 801503a:	4618      	mov	r0, r3
 801503c:	e7f0      	b.n	8015020 <__ieee754_sqrt+0x134>
 801503e:	0052      	lsls	r2, r2, #1
 8015040:	3301      	adds	r3, #1
 8015042:	e7ef      	b.n	8015024 <__ieee754_sqrt+0x138>
 8015044:	46a0      	mov	r8, r4
 8015046:	e7bf      	b.n	8014fc8 <__ieee754_sqrt+0xdc>
 8015048:	7ff00000 	.word	0x7ff00000

0801504c <fabs>:
 801504c:	ec51 0b10 	vmov	r0, r1, d0
 8015050:	ee10 2a10 	vmov	r2, s0
 8015054:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015058:	ec43 2b10 	vmov	d0, r2, r3
 801505c:	4770      	bx	lr

0801505e <finite>:
 801505e:	ee10 3a90 	vmov	r3, s1
 8015062:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8015066:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801506a:	0fc0      	lsrs	r0, r0, #31
 801506c:	4770      	bx	lr

0801506e <matherr>:
 801506e:	2000      	movs	r0, #0
 8015070:	4770      	bx	lr
 8015072:	0000      	movs	r0, r0
 8015074:	0000      	movs	r0, r0
	...

08015078 <nan>:
 8015078:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8015080 <nan+0x8>
 801507c:	4770      	bx	lr
 801507e:	bf00      	nop
 8015080:	00000000 	.word	0x00000000
 8015084:	7ff80000 	.word	0x7ff80000

08015088 <rint>:
 8015088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801508a:	ec51 0b10 	vmov	r0, r1, d0
 801508e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015092:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8015096:	2e13      	cmp	r6, #19
 8015098:	460b      	mov	r3, r1
 801509a:	ee10 4a10 	vmov	r4, s0
 801509e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80150a2:	dc56      	bgt.n	8015152 <rint+0xca>
 80150a4:	2e00      	cmp	r6, #0
 80150a6:	da2b      	bge.n	8015100 <rint+0x78>
 80150a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80150ac:	4302      	orrs	r2, r0
 80150ae:	d023      	beq.n	80150f8 <rint+0x70>
 80150b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80150b4:	4302      	orrs	r2, r0
 80150b6:	4254      	negs	r4, r2
 80150b8:	4314      	orrs	r4, r2
 80150ba:	0c4b      	lsrs	r3, r1, #17
 80150bc:	0b24      	lsrs	r4, r4, #12
 80150be:	045b      	lsls	r3, r3, #17
 80150c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80150c4:	ea44 0103 	orr.w	r1, r4, r3
 80150c8:	460b      	mov	r3, r1
 80150ca:	492f      	ldr	r1, [pc, #188]	; (8015188 <rint+0x100>)
 80150cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80150d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80150d4:	4602      	mov	r2, r0
 80150d6:	4639      	mov	r1, r7
 80150d8:	4630      	mov	r0, r6
 80150da:	f7eb f8ff 	bl	80002dc <__adddf3>
 80150de:	e9cd 0100 	strd	r0, r1, [sp]
 80150e2:	463b      	mov	r3, r7
 80150e4:	4632      	mov	r2, r6
 80150e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150ea:	f7eb f8f5 	bl	80002d8 <__aeabi_dsub>
 80150ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80150f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80150f6:	4639      	mov	r1, r7
 80150f8:	ec41 0b10 	vmov	d0, r0, r1
 80150fc:	b003      	add	sp, #12
 80150fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015100:	4a22      	ldr	r2, [pc, #136]	; (801518c <rint+0x104>)
 8015102:	4132      	asrs	r2, r6
 8015104:	ea01 0702 	and.w	r7, r1, r2
 8015108:	4307      	orrs	r7, r0
 801510a:	d0f5      	beq.n	80150f8 <rint+0x70>
 801510c:	0852      	lsrs	r2, r2, #1
 801510e:	4011      	ands	r1, r2
 8015110:	430c      	orrs	r4, r1
 8015112:	d00b      	beq.n	801512c <rint+0xa4>
 8015114:	ea23 0202 	bic.w	r2, r3, r2
 8015118:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801511c:	2e13      	cmp	r6, #19
 801511e:	fa43 f306 	asr.w	r3, r3, r6
 8015122:	bf0c      	ite	eq
 8015124:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015128:	2400      	movne	r4, #0
 801512a:	4313      	orrs	r3, r2
 801512c:	4916      	ldr	r1, [pc, #88]	; (8015188 <rint+0x100>)
 801512e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8015132:	4622      	mov	r2, r4
 8015134:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015138:	4620      	mov	r0, r4
 801513a:	4629      	mov	r1, r5
 801513c:	f7eb f8ce 	bl	80002dc <__adddf3>
 8015140:	e9cd 0100 	strd	r0, r1, [sp]
 8015144:	4622      	mov	r2, r4
 8015146:	462b      	mov	r3, r5
 8015148:	e9dd 0100 	ldrd	r0, r1, [sp]
 801514c:	f7eb f8c4 	bl	80002d8 <__aeabi_dsub>
 8015150:	e7d2      	b.n	80150f8 <rint+0x70>
 8015152:	2e33      	cmp	r6, #51	; 0x33
 8015154:	dd07      	ble.n	8015166 <rint+0xde>
 8015156:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801515a:	d1cd      	bne.n	80150f8 <rint+0x70>
 801515c:	ee10 2a10 	vmov	r2, s0
 8015160:	f7eb f8bc 	bl	80002dc <__adddf3>
 8015164:	e7c8      	b.n	80150f8 <rint+0x70>
 8015166:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801516a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801516e:	40f2      	lsrs	r2, r6
 8015170:	4210      	tst	r0, r2
 8015172:	d0c1      	beq.n	80150f8 <rint+0x70>
 8015174:	0852      	lsrs	r2, r2, #1
 8015176:	4210      	tst	r0, r2
 8015178:	bf1f      	itttt	ne
 801517a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801517e:	ea20 0202 	bicne.w	r2, r0, r2
 8015182:	4134      	asrne	r4, r6
 8015184:	4314      	orrne	r4, r2
 8015186:	e7d1      	b.n	801512c <rint+0xa4>
 8015188:	08016a70 	.word	0x08016a70
 801518c:	000fffff 	.word	0x000fffff

08015190 <scalbn>:
 8015190:	b570      	push	{r4, r5, r6, lr}
 8015192:	ec55 4b10 	vmov	r4, r5, d0
 8015196:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801519a:	4606      	mov	r6, r0
 801519c:	462b      	mov	r3, r5
 801519e:	b9aa      	cbnz	r2, 80151cc <scalbn+0x3c>
 80151a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80151a4:	4323      	orrs	r3, r4
 80151a6:	d03b      	beq.n	8015220 <scalbn+0x90>
 80151a8:	4b31      	ldr	r3, [pc, #196]	; (8015270 <scalbn+0xe0>)
 80151aa:	4629      	mov	r1, r5
 80151ac:	2200      	movs	r2, #0
 80151ae:	ee10 0a10 	vmov	r0, s0
 80151b2:	f7eb fa49 	bl	8000648 <__aeabi_dmul>
 80151b6:	4b2f      	ldr	r3, [pc, #188]	; (8015274 <scalbn+0xe4>)
 80151b8:	429e      	cmp	r6, r3
 80151ba:	4604      	mov	r4, r0
 80151bc:	460d      	mov	r5, r1
 80151be:	da12      	bge.n	80151e6 <scalbn+0x56>
 80151c0:	a327      	add	r3, pc, #156	; (adr r3, 8015260 <scalbn+0xd0>)
 80151c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c6:	f7eb fa3f 	bl	8000648 <__aeabi_dmul>
 80151ca:	e009      	b.n	80151e0 <scalbn+0x50>
 80151cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80151d0:	428a      	cmp	r2, r1
 80151d2:	d10c      	bne.n	80151ee <scalbn+0x5e>
 80151d4:	ee10 2a10 	vmov	r2, s0
 80151d8:	4620      	mov	r0, r4
 80151da:	4629      	mov	r1, r5
 80151dc:	f7eb f87e 	bl	80002dc <__adddf3>
 80151e0:	4604      	mov	r4, r0
 80151e2:	460d      	mov	r5, r1
 80151e4:	e01c      	b.n	8015220 <scalbn+0x90>
 80151e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80151ea:	460b      	mov	r3, r1
 80151ec:	3a36      	subs	r2, #54	; 0x36
 80151ee:	4432      	add	r2, r6
 80151f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80151f4:	428a      	cmp	r2, r1
 80151f6:	dd0b      	ble.n	8015210 <scalbn+0x80>
 80151f8:	ec45 4b11 	vmov	d1, r4, r5
 80151fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8015268 <scalbn+0xd8>
 8015200:	f000 f9f0 	bl	80155e4 <copysign>
 8015204:	a318      	add	r3, pc, #96	; (adr r3, 8015268 <scalbn+0xd8>)
 8015206:	e9d3 2300 	ldrd	r2, r3, [r3]
 801520a:	ec51 0b10 	vmov	r0, r1, d0
 801520e:	e7da      	b.n	80151c6 <scalbn+0x36>
 8015210:	2a00      	cmp	r2, #0
 8015212:	dd08      	ble.n	8015226 <scalbn+0x96>
 8015214:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015218:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801521c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015220:	ec45 4b10 	vmov	d0, r4, r5
 8015224:	bd70      	pop	{r4, r5, r6, pc}
 8015226:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801522a:	da0d      	bge.n	8015248 <scalbn+0xb8>
 801522c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015230:	429e      	cmp	r6, r3
 8015232:	ec45 4b11 	vmov	d1, r4, r5
 8015236:	dce1      	bgt.n	80151fc <scalbn+0x6c>
 8015238:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015260 <scalbn+0xd0>
 801523c:	f000 f9d2 	bl	80155e4 <copysign>
 8015240:	a307      	add	r3, pc, #28	; (adr r3, 8015260 <scalbn+0xd0>)
 8015242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015246:	e7e0      	b.n	801520a <scalbn+0x7a>
 8015248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801524c:	3236      	adds	r2, #54	; 0x36
 801524e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015252:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015256:	4620      	mov	r0, r4
 8015258:	4629      	mov	r1, r5
 801525a:	2200      	movs	r2, #0
 801525c:	4b06      	ldr	r3, [pc, #24]	; (8015278 <scalbn+0xe8>)
 801525e:	e7b2      	b.n	80151c6 <scalbn+0x36>
 8015260:	c2f8f359 	.word	0xc2f8f359
 8015264:	01a56e1f 	.word	0x01a56e1f
 8015268:	8800759c 	.word	0x8800759c
 801526c:	7e37e43c 	.word	0x7e37e43c
 8015270:	43500000 	.word	0x43500000
 8015274:	ffff3cb0 	.word	0xffff3cb0
 8015278:	3c900000 	.word	0x3c900000
 801527c:	00000000 	.word	0x00000000

08015280 <__ieee754_log>:
 8015280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015284:	ec51 0b10 	vmov	r0, r1, d0
 8015288:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801528c:	b087      	sub	sp, #28
 801528e:	460d      	mov	r5, r1
 8015290:	da27      	bge.n	80152e2 <__ieee754_log+0x62>
 8015292:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015296:	4303      	orrs	r3, r0
 8015298:	ee10 2a10 	vmov	r2, s0
 801529c:	d10a      	bne.n	80152b4 <__ieee754_log+0x34>
 801529e:	49cc      	ldr	r1, [pc, #816]	; (80155d0 <__ieee754_log+0x350>)
 80152a0:	2200      	movs	r2, #0
 80152a2:	2300      	movs	r3, #0
 80152a4:	2000      	movs	r0, #0
 80152a6:	f7eb faf9 	bl	800089c <__aeabi_ddiv>
 80152aa:	ec41 0b10 	vmov	d0, r0, r1
 80152ae:	b007      	add	sp, #28
 80152b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152b4:	2900      	cmp	r1, #0
 80152b6:	da05      	bge.n	80152c4 <__ieee754_log+0x44>
 80152b8:	460b      	mov	r3, r1
 80152ba:	f7eb f80d 	bl	80002d8 <__aeabi_dsub>
 80152be:	2200      	movs	r2, #0
 80152c0:	2300      	movs	r3, #0
 80152c2:	e7f0      	b.n	80152a6 <__ieee754_log+0x26>
 80152c4:	4bc3      	ldr	r3, [pc, #780]	; (80155d4 <__ieee754_log+0x354>)
 80152c6:	2200      	movs	r2, #0
 80152c8:	f7eb f9be 	bl	8000648 <__aeabi_dmul>
 80152cc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80152d0:	460d      	mov	r5, r1
 80152d2:	4ac1      	ldr	r2, [pc, #772]	; (80155d8 <__ieee754_log+0x358>)
 80152d4:	4295      	cmp	r5, r2
 80152d6:	dd06      	ble.n	80152e6 <__ieee754_log+0x66>
 80152d8:	4602      	mov	r2, r0
 80152da:	460b      	mov	r3, r1
 80152dc:	f7ea fffe 	bl	80002dc <__adddf3>
 80152e0:	e7e3      	b.n	80152aa <__ieee754_log+0x2a>
 80152e2:	2300      	movs	r3, #0
 80152e4:	e7f5      	b.n	80152d2 <__ieee754_log+0x52>
 80152e6:	152c      	asrs	r4, r5, #20
 80152e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80152ec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80152f0:	441c      	add	r4, r3
 80152f2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80152f6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80152fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80152fe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8015302:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8015306:	ea42 0105 	orr.w	r1, r2, r5
 801530a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801530e:	2200      	movs	r2, #0
 8015310:	4bb2      	ldr	r3, [pc, #712]	; (80155dc <__ieee754_log+0x35c>)
 8015312:	f7ea ffe1 	bl	80002d8 <__aeabi_dsub>
 8015316:	1cab      	adds	r3, r5, #2
 8015318:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801531c:	2b02      	cmp	r3, #2
 801531e:	4682      	mov	sl, r0
 8015320:	468b      	mov	fp, r1
 8015322:	f04f 0200 	mov.w	r2, #0
 8015326:	dc53      	bgt.n	80153d0 <__ieee754_log+0x150>
 8015328:	2300      	movs	r3, #0
 801532a:	f7eb fbf5 	bl	8000b18 <__aeabi_dcmpeq>
 801532e:	b1d0      	cbz	r0, 8015366 <__ieee754_log+0xe6>
 8015330:	2c00      	cmp	r4, #0
 8015332:	f000 8120 	beq.w	8015576 <__ieee754_log+0x2f6>
 8015336:	4620      	mov	r0, r4
 8015338:	f7eb f91c 	bl	8000574 <__aeabi_i2d>
 801533c:	a390      	add	r3, pc, #576	; (adr r3, 8015580 <__ieee754_log+0x300>)
 801533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015342:	4606      	mov	r6, r0
 8015344:	460f      	mov	r7, r1
 8015346:	f7eb f97f 	bl	8000648 <__aeabi_dmul>
 801534a:	a38f      	add	r3, pc, #572	; (adr r3, 8015588 <__ieee754_log+0x308>)
 801534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015350:	4604      	mov	r4, r0
 8015352:	460d      	mov	r5, r1
 8015354:	4630      	mov	r0, r6
 8015356:	4639      	mov	r1, r7
 8015358:	f7eb f976 	bl	8000648 <__aeabi_dmul>
 801535c:	4602      	mov	r2, r0
 801535e:	460b      	mov	r3, r1
 8015360:	4620      	mov	r0, r4
 8015362:	4629      	mov	r1, r5
 8015364:	e7ba      	b.n	80152dc <__ieee754_log+0x5c>
 8015366:	a38a      	add	r3, pc, #552	; (adr r3, 8015590 <__ieee754_log+0x310>)
 8015368:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536c:	4650      	mov	r0, sl
 801536e:	4659      	mov	r1, fp
 8015370:	f7eb f96a 	bl	8000648 <__aeabi_dmul>
 8015374:	4602      	mov	r2, r0
 8015376:	460b      	mov	r3, r1
 8015378:	2000      	movs	r0, #0
 801537a:	4999      	ldr	r1, [pc, #612]	; (80155e0 <__ieee754_log+0x360>)
 801537c:	f7ea ffac 	bl	80002d8 <__aeabi_dsub>
 8015380:	4652      	mov	r2, sl
 8015382:	4606      	mov	r6, r0
 8015384:	460f      	mov	r7, r1
 8015386:	465b      	mov	r3, fp
 8015388:	4650      	mov	r0, sl
 801538a:	4659      	mov	r1, fp
 801538c:	f7eb f95c 	bl	8000648 <__aeabi_dmul>
 8015390:	4602      	mov	r2, r0
 8015392:	460b      	mov	r3, r1
 8015394:	4630      	mov	r0, r6
 8015396:	4639      	mov	r1, r7
 8015398:	f7eb f956 	bl	8000648 <__aeabi_dmul>
 801539c:	4606      	mov	r6, r0
 801539e:	460f      	mov	r7, r1
 80153a0:	b914      	cbnz	r4, 80153a8 <__ieee754_log+0x128>
 80153a2:	4632      	mov	r2, r6
 80153a4:	463b      	mov	r3, r7
 80153a6:	e0a0      	b.n	80154ea <__ieee754_log+0x26a>
 80153a8:	4620      	mov	r0, r4
 80153aa:	f7eb f8e3 	bl	8000574 <__aeabi_i2d>
 80153ae:	a374      	add	r3, pc, #464	; (adr r3, 8015580 <__ieee754_log+0x300>)
 80153b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153b4:	4680      	mov	r8, r0
 80153b6:	4689      	mov	r9, r1
 80153b8:	f7eb f946 	bl	8000648 <__aeabi_dmul>
 80153bc:	a372      	add	r3, pc, #456	; (adr r3, 8015588 <__ieee754_log+0x308>)
 80153be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c2:	4604      	mov	r4, r0
 80153c4:	460d      	mov	r5, r1
 80153c6:	4640      	mov	r0, r8
 80153c8:	4649      	mov	r1, r9
 80153ca:	f7eb f93d 	bl	8000648 <__aeabi_dmul>
 80153ce:	e0a5      	b.n	801551c <__ieee754_log+0x29c>
 80153d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80153d4:	f7ea ff82 	bl	80002dc <__adddf3>
 80153d8:	4602      	mov	r2, r0
 80153da:	460b      	mov	r3, r1
 80153dc:	4650      	mov	r0, sl
 80153de:	4659      	mov	r1, fp
 80153e0:	f7eb fa5c 	bl	800089c <__aeabi_ddiv>
 80153e4:	e9cd 0100 	strd	r0, r1, [sp]
 80153e8:	4620      	mov	r0, r4
 80153ea:	f7eb f8c3 	bl	8000574 <__aeabi_i2d>
 80153ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80153f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80153f6:	4610      	mov	r0, r2
 80153f8:	4619      	mov	r1, r3
 80153fa:	f7eb f925 	bl	8000648 <__aeabi_dmul>
 80153fe:	4602      	mov	r2, r0
 8015400:	460b      	mov	r3, r1
 8015402:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015406:	f7eb f91f 	bl	8000648 <__aeabi_dmul>
 801540a:	a363      	add	r3, pc, #396	; (adr r3, 8015598 <__ieee754_log+0x318>)
 801540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015410:	4680      	mov	r8, r0
 8015412:	4689      	mov	r9, r1
 8015414:	f7eb f918 	bl	8000648 <__aeabi_dmul>
 8015418:	a361      	add	r3, pc, #388	; (adr r3, 80155a0 <__ieee754_log+0x320>)
 801541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801541e:	f7ea ff5d 	bl	80002dc <__adddf3>
 8015422:	4642      	mov	r2, r8
 8015424:	464b      	mov	r3, r9
 8015426:	f7eb f90f 	bl	8000648 <__aeabi_dmul>
 801542a:	a35f      	add	r3, pc, #380	; (adr r3, 80155a8 <__ieee754_log+0x328>)
 801542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015430:	f7ea ff54 	bl	80002dc <__adddf3>
 8015434:	4642      	mov	r2, r8
 8015436:	464b      	mov	r3, r9
 8015438:	f7eb f906 	bl	8000648 <__aeabi_dmul>
 801543c:	a35c      	add	r3, pc, #368	; (adr r3, 80155b0 <__ieee754_log+0x330>)
 801543e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015442:	f7ea ff4b 	bl	80002dc <__adddf3>
 8015446:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801544a:	f7eb f8fd 	bl	8000648 <__aeabi_dmul>
 801544e:	a35a      	add	r3, pc, #360	; (adr r3, 80155b8 <__ieee754_log+0x338>)
 8015450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015454:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015458:	4640      	mov	r0, r8
 801545a:	4649      	mov	r1, r9
 801545c:	f7eb f8f4 	bl	8000648 <__aeabi_dmul>
 8015460:	a357      	add	r3, pc, #348	; (adr r3, 80155c0 <__ieee754_log+0x340>)
 8015462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015466:	f7ea ff39 	bl	80002dc <__adddf3>
 801546a:	4642      	mov	r2, r8
 801546c:	464b      	mov	r3, r9
 801546e:	f7eb f8eb 	bl	8000648 <__aeabi_dmul>
 8015472:	a355      	add	r3, pc, #340	; (adr r3, 80155c8 <__ieee754_log+0x348>)
 8015474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015478:	f7ea ff30 	bl	80002dc <__adddf3>
 801547c:	4642      	mov	r2, r8
 801547e:	464b      	mov	r3, r9
 8015480:	f7eb f8e2 	bl	8000648 <__aeabi_dmul>
 8015484:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8015488:	4602      	mov	r2, r0
 801548a:	460b      	mov	r3, r1
 801548c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8015490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015494:	f7ea ff22 	bl	80002dc <__adddf3>
 8015498:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801549c:	3551      	adds	r5, #81	; 0x51
 801549e:	4335      	orrs	r5, r6
 80154a0:	2d00      	cmp	r5, #0
 80154a2:	4680      	mov	r8, r0
 80154a4:	4689      	mov	r9, r1
 80154a6:	dd48      	ble.n	801553a <__ieee754_log+0x2ba>
 80154a8:	2200      	movs	r2, #0
 80154aa:	4b4d      	ldr	r3, [pc, #308]	; (80155e0 <__ieee754_log+0x360>)
 80154ac:	4650      	mov	r0, sl
 80154ae:	4659      	mov	r1, fp
 80154b0:	f7eb f8ca 	bl	8000648 <__aeabi_dmul>
 80154b4:	4652      	mov	r2, sl
 80154b6:	465b      	mov	r3, fp
 80154b8:	f7eb f8c6 	bl	8000648 <__aeabi_dmul>
 80154bc:	4602      	mov	r2, r0
 80154be:	460b      	mov	r3, r1
 80154c0:	4606      	mov	r6, r0
 80154c2:	460f      	mov	r7, r1
 80154c4:	4640      	mov	r0, r8
 80154c6:	4649      	mov	r1, r9
 80154c8:	f7ea ff08 	bl	80002dc <__adddf3>
 80154cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80154d0:	f7eb f8ba 	bl	8000648 <__aeabi_dmul>
 80154d4:	4680      	mov	r8, r0
 80154d6:	4689      	mov	r9, r1
 80154d8:	b964      	cbnz	r4, 80154f4 <__ieee754_log+0x274>
 80154da:	4602      	mov	r2, r0
 80154dc:	460b      	mov	r3, r1
 80154de:	4630      	mov	r0, r6
 80154e0:	4639      	mov	r1, r7
 80154e2:	f7ea fef9 	bl	80002d8 <__aeabi_dsub>
 80154e6:	4602      	mov	r2, r0
 80154e8:	460b      	mov	r3, r1
 80154ea:	4650      	mov	r0, sl
 80154ec:	4659      	mov	r1, fp
 80154ee:	f7ea fef3 	bl	80002d8 <__aeabi_dsub>
 80154f2:	e6da      	b.n	80152aa <__ieee754_log+0x2a>
 80154f4:	a322      	add	r3, pc, #136	; (adr r3, 8015580 <__ieee754_log+0x300>)
 80154f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80154fe:	f7eb f8a3 	bl	8000648 <__aeabi_dmul>
 8015502:	a321      	add	r3, pc, #132	; (adr r3, 8015588 <__ieee754_log+0x308>)
 8015504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015508:	4604      	mov	r4, r0
 801550a:	460d      	mov	r5, r1
 801550c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015510:	f7eb f89a 	bl	8000648 <__aeabi_dmul>
 8015514:	4642      	mov	r2, r8
 8015516:	464b      	mov	r3, r9
 8015518:	f7ea fee0 	bl	80002dc <__adddf3>
 801551c:	4602      	mov	r2, r0
 801551e:	460b      	mov	r3, r1
 8015520:	4630      	mov	r0, r6
 8015522:	4639      	mov	r1, r7
 8015524:	f7ea fed8 	bl	80002d8 <__aeabi_dsub>
 8015528:	4652      	mov	r2, sl
 801552a:	465b      	mov	r3, fp
 801552c:	f7ea fed4 	bl	80002d8 <__aeabi_dsub>
 8015530:	4602      	mov	r2, r0
 8015532:	460b      	mov	r3, r1
 8015534:	4620      	mov	r0, r4
 8015536:	4629      	mov	r1, r5
 8015538:	e7d9      	b.n	80154ee <__ieee754_log+0x26e>
 801553a:	4602      	mov	r2, r0
 801553c:	460b      	mov	r3, r1
 801553e:	4650      	mov	r0, sl
 8015540:	4659      	mov	r1, fp
 8015542:	f7ea fec9 	bl	80002d8 <__aeabi_dsub>
 8015546:	e9dd 2300 	ldrd	r2, r3, [sp]
 801554a:	f7eb f87d 	bl	8000648 <__aeabi_dmul>
 801554e:	4606      	mov	r6, r0
 8015550:	460f      	mov	r7, r1
 8015552:	2c00      	cmp	r4, #0
 8015554:	f43f af25 	beq.w	80153a2 <__ieee754_log+0x122>
 8015558:	a309      	add	r3, pc, #36	; (adr r3, 8015580 <__ieee754_log+0x300>)
 801555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801555e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015562:	f7eb f871 	bl	8000648 <__aeabi_dmul>
 8015566:	a308      	add	r3, pc, #32	; (adr r3, 8015588 <__ieee754_log+0x308>)
 8015568:	e9d3 2300 	ldrd	r2, r3, [r3]
 801556c:	4604      	mov	r4, r0
 801556e:	460d      	mov	r5, r1
 8015570:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015574:	e729      	b.n	80153ca <__ieee754_log+0x14a>
 8015576:	2000      	movs	r0, #0
 8015578:	2100      	movs	r1, #0
 801557a:	e696      	b.n	80152aa <__ieee754_log+0x2a>
 801557c:	f3af 8000 	nop.w
 8015580:	fee00000 	.word	0xfee00000
 8015584:	3fe62e42 	.word	0x3fe62e42
 8015588:	35793c76 	.word	0x35793c76
 801558c:	3dea39ef 	.word	0x3dea39ef
 8015590:	55555555 	.word	0x55555555
 8015594:	3fd55555 	.word	0x3fd55555
 8015598:	df3e5244 	.word	0xdf3e5244
 801559c:	3fc2f112 	.word	0x3fc2f112
 80155a0:	96cb03de 	.word	0x96cb03de
 80155a4:	3fc74664 	.word	0x3fc74664
 80155a8:	94229359 	.word	0x94229359
 80155ac:	3fd24924 	.word	0x3fd24924
 80155b0:	55555593 	.word	0x55555593
 80155b4:	3fe55555 	.word	0x3fe55555
 80155b8:	d078c69f 	.word	0xd078c69f
 80155bc:	3fc39a09 	.word	0x3fc39a09
 80155c0:	1d8e78af 	.word	0x1d8e78af
 80155c4:	3fcc71c5 	.word	0x3fcc71c5
 80155c8:	9997fa04 	.word	0x9997fa04
 80155cc:	3fd99999 	.word	0x3fd99999
 80155d0:	c3500000 	.word	0xc3500000
 80155d4:	43500000 	.word	0x43500000
 80155d8:	7fefffff 	.word	0x7fefffff
 80155dc:	3ff00000 	.word	0x3ff00000
 80155e0:	3fe00000 	.word	0x3fe00000

080155e4 <copysign>:
 80155e4:	ec51 0b10 	vmov	r0, r1, d0
 80155e8:	ee11 0a90 	vmov	r0, s3
 80155ec:	ee10 2a10 	vmov	r2, s0
 80155f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80155f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80155f8:	ea41 0300 	orr.w	r3, r1, r0
 80155fc:	ec43 2b10 	vmov	d0, r2, r3
 8015600:	4770      	bx	lr
	...

08015604 <_init>:
 8015604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015606:	bf00      	nop
 8015608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801560a:	bc08      	pop	{r3}
 801560c:	469e      	mov	lr, r3
 801560e:	4770      	bx	lr

08015610 <_fini>:
 8015610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015612:	bf00      	nop
 8015614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015616:	bc08      	pop	{r3}
 8015618:	469e      	mov	lr, r3
 801561a:	4770      	bx	lr
