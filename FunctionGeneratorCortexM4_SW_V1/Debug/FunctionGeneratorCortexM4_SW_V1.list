
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000144ec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f8  080146d0  080146d0  000246d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015ac8  08015ac8  00031e0c  2**0
                  CONTENTS
  4 .ARM          00000000  08015ac8  08015ac8  00031e0c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08015ac8  08015ac8  00031e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015ac8  08015ac8  00025ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015acc  08015acc  00025acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e0c  20000000  08015ad0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ee8  20001e0c  080178dc  00031e0c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002cf4  080178dc  00032cf4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e0c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049734  00000000  00000000  00031e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e6b  00000000  00000000  0007b570  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002378  00000000  00000000  000833e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f08  00000000  00000000  00085758  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035bfc  00000000  00000000  00087660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030340  00000000  00000000  000bd25c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126c9f  00000000  00000000  000ed59c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021423b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c34  00000000  00000000  002142b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e0c 	.word	0x20001e0c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080146b4 	.word	0x080146b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e10 	.word	0x20001e10
 800021c:	080146b4 	.word	0x080146b4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00e fd6c 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00e fd5f 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00e fd54 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00e fd49 	bl	800f7ec <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	080146d0 	.word	0x080146d0
 8000d64:	080146dc 	.word	0x080146dc
 8000d68:	080146e0 	.word	0x080146e0
 8000d6c:	080146e4 	.word	0x080146e4

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00e fd7b 	bl	800f86e <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f00f f9d1 	bl	8010120 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f00e ffb3 	bl	800fcec <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00e fd22 	bl	800f7ec <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f007 ff3a 	bl	8008c24 <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fbdc 	bl	800156c <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	080146e8 	.word	0x080146e8

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000dc6:	f004 f94b 	bl	8005060 <ToplevelMenu_getStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000dd0:	f004 f946 	bl	8005060 <ToplevelMenu_getStatus>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d008      	beq.n	8000dec <DM_UpdateDisplay+0x2c>
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d00a      	beq.n	8000df4 <DM_UpdateDisplay+0x34>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000de2:	e083      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f002 ff55 	bl	8003c94 <ToplevelMenu_DrawMenu>
				break;
 8000dea:	e07f      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f002 ff51 	bl	8003c94 <ToplevelMenu_DrawMenu>
				break;
 8000df2:	e07b      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f002 ff4d 	bl	8003c94 <ToplevelMenu_DrawMenu>
				break;
 8000dfa:	e077      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dfc:	f003 ff20 	bl	8004c40 <FuncMenu_getStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000e06:	f003 ff1b 	bl	8004c40 <FuncMenu_getStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d008      	beq.n	8000e22 <DM_UpdateDisplay+0x62>
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d00a      	beq.n	8000e2a <DM_UpdateDisplay+0x6a>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d000      	beq.n	8000e1a <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000e18:	e068      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f002 f98c 	bl	8003138 <FuncMenu_DrawMenu>
				break;
 8000e20:	e064      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f002 f988 	bl	8003138 <FuncMenu_DrawMenu>
				break;
 8000e28:	e060      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f002 f984 	bl	8003138 <FuncMenu_DrawMenu>
				break;
 8000e30:	e05c      	b.n	8000eec <DM_UpdateDisplay+0x12c>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000e32:	f003 fffb 	bl	8004e2c <GainMenu_getStatus>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d015      	beq.n	8000e68 <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000e3c:	f003 fff6 	bl	8004e2c <GainMenu_getStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d008      	beq.n	8000e58 <DM_UpdateDisplay+0x98>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d00a      	beq.n	8000e60 <DM_UpdateDisplay+0xa0>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e4e:	e04d      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f002 fe45 	bl	8003ae0 <GainMenu_DrawMenu>
				break;
 8000e56:	e049      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f002 fe41 	bl	8003ae0 <GainMenu_DrawMenu>
				break;
 8000e5e:	e045      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f002 fe3d 	bl	8003ae0 <GainMenu_DrawMenu>
				break;
 8000e66:	e041      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e68:	f003 fede 	bl	8004c28 <FreqMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <DM_UpdateDisplay+0x100>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e72:	f003 fed9 	bl	8004c28 <FreqMenu_getStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d835      	bhi.n	8000eea <DM_UpdateDisplay+0x12a>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <DM_UpdateDisplay+0xc4>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000ea9 	.word	0x08000ea9
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08000eb9 	.word	0x08000eb9
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fbcb 	bl	8001634 <FreqMenu_DrawMenu>

				break;
 8000e9e:	e025      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fbc7 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000ea6:	e021      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fbc3 	bl	8001634 <FreqMenu_DrawMenu>

				break;
 8000eae:	e01d      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fbbf 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000eb6:	e019      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESCALER_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESCALER_MENU);
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f000 fbbb 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000ebe:	e015      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000ec0:	f003 f8d8 	bl	8004074 <BiasMenu_getStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <DM_UpdateDisplay+0x112>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff04 	bl	8000cd8 <BiasMenu_DrawMenu>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000ed0:	e00c      	b.n	8000eec <DM_UpdateDisplay+0x12c>
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ed2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <DM_UpdateDisplay+0x134>)
 8000ee4:	f00e fc82 	bl	800f7ec <ILI9341_Draw_Text>
}
 8000ee8:	e000      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				break;
 8000eea:	bf00      	nop
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	080146f8 	.word	0x080146f8

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bc4      	ldr	r3, [pc, #784]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text("FREQ   ....", 2, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2102      	movs	r1, #2
 8000f96:	48b7      	ldr	r0, [pc, #732]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8000f98:	f00e fc28 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	48b0      	ldr	r0, [pc, #704]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8000fb8:	f00e fc18 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	48a9      	ldr	r0, [pc, #676]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8000fd8:	f00e fc08 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	48a2      	ldr	r0, [pc, #648]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 8000ff8:	f00e fbf8 	bl	800f7ec <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f005 fe04 	bl	8006c08 <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a9b      	ldr	r2, [pc, #620]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 8001018:	210f      	movs	r1, #15
 800101a:	f00f ffa3 	bl	8010f64 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00e fbd4 	bl	800f7ec <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f005 fb47 	bl	80066d8 <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001070:	2112      	movs	r1, #18
 8001072:	f00f ff77 	bl	8010f64 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0014 	add.w	r0, r7, #20
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 800108e:	2114      	movs	r1, #20
 8001090:	f00f ff68 	bl	8010f64 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00e fb99 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0014 	add.w	r0, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00e fb86 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	4863      	ldr	r0, [pc, #396]	; (8001290 <DM_DisplayFormattedOutput+0x398>)
 8001104:	f00e fb72 	bl	800f7ec <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f004 f9fe 	bl	8005508 <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f004 f9f5 	bl	8005508 <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 0008 	add.w	r0, r7, #8
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <DM_DisplayFormattedOutput+0x39c>)
 8001146:	210c      	movs	r1, #12
 8001148:	f00f ff0c 	bl	8010f64 <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f004 f97c 	bl	8005448 <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001156:	4a50      	ldr	r2, [pc, #320]	; (8001298 <DM_DisplayFormattedOutput+0x3a0>)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f00f ff2c 	bl	8010fcc <strcat>
 8001174:	4604      	mov	r4, r0
 8001176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117a:	b299      	uxth	r1, r3
 800117c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001180:	b298      	uxth	r0, r3
 8001182:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001192:	4602      	mov	r2, r0
 8001194:	4620      	mov	r0, r4
 8001196:	f00e fb29 	bl	800f7ec <ILI9341_Draw_Text>
 800119a:	e021      	b.n	80011e0 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <DM_DisplayFormattedOutput+0x3a4>)
 800119e:	463b      	mov	r3, r7
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f00f ff09 	bl	8010fcc <strcat>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011c6:	b298      	uxth	r0, r3
 80011c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011d8:	4602      	mov	r2, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	f00e fb06 	bl	800f7ec <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	2103      	movs	r1, #3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <DM_DisplayFormattedOutput+0x3a8>)
 80011f6:	f00e faf9 	bl	800f7ec <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80011fa:	2000      	movs	r0, #0
 80011fc:	f005 fa6c 	bl	80066d8 <SM_GetOutputChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	2b06      	cmp	r3, #6
 8001212:	f200 8091 	bhi.w	8001338 <DM_DisplayFormattedOutput+0x440>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DM_DisplayFormattedOutput+0x324>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001239 	.word	0x08001239
 8001220:	08001255 	.word	0x08001255
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012c9 	.word	0x080012c9
 800122c:	080012e5 	.word	0x080012e5
 8001230:	08001301 	.word	0x08001301
 8001234:	0800131d 	.word	0x0800131d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001238:	233c      	movs	r3, #60	; 0x3c
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <DM_DisplayFormattedOutput+0x3ac>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001248:	2203      	movs	r2, #3
 800124a:	218c      	movs	r1, #140	; 0x8c
 800124c:	2050      	movs	r0, #80	; 0x50
 800124e:	f00e f929 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 8001252:	e071      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001254:	233c      	movs	r3, #60	; 0x3c
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <DM_DisplayFormattedOutput+0x3b0>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001264:	2203      	movs	r2, #3
 8001266:	21a0      	movs	r1, #160	; 0xa0
 8001268:	2050      	movs	r0, #80	; 0x50
 800126a:	f00e f91b 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 800126e:	e063      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
 8001270:	3a449ba6 	.word	0x3a449ba6
 8001274:	0801471c 	.word	0x0801471c
 8001278:	08014728 	.word	0x08014728
 800127c:	08014734 	.word	0x08014734
 8001280:	08014740 	.word	0x08014740
 8001284:	0801474c 	.word	0x0801474c
 8001288:	0801475c 	.word	0x0801475c
 800128c:	08014768 	.word	0x08014768
 8001290:	08014774 	.word	0x08014774
 8001294:	0801477c 	.word	0x0801477c
 8001298:	0801479c 	.word	0x0801479c
 800129c:	080147a0 	.word	0x080147a0
 80012a0:	08014788 	.word	0x08014788
 80012a4:	20000e28 	.word	0x20000e28
 80012a8:	20000f18 	.word	0x20000f18
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012ac:	233c      	movs	r3, #60	; 0x3c
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	23c8      	movs	r3, #200	; 0xc8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012bc:	2203      	movs	r2, #3
 80012be:	21a0      	movs	r1, #160	; 0xa0
 80012c0:	2050      	movs	r0, #80	; 0x50
 80012c2:	f00e f8ef 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 80012c6:	e037      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012c8:	233c      	movs	r3, #60	; 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	4b65      	ldr	r3, [pc, #404]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d8:	2203      	movs	r2, #3
 80012da:	21a0      	movs	r1, #160	; 0xa0
 80012dc:	2050      	movs	r0, #80	; 0x50
 80012de:	f00e f8e1 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 80012e2:	e029      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b5f      	ldr	r3, [pc, #380]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	23c8      	movs	r3, #200	; 0xc8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012f4:	2203      	movs	r2, #3
 80012f6:	21a0      	movs	r1, #160	; 0xa0
 80012f8:	2050      	movs	r0, #80	; 0x50
 80012fa:	f00e f8d3 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 80012fe:	e01b      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001300:	233c      	movs	r3, #60	; 0x3c
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	4b58      	ldr	r3, [pc, #352]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	23c8      	movs	r3, #200	; 0xc8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001310:	2203      	movs	r2, #3
 8001312:	21a0      	movs	r1, #160	; 0xa0
 8001314:	2050      	movs	r0, #80	; 0x50
 8001316:	f00e f8c5 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 800131a:	e00d      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800131c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001320:	b29b      	uxth	r3, r3
 8001322:	2200      	movs	r2, #0
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f240 23fd 	movw	r3, #765	; 0x2fd
 800132c:	22aa      	movs	r2, #170	; 0xaa
 800132e:	2150      	movs	r1, #80	; 0x50
 8001330:	484e      	ldr	r0, [pc, #312]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 8001332:	f00e fa5b 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 8001336:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001338:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800133c:	b29b      	uxth	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001348:	22aa      	movs	r2, #170	; 0xaa
 800134a:	21b4      	movs	r1, #180	; 0xb4
 800134c:	4848      	ldr	r0, [pc, #288]	; (8001470 <DM_DisplayFormattedOutput+0x578>)
 800134e:	f00e fa4d 	bl	800f7ec <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001352:	2001      	movs	r0, #1
 8001354:	f005 f9c0 	bl	80066d8 <SM_GetOutputChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001364:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001368:	2b06      	cmp	r3, #6
 800136a:	d873      	bhi.n	8001454 <DM_DisplayFormattedOutput+0x55c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DM_DisplayFormattedOutput+0x47c>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001391 	.word	0x08001391
 8001378:	080013ad 	.word	0x080013ad
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013e5 	.word	0x080013e5
 8001384:	08001401 	.word	0x08001401
 8001388:	0800141d 	.word	0x0800141d
 800138c:	08001439 	.word	0x08001439
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001390:	233c      	movs	r3, #60	; 0x3c
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <DM_DisplayFormattedOutput+0x57c>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013a0:	2203      	movs	r2, #3
 80013a2:	218c      	movs	r1, #140	; 0x8c
 80013a4:	20f5      	movs	r0, #245	; 0xf5
 80013a6:	f00e f87d 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 80013aa:	e053      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013ac:	233c      	movs	r3, #60	; 0x3c
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <DM_DisplayFormattedOutput+0x580>)
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	23c8      	movs	r3, #200	; 0xc8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013bc:	2203      	movs	r2, #3
 80013be:	21a0      	movs	r1, #160	; 0xa0
 80013c0:	20f5      	movs	r0, #245	; 0xf5
 80013c2:	f00e f86f 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 80013c6:	e045      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	23c8      	movs	r3, #200	; 0xc8
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d8:	2203      	movs	r2, #3
 80013da:	21a0      	movs	r1, #160	; 0xa0
 80013dc:	20f5      	movs	r0, #245	; 0xf5
 80013de:	f00e f861 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 80013e2:	e037      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80013e4:	233c      	movs	r3, #60	; 0x3c
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	23c8      	movs	r3, #200	; 0xc8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013f4:	2203      	movs	r2, #3
 80013f6:	21a0      	movs	r1, #160	; 0xa0
 80013f8:	20f5      	movs	r0, #245	; 0xf5
 80013fa:	f00e f853 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 80013fe:	e029      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001400:	233c      	movs	r3, #60	; 0x3c
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	23c8      	movs	r3, #200	; 0xc8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001410:	2203      	movs	r2, #3
 8001412:	21a0      	movs	r1, #160	; 0xa0
 8001414:	20f5      	movs	r0, #245	; 0xf5
 8001416:	f00e f845 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 800141a:	e01b      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800141c:	233c      	movs	r3, #60	; 0x3c
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800142c:	2203      	movs	r2, #3
 800142e:	21a0      	movs	r1, #160	; 0xa0
 8001430:	20f5      	movs	r0, #245	; 0xf5
 8001432:	f00e f837 	bl	800f4a4 <ILI9341_Draw_Wave>
			break;
 8001436:	e00d      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001438:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800143c:	b29b      	uxth	r3, r3
 800143e:	2200      	movs	r2, #0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001448:	22aa      	movs	r2, #170	; 0xaa
 800144a:	21f5      	movs	r1, #245	; 0xf5
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 800144e:	f00e f9cd 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 8001452:	bf00      	nop
	}

	DM_DisplayInputTriggerStatus();
 8001454:	f000 f812 	bl	800147c <DM_DisplayInputTriggerStatus>

}
 8001458:	bf00      	nop
 800145a:	376c      	adds	r7, #108	; 0x6c
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	20000c48 	.word	0x20000c48
 8001464:	20000d38 	.word	0x20000d38
 8001468:	20001008 	.word	0x20001008
 800146c:	08014790 	.word	0x08014790
 8001470:	08014794 	.word	0x08014794
 8001474:	20000e28 	.word	0x20000e28
 8001478:	20000f18 	.word	0x20000f18

0800147c <DM_DisplayInputTriggerStatus>:

void DM_DisplayInputTriggerStatus()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af02      	add	r7, sp, #8
	uint8_t text_size = 2;
 8001482:	2302      	movs	r3, #2
 8001484:	71fb      	strb	r3, [r7, #7]
	uint16_t text_x_pos = 230;
 8001486:	23e6      	movs	r3, #230	; 0xe6
 8001488:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 800148a:	f004 ff9f 	bl	80063cc <IT_GetActiveTriggerMode>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d023      	beq.n	80014dc <DM_DisplayInputTriggerStatus+0x60>
 8001494:	2b02      	cmp	r3, #2
 8001496:	d040      	beq.n	800151a <DM_DisplayInputTriggerStatus+0x9e>
 8001498:	2b00      	cmp	r3, #0
 800149a:	d000      	beq.n	800149e <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 800149c:	e05c      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 800149e:	f004 ffb1 	bl	8006404 <IT_GetTriggerStatus>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00c      	beq.n	80014c2 <DM_DisplayInputTriggerStatus+0x46>
				ILI9341_Draw_Text("T: TIM", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	88b9      	ldrh	r1, [r7, #4]
 80014ae:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 80014b2:	9201      	str	r2, [sp, #4]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	220a      	movs	r2, #10
 80014ba:	4829      	ldr	r0, [pc, #164]	; (8001560 <DM_DisplayInputTriggerStatus+0xe4>)
 80014bc:	f00e f996 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 80014c0:	e04a      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
				ILI9341_Draw_Text("T: TIM", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	88b9      	ldrh	r1, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	9201      	str	r2, [sp, #4]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80014d2:	220a      	movs	r2, #10
 80014d4:	4822      	ldr	r0, [pc, #136]	; (8001560 <DM_DisplayInputTriggerStatus+0xe4>)
 80014d6:	f00e f989 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 80014da:	e03d      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 80014dc:	f004 ff92 	bl	8006404 <IT_GetTriggerStatus>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <DM_DisplayInputTriggerStatus+0x84>
				ILI9341_Draw_Text("T: COMP", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	88b9      	ldrh	r1, [r7, #4]
 80014ec:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 80014f0:	9201      	str	r2, [sp, #4]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	220a      	movs	r2, #10
 80014f8:	481a      	ldr	r0, [pc, #104]	; (8001564 <DM_DisplayInputTriggerStatus+0xe8>)
 80014fa:	f00e f977 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 80014fe:	e02b      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
				ILI9341_Draw_Text("T: COMP", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	b29b      	uxth	r3, r3
 8001504:	88b9      	ldrh	r1, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001510:	220a      	movs	r2, #10
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <DM_DisplayInputTriggerStatus+0xe8>)
 8001514:	f00e f96a 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 8001518:	e01e      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 800151a:	f004 ff73 	bl	8006404 <IT_GetTriggerStatus>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <DM_DisplayInputTriggerStatus+0xc2>
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	b29b      	uxth	r3, r3
 8001528:	88b9      	ldrh	r1, [r7, #4]
 800152a:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 800152e:	9201      	str	r2, [sp, #4]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	220a      	movs	r2, #10
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <DM_DisplayInputTriggerStatus+0xec>)
 8001538:	f00e f958 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 800153c:	e00b      	b.n	8001556 <DM_DisplayInputTriggerStatus+0xda>
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b29b      	uxth	r3, r3
 8001542:	88b9      	ldrh	r1, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	9201      	str	r2, [sp, #4]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800154e:	220a      	movs	r2, #10
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <DM_DisplayInputTriggerStatus+0xec>)
 8001552:	f00e f94b 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 8001556:	bf00      	nop
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	080147a4 	.word	0x080147a4
 8001564:	080147ac 	.word	0x080147ac
 8001568:	080147b4 	.word	0x080147b4

0800156c <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 8001572:	4820      	ldr	r0, [pc, #128]	; (80015f4 <DM_RefreshScreen+0x88>)
 8001574:	f00b ff84 	bl	800d480 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001578:	2000      	movs	r0, #0
 800157a:	f00e fbb7 	bl	800fcec <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 800157e:	2300      	movs	r3, #0
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	2302      	movs	r3, #2
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f240 23fd 	movw	r3, #765	; 0x2fd
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2328      	movs	r3, #40	; 0x28
 800158e:	2250      	movs	r2, #80	; 0x50
 8001590:	21c8      	movs	r1, #200	; 0xc8
 8001592:	2000      	movs	r0, #0
 8001594:	f00d ffc7 	bl	800f526 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001598:	2300      	movs	r3, #0
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2302      	movs	r3, #2
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2328      	movs	r3, #40	; 0x28
 80015a8:	2250      	movs	r2, #80	; 0x50
 80015aa:	21c8      	movs	r1, #200	; 0xc8
 80015ac:	2050      	movs	r0, #80	; 0x50
 80015ae:	f00d ffba 	bl	800f526 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80015b2:	2300      	movs	r3, #0
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2302      	movs	r3, #2
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2328      	movs	r3, #40	; 0x28
 80015c2:	2250      	movs	r2, #80	; 0x50
 80015c4:	21c8      	movs	r1, #200	; 0xc8
 80015c6:	20a0      	movs	r0, #160	; 0xa0
 80015c8:	f00d ffad 	bl	800f526 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80015cc:	2300      	movs	r3, #0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	2302      	movs	r3, #2
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2328      	movs	r3, #40	; 0x28
 80015dc:	2250      	movs	r2, #80	; 0x50
 80015de:	21c8      	movs	r1, #200	; 0xc8
 80015e0:	20f0      	movs	r0, #240	; 0xf0
 80015e2:	f00d ffa0 	bl	800f526 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <DM_RefreshScreen+0x88>)
 80015e8:	f00b ff14 	bl	800d414 <HAL_TIM_Base_Start_IT>


}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20002b24 	.word	0x20002b24

080015f8 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <DM_SetErrorDebugMsg+0x34>)
 8001604:	212d      	movs	r1, #45	; 0x2d
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <DM_SetErrorDebugMsg+0x38>)
 8001608:	f00f fcac 	bl	8010f64 <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 800160c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2301      	movs	r3, #1
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	22be      	movs	r2, #190	; 0xbe
 800161a:	210a      	movs	r1, #10
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <DM_SetErrorDebugMsg+0x38>)
 800161e:	f00e f8e5 	bl	800f7ec <ILI9341_Draw_Text>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	08014838 	.word	0x08014838
 8001630:	20001e28 	.word	0x20001e28

08001634 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3b01      	subs	r3, #1
 8001642:	2b04      	cmp	r3, #4
 8001644:	d81b      	bhi.n	800167e <FreqMenu_DrawMenu+0x4a>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <FreqMenu_DrawMenu+0x18>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	08001661 	.word	0x08001661
 8001650:	08001667 	.word	0x08001667
 8001654:	0800166d 	.word	0x0800166d
 8001658:	08001673 	.word	0x08001673
 800165c:	08001679 	.word	0x08001679
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001660:	f000 f812 	bl	8001688 <FreqMenu_DrawMainMenu>
			break;
 8001664:	e00c      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001666:	f000 f859 	bl	800171c <FreqMenu_DrawPresetMenu>
			break;
 800166a:	e009      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 800166c:	f001 fb06 	bl	8002c7c <FreqMenu_DrawAdjustMenu>
			break;
 8001670:	e006      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001672:	f001 fb19 	bl	8002ca8 <FreqMenu_DrawSweepMenu>
			break;
 8001676:	e003      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESCALER_MENU:
			FreqMenu_DrawPrescalerMenu();
 8001678:	f001 fd48 	bl	800310c <FreqMenu_DrawPrescalerMenu>
			break;
 800167c:	e000      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 800167e:	bf00      	nop

	}
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800168e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	2302      	movs	r3, #2
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2300      	movs	r3, #0
 800169a:	220a      	movs	r2, #10
 800169c:	2105      	movs	r1, #5
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <FreqMenu_DrawMainMenu+0x80>)
 80016a0:	f00e f8a4 	bl	800f7ec <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80016a4:	f7ff fc28 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80016a8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2302      	movs	r3, #2
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	22d2      	movs	r2, #210	; 0xd2
 80016b6:	2105      	movs	r1, #5
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <FreqMenu_DrawMainMenu+0x84>)
 80016ba:	f00e f897 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80016be:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2302      	movs	r3, #2
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	22d2      	movs	r2, #210	; 0xd2
 80016cc:	2161      	movs	r1, #97	; 0x61
 80016ce:	4810      	ldr	r0, [pc, #64]	; (8001710 <FreqMenu_DrawMainMenu+0x88>)
 80016d0:	f00e f88c 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80016d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2302      	movs	r3, #2
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	22d2      	movs	r2, #210	; 0xd2
 80016e2:	21ac      	movs	r1, #172	; 0xac
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <FreqMenu_DrawMainMenu+0x8c>)
 80016e6:	f00e f881 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80016ea:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2302      	movs	r3, #2
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	22d2      	movs	r2, #210	; 0xd2
 80016f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <FreqMenu_DrawMainMenu+0x90>)
 80016fe:	f00e f875 	bl	800f7ec <ILI9341_Draw_Text>
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	0801483c 	.word	0x0801483c
 800170c:	08014848 	.word	0x08014848
 8001710:	08014850 	.word	0x08014850
 8001714:	08014858 	.word	0x08014858
 8001718:	08014860 	.word	0x08014860

0800171c <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2302      	movs	r3, #2
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	220a      	movs	r2, #10
 8001730:	2105      	movs	r1, #5
 8001732:	4887      	ldr	r0, [pc, #540]	; (8001950 <FreqMenu_DrawPresetMenu+0x234>)
 8001734:	f00e f85a 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 8001738:	f7ff fea0 	bl	800147c <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 800173c:	2328      	movs	r3, #40	; 0x28
 800173e:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001740:	233c      	movs	r3, #60	; 0x3c
 8001742:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001744:	2350      	movs	r3, #80	; 0x50
 8001746:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 800174c:	2378      	movs	r3, #120	; 0x78
 800174e:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001750:	238c      	movs	r3, #140	; 0x8c
 8001752:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001754:	23a0      	movs	r3, #160	; 0xa0
 8001756:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001758:	f004 f886 	bl	8005868 <FreqO_GetFPresetObject>
 800175c:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f001 825d 	beq.w	8002c20 <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800176e:	4293      	cmp	r3, r2
 8001770:	f000 849a 	beq.w	80020a8 <FreqMenu_DrawPresetMenu+0x98c>
 8001774:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001778:	4293      	cmp	r3, r2
 800177a:	d817      	bhi.n	80017ac <FreqMenu_DrawPresetMenu+0x90>
 800177c:	2b32      	cmp	r3, #50	; 0x32
 800177e:	f000 81b3 	beq.w	8001ae8 <FreqMenu_DrawPresetMenu+0x3cc>
 8001782:	2b32      	cmp	r3, #50	; 0x32
 8001784:	d806      	bhi.n	8001794 <FreqMenu_DrawPresetMenu+0x78>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d038      	beq.n	80017fc <FreqMenu_DrawPresetMenu+0xe0>
 800178a:	2b0a      	cmp	r3, #10
 800178c:	f000 8102 	beq.w	8001994 <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001790:	f001 ba52 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001794:	2bfa      	cmp	r3, #250	; 0xfa
 8001796:	f000 8317 	beq.w	8001dc8 <FreqMenu_DrawPresetMenu+0x6ac>
 800179a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800179e:	f000 83d9 	beq.w	8001f54 <FreqMenu_DrawPresetMenu+0x838>
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	f000 8266 	beq.w	8001c74 <FreqMenu_DrawPresetMenu+0x558>
}
 80017a8:	f001 ba46 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 80017ac:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f000 8758 	beq.w	8002666 <FreqMenu_DrawPresetMenu+0xf4a>
 80017b6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d80f      	bhi.n	80017de <FreqMenu_DrawPresetMenu+0xc2>
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f000 85e0 	beq.w	8002388 <FreqMenu_DrawPresetMenu+0xc6c>
 80017c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f000 86a1 	beq.w	8002514 <FreqMenu_DrawPresetMenu+0xdf8>
 80017d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d6:	f000 852d 	beq.w	8002234 <FreqMenu_DrawPresetMenu+0xb18>
}
 80017da:	f001 ba2d 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 80017de:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <FreqMenu_DrawPresetMenu+0x238>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	f001 80ae 	beq.w	8002942 <FreqMenu_DrawPresetMenu+0x1226>
 80017e6:	4a5c      	ldr	r2, [pc, #368]	; (8001958 <FreqMenu_DrawPresetMenu+0x23c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	f001 816f 	beq.w	8002acc <FreqMenu_DrawPresetMenu+0x13b0>
 80017ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80017f2:	4293      	cmp	r3, r2
 80017f4:	f000 87fc 	beq.w	80027f0 <FreqMenu_DrawPresetMenu+0x10d4>
}
 80017f8:	f001 ba1e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2302      	movs	r3, #2
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	2105      	movs	r1, #5
 800180e:	4853      	ldr	r0, [pc, #332]	; (800195c <FreqMenu_DrawPresetMenu+0x240>)
 8001810:	f00d ffec 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	b29a      	uxth	r2, r3
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001824:	2105      	movs	r1, #5
 8001826:	484e      	ldr	r0, [pc, #312]	; (8001960 <FreqMenu_DrawPresetMenu+0x244>)
 8001828:	f00d ffe0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	b29a      	uxth	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2302      	movs	r3, #2
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800183c:	2105      	movs	r1, #5
 800183e:	4849      	ldr	r0, [pc, #292]	; (8001964 <FreqMenu_DrawPresetMenu+0x248>)
 8001840:	f00d ffd4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001844:	7b3b      	ldrb	r3, [r7, #12]
 8001846:	b29a      	uxth	r2, r3
 8001848:	2300      	movs	r3, #0
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2302      	movs	r3, #2
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001854:	2105      	movs	r1, #5
 8001856:	4844      	ldr	r0, [pc, #272]	; (8001968 <FreqMenu_DrawPresetMenu+0x24c>)
 8001858:	f00d ffc8 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	b29a      	uxth	r2, r3
 8001860:	2300      	movs	r3, #0
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	2302      	movs	r3, #2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800186c:	2105      	movs	r1, #5
 800186e:	483f      	ldr	r0, [pc, #252]	; (800196c <FreqMenu_DrawPresetMenu+0x250>)
 8001870:	f00d ffbc 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001874:	7abb      	ldrb	r3, [r7, #10]
 8001876:	b29a      	uxth	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2302      	movs	r3, #2
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001884:	2105      	movs	r1, #5
 8001886:	483a      	ldr	r0, [pc, #232]	; (8001970 <FreqMenu_DrawPresetMenu+0x254>)
 8001888:	f00d ffb0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800188c:	7a7b      	ldrb	r3, [r7, #9]
 800188e:	b29a      	uxth	r2, r3
 8001890:	2300      	movs	r3, #0
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	2302      	movs	r3, #2
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800189c:	2105      	movs	r1, #5
 800189e:	4835      	ldr	r0, [pc, #212]	; (8001974 <FreqMenu_DrawPresetMenu+0x258>)
 80018a0:	f00d ffa4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	2300      	movs	r3, #0
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	2302      	movs	r3, #2
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b4:	2178      	movs	r1, #120	; 0x78
 80018b6:	4830      	ldr	r0, [pc, #192]	; (8001978 <FreqMenu_DrawPresetMenu+0x25c>)
 80018b8:	f00d ff98 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018bc:	7bbb      	ldrb	r3, [r7, #14]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018cc:	2178      	movs	r1, #120	; 0x78
 80018ce:	482b      	ldr	r0, [pc, #172]	; (800197c <FreqMenu_DrawPresetMenu+0x260>)
 80018d0:	f00d ff8c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e4:	2178      	movs	r1, #120	; 0x78
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <FreqMenu_DrawPresetMenu+0x264>)
 80018e8:	f00d ff80 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	2302      	movs	r3, #2
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018fc:	2178      	movs	r1, #120	; 0x78
 80018fe:	4821      	ldr	r0, [pc, #132]	; (8001984 <FreqMenu_DrawPresetMenu+0x268>)
 8001900:	f00d ff74 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	b29a      	uxth	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	2302      	movs	r3, #2
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001914:	2178      	movs	r1, #120	; 0x78
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <FreqMenu_DrawPresetMenu+0x26c>)
 8001918:	f00d ff68 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800191c:	7abb      	ldrb	r3, [r7, #10]
 800191e:	b29a      	uxth	r2, r3
 8001920:	2300      	movs	r3, #0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2302      	movs	r3, #2
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800192c:	2178      	movs	r1, #120	; 0x78
 800192e:	4817      	ldr	r0, [pc, #92]	; (800198c <FreqMenu_DrawPresetMenu+0x270>)
 8001930:	f00d ff5c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001934:	7a7b      	ldrb	r3, [r7, #9]
 8001936:	b29a      	uxth	r2, r3
 8001938:	2300      	movs	r3, #0
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	2302      	movs	r3, #2
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001944:	2178      	movs	r1, #120	; 0x78
 8001946:	4812      	ldr	r0, [pc, #72]	; (8001990 <FreqMenu_DrawPresetMenu+0x274>)
 8001948:	f00d ff50 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 800194c:	f001 b974 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001950:	08014864 	.word	0x08014864
 8001954:	000124f8 	.word	0x000124f8
 8001958:	000186a0 	.word	0x000186a0
 800195c:	08014878 	.word	0x08014878
 8001960:	08014880 	.word	0x08014880
 8001964:	08014888 	.word	0x08014888
 8001968:	08014890 	.word	0x08014890
 800196c:	08014898 	.word	0x08014898
 8001970:	080148a0 	.word	0x080148a0
 8001974:	080148a8 	.word	0x080148a8
 8001978:	080148b0 	.word	0x080148b0
 800197c:	080148b8 	.word	0x080148b8
 8001980:	080148c0 	.word	0x080148c0
 8001984:	080148c8 	.word	0x080148c8
 8001988:	080148d0 	.word	0x080148d0
 800198c:	080148d8 	.word	0x080148d8
 8001990:	080148e0 	.word	0x080148e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	b29a      	uxth	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2302      	movs	r3, #2
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a4:	2105      	movs	r1, #5
 80019a6:	48a5      	ldr	r0, [pc, #660]	; (8001c3c <FreqMenu_DrawPresetMenu+0x520>)
 80019a8:	f00d ff20 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	48a0      	ldr	r0, [pc, #640]	; (8001c40 <FreqMenu_DrawPresetMenu+0x524>)
 80019c0:	f00d ff14 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019c4:	7b7b      	ldrb	r3, [r7, #13]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2302      	movs	r3, #2
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019d4:	2105      	movs	r1, #5
 80019d6:	489b      	ldr	r0, [pc, #620]	; (8001c44 <FreqMenu_DrawPresetMenu+0x528>)
 80019d8:	f00d ff08 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019dc:	7b3b      	ldrb	r3, [r7, #12]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ec:	2105      	movs	r1, #5
 80019ee:	4896      	ldr	r0, [pc, #600]	; (8001c48 <FreqMenu_DrawPresetMenu+0x52c>)
 80019f0:	f00d fefc 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	2302      	movs	r3, #2
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a04:	2105      	movs	r1, #5
 8001a06:	4891      	ldr	r0, [pc, #580]	; (8001c4c <FreqMenu_DrawPresetMenu+0x530>)
 8001a08:	f00d fef0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a0c:	7abb      	ldrb	r3, [r7, #10]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	2302      	movs	r3, #2
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	488c      	ldr	r0, [pc, #560]	; (8001c50 <FreqMenu_DrawPresetMenu+0x534>)
 8001a20:	f00d fee4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a24:	7a7b      	ldrb	r3, [r7, #9]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a34:	2105      	movs	r1, #5
 8001a36:	4887      	ldr	r0, [pc, #540]	; (8001c54 <FreqMenu_DrawPresetMenu+0x538>)
 8001a38:	f00d fed8 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	2302      	movs	r3, #2
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a4c:	2178      	movs	r1, #120	; 0x78
 8001a4e:	4882      	ldr	r0, [pc, #520]	; (8001c58 <FreqMenu_DrawPresetMenu+0x53c>)
 8001a50:	f00d fecc 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a64:	2178      	movs	r1, #120	; 0x78
 8001a66:	487d      	ldr	r0, [pc, #500]	; (8001c5c <FreqMenu_DrawPresetMenu+0x540>)
 8001a68:	f00d fec0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a6c:	7b7b      	ldrb	r3, [r7, #13]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	2302      	movs	r3, #2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a7c:	2178      	movs	r1, #120	; 0x78
 8001a7e:	4878      	ldr	r0, [pc, #480]	; (8001c60 <FreqMenu_DrawPresetMenu+0x544>)
 8001a80:	f00d feb4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a84:	7b3b      	ldrb	r3, [r7, #12]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a94:	2178      	movs	r1, #120	; 0x78
 8001a96:	4873      	ldr	r0, [pc, #460]	; (8001c64 <FreqMenu_DrawPresetMenu+0x548>)
 8001a98:	f00d fea8 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aac:	2178      	movs	r1, #120	; 0x78
 8001aae:	486e      	ldr	r0, [pc, #440]	; (8001c68 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ab0:	f00d fe9c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab4:	7abb      	ldrb	r3, [r7, #10]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2302      	movs	r3, #2
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	4869      	ldr	r0, [pc, #420]	; (8001c6c <FreqMenu_DrawPresetMenu+0x550>)
 8001ac8:	f00d fe90 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001acc:	7a7b      	ldrb	r3, [r7, #9]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001adc:	2178      	movs	r1, #120	; 0x78
 8001ade:	4864      	ldr	r0, [pc, #400]	; (8001c70 <FreqMenu_DrawPresetMenu+0x554>)
 8001ae0:	f00d fe84 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 8001ae4:	f001 b8a8 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af8:	2105      	movs	r1, #5
 8001afa:	4850      	ldr	r0, [pc, #320]	; (8001c3c <FreqMenu_DrawPresetMenu+0x520>)
 8001afc:	f00d fe76 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b00:	7bbb      	ldrb	r3, [r7, #14]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b10:	2105      	movs	r1, #5
 8001b12:	484b      	ldr	r0, [pc, #300]	; (8001c40 <FreqMenu_DrawPresetMenu+0x524>)
 8001b14:	f00d fe6a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b18:	7b7b      	ldrb	r3, [r7, #13]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	2302      	movs	r3, #2
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2300      	movs	r3, #0
 8001b28:	2105      	movs	r1, #5
 8001b2a:	4846      	ldr	r0, [pc, #280]	; (8001c44 <FreqMenu_DrawPresetMenu+0x528>)
 8001b2c:	f00d fe5e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	2300      	movs	r3, #0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b40:	2105      	movs	r1, #5
 8001b42:	4841      	ldr	r0, [pc, #260]	; (8001c48 <FreqMenu_DrawPresetMenu+0x52c>)
 8001b44:	f00d fe52 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	483c      	ldr	r0, [pc, #240]	; (8001c4c <FreqMenu_DrawPresetMenu+0x530>)
 8001b5c:	f00d fe46 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b60:	7abb      	ldrb	r3, [r7, #10]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b70:	2105      	movs	r1, #5
 8001b72:	4837      	ldr	r0, [pc, #220]	; (8001c50 <FreqMenu_DrawPresetMenu+0x534>)
 8001b74:	f00d fe3a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b78:	7a7b      	ldrb	r3, [r7, #9]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2302      	movs	r3, #2
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b88:	2105      	movs	r1, #5
 8001b8a:	4832      	ldr	r0, [pc, #200]	; (8001c54 <FreqMenu_DrawPresetMenu+0x538>)
 8001b8c:	f00d fe2e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba0:	2178      	movs	r1, #120	; 0x78
 8001ba2:	482d      	ldr	r0, [pc, #180]	; (8001c58 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ba4:	f00d fe22 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	2300      	movs	r3, #0
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb8:	2178      	movs	r1, #120	; 0x78
 8001bba:	4828      	ldr	r0, [pc, #160]	; (8001c5c <FreqMenu_DrawPresetMenu+0x540>)
 8001bbc:	f00d fe16 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bc0:	7b7b      	ldrb	r3, [r7, #13]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bd0:	2178      	movs	r1, #120	; 0x78
 8001bd2:	4823      	ldr	r0, [pc, #140]	; (8001c60 <FreqMenu_DrawPresetMenu+0x544>)
 8001bd4:	f00d fe0a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd8:	7b3b      	ldrb	r3, [r7, #12]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2302      	movs	r3, #2
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be8:	2178      	movs	r1, #120	; 0x78
 8001bea:	481e      	ldr	r0, [pc, #120]	; (8001c64 <FreqMenu_DrawPresetMenu+0x548>)
 8001bec:	f00d fdfe 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c00:	2178      	movs	r1, #120	; 0x78
 8001c02:	4819      	ldr	r0, [pc, #100]	; (8001c68 <FreqMenu_DrawPresetMenu+0x54c>)
 8001c04:	f00d fdf2 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c08:	7abb      	ldrb	r3, [r7, #10]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2302      	movs	r3, #2
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c18:	2178      	movs	r1, #120	; 0x78
 8001c1a:	4814      	ldr	r0, [pc, #80]	; (8001c6c <FreqMenu_DrawPresetMenu+0x550>)
 8001c1c:	f00d fde6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c20:	7a7b      	ldrb	r3, [r7, #9]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	2302      	movs	r3, #2
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c30:	2178      	movs	r1, #120	; 0x78
 8001c32:	480f      	ldr	r0, [pc, #60]	; (8001c70 <FreqMenu_DrawPresetMenu+0x554>)
 8001c34:	f00d fdda 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 8001c38:	f000 bffe 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001c3c:	08014878 	.word	0x08014878
 8001c40:	08014880 	.word	0x08014880
 8001c44:	08014888 	.word	0x08014888
 8001c48:	08014890 	.word	0x08014890
 8001c4c:	08014898 	.word	0x08014898
 8001c50:	080148a0 	.word	0x080148a0
 8001c54:	080148a8 	.word	0x080148a8
 8001c58:	080148b0 	.word	0x080148b0
 8001c5c:	080148b8 	.word	0x080148b8
 8001c60:	080148c0 	.word	0x080148c0
 8001c64:	080148c8 	.word	0x080148c8
 8001c68:	080148d0 	.word	0x080148d0
 8001c6c:	080148d8 	.word	0x080148d8
 8001c70:	080148e0 	.word	0x080148e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c84:	2105      	movs	r1, #5
 8001c86:	48a5      	ldr	r0, [pc, #660]	; (8001f1c <FreqMenu_DrawPresetMenu+0x800>)
 8001c88:	f00d fdb0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2302      	movs	r3, #2
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	48a0      	ldr	r0, [pc, #640]	; (8001f20 <FreqMenu_DrawPresetMenu+0x804>)
 8001ca0:	f00d fda4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ca4:	7b7b      	ldrb	r3, [r7, #13]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2302      	movs	r3, #2
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	489b      	ldr	r0, [pc, #620]	; (8001f24 <FreqMenu_DrawPresetMenu+0x808>)
 8001cb8:	f00d fd98 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	4896      	ldr	r0, [pc, #600]	; (8001f28 <FreqMenu_DrawPresetMenu+0x80c>)
 8001cd0:	f00d fd8c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	4891      	ldr	r0, [pc, #580]	; (8001f2c <FreqMenu_DrawPresetMenu+0x810>)
 8001ce8:	f00d fd80 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cec:	7abb      	ldrb	r3, [r7, #10]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	488c      	ldr	r0, [pc, #560]	; (8001f30 <FreqMenu_DrawPresetMenu+0x814>)
 8001d00:	f00d fd74 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d04:	7a7b      	ldrb	r3, [r7, #9]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d14:	2105      	movs	r1, #5
 8001d16:	4887      	ldr	r0, [pc, #540]	; (8001f34 <FreqMenu_DrawPresetMenu+0x818>)
 8001d18:	f00d fd68 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2302      	movs	r3, #2
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d2c:	2178      	movs	r1, #120	; 0x78
 8001d2e:	4882      	ldr	r0, [pc, #520]	; (8001f38 <FreqMenu_DrawPresetMenu+0x81c>)
 8001d30:	f00d fd5c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d44:	2178      	movs	r1, #120	; 0x78
 8001d46:	487d      	ldr	r0, [pc, #500]	; (8001f3c <FreqMenu_DrawPresetMenu+0x820>)
 8001d48:	f00d fd50 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	2302      	movs	r3, #2
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d5c:	2178      	movs	r1, #120	; 0x78
 8001d5e:	4878      	ldr	r0, [pc, #480]	; (8001f40 <FreqMenu_DrawPresetMenu+0x824>)
 8001d60:	f00d fd44 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d74:	2178      	movs	r1, #120	; 0x78
 8001d76:	4873      	ldr	r0, [pc, #460]	; (8001f44 <FreqMenu_DrawPresetMenu+0x828>)
 8001d78:	f00d fd38 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2302      	movs	r3, #2
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d8c:	2178      	movs	r1, #120	; 0x78
 8001d8e:	486e      	ldr	r0, [pc, #440]	; (8001f48 <FreqMenu_DrawPresetMenu+0x82c>)
 8001d90:	f00d fd2c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d94:	7abb      	ldrb	r3, [r7, #10]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da4:	2178      	movs	r1, #120	; 0x78
 8001da6:	4869      	ldr	r0, [pc, #420]	; (8001f4c <FreqMenu_DrawPresetMenu+0x830>)
 8001da8:	f00d fd20 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dac:	7a7b      	ldrb	r3, [r7, #9]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	2302      	movs	r3, #2
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dbc:	2178      	movs	r1, #120	; 0x78
 8001dbe:	4864      	ldr	r0, [pc, #400]	; (8001f50 <FreqMenu_DrawPresetMenu+0x834>)
 8001dc0:	f00d fd14 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 8001dc4:	f000 bf38 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd8:	2105      	movs	r1, #5
 8001dda:	4850      	ldr	r0, [pc, #320]	; (8001f1c <FreqMenu_DrawPresetMenu+0x800>)
 8001ddc:	f00d fd06 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df0:	2105      	movs	r1, #5
 8001df2:	484b      	ldr	r0, [pc, #300]	; (8001f20 <FreqMenu_DrawPresetMenu+0x804>)
 8001df4:	f00d fcfa 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df8:	7b7b      	ldrb	r3, [r7, #13]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e08:	2105      	movs	r1, #5
 8001e0a:	4846      	ldr	r0, [pc, #280]	; (8001f24 <FreqMenu_DrawPresetMenu+0x808>)
 8001e0c:	f00d fcee 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2302      	movs	r3, #2
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e20:	2105      	movs	r1, #5
 8001e22:	4841      	ldr	r0, [pc, #260]	; (8001f28 <FreqMenu_DrawPresetMenu+0x80c>)
 8001e24:	f00d fce2 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	2302      	movs	r3, #2
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	2105      	movs	r1, #5
 8001e3a:	483c      	ldr	r0, [pc, #240]	; (8001f2c <FreqMenu_DrawPresetMenu+0x810>)
 8001e3c:	f00d fcd6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e40:	7abb      	ldrb	r3, [r7, #10]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	2300      	movs	r3, #0
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	2302      	movs	r3, #2
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e50:	2105      	movs	r1, #5
 8001e52:	4837      	ldr	r0, [pc, #220]	; (8001f30 <FreqMenu_DrawPresetMenu+0x814>)
 8001e54:	f00d fcca 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e58:	7a7b      	ldrb	r3, [r7, #9]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	2302      	movs	r3, #2
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e68:	2105      	movs	r1, #5
 8001e6a:	4832      	ldr	r0, [pc, #200]	; (8001f34 <FreqMenu_DrawPresetMenu+0x818>)
 8001e6c:	f00d fcbe 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	2302      	movs	r3, #2
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e80:	2178      	movs	r1, #120	; 0x78
 8001e82:	482d      	ldr	r0, [pc, #180]	; (8001f38 <FreqMenu_DrawPresetMenu+0x81c>)
 8001e84:	f00d fcb2 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	2302      	movs	r3, #2
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e98:	2178      	movs	r1, #120	; 0x78
 8001e9a:	4828      	ldr	r0, [pc, #160]	; (8001f3c <FreqMenu_DrawPresetMenu+0x820>)
 8001e9c:	f00d fca6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea0:	7b7b      	ldrb	r3, [r7, #13]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb0:	2178      	movs	r1, #120	; 0x78
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <FreqMenu_DrawPresetMenu+0x824>)
 8001eb4:	f00d fc9a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb8:	7b3b      	ldrb	r3, [r7, #12]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec8:	2178      	movs	r1, #120	; 0x78
 8001eca:	481e      	ldr	r0, [pc, #120]	; (8001f44 <FreqMenu_DrawPresetMenu+0x828>)
 8001ecc:	f00d fc8e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ee0:	2178      	movs	r1, #120	; 0x78
 8001ee2:	4819      	ldr	r0, [pc, #100]	; (8001f48 <FreqMenu_DrawPresetMenu+0x82c>)
 8001ee4:	f00d fc82 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee8:	7abb      	ldrb	r3, [r7, #10]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef8:	2178      	movs	r1, #120	; 0x78
 8001efa:	4814      	ldr	r0, [pc, #80]	; (8001f4c <FreqMenu_DrawPresetMenu+0x830>)
 8001efc:	f00d fc76 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f00:	7a7b      	ldrb	r3, [r7, #9]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	2300      	movs	r3, #0
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2302      	movs	r3, #2
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f10:	2178      	movs	r1, #120	; 0x78
 8001f12:	480f      	ldr	r0, [pc, #60]	; (8001f50 <FreqMenu_DrawPresetMenu+0x834>)
 8001f14:	f00d fc6a 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 8001f18:	f000 be8e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001f1c:	08014878 	.word	0x08014878
 8001f20:	08014880 	.word	0x08014880
 8001f24:	08014888 	.word	0x08014888
 8001f28:	08014890 	.word	0x08014890
 8001f2c:	08014898 	.word	0x08014898
 8001f30:	080148a0 	.word	0x080148a0
 8001f34:	080148a8 	.word	0x080148a8
 8001f38:	080148b0 	.word	0x080148b0
 8001f3c:	080148b8 	.word	0x080148b8
 8001f40:	080148c0 	.word	0x080148c0
 8001f44:	080148c8 	.word	0x080148c8
 8001f48:	080148d0 	.word	0x080148d0
 8001f4c:	080148d8 	.word	0x080148d8
 8001f50:	080148e0 	.word	0x080148e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f64:	2105      	movs	r1, #5
 8001f66:	48a5      	ldr	r0, [pc, #660]	; (80021fc <FreqMenu_DrawPresetMenu+0xae0>)
 8001f68:	f00d fc40 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2302      	movs	r3, #2
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	48a0      	ldr	r0, [pc, #640]	; (8002200 <FreqMenu_DrawPresetMenu+0xae4>)
 8001f80:	f00d fc34 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f94:	2105      	movs	r1, #5
 8001f96:	489b      	ldr	r0, [pc, #620]	; (8002204 <FreqMenu_DrawPresetMenu+0xae8>)
 8001f98:	f00d fc28 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f9c:	7b3b      	ldrb	r3, [r7, #12]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fac:	2105      	movs	r1, #5
 8001fae:	4896      	ldr	r0, [pc, #600]	; (8002208 <FreqMenu_DrawPresetMenu+0xaec>)
 8001fb0:	f00d fc1c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	4891      	ldr	r0, [pc, #580]	; (800220c <FreqMenu_DrawPresetMenu+0xaf0>)
 8001fc8:	f00d fc10 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fcc:	7abb      	ldrb	r3, [r7, #10]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2105      	movs	r1, #5
 8001fde:	488c      	ldr	r0, [pc, #560]	; (8002210 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001fe0:	f00d fc04 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe4:	7a7b      	ldrb	r3, [r7, #9]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	2302      	movs	r3, #2
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff4:	2105      	movs	r1, #5
 8001ff6:	4887      	ldr	r0, [pc, #540]	; (8002214 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001ff8:	f00d fbf8 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	2302      	movs	r3, #2
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800200c:	2178      	movs	r1, #120	; 0x78
 800200e:	4882      	ldr	r0, [pc, #520]	; (8002218 <FreqMenu_DrawPresetMenu+0xafc>)
 8002010:	f00d fbec 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	b29a      	uxth	r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2302      	movs	r3, #2
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002024:	2178      	movs	r1, #120	; 0x78
 8002026:	487d      	ldr	r0, [pc, #500]	; (800221c <FreqMenu_DrawPresetMenu+0xb00>)
 8002028:	f00d fbe0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800202c:	7b7b      	ldrb	r3, [r7, #13]
 800202e:	b29a      	uxth	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2302      	movs	r3, #2
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800203c:	2178      	movs	r1, #120	; 0x78
 800203e:	4878      	ldr	r0, [pc, #480]	; (8002220 <FreqMenu_DrawPresetMenu+0xb04>)
 8002040:	f00d fbd4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002044:	7b3b      	ldrb	r3, [r7, #12]
 8002046:	b29a      	uxth	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2302      	movs	r3, #2
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002054:	2178      	movs	r1, #120	; 0x78
 8002056:	4873      	ldr	r0, [pc, #460]	; (8002224 <FreqMenu_DrawPresetMenu+0xb08>)
 8002058:	f00d fbc8 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800205c:	7afb      	ldrb	r3, [r7, #11]
 800205e:	b29a      	uxth	r2, r3
 8002060:	2300      	movs	r3, #0
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2302      	movs	r3, #2
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800206c:	2178      	movs	r1, #120	; 0x78
 800206e:	486e      	ldr	r0, [pc, #440]	; (8002228 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002070:	f00d fbbc 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002074:	7abb      	ldrb	r3, [r7, #10]
 8002076:	b29a      	uxth	r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	2302      	movs	r3, #2
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002084:	2178      	movs	r1, #120	; 0x78
 8002086:	4869      	ldr	r0, [pc, #420]	; (800222c <FreqMenu_DrawPresetMenu+0xb10>)
 8002088:	f00d fbb0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800208c:	7a7b      	ldrb	r3, [r7, #9]
 800208e:	b29a      	uxth	r2, r3
 8002090:	2300      	movs	r3, #0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	2302      	movs	r3, #2
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800209c:	2178      	movs	r1, #120	; 0x78
 800209e:	4864      	ldr	r0, [pc, #400]	; (8002230 <FreqMenu_DrawPresetMenu+0xb14>)
 80020a0:	f00d fba4 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 80020a4:	f000 bdc8 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b8:	2105      	movs	r1, #5
 80020ba:	4850      	ldr	r0, [pc, #320]	; (80021fc <FreqMenu_DrawPresetMenu+0xae0>)
 80020bc:	f00d fb96 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c0:	7bbb      	ldrb	r3, [r7, #14]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d0:	2105      	movs	r1, #5
 80020d2:	484b      	ldr	r0, [pc, #300]	; (8002200 <FreqMenu_DrawPresetMenu+0xae4>)
 80020d4:	f00d fb8a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d8:	7b7b      	ldrb	r3, [r7, #13]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2302      	movs	r3, #2
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e8:	2105      	movs	r1, #5
 80020ea:	4846      	ldr	r0, [pc, #280]	; (8002204 <FreqMenu_DrawPresetMenu+0xae8>)
 80020ec:	f00d fb7e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f0:	7b3b      	ldrb	r3, [r7, #12]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	2302      	movs	r3, #2
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002100:	2105      	movs	r1, #5
 8002102:	4841      	ldr	r0, [pc, #260]	; (8002208 <FreqMenu_DrawPresetMenu+0xaec>)
 8002104:	f00d fb72 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	b29a      	uxth	r2, r3
 800210c:	2300      	movs	r3, #0
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2302      	movs	r3, #2
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002118:	2105      	movs	r1, #5
 800211a:	483c      	ldr	r0, [pc, #240]	; (800220c <FreqMenu_DrawPresetMenu+0xaf0>)
 800211c:	f00d fb66 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002120:	7abb      	ldrb	r3, [r7, #10]
 8002122:	b29a      	uxth	r2, r3
 8002124:	2300      	movs	r3, #0
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	2302      	movs	r3, #2
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002130:	2105      	movs	r1, #5
 8002132:	4837      	ldr	r0, [pc, #220]	; (8002210 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002134:	f00d fb5a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002138:	7a7b      	ldrb	r3, [r7, #9]
 800213a:	b29a      	uxth	r2, r3
 800213c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2302      	movs	r3, #2
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	2105      	movs	r1, #5
 800214a:	4832      	ldr	r0, [pc, #200]	; (8002214 <FreqMenu_DrawPresetMenu+0xaf8>)
 800214c:	f00d fb4e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	b29a      	uxth	r2, r3
 8002154:	2300      	movs	r3, #0
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	2302      	movs	r3, #2
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002160:	2178      	movs	r1, #120	; 0x78
 8002162:	482d      	ldr	r0, [pc, #180]	; (8002218 <FreqMenu_DrawPresetMenu+0xafc>)
 8002164:	f00d fb42 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	b29a      	uxth	r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	2302      	movs	r3, #2
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002178:	2178      	movs	r1, #120	; 0x78
 800217a:	4828      	ldr	r0, [pc, #160]	; (800221c <FreqMenu_DrawPresetMenu+0xb00>)
 800217c:	f00d fb36 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002180:	7b7b      	ldrb	r3, [r7, #13]
 8002182:	b29a      	uxth	r2, r3
 8002184:	2300      	movs	r3, #0
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	2302      	movs	r3, #2
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002190:	2178      	movs	r1, #120	; 0x78
 8002192:	4823      	ldr	r0, [pc, #140]	; (8002220 <FreqMenu_DrawPresetMenu+0xb04>)
 8002194:	f00d fb2a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002198:	7b3b      	ldrb	r3, [r7, #12]
 800219a:	b29a      	uxth	r2, r3
 800219c:	2300      	movs	r3, #0
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2302      	movs	r3, #2
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a8:	2178      	movs	r1, #120	; 0x78
 80021aa:	481e      	ldr	r0, [pc, #120]	; (8002224 <FreqMenu_DrawPresetMenu+0xb08>)
 80021ac:	f00d fb1e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2302      	movs	r3, #2
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c0:	2178      	movs	r1, #120	; 0x78
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <FreqMenu_DrawPresetMenu+0xb0c>)
 80021c4:	f00d fb12 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c8:	7abb      	ldrb	r3, [r7, #10]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2300      	movs	r3, #0
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	2302      	movs	r3, #2
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d8:	2178      	movs	r1, #120	; 0x78
 80021da:	4814      	ldr	r0, [pc, #80]	; (800222c <FreqMenu_DrawPresetMenu+0xb10>)
 80021dc:	f00d fb06 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021e0:	7a7b      	ldrb	r3, [r7, #9]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	2302      	movs	r3, #2
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021f0:	2178      	movs	r1, #120	; 0x78
 80021f2:	480f      	ldr	r0, [pc, #60]	; (8002230 <FreqMenu_DrawPresetMenu+0xb14>)
 80021f4:	f00d fafa 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 80021f8:	f000 bd1e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80021fc:	08014878 	.word	0x08014878
 8002200:	08014880 	.word	0x08014880
 8002204:	08014888 	.word	0x08014888
 8002208:	08014890 	.word	0x08014890
 800220c:	08014898 	.word	0x08014898
 8002210:	080148a0 	.word	0x080148a0
 8002214:	080148a8 	.word	0x080148a8
 8002218:	080148b0 	.word	0x080148b0
 800221c:	080148b8 	.word	0x080148b8
 8002220:	080148c0 	.word	0x080148c0
 8002224:	080148c8 	.word	0x080148c8
 8002228:	080148d0 	.word	0x080148d0
 800222c:	080148d8 	.word	0x080148d8
 8002230:	080148e0 	.word	0x080148e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	b29a      	uxth	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002244:	2105      	movs	r1, #5
 8002246:	48a5      	ldr	r0, [pc, #660]	; (80024dc <FreqMenu_DrawPresetMenu+0xdc0>)
 8002248:	f00d fad0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800224c:	7bbb      	ldrb	r3, [r7, #14]
 800224e:	b29a      	uxth	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800225c:	2105      	movs	r1, #5
 800225e:	48a0      	ldr	r0, [pc, #640]	; (80024e0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002260:	f00d fac4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002264:	7b7b      	ldrb	r3, [r7, #13]
 8002266:	b29a      	uxth	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002274:	2105      	movs	r1, #5
 8002276:	489b      	ldr	r0, [pc, #620]	; (80024e4 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002278:	f00d fab8 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800227c:	7b3b      	ldrb	r3, [r7, #12]
 800227e:	b29a      	uxth	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800228c:	2105      	movs	r1, #5
 800228e:	4896      	ldr	r0, [pc, #600]	; (80024e8 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002290:	f00d faac 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	b29a      	uxth	r2, r3
 8002298:	2300      	movs	r3, #0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2302      	movs	r3, #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a4:	2105      	movs	r1, #5
 80022a6:	4891      	ldr	r0, [pc, #580]	; (80024ec <FreqMenu_DrawPresetMenu+0xdd0>)
 80022a8:	f00d faa0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022ac:	7abb      	ldrb	r3, [r7, #10]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	2300      	movs	r3, #0
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2302      	movs	r3, #2
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022bc:	2105      	movs	r1, #5
 80022be:	488c      	ldr	r0, [pc, #560]	; (80024f0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80022c0:	f00d fa94 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c4:	7a7b      	ldrb	r3, [r7, #9]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	2302      	movs	r3, #2
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d4:	2105      	movs	r1, #5
 80022d6:	4887      	ldr	r0, [pc, #540]	; (80024f4 <FreqMenu_DrawPresetMenu+0xdd8>)
 80022d8:	f00d fa88 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2302      	movs	r3, #2
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2178      	movs	r1, #120	; 0x78
 80022ee:	4882      	ldr	r0, [pc, #520]	; (80024f8 <FreqMenu_DrawPresetMenu+0xddc>)
 80022f0:	f00d fa7c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2302      	movs	r3, #2
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002304:	2178      	movs	r1, #120	; 0x78
 8002306:	487d      	ldr	r0, [pc, #500]	; (80024fc <FreqMenu_DrawPresetMenu+0xde0>)
 8002308:	f00d fa70 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	b29a      	uxth	r2, r3
 8002310:	2300      	movs	r3, #0
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2302      	movs	r3, #2
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800231c:	2178      	movs	r1, #120	; 0x78
 800231e:	4878      	ldr	r0, [pc, #480]	; (8002500 <FreqMenu_DrawPresetMenu+0xde4>)
 8002320:	f00d fa64 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002324:	7b3b      	ldrb	r3, [r7, #12]
 8002326:	b29a      	uxth	r2, r3
 8002328:	2300      	movs	r3, #0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2302      	movs	r3, #2
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002334:	2178      	movs	r1, #120	; 0x78
 8002336:	4873      	ldr	r0, [pc, #460]	; (8002504 <FreqMenu_DrawPresetMenu+0xde8>)
 8002338:	f00d fa58 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	b29a      	uxth	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	2302      	movs	r3, #2
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800234c:	2178      	movs	r1, #120	; 0x78
 800234e:	486e      	ldr	r0, [pc, #440]	; (8002508 <FreqMenu_DrawPresetMenu+0xdec>)
 8002350:	f00d fa4c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002354:	7abb      	ldrb	r3, [r7, #10]
 8002356:	b29a      	uxth	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2302      	movs	r3, #2
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002364:	2178      	movs	r1, #120	; 0x78
 8002366:	4869      	ldr	r0, [pc, #420]	; (800250c <FreqMenu_DrawPresetMenu+0xdf0>)
 8002368:	f00d fa40 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800236c:	7a7b      	ldrb	r3, [r7, #9]
 800236e:	b29a      	uxth	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2302      	movs	r3, #2
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800237c:	2178      	movs	r1, #120	; 0x78
 800237e:	4864      	ldr	r0, [pc, #400]	; (8002510 <FreqMenu_DrawPresetMenu+0xdf4>)
 8002380:	f00d fa34 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 8002384:	f000 bc58 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	b29a      	uxth	r2, r3
 800238c:	2300      	movs	r3, #0
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	2302      	movs	r3, #2
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002398:	2105      	movs	r1, #5
 800239a:	4850      	ldr	r0, [pc, #320]	; (80024dc <FreqMenu_DrawPresetMenu+0xdc0>)
 800239c:	f00d fa26 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	2300      	movs	r3, #0
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b0:	2105      	movs	r1, #5
 80023b2:	484b      	ldr	r0, [pc, #300]	; (80024e0 <FreqMenu_DrawPresetMenu+0xdc4>)
 80023b4:	f00d fa1a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b8:	7b7b      	ldrb	r3, [r7, #13]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2302      	movs	r3, #2
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c8:	2105      	movs	r1, #5
 80023ca:	4846      	ldr	r0, [pc, #280]	; (80024e4 <FreqMenu_DrawPresetMenu+0xdc8>)
 80023cc:	f00d fa0e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d0:	7b3b      	ldrb	r3, [r7, #12]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	2300      	movs	r3, #0
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	2302      	movs	r3, #2
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e0:	2105      	movs	r1, #5
 80023e2:	4841      	ldr	r0, [pc, #260]	; (80024e8 <FreqMenu_DrawPresetMenu+0xdcc>)
 80023e4:	f00d fa02 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	2300      	movs	r3, #0
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2302      	movs	r3, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f8:	2105      	movs	r1, #5
 80023fa:	483c      	ldr	r0, [pc, #240]	; (80024ec <FreqMenu_DrawPresetMenu+0xdd0>)
 80023fc:	f00d f9f6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002400:	7abb      	ldrb	r3, [r7, #10]
 8002402:	b29a      	uxth	r2, r3
 8002404:	2300      	movs	r3, #0
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2302      	movs	r3, #2
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002410:	2105      	movs	r1, #5
 8002412:	4837      	ldr	r0, [pc, #220]	; (80024f0 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002414:	f00d f9ea 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002418:	7a7b      	ldrb	r3, [r7, #9]
 800241a:	b29a      	uxth	r2, r3
 800241c:	2300      	movs	r3, #0
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2302      	movs	r3, #2
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002428:	2105      	movs	r1, #5
 800242a:	4832      	ldr	r0, [pc, #200]	; (80024f4 <FreqMenu_DrawPresetMenu+0xdd8>)
 800242c:	f00d f9de 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	b29a      	uxth	r2, r3
 8002434:	2300      	movs	r3, #0
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	2302      	movs	r3, #2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002440:	2178      	movs	r1, #120	; 0x78
 8002442:	482d      	ldr	r0, [pc, #180]	; (80024f8 <FreqMenu_DrawPresetMenu+0xddc>)
 8002444:	f00d f9d2 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	b29a      	uxth	r2, r3
 800244c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	2302      	movs	r3, #2
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2300      	movs	r3, #0
 8002458:	2178      	movs	r1, #120	; 0x78
 800245a:	4828      	ldr	r0, [pc, #160]	; (80024fc <FreqMenu_DrawPresetMenu+0xde0>)
 800245c:	f00d f9c6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002460:	7b7b      	ldrb	r3, [r7, #13]
 8002462:	b29a      	uxth	r2, r3
 8002464:	2300      	movs	r3, #0
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2302      	movs	r3, #2
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002470:	2178      	movs	r1, #120	; 0x78
 8002472:	4823      	ldr	r0, [pc, #140]	; (8002500 <FreqMenu_DrawPresetMenu+0xde4>)
 8002474:	f00d f9ba 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002478:	7b3b      	ldrb	r3, [r7, #12]
 800247a:	b29a      	uxth	r2, r3
 800247c:	2300      	movs	r3, #0
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2302      	movs	r3, #2
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002488:	2178      	movs	r1, #120	; 0x78
 800248a:	481e      	ldr	r0, [pc, #120]	; (8002504 <FreqMenu_DrawPresetMenu+0xde8>)
 800248c:	f00d f9ae 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002490:	7afb      	ldrb	r3, [r7, #11]
 8002492:	b29a      	uxth	r2, r3
 8002494:	2300      	movs	r3, #0
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2302      	movs	r3, #2
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a0:	2178      	movs	r1, #120	; 0x78
 80024a2:	4819      	ldr	r0, [pc, #100]	; (8002508 <FreqMenu_DrawPresetMenu+0xdec>)
 80024a4:	f00d f9a2 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a8:	7abb      	ldrb	r3, [r7, #10]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	2302      	movs	r3, #2
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b8:	2178      	movs	r1, #120	; 0x78
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <FreqMenu_DrawPresetMenu+0xdf0>)
 80024bc:	f00d f996 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c0:	7a7b      	ldrb	r3, [r7, #9]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	2302      	movs	r3, #2
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d0:	2178      	movs	r1, #120	; 0x78
 80024d2:	480f      	ldr	r0, [pc, #60]	; (8002510 <FreqMenu_DrawPresetMenu+0xdf4>)
 80024d4:	f00d f98a 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 80024d8:	e3ae      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80024da:	bf00      	nop
 80024dc:	08014878 	.word	0x08014878
 80024e0:	08014880 	.word	0x08014880
 80024e4:	08014888 	.word	0x08014888
 80024e8:	08014890 	.word	0x08014890
 80024ec:	08014898 	.word	0x08014898
 80024f0:	080148a0 	.word	0x080148a0
 80024f4:	080148a8 	.word	0x080148a8
 80024f8:	080148b0 	.word	0x080148b0
 80024fc:	080148b8 	.word	0x080148b8
 8002500:	080148c0 	.word	0x080148c0
 8002504:	080148c8 	.word	0x080148c8
 8002508:	080148d0 	.word	0x080148d0
 800250c:	080148d8 	.word	0x080148d8
 8002510:	080148e0 	.word	0x080148e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	b29a      	uxth	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2302      	movs	r3, #2
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002524:	2105      	movs	r1, #5
 8002526:	48a4      	ldr	r0, [pc, #656]	; (80027b8 <FreqMenu_DrawPresetMenu+0x109c>)
 8002528:	f00d f960 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	b29a      	uxth	r2, r3
 8002530:	2300      	movs	r3, #0
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2302      	movs	r3, #2
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800253c:	2105      	movs	r1, #5
 800253e:	489f      	ldr	r0, [pc, #636]	; (80027bc <FreqMenu_DrawPresetMenu+0x10a0>)
 8002540:	f00d f954 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002544:	7b7b      	ldrb	r3, [r7, #13]
 8002546:	b29a      	uxth	r2, r3
 8002548:	2300      	movs	r3, #0
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	2302      	movs	r3, #2
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002554:	2105      	movs	r1, #5
 8002556:	489a      	ldr	r0, [pc, #616]	; (80027c0 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002558:	f00d f948 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800255c:	7b3b      	ldrb	r3, [r7, #12]
 800255e:	b29a      	uxth	r2, r3
 8002560:	2300      	movs	r3, #0
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	2302      	movs	r3, #2
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800256c:	2105      	movs	r1, #5
 800256e:	4895      	ldr	r0, [pc, #596]	; (80027c4 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002570:	f00d f93c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002574:	7afb      	ldrb	r3, [r7, #11]
 8002576:	b29a      	uxth	r2, r3
 8002578:	2300      	movs	r3, #0
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	2302      	movs	r3, #2
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002584:	2105      	movs	r1, #5
 8002586:	4890      	ldr	r0, [pc, #576]	; (80027c8 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002588:	f00d f930 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800258c:	7abb      	ldrb	r3, [r7, #10]
 800258e:	b29a      	uxth	r2, r3
 8002590:	2300      	movs	r3, #0
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	2302      	movs	r3, #2
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800259c:	2105      	movs	r1, #5
 800259e:	488b      	ldr	r0, [pc, #556]	; (80027cc <FreqMenu_DrawPresetMenu+0x10b0>)
 80025a0:	f00d f924 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a4:	7a7b      	ldrb	r3, [r7, #9]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2302      	movs	r3, #2
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b4:	2105      	movs	r1, #5
 80025b6:	4886      	ldr	r0, [pc, #536]	; (80027d0 <FreqMenu_DrawPresetMenu+0x10b4>)
 80025b8:	f00d f918 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	2300      	movs	r3, #0
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	2302      	movs	r3, #2
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025cc:	2178      	movs	r1, #120	; 0x78
 80025ce:	4881      	ldr	r0, [pc, #516]	; (80027d4 <FreqMenu_DrawPresetMenu+0x10b8>)
 80025d0:	f00d f90c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2302      	movs	r3, #2
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025e4:	2178      	movs	r1, #120	; 0x78
 80025e6:	487c      	ldr	r0, [pc, #496]	; (80027d8 <FreqMenu_DrawPresetMenu+0x10bc>)
 80025e8:	f00d f900 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80025ec:	7b7b      	ldrb	r3, [r7, #13]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2302      	movs	r3, #2
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	2178      	movs	r1, #120	; 0x78
 80025fe:	4877      	ldr	r0, [pc, #476]	; (80027dc <FreqMenu_DrawPresetMenu+0x10c0>)
 8002600:	f00d f8f4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002604:	7b3b      	ldrb	r3, [r7, #12]
 8002606:	b29a      	uxth	r2, r3
 8002608:	2300      	movs	r3, #0
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	2302      	movs	r3, #2
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002614:	2178      	movs	r1, #120	; 0x78
 8002616:	4872      	ldr	r0, [pc, #456]	; (80027e0 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002618:	f00d f8e8 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800261c:	7afb      	ldrb	r3, [r7, #11]
 800261e:	b29a      	uxth	r2, r3
 8002620:	2300      	movs	r3, #0
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	2302      	movs	r3, #2
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800262c:	2178      	movs	r1, #120	; 0x78
 800262e:	486d      	ldr	r0, [pc, #436]	; (80027e4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002630:	f00d f8dc 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002634:	7abb      	ldrb	r3, [r7, #10]
 8002636:	b29a      	uxth	r2, r3
 8002638:	2300      	movs	r3, #0
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	2302      	movs	r3, #2
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002644:	2178      	movs	r1, #120	; 0x78
 8002646:	4868      	ldr	r0, [pc, #416]	; (80027e8 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002648:	f00d f8d0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800264c:	7a7b      	ldrb	r3, [r7, #9]
 800264e:	b29a      	uxth	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	2302      	movs	r3, #2
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800265c:	2178      	movs	r1, #120	; 0x78
 800265e:	4863      	ldr	r0, [pc, #396]	; (80027ec <FreqMenu_DrawPresetMenu+0x10d0>)
 8002660:	f00d f8c4 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 8002664:	e2e8      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	b29a      	uxth	r2, r3
 800266a:	2300      	movs	r3, #0
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	2302      	movs	r3, #2
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002676:	2105      	movs	r1, #5
 8002678:	484f      	ldr	r0, [pc, #316]	; (80027b8 <FreqMenu_DrawPresetMenu+0x109c>)
 800267a:	f00d f8b7 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267e:	7bbb      	ldrb	r3, [r7, #14]
 8002680:	b29a      	uxth	r2, r3
 8002682:	2300      	movs	r3, #0
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	2302      	movs	r3, #2
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268e:	2105      	movs	r1, #5
 8002690:	484a      	ldr	r0, [pc, #296]	; (80027bc <FreqMenu_DrawPresetMenu+0x10a0>)
 8002692:	f00d f8ab 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002696:	7b7b      	ldrb	r3, [r7, #13]
 8002698:	b29a      	uxth	r2, r3
 800269a:	2300      	movs	r3, #0
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	2302      	movs	r3, #2
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a6:	2105      	movs	r1, #5
 80026a8:	4845      	ldr	r0, [pc, #276]	; (80027c0 <FreqMenu_DrawPresetMenu+0x10a4>)
 80026aa:	f00d f89f 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ae:	7b3b      	ldrb	r3, [r7, #12]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	2300      	movs	r3, #0
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	2302      	movs	r3, #2
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026be:	2105      	movs	r1, #5
 80026c0:	4840      	ldr	r0, [pc, #256]	; (80027c4 <FreqMenu_DrawPresetMenu+0x10a8>)
 80026c2:	f00d f893 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	2300      	movs	r3, #0
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	2302      	movs	r3, #2
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d6:	2105      	movs	r1, #5
 80026d8:	483b      	ldr	r0, [pc, #236]	; (80027c8 <FreqMenu_DrawPresetMenu+0x10ac>)
 80026da:	f00d f887 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026de:	7abb      	ldrb	r3, [r7, #10]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	2300      	movs	r3, #0
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	2302      	movs	r3, #2
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ee:	2105      	movs	r1, #5
 80026f0:	4836      	ldr	r0, [pc, #216]	; (80027cc <FreqMenu_DrawPresetMenu+0x10b0>)
 80026f2:	f00d f87b 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f6:	7a7b      	ldrb	r3, [r7, #9]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	2300      	movs	r3, #0
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	2302      	movs	r3, #2
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002706:	2105      	movs	r1, #5
 8002708:	4831      	ldr	r0, [pc, #196]	; (80027d0 <FreqMenu_DrawPresetMenu+0x10b4>)
 800270a:	f00d f86f 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	b29a      	uxth	r2, r3
 8002712:	2300      	movs	r3, #0
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2302      	movs	r3, #2
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800271e:	2178      	movs	r1, #120	; 0x78
 8002720:	482c      	ldr	r0, [pc, #176]	; (80027d4 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002722:	f00d f863 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	b29a      	uxth	r2, r3
 800272a:	2300      	movs	r3, #0
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	2302      	movs	r3, #2
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002736:	2178      	movs	r1, #120	; 0x78
 8002738:	4827      	ldr	r0, [pc, #156]	; (80027d8 <FreqMenu_DrawPresetMenu+0x10bc>)
 800273a:	f00d f857 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800273e:	7b7b      	ldrb	r3, [r7, #13]
 8002740:	b29a      	uxth	r2, r3
 8002742:	2300      	movs	r3, #0
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2302      	movs	r3, #2
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800274e:	2178      	movs	r1, #120	; 0x78
 8002750:	4822      	ldr	r0, [pc, #136]	; (80027dc <FreqMenu_DrawPresetMenu+0x10c0>)
 8002752:	f00d f84b 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002756:	7b3b      	ldrb	r3, [r7, #12]
 8002758:	b29a      	uxth	r2, r3
 800275a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	2178      	movs	r1, #120	; 0x78
 8002768:	481d      	ldr	r0, [pc, #116]	; (80027e0 <FreqMenu_DrawPresetMenu+0x10c4>)
 800276a:	f00d f83f 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	b29a      	uxth	r2, r3
 8002772:	2300      	movs	r3, #0
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2302      	movs	r3, #2
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800277e:	2178      	movs	r1, #120	; 0x78
 8002780:	4818      	ldr	r0, [pc, #96]	; (80027e4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002782:	f00d f833 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002786:	7abb      	ldrb	r3, [r7, #10]
 8002788:	b29a      	uxth	r2, r3
 800278a:	2300      	movs	r3, #0
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	2302      	movs	r3, #2
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002796:	2178      	movs	r1, #120	; 0x78
 8002798:	4813      	ldr	r0, [pc, #76]	; (80027e8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800279a:	f00d f827 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800279e:	7a7b      	ldrb	r3, [r7, #9]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	2300      	movs	r3, #0
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2302      	movs	r3, #2
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ae:	2178      	movs	r1, #120	; 0x78
 80027b0:	480e      	ldr	r0, [pc, #56]	; (80027ec <FreqMenu_DrawPresetMenu+0x10d0>)
 80027b2:	f00d f81b 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 80027b6:	e23f      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80027b8:	08014878 	.word	0x08014878
 80027bc:	08014880 	.word	0x08014880
 80027c0:	08014888 	.word	0x08014888
 80027c4:	08014890 	.word	0x08014890
 80027c8:	08014898 	.word	0x08014898
 80027cc:	080148a0 	.word	0x080148a0
 80027d0:	080148a8 	.word	0x080148a8
 80027d4:	080148b0 	.word	0x080148b0
 80027d8:	080148b8 	.word	0x080148b8
 80027dc:	080148c0 	.word	0x080148c0
 80027e0:	080148c8 	.word	0x080148c8
 80027e4:	080148d0 	.word	0x080148d0
 80027e8:	080148d8 	.word	0x080148d8
 80027ec:	080148e0 	.word	0x080148e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	2300      	movs	r3, #0
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	2302      	movs	r3, #2
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002800:	2105      	movs	r1, #5
 8002802:	48a4      	ldr	r0, [pc, #656]	; (8002a94 <FreqMenu_DrawPresetMenu+0x1378>)
 8002804:	f00c fff2 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002808:	7bbb      	ldrb	r3, [r7, #14]
 800280a:	b29a      	uxth	r2, r3
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002818:	2105      	movs	r1, #5
 800281a:	489f      	ldr	r0, [pc, #636]	; (8002a98 <FreqMenu_DrawPresetMenu+0x137c>)
 800281c:	f00c ffe6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002820:	7b7b      	ldrb	r3, [r7, #13]
 8002822:	b29a      	uxth	r2, r3
 8002824:	2300      	movs	r3, #0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2302      	movs	r3, #2
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002830:	2105      	movs	r1, #5
 8002832:	489a      	ldr	r0, [pc, #616]	; (8002a9c <FreqMenu_DrawPresetMenu+0x1380>)
 8002834:	f00c ffda 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002838:	7b3b      	ldrb	r3, [r7, #12]
 800283a:	b29a      	uxth	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2302      	movs	r3, #2
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002848:	2105      	movs	r1, #5
 800284a:	4895      	ldr	r0, [pc, #596]	; (8002aa0 <FreqMenu_DrawPresetMenu+0x1384>)
 800284c:	f00c ffce 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	b29a      	uxth	r2, r3
 8002854:	2300      	movs	r3, #0
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2302      	movs	r3, #2
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002860:	2105      	movs	r1, #5
 8002862:	4890      	ldr	r0, [pc, #576]	; (8002aa4 <FreqMenu_DrawPresetMenu+0x1388>)
 8002864:	f00c ffc2 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002868:	7abb      	ldrb	r3, [r7, #10]
 800286a:	b29a      	uxth	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2302      	movs	r3, #2
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002878:	2105      	movs	r1, #5
 800287a:	488b      	ldr	r0, [pc, #556]	; (8002aa8 <FreqMenu_DrawPresetMenu+0x138c>)
 800287c:	f00c ffb6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002880:	7a7b      	ldrb	r3, [r7, #9]
 8002882:	b29a      	uxth	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2302      	movs	r3, #2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002890:	2105      	movs	r1, #5
 8002892:	4886      	ldr	r0, [pc, #536]	; (8002aac <FreqMenu_DrawPresetMenu+0x1390>)
 8002894:	f00c ffaa 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	b29a      	uxth	r2, r3
 800289c:	2300      	movs	r3, #0
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2302      	movs	r3, #2
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a8:	2178      	movs	r1, #120	; 0x78
 80028aa:	4881      	ldr	r0, [pc, #516]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x1394>)
 80028ac:	f00c ff9e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c0:	2178      	movs	r1, #120	; 0x78
 80028c2:	487c      	ldr	r0, [pc, #496]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x1398>)
 80028c4:	f00c ff92 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c8:	7b7b      	ldrb	r3, [r7, #13]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2302      	movs	r3, #2
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d8:	2178      	movs	r1, #120	; 0x78
 80028da:	4877      	ldr	r0, [pc, #476]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x139c>)
 80028dc:	f00c ff86 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028e0:	7b3b      	ldrb	r3, [r7, #12]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	2300      	movs	r3, #0
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	2302      	movs	r3, #2
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028f0:	2178      	movs	r1, #120	; 0x78
 80028f2:	4872      	ldr	r0, [pc, #456]	; (8002abc <FreqMenu_DrawPresetMenu+0x13a0>)
 80028f4:	f00c ff7a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028f8:	7afb      	ldrb	r3, [r7, #11]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	2302      	movs	r3, #2
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2300      	movs	r3, #0
 8002908:	2178      	movs	r1, #120	; 0x78
 800290a:	486d      	ldr	r0, [pc, #436]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x13a4>)
 800290c:	f00c ff6e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002910:	7abb      	ldrb	r3, [r7, #10]
 8002912:	b29a      	uxth	r2, r3
 8002914:	2300      	movs	r3, #0
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2302      	movs	r3, #2
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002920:	2178      	movs	r1, #120	; 0x78
 8002922:	4868      	ldr	r0, [pc, #416]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002924:	f00c ff62 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002928:	7a7b      	ldrb	r3, [r7, #9]
 800292a:	b29a      	uxth	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2302      	movs	r3, #2
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002938:	2178      	movs	r1, #120	; 0x78
 800293a:	4863      	ldr	r0, [pc, #396]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x13ac>)
 800293c:	f00c ff56 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 8002940:	e17a      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	b29a      	uxth	r2, r3
 8002946:	2300      	movs	r3, #0
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002952:	2105      	movs	r1, #5
 8002954:	484f      	ldr	r0, [pc, #316]	; (8002a94 <FreqMenu_DrawPresetMenu+0x1378>)
 8002956:	f00c ff49 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800295a:	7bbb      	ldrb	r3, [r7, #14]
 800295c:	b29a      	uxth	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2302      	movs	r3, #2
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800296a:	2105      	movs	r1, #5
 800296c:	484a      	ldr	r0, [pc, #296]	; (8002a98 <FreqMenu_DrawPresetMenu+0x137c>)
 800296e:	f00c ff3d 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	b29a      	uxth	r2, r3
 8002976:	2300      	movs	r3, #0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002982:	2105      	movs	r1, #5
 8002984:	4845      	ldr	r0, [pc, #276]	; (8002a9c <FreqMenu_DrawPresetMenu+0x1380>)
 8002986:	f00c ff31 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800298a:	7b3b      	ldrb	r3, [r7, #12]
 800298c:	b29a      	uxth	r2, r3
 800298e:	2300      	movs	r3, #0
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2302      	movs	r3, #2
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800299a:	2105      	movs	r1, #5
 800299c:	4840      	ldr	r0, [pc, #256]	; (8002aa0 <FreqMenu_DrawPresetMenu+0x1384>)
 800299e:	f00c ff25 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029a2:	7afb      	ldrb	r3, [r7, #11]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2302      	movs	r3, #2
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029b2:	2105      	movs	r1, #5
 80029b4:	483b      	ldr	r0, [pc, #236]	; (8002aa4 <FreqMenu_DrawPresetMenu+0x1388>)
 80029b6:	f00c ff19 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ba:	7abb      	ldrb	r3, [r7, #10]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	2302      	movs	r3, #2
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ca:	2105      	movs	r1, #5
 80029cc:	4836      	ldr	r0, [pc, #216]	; (8002aa8 <FreqMenu_DrawPresetMenu+0x138c>)
 80029ce:	f00c ff0d 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d2:	7a7b      	ldrb	r3, [r7, #9]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	2300      	movs	r3, #0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2302      	movs	r3, #2
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e2:	2105      	movs	r1, #5
 80029e4:	4831      	ldr	r0, [pc, #196]	; (8002aac <FreqMenu_DrawPresetMenu+0x1390>)
 80029e6:	f00c ff01 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	2300      	movs	r3, #0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2302      	movs	r3, #2
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fa:	2178      	movs	r1, #120	; 0x78
 80029fc:	482c      	ldr	r0, [pc, #176]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x1394>)
 80029fe:	f00c fef5 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a12:	2178      	movs	r1, #120	; 0x78
 8002a14:	4827      	ldr	r0, [pc, #156]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x1398>)
 8002a16:	f00c fee9 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1a:	7b7b      	ldrb	r3, [r7, #13]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2302      	movs	r3, #2
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2a:	2178      	movs	r1, #120	; 0x78
 8002a2c:	4822      	ldr	r0, [pc, #136]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x139c>)
 8002a2e:	f00c fedd 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a32:	7b3b      	ldrb	r3, [r7, #12]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a42:	2178      	movs	r1, #120	; 0x78
 8002a44:	481d      	ldr	r0, [pc, #116]	; (8002abc <FreqMenu_DrawPresetMenu+0x13a0>)
 8002a46:	f00c fed1 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2302      	movs	r3, #2
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5a:	2178      	movs	r1, #120	; 0x78
 8002a5c:	4818      	ldr	r0, [pc, #96]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002a5e:	f00c fec5 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a62:	7abb      	ldrb	r3, [r7, #10]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	2178      	movs	r1, #120	; 0x78
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002a76:	f00c feb9 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7a:	7a7b      	ldrb	r3, [r7, #9]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2302      	movs	r3, #2
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8a:	2178      	movs	r1, #120	; 0x78
 8002a8c:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x13ac>)
 8002a8e:	f00c fead 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 8002a92:	e0d1      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8002a94:	08014878 	.word	0x08014878
 8002a98:	08014880 	.word	0x08014880
 8002a9c:	08014888 	.word	0x08014888
 8002aa0:	08014890 	.word	0x08014890
 8002aa4:	08014898 	.word	0x08014898
 8002aa8:	080148a0 	.word	0x080148a0
 8002aac:	080148a8 	.word	0x080148a8
 8002ab0:	080148b0 	.word	0x080148b0
 8002ab4:	080148b8 	.word	0x080148b8
 8002ab8:	080148c0 	.word	0x080148c0
 8002abc:	080148c8 	.word	0x080148c8
 8002ac0:	080148d0 	.word	0x080148d0
 8002ac4:	080148d8 	.word	0x080148d8
 8002ac8:	080148e0 	.word	0x080148e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002adc:	2105      	movs	r1, #5
 8002ade:	4858      	ldr	r0, [pc, #352]	; (8002c40 <FreqMenu_DrawPresetMenu+0x1524>)
 8002ae0:	f00c fe84 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002af4:	2105      	movs	r1, #5
 8002af6:	4853      	ldr	r0, [pc, #332]	; (8002c44 <FreqMenu_DrawPresetMenu+0x1528>)
 8002af8:	f00c fe78 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002afc:	7b7b      	ldrb	r3, [r7, #13]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2302      	movs	r3, #2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	484e      	ldr	r0, [pc, #312]	; (8002c48 <FreqMenu_DrawPresetMenu+0x152c>)
 8002b10:	f00c fe6c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b24:	2105      	movs	r1, #5
 8002b26:	4849      	ldr	r0, [pc, #292]	; (8002c4c <FreqMenu_DrawPresetMenu+0x1530>)
 8002b28:	f00c fe60 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2302      	movs	r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b3c:	2105      	movs	r1, #5
 8002b3e:	4844      	ldr	r0, [pc, #272]	; (8002c50 <FreqMenu_DrawPresetMenu+0x1534>)
 8002b40:	f00c fe54 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b44:	7abb      	ldrb	r3, [r7, #10]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b54:	2105      	movs	r1, #5
 8002b56:	483f      	ldr	r0, [pc, #252]	; (8002c54 <FreqMenu_DrawPresetMenu+0x1538>)
 8002b58:	f00c fe48 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	483a      	ldr	r0, [pc, #232]	; (8002c58 <FreqMenu_DrawPresetMenu+0x153c>)
 8002b70:	f00c fe3c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b84:	2178      	movs	r1, #120	; 0x78
 8002b86:	4835      	ldr	r0, [pc, #212]	; (8002c5c <FreqMenu_DrawPresetMenu+0x1540>)
 8002b88:	f00c fe30 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2302      	movs	r3, #2
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b9c:	2178      	movs	r1, #120	; 0x78
 8002b9e:	4830      	ldr	r0, [pc, #192]	; (8002c60 <FreqMenu_DrawPresetMenu+0x1544>)
 8002ba0:	f00c fe24 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ba4:	7b7b      	ldrb	r3, [r7, #13]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2302      	movs	r3, #2
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bb4:	2178      	movs	r1, #120	; 0x78
 8002bb6:	482b      	ldr	r0, [pc, #172]	; (8002c64 <FreqMenu_DrawPresetMenu+0x1548>)
 8002bb8:	f00c fe18 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bbc:	7b3b      	ldrb	r3, [r7, #12]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bcc:	2178      	movs	r1, #120	; 0x78
 8002bce:	4826      	ldr	r0, [pc, #152]	; (8002c68 <FreqMenu_DrawPresetMenu+0x154c>)
 8002bd0:	f00c fe0c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2178      	movs	r1, #120	; 0x78
 8002be6:	4821      	ldr	r0, [pc, #132]	; (8002c6c <FreqMenu_DrawPresetMenu+0x1550>)
 8002be8:	f00c fe00 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bec:	7abb      	ldrb	r3, [r7, #10]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bfc:	2178      	movs	r1, #120	; 0x78
 8002bfe:	481c      	ldr	r0, [pc, #112]	; (8002c70 <FreqMenu_DrawPresetMenu+0x1554>)
 8002c00:	f00c fdf4 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c04:	7a7b      	ldrb	r3, [r7, #9]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	2302      	movs	r3, #2
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2178      	movs	r1, #120	; 0x78
 8002c16:	4817      	ldr	r0, [pc, #92]	; (8002c74 <FreqMenu_DrawPresetMenu+0x1558>)
 8002c18:	f00c fde8 	bl	800f7ec <ILI9341_Draw_Text>
			break;
 8002c1c:	bf00      	nop
 8002c1e:	e00b      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002c20:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	2301      	movs	r3, #1
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	22b4      	movs	r2, #180	; 0xb4
 8002c2e:	2105      	movs	r1, #5
 8002c30:	4811      	ldr	r0, [pc, #68]	; (8002c78 <FreqMenu_DrawPresetMenu+0x155c>)
 8002c32:	f00c fddb 	bl	800f7ec <ILI9341_Draw_Text>
}
 8002c36:	e7ff      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08014878 	.word	0x08014878
 8002c44:	08014880 	.word	0x08014880
 8002c48:	08014888 	.word	0x08014888
 8002c4c:	08014890 	.word	0x08014890
 8002c50:	08014898 	.word	0x08014898
 8002c54:	080148a0 	.word	0x080148a0
 8002c58:	080148a8 	.word	0x080148a8
 8002c5c:	080148b0 	.word	0x080148b0
 8002c60:	080148b8 	.word	0x080148b8
 8002c64:	080148c0 	.word	0x080148c0
 8002c68:	080148c8 	.word	0x080148c8
 8002c6c:	080148d0 	.word	0x080148d0
 8002c70:	080148d8 	.word	0x080148d8
 8002c74:	080148e0 	.word	0x080148e0
 8002c78:	080148ec 	.word	0x080148ec

08002c7c <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2302      	movs	r3, #2
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	220a      	movs	r2, #10
 8002c90:	2105      	movs	r1, #5
 8002c92:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <FreqMenu_DrawAdjustMenu+0x28>)
 8002c94:	f00c fdaa 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002c98:	f7fe f92e 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	0801491c 	.word	0x0801491c

08002ca8 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002ca8:	b5b0      	push	{r4, r5, r7, lr}
 8002caa:	b0a0      	sub	sp, #128	; 0x80
 8002cac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	220a      	movs	r2, #10
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	48a2      	ldr	r0, [pc, #648]	; (8002f48 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002cc0:	f00c fd94 	bl	800f7ec <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002cc4:	f7fe fbda 	bl	800147c <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002cc8:	2300      	movs	r3, #0
 8002cca:	667b      	str	r3, [r7, #100]	; 0x64
 8002ccc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002cda:	4b9c      	ldr	r3, [pc, #624]	; (8002f4c <FreqMenu_DrawSweepMenu+0x2a4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d109      	bne.n	8002cfa <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002ce6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cea:	4a99      	ldr	r2, [pc, #612]	; (8002f50 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002cec:	461c      	mov	r4, r3
 8002cee:	4615      	mov	r5, r2
 8002cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	7023      	strb	r3, [r4, #0]
 8002cf8:	e008      	b.n	8002d0c <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002cfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cfe:	4a95      	ldr	r2, [pc, #596]	; (8002f54 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002d00:	461c      	mov	r4, r3
 8002d02:	4615      	mov	r5, r2
 8002d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002d10:	2300      	movs	r3, #0
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	2302      	movs	r3, #2
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d1c:	2228      	movs	r2, #40	; 0x28
 8002d1e:	2105      	movs	r1, #5
 8002d20:	f00c fd64 	bl	800f7ec <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002d24:	2300      	movs	r3, #0
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
 8002d38:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002d3a:	f003 ff65 	bl	8006c08 <SM_GetOutputInHertz>
 8002d3e:	ee10 3a10 	vmov	r3, s0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fc28 	bl	8000598 <__aeabi_f2d>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002d50:	e9cd 3400 	strd	r3, r4, [sp]
 8002d54:	4a80      	ldr	r2, [pc, #512]	; (8002f58 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002d56:	2119      	movs	r1, #25
 8002d58:	f00e f904 	bl	8010f64 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d5c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002d60:	2300      	movs	r3, #0
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	2302      	movs	r3, #2
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d6c:	223c      	movs	r2, #60	; 0x3c
 8002d6e:	2105      	movs	r1, #5
 8002d70:	f00c fd3c 	bl	800f7ec <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d74:	2300      	movs	r3, #0
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	2302      	movs	r3, #2
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d80:	2264      	movs	r2, #100	; 0x64
 8002d82:	2105      	movs	r1, #5
 8002d84:	4875      	ldr	r0, [pc, #468]	; (8002f5c <FreqMenu_DrawSweepMenu+0x2b4>)
 8002d86:	f00c fd31 	bl	800f7ec <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002d8a:	4b70      	ldr	r3, [pc, #448]	; (8002f4c <FreqMenu_DrawSweepMenu+0x2a4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d117      	bne.n	8002dc6 <FreqMenu_DrawSweepMenu+0x11e>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d96:	2300      	movs	r3, #0
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002da2:	2264      	movs	r2, #100	; 0x64
 8002da4:	21eb      	movs	r1, #235	; 0xeb
 8002da6:	486e      	ldr	r0, [pc, #440]	; (8002f60 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002da8:	f00c fd20 	bl	800f7ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	2302      	movs	r3, #2
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2300      	movs	r3, #0
 8002db8:	2264      	movs	r2, #100	; 0x64
 8002dba:	f240 1109 	movw	r1, #265	; 0x109
 8002dbe:	4869      	ldr	r0, [pc, #420]	; (8002f64 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dc0:	f00c fd14 	bl	800f7ec <ILI9341_Draw_Text>
 8002dc4:	e016      	b.n	8002df4 <FreqMenu_DrawSweepMenu+0x14c>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2302      	movs	r3, #2
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dd2:	2264      	movs	r2, #100	; 0x64
 8002dd4:	f240 1109 	movw	r1, #265	; 0x109
 8002dd8:	4862      	ldr	r0, [pc, #392]	; (8002f64 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dda:	f00c fd07 	bl	800f7ec <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dde:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	2302      	movs	r3, #2
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2300      	movs	r3, #0
 8002dea:	2264      	movs	r2, #100	; 0x64
 8002dec:	21eb      	movs	r1, #235	; 0xeb
 8002dee:	485c      	ldr	r0, [pc, #368]	; (8002f60 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002df0:	f00c fcfc 	bl	800f7ec <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002df4:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <FreqMenu_DrawSweepMenu+0x16c>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dfc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2302      	movs	r3, #2
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	2278      	movs	r2, #120	; 0x78
 8002e0a:	2105      	movs	r1, #5
 8002e0c:	4857      	ldr	r0, [pc, #348]	; (8002f6c <FreqMenu_DrawSweepMenu+0x2c4>)
 8002e0e:	f00c fced 	bl	800f7ec <ILI9341_Draw_Text>
 8002e12:	e00a      	b.n	8002e2a <FreqMenu_DrawSweepMenu+0x182>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e14:	2300      	movs	r3, #0
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	2302      	movs	r3, #2
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e20:	2278      	movs	r2, #120	; 0x78
 8002e22:	2105      	movs	r1, #5
 8002e24:	4851      	ldr	r0, [pc, #324]	; (8002f6c <FreqMenu_DrawSweepMenu+0x2c4>)
 8002e26:	f00c fce1 	bl	800f7ec <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002e40:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fba7 	bl	8000598 <__aeabi_f2d>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002e52:	e9cd 3400 	strd	r3, r4, [sp]
 8002e56:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002e58:	2119      	movs	r1, #25
 8002e5a:	f00e f883 	bl	8010f64 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e5e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002e62:	2300      	movs	r3, #0
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	2302      	movs	r3, #2
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e6e:	2278      	movs	r2, #120	; 0x78
 8002e70:	21b6      	movs	r1, #182	; 0xb6
 8002e72:	f00c fcbb 	bl	800f7ec <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002e76:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10f      	bne.n	8002e9e <FreqMenu_DrawSweepMenu+0x1f6>
 8002e7e:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <FreqMenu_DrawSweepMenu+0x1f6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002e86:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2300      	movs	r3, #0
 8002e92:	228c      	movs	r2, #140	; 0x8c
 8002e94:	2105      	movs	r1, #5
 8002e96:	4839      	ldr	r0, [pc, #228]	; (8002f7c <FreqMenu_DrawSweepMenu+0x2d4>)
 8002e98:	f00c fca8 	bl	800f7ec <ILI9341_Draw_Text>
 8002e9c:	e00a      	b.n	8002eb4 <FreqMenu_DrawSweepMenu+0x20c>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002eaa:	228c      	movs	r2, #140	; 0x8c
 8002eac:	2105      	movs	r1, #5
 8002eae:	4833      	ldr	r0, [pc, #204]	; (8002f7c <FreqMenu_DrawSweepMenu+0x2d4>)
 8002eb0:	f00c fc9c 	bl	800f7ec <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <FreqMenu_DrawSweepMenu+0x2dc>)
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	ee17 0a90 	vmov	r0, s15
 8002edc:	f003 fed8 	bl	8006c90 <SM_ConvertPeriodToHertz>
 8002ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002f88 <FreqMenu_DrawSweepMenu+0x2e0>
 8002ee8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eec:	ee16 0a90 	vmov	r0, s13
 8002ef0:	f7fd fb52 	bl	8000598 <__aeabi_f2d>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	f107 0018 	add.w	r0, r7, #24
 8002efc:	e9cd 3400 	strd	r3, r4, [sp]
 8002f00:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <FreqMenu_DrawSweepMenu+0x2e4>)
 8002f02:	2114      	movs	r1, #20
 8002f04:	f00e f82e 	bl	8010f64 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f08:	f107 0018 	add.w	r0, r7, #24
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	2302      	movs	r3, #2
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f18:	228c      	movs	r2, #140	; 0x8c
 8002f1a:	219e      	movs	r1, #158	; 0x9e
 8002f1c:	f00c fc66 	bl	800f7ec <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d135      	bne.n	8002f94 <FreqMenu_DrawSweepMenu+0x2ec>
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d131      	bne.n	8002f94 <FreqMenu_DrawSweepMenu+0x2ec>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002f30:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	2302      	movs	r3, #2
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	22a0      	movs	r2, #160	; 0xa0
 8002f3e:	2105      	movs	r1, #5
 8002f40:	4813      	ldr	r0, [pc, #76]	; (8002f90 <FreqMenu_DrawSweepMenu+0x2e8>)
 8002f42:	f00c fc53 	bl	800f7ec <ILI9341_Draw_Text>
 8002f46:	e030      	b.n	8002faa <FreqMenu_DrawSweepMenu+0x302>
 8002f48:	08014930 	.word	0x08014930
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	08014944 	.word	0x08014944
 8002f54:	08014958 	.word	0x08014958
 8002f58:	0801496c 	.word	0x0801496c
 8002f5c:	08014980 	.word	0x08014980
 8002f60:	0801498c 	.word	0x0801498c
 8002f64:	08014990 	.word	0x08014990
 8002f68:	20001e59 	.word	0x20001e59
 8002f6c:	08014998 	.word	0x08014998
 8002f70:	2000226c 	.word	0x2000226c
 8002f74:	080149a8 	.word	0x080149a8
 8002f78:	20001e58 	.word	0x20001e58
 8002f7c:	080149b4 	.word	0x080149b4
 8002f80:	20000120 	.word	0x20000120
 8002f84:	40013400 	.word	0x40013400
 8002f88:	42f00000 	.word	0x42f00000
 8002f8c:	080149c4 	.word	0x080149c4
 8002f90:	080149d0 	.word	0x080149d0
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f94:	2300      	movs	r3, #0
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2302      	movs	r3, #2
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fa0:	22a0      	movs	r2, #160	; 0xa0
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	484d      	ldr	r0, [pc, #308]	; (80030dc <FreqMenu_DrawSweepMenu+0x434>)
 8002fa6:	f00c fc21 	bl	800f7ec <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <FreqMenu_DrawSweepMenu+0x438>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <FreqMenu_DrawSweepMenu+0x43c>)
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	ee17 0a90 	vmov	r0, s15
 8002fd2:	f003 fe5d 	bl	8006c90 <SM_ConvertPeriodToHertz>
 8002fd6:	eeb0 7a40 	vmov.f32	s14, s0
 8002fda:	eddf 7a43 	vldr	s15, [pc, #268]	; 80030e8 <FreqMenu_DrawSweepMenu+0x440>
 8002fde:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fe2:	ee16 0a90 	vmov	r0, s13
 8002fe6:	f7fd fad7 	bl	8000598 <__aeabi_f2d>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	1d38      	adds	r0, r7, #4
 8002ff0:	e9cd 3400 	strd	r3, r4, [sp]
 8002ff4:	4a3d      	ldr	r2, [pc, #244]	; (80030ec <FreqMenu_DrawSweepMenu+0x444>)
 8002ff6:	2114      	movs	r1, #20
 8002ff8:	f00d ffb4 	bl	8010f64 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ffc:	1d38      	adds	r0, r7, #4
 8002ffe:	2300      	movs	r3, #0
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	2302      	movs	r3, #2
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800300a:	22a0      	movs	r2, #160	; 0xa0
 800300c:	21aa      	movs	r1, #170	; 0xaa
 800300e:	f00c fbed 	bl	800f7ec <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <FreqMenu_DrawSweepMenu+0x448>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10b      	bne.n	8003036 <FreqMenu_DrawSweepMenu+0x38e>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800301e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2302      	movs	r3, #2
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	22d5      	movs	r2, #213	; 0xd5
 800302c:	2106      	movs	r1, #6
 800302e:	4831      	ldr	r0, [pc, #196]	; (80030f4 <FreqMenu_DrawSweepMenu+0x44c>)
 8003030:	f00c fbdc 	bl	800f7ec <ILI9341_Draw_Text>
 8003034:	e00a      	b.n	800304c <FreqMenu_DrawSweepMenu+0x3a4>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003036:	f240 23fd 	movw	r3, #765	; 0x2fd
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	2302      	movs	r3, #2
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	22d5      	movs	r2, #213	; 0xd5
 8003044:	2105      	movs	r1, #5
 8003046:	482c      	ldr	r0, [pc, #176]	; (80030f8 <FreqMenu_DrawSweepMenu+0x450>)
 8003048:	f00c fbd0 	bl	800f7ec <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800304c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2302      	movs	r3, #2
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	22cc      	movs	r2, #204	; 0xcc
 800305a:	2168      	movs	r1, #104	; 0x68
 800305c:	4827      	ldr	r0, [pc, #156]	; (80030fc <FreqMenu_DrawSweepMenu+0x454>)
 800305e:	f00c fbc5 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003062:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2302      	movs	r3, #2
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2300      	movs	r3, #0
 800306e:	22de      	movs	r2, #222	; 0xde
 8003070:	2161      	movs	r1, #97	; 0x61
 8003072:	4823      	ldr	r0, [pc, #140]	; (8003100 <FreqMenu_DrawSweepMenu+0x458>)
 8003074:	f00c fbba 	bl	800f7ec <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003078:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2302      	movs	r3, #2
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	22cc      	movs	r2, #204	; 0xcc
 8003086:	21b7      	movs	r1, #183	; 0xb7
 8003088:	481c      	ldr	r0, [pc, #112]	; (80030fc <FreqMenu_DrawSweepMenu+0x454>)
 800308a:	f00c fbaf 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800308e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2302      	movs	r3, #2
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	22de      	movs	r2, #222	; 0xde
 800309c:	21ad      	movs	r1, #173	; 0xad
 800309e:	4819      	ldr	r0, [pc, #100]	; (8003104 <FreqMenu_DrawSweepMenu+0x45c>)
 80030a0:	f00c fba4 	bl	800f7ec <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030a4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2302      	movs	r3, #2
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	22cc      	movs	r2, #204	; 0xcc
 80030b2:	f240 1107 	movw	r1, #263	; 0x107
 80030b6:	4811      	ldr	r0, [pc, #68]	; (80030fc <FreqMenu_DrawSweepMenu+0x454>)
 80030b8:	f00c fb98 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030bc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2302      	movs	r3, #2
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	22de      	movs	r2, #222	; 0xde
 80030ca:	21fc      	movs	r1, #252	; 0xfc
 80030cc:	480e      	ldr	r0, [pc, #56]	; (8003108 <FreqMenu_DrawSweepMenu+0x460>)
 80030ce:	f00c fb8d 	bl	800f7ec <ILI9341_Draw_Text>
}
 80030d2:	bf00      	nop
 80030d4:	3778      	adds	r7, #120	; 0x78
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bdb0      	pop	{r4, r5, r7, pc}
 80030da:	bf00      	nop
 80030dc:	080149d0 	.word	0x080149d0
 80030e0:	20000124 	.word	0x20000124
 80030e4:	40013400 	.word	0x40013400
 80030e8:	42f00000 	.word	0x42f00000
 80030ec:	080149e0 	.word	0x080149e0
 80030f0:	40000c00 	.word	0x40000c00
 80030f4:	080149ec 	.word	0x080149ec
 80030f8:	080149f4 	.word	0x080149f4
 80030fc:	080149fc 	.word	0x080149fc
 8003100:	08014a00 	.word	0x08014a00
 8003104:	08014a08 	.word	0x08014a08
 8003108:	08014a10 	.word	0x08014a10

0800310c <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	2302      	movs	r3, #2
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2300      	movs	r3, #0
 800311e:	220a      	movs	r2, #10
 8003120:	2105      	movs	r1, #5
 8003122:	4804      	ldr	r0, [pc, #16]	; (8003134 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003124:	f00c fb62 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003128:	f7fd fee6 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	08014a18 	.word	0x08014a18

08003138 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d007      	beq.n	8003158 <FuncMenu_DrawMenu+0x20>
 8003148:	2b03      	cmp	r3, #3
 800314a:	d009      	beq.n	8003160 <FuncMenu_DrawMenu+0x28>
 800314c:	2b01      	cmp	r3, #1
 800314e:	d000      	beq.n	8003152 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003150:	e00a      	b.n	8003168 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003152:	f000 f80d 	bl	8003170 <FuncMenu_DrawMainMenu>
			break;
 8003156:	e007      	b.n	8003168 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003158:	2000      	movs	r0, #0
 800315a:	f000 f851 	bl	8003200 <FuncMenu_DrawOutputMenu>
			break;
 800315e:	e003      	b.n	8003168 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003160:	2001      	movs	r0, #1
 8003162:	f000 f84d 	bl	8003200 <FuncMenu_DrawOutputMenu>
			break;
 8003166:	bf00      	nop

	}
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	2302      	movs	r3, #2
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2300      	movs	r3, #0
 8003182:	220a      	movs	r2, #10
 8003184:	210a      	movs	r1, #10
 8003186:	481a      	ldr	r0, [pc, #104]	; (80031f0 <FuncMenu_DrawMainMenu+0x80>)
 8003188:	f00c fb30 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800318c:	f7fd feb4 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003190:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2302      	movs	r3, #2
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	22d2      	movs	r2, #210	; 0xd2
 800319e:	2105      	movs	r1, #5
 80031a0:	4814      	ldr	r0, [pc, #80]	; (80031f4 <FuncMenu_DrawMainMenu+0x84>)
 80031a2:	f00c fb23 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80031a6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	2302      	movs	r3, #2
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	22d2      	movs	r2, #210	; 0xd2
 80031b4:	2164      	movs	r1, #100	; 0x64
 80031b6:	4810      	ldr	r0, [pc, #64]	; (80031f8 <FuncMenu_DrawMainMenu+0x88>)
 80031b8:	f00c fb18 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80031bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	2302      	movs	r3, #2
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	22d2      	movs	r2, #210	; 0xd2
 80031ca:	21af      	movs	r1, #175	; 0xaf
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <FuncMenu_DrawMainMenu+0x8c>)
 80031ce:	f00c fb0d 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80031d2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	2302      	movs	r3, #2
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	22d2      	movs	r2, #210	; 0xd2
 80031e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <FuncMenu_DrawMainMenu+0x8c>)
 80031e6:	f00c fb01 	bl	800f7ec <ILI9341_Draw_Text>
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	08014a28 	.word	0x08014a28
 80031f4:	08014a34 	.word	0x08014a34
 80031f8:	08014a3c 	.word	0x08014a3c
 80031fc:	08014a40 	.word	0x08014a40

08003200 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af02      	add	r7, sp, #8
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2302      	movs	r3, #2
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	220a      	movs	r2, #10
 800321e:	210a      	movs	r1, #10
 8003220:	4896      	ldr	r0, [pc, #600]	; (800347c <FuncMenu_DrawOutputMenu+0x27c>)
 8003222:	f00c fae3 	bl	800f7ec <ILI9341_Draw_Text>
 8003226:	e00a      	b.n	800323e <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	2302      	movs	r3, #2
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	220a      	movs	r2, #10
 8003236:	210a      	movs	r1, #10
 8003238:	4891      	ldr	r0, [pc, #580]	; (8003480 <FuncMenu_DrawOutputMenu+0x280>)
 800323a:	f00c fad7 	bl	800f7ec <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 fa49 	bl	80066d8 <SM_GetOutputChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800324c:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8424 	beq.w	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b06      	cmp	r3, #6
 800325c:	f200 841f 	bhi.w	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <FuncMenu_DrawOutputMenu+0x68>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003285 	.word	0x08003285
 800326c:	08003381 	.word	0x08003381
 8003270:	080034a5 	.word	0x080034a5
 8003274:	080035a1 	.word	0x080035a1
 8003278:	0800369d 	.word	0x0800369d
 800327c:	080037d5 	.word	0x080037d5
 8003280:	080038e7 	.word	0x080038e7
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003284:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2302      	movs	r3, #2
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2300      	movs	r3, #0
 8003290:	2232      	movs	r2, #50	; 0x32
 8003292:	210a      	movs	r1, #10
 8003294:	487b      	ldr	r0, [pc, #492]	; (8003484 <FuncMenu_DrawOutputMenu+0x284>)
 8003296:	f00c faa9 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800329a:	2300      	movs	r3, #0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2302      	movs	r3, #2
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a6:	2246      	movs	r2, #70	; 0x46
 80032a8:	210a      	movs	r1, #10
 80032aa:	4877      	ldr	r0, [pc, #476]	; (8003488 <FuncMenu_DrawOutputMenu+0x288>)
 80032ac:	f00c fa9e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032b0:	2300      	movs	r3, #0
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	2302      	movs	r3, #2
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032bc:	225a      	movs	r2, #90	; 0x5a
 80032be:	210a      	movs	r1, #10
 80032c0:	4872      	ldr	r0, [pc, #456]	; (800348c <FuncMenu_DrawOutputMenu+0x28c>)
 80032c2:	f00c fa93 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032c6:	2300      	movs	r3, #0
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	2302      	movs	r3, #2
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032d2:	226e      	movs	r2, #110	; 0x6e
 80032d4:	210a      	movs	r1, #10
 80032d6:	486e      	ldr	r0, [pc, #440]	; (8003490 <FuncMenu_DrawOutputMenu+0x290>)
 80032d8:	f00c fa88 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032dc:	2300      	movs	r3, #0
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2302      	movs	r3, #2
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032e8:	2282      	movs	r2, #130	; 0x82
 80032ea:	210a      	movs	r1, #10
 80032ec:	4869      	ldr	r0, [pc, #420]	; (8003494 <FuncMenu_DrawOutputMenu+0x294>)
 80032ee:	f00c fa7d 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032fe:	2296      	movs	r2, #150	; 0x96
 8003300:	210a      	movs	r1, #10
 8003302:	4865      	ldr	r0, [pc, #404]	; (8003498 <FuncMenu_DrawOutputMenu+0x298>)
 8003304:	f00c fa72 	bl	800f7ec <ILI9341_Draw_Text>

				if(pOutChan)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800330e:	2300      	movs	r3, #0
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	2302      	movs	r3, #2
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800331a:	22aa      	movs	r2, #170	; 0xaa
 800331c:	210a      	movs	r1, #10
 800331e:	485f      	ldr	r0, [pc, #380]	; (800349c <FuncMenu_DrawOutputMenu+0x29c>)
 8003320:	f00c fa64 	bl	800f7ec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003324:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2300      	movs	r3, #0
 8003330:	22d2      	movs	r2, #210	; 0xd2
 8003332:	2105      	movs	r1, #5
 8003334:	485a      	ldr	r0, [pc, #360]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003336:	f00c fa59 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800333a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2302      	movs	r3, #2
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	22d2      	movs	r2, #210	; 0xd2
 8003348:	2161      	movs	r1, #97	; 0x61
 800334a:	4855      	ldr	r0, [pc, #340]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 800334c:	f00c fa4e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003350:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2302      	movs	r3, #2
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2300      	movs	r3, #0
 800335c:	22d2      	movs	r2, #210	; 0xd2
 800335e:	21af      	movs	r1, #175	; 0xaf
 8003360:	484f      	ldr	r0, [pc, #316]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003362:	f00c fa43 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003366:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2300      	movs	r3, #0
 8003372:	22d2      	movs	r2, #210	; 0xd2
 8003374:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003378:	4849      	ldr	r0, [pc, #292]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 800337a:	f00c fa37 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 800337e:	e38e      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003380:	2300      	movs	r3, #0
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	2302      	movs	r3, #2
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800338c:	2232      	movs	r2, #50	; 0x32
 800338e:	210a      	movs	r1, #10
 8003390:	483c      	ldr	r0, [pc, #240]	; (8003484 <FuncMenu_DrawOutputMenu+0x284>)
 8003392:	f00c fa2b 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003396:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	2302      	movs	r3, #2
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	2246      	movs	r2, #70	; 0x46
 80033a4:	210a      	movs	r1, #10
 80033a6:	4838      	ldr	r0, [pc, #224]	; (8003488 <FuncMenu_DrawOutputMenu+0x288>)
 80033a8:	f00c fa20 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ac:	2300      	movs	r3, #0
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	2302      	movs	r3, #2
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033b8:	225a      	movs	r2, #90	; 0x5a
 80033ba:	210a      	movs	r1, #10
 80033bc:	4833      	ldr	r0, [pc, #204]	; (800348c <FuncMenu_DrawOutputMenu+0x28c>)
 80033be:	f00c fa15 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033c2:	2300      	movs	r3, #0
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2302      	movs	r3, #2
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033ce:	226e      	movs	r2, #110	; 0x6e
 80033d0:	210a      	movs	r1, #10
 80033d2:	482f      	ldr	r0, [pc, #188]	; (8003490 <FuncMenu_DrawOutputMenu+0x290>)
 80033d4:	f00c fa0a 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d8:	2300      	movs	r3, #0
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2302      	movs	r3, #2
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033e4:	2282      	movs	r2, #130	; 0x82
 80033e6:	210a      	movs	r1, #10
 80033e8:	482a      	ldr	r0, [pc, #168]	; (8003494 <FuncMenu_DrawOutputMenu+0x294>)
 80033ea:	f00c f9ff 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ee:	2300      	movs	r3, #0
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2302      	movs	r3, #2
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033fa:	2296      	movs	r2, #150	; 0x96
 80033fc:	210a      	movs	r1, #10
 80033fe:	4826      	ldr	r0, [pc, #152]	; (8003498 <FuncMenu_DrawOutputMenu+0x298>)
 8003400:	f00c f9f4 	bl	800f7ec <ILI9341_Draw_Text>

				if(pOutChan)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800340a:	2300      	movs	r3, #0
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	2302      	movs	r3, #2
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003416:	22aa      	movs	r2, #170	; 0xaa
 8003418:	210a      	movs	r1, #10
 800341a:	4820      	ldr	r0, [pc, #128]	; (800349c <FuncMenu_DrawOutputMenu+0x29c>)
 800341c:	f00c f9e6 	bl	800f7ec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003420:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	2302      	movs	r3, #2
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	22d2      	movs	r2, #210	; 0xd2
 800342e:	2105      	movs	r1, #5
 8003430:	481b      	ldr	r0, [pc, #108]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003432:	f00c f9db 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003436:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	2302      	movs	r3, #2
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	22d2      	movs	r2, #210	; 0xd2
 8003444:	2161      	movs	r1, #97	; 0x61
 8003446:	4816      	ldr	r0, [pc, #88]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003448:	f00c f9d0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800344c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2302      	movs	r3, #2
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	22d2      	movs	r2, #210	; 0xd2
 800345a:	21af      	movs	r1, #175	; 0xaf
 800345c:	4810      	ldr	r0, [pc, #64]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 800345e:	f00c f9c5 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003462:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	2302      	movs	r3, #2
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2300      	movs	r3, #0
 800346e:	22d2      	movs	r2, #210	; 0xd2
 8003470:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003474:	480a      	ldr	r0, [pc, #40]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003476:	f00c f9b9 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 800347a:	e310      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
 800347c:	08014a48 	.word	0x08014a48
 8003480:	08014a58 	.word	0x08014a58
 8003484:	08014a68 	.word	0x08014a68
 8003488:	08014a70 	.word	0x08014a70
 800348c:	08014a7c 	.word	0x08014a7c
 8003490:	08014a84 	.word	0x08014a84
 8003494:	08014a90 	.word	0x08014a90
 8003498:	08014a9c 	.word	0x08014a9c
 800349c:	08014aa4 	.word	0x08014aa4
 80034a0:	08014a40 	.word	0x08014a40
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a4:	2300      	movs	r3, #0
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2302      	movs	r3, #2
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034b0:	2232      	movs	r2, #50	; 0x32
 80034b2:	210a      	movs	r1, #10
 80034b4:	48be      	ldr	r0, [pc, #760]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80034b6:	f00c f999 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034ba:	2300      	movs	r3, #0
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2302      	movs	r3, #2
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034c6:	2246      	movs	r2, #70	; 0x46
 80034c8:	210a      	movs	r1, #10
 80034ca:	48ba      	ldr	r0, [pc, #744]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80034cc:	f00c f98e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034d0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	2302      	movs	r3, #2
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2300      	movs	r3, #0
 80034dc:	225a      	movs	r2, #90	; 0x5a
 80034de:	210a      	movs	r1, #10
 80034e0:	48b5      	ldr	r0, [pc, #724]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5b8>)
 80034e2:	f00c f983 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e6:	2300      	movs	r3, #0
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034f2:	226e      	movs	r2, #110	; 0x6e
 80034f4:	210a      	movs	r1, #10
 80034f6:	48b1      	ldr	r0, [pc, #708]	; (80037bc <FuncMenu_DrawOutputMenu+0x5bc>)
 80034f8:	f00c f978 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fc:	2300      	movs	r3, #0
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2302      	movs	r3, #2
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003508:	2282      	movs	r2, #130	; 0x82
 800350a:	210a      	movs	r1, #10
 800350c:	48ac      	ldr	r0, [pc, #688]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c0>)
 800350e:	f00c f96d 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2302      	movs	r3, #2
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800351e:	2296      	movs	r2, #150	; 0x96
 8003520:	210a      	movs	r1, #10
 8003522:	48a8      	ldr	r0, [pc, #672]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003524:	f00c f962 	bl	800f7ec <ILI9341_Draw_Text>
				if(pOutChan)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800352e:	2300      	movs	r3, #0
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	2302      	movs	r3, #2
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800353a:	22aa      	movs	r2, #170	; 0xaa
 800353c:	210a      	movs	r1, #10
 800353e:	48a2      	ldr	r0, [pc, #648]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003540:	f00c f954 	bl	800f7ec <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003544:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2302      	movs	r3, #2
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	22d2      	movs	r2, #210	; 0xd2
 8003552:	2105      	movs	r1, #5
 8003554:	489d      	ldr	r0, [pc, #628]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003556:	f00c f949 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800355a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	2302      	movs	r3, #2
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	22d2      	movs	r2, #210	; 0xd2
 8003568:	2161      	movs	r1, #97	; 0x61
 800356a:	4898      	ldr	r0, [pc, #608]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800356c:	f00c f93e 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003570:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2302      	movs	r3, #2
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	22d2      	movs	r2, #210	; 0xd2
 800357e:	21af      	movs	r1, #175	; 0xaf
 8003580:	4892      	ldr	r0, [pc, #584]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003582:	f00c f933 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003586:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	2302      	movs	r3, #2
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2300      	movs	r3, #0
 8003592:	22d2      	movs	r2, #210	; 0xd2
 8003594:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003598:	488c      	ldr	r0, [pc, #560]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800359a:	f00c f927 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 800359e:	e27e      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035a0:	2300      	movs	r3, #0
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	2302      	movs	r3, #2
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ac:	2232      	movs	r2, #50	; 0x32
 80035ae:	210a      	movs	r1, #10
 80035b0:	487f      	ldr	r0, [pc, #508]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80035b2:	f00c f91b 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b6:	2300      	movs	r3, #0
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2302      	movs	r3, #2
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035c2:	2246      	movs	r2, #70	; 0x46
 80035c4:	210a      	movs	r1, #10
 80035c6:	487b      	ldr	r0, [pc, #492]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80035c8:	f00c f910 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035cc:	2300      	movs	r3, #0
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2302      	movs	r3, #2
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035d8:	225a      	movs	r2, #90	; 0x5a
 80035da:	210a      	movs	r1, #10
 80035dc:	4876      	ldr	r0, [pc, #472]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5b8>)
 80035de:	f00c f905 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035e2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	2302      	movs	r3, #2
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	226e      	movs	r2, #110	; 0x6e
 80035f0:	210a      	movs	r1, #10
 80035f2:	4872      	ldr	r0, [pc, #456]	; (80037bc <FuncMenu_DrawOutputMenu+0x5bc>)
 80035f4:	f00c f8fa 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035f8:	2300      	movs	r3, #0
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	2302      	movs	r3, #2
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003604:	2282      	movs	r2, #130	; 0x82
 8003606:	210a      	movs	r1, #10
 8003608:	486d      	ldr	r0, [pc, #436]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c0>)
 800360a:	f00c f8ef 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800360e:	2300      	movs	r3, #0
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2302      	movs	r3, #2
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800361a:	2296      	movs	r2, #150	; 0x96
 800361c:	210a      	movs	r1, #10
 800361e:	4869      	ldr	r0, [pc, #420]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003620:	f00c f8e4 	bl	800f7ec <ILI9341_Draw_Text>

				if(pOutChan)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800362a:	2300      	movs	r3, #0
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2302      	movs	r3, #2
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003636:	22aa      	movs	r2, #170	; 0xaa
 8003638:	210a      	movs	r1, #10
 800363a:	4863      	ldr	r0, [pc, #396]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5c8>)
 800363c:	f00c f8d6 	bl	800f7ec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003640:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2302      	movs	r3, #2
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	22d2      	movs	r2, #210	; 0xd2
 800364e:	2105      	movs	r1, #5
 8003650:	485e      	ldr	r0, [pc, #376]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003652:	f00c f8cb 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003656:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	2302      	movs	r3, #2
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	22d2      	movs	r2, #210	; 0xd2
 8003664:	2161      	movs	r1, #97	; 0x61
 8003666:	4859      	ldr	r0, [pc, #356]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003668:	f00c f8c0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800366c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	2302      	movs	r3, #2
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	22d2      	movs	r2, #210	; 0xd2
 800367a:	21af      	movs	r1, #175	; 0xaf
 800367c:	4853      	ldr	r0, [pc, #332]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800367e:	f00c f8b5 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003682:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2300      	movs	r3, #0
 800368e:	22d2      	movs	r2, #210	; 0xd2
 8003690:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003694:	484d      	ldr	r0, [pc, #308]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003696:	f00c f8a9 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 800369a:	e200      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800369c:	2300      	movs	r3, #0
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	2302      	movs	r3, #2
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036a8:	2232      	movs	r2, #50	; 0x32
 80036aa:	210a      	movs	r1, #10
 80036ac:	4840      	ldr	r0, [pc, #256]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80036ae:	f00c f89d 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036b2:	2300      	movs	r3, #0
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	2302      	movs	r3, #2
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036be:	2246      	movs	r2, #70	; 0x46
 80036c0:	210a      	movs	r1, #10
 80036c2:	483c      	ldr	r0, [pc, #240]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80036c4:	f00c f892 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036c8:	2300      	movs	r3, #0
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	2302      	movs	r3, #2
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d4:	225a      	movs	r2, #90	; 0x5a
 80036d6:	210a      	movs	r1, #10
 80036d8:	4837      	ldr	r0, [pc, #220]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5b8>)
 80036da:	f00c f887 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036de:	2300      	movs	r3, #0
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	2302      	movs	r3, #2
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ea:	226e      	movs	r2, #110	; 0x6e
 80036ec:	210a      	movs	r1, #10
 80036ee:	4833      	ldr	r0, [pc, #204]	; (80037bc <FuncMenu_DrawOutputMenu+0x5bc>)
 80036f0:	f00c f87c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80036f4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	2302      	movs	r3, #2
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2300      	movs	r3, #0
 8003700:	2282      	movs	r2, #130	; 0x82
 8003702:	210a      	movs	r1, #10
 8003704:	482e      	ldr	r0, [pc, #184]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c0>)
 8003706:	f00c f871 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370a:	2300      	movs	r3, #0
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2302      	movs	r3, #2
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003716:	2296      	movs	r2, #150	; 0x96
 8003718:	210a      	movs	r1, #10
 800371a:	482a      	ldr	r0, [pc, #168]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c4>)
 800371c:	f00c f866 	bl	800f7ec <ILI9341_Draw_Text>

				if(pOutChan)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003726:	2300      	movs	r3, #0
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	2302      	movs	r3, #2
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003732:	22aa      	movs	r2, #170	; 0xaa
 8003734:	210a      	movs	r1, #10
 8003736:	4824      	ldr	r0, [pc, #144]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003738:	f00c f858 	bl	800f7ec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800373c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	2302      	movs	r3, #2
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	22d2      	movs	r2, #210	; 0xd2
 800374a:	2105      	movs	r1, #5
 800374c:	481f      	ldr	r0, [pc, #124]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800374e:	f00c f84d 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003752:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	2302      	movs	r3, #2
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2300      	movs	r3, #0
 800375e:	22d2      	movs	r2, #210	; 0xd2
 8003760:	2161      	movs	r1, #97	; 0x61
 8003762:	481a      	ldr	r0, [pc, #104]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003764:	f00c f842 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003768:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	2302      	movs	r3, #2
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	22d2      	movs	r2, #210	; 0xd2
 8003776:	21af      	movs	r1, #175	; 0xaf
 8003778:	4814      	ldr	r0, [pc, #80]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800377a:	f00c f837 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800377e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2302      	movs	r3, #2
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	22d2      	movs	r2, #210	; 0xd2
 800378c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003790:	480e      	ldr	r0, [pc, #56]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003792:	f00c f82b 	bl	800f7ec <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003796:	2300      	movs	r3, #0
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	2302      	movs	r3, #2
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037a2:	2232      	movs	r2, #50	; 0x32
 80037a4:	2196      	movs	r1, #150	; 0x96
 80037a6:	480a      	ldr	r0, [pc, #40]	; (80037d0 <FuncMenu_DrawOutputMenu+0x5d0>)
 80037a8:	f00c f820 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 80037ac:	e177      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
 80037ae:	bf00      	nop
 80037b0:	08014a68 	.word	0x08014a68
 80037b4:	08014a70 	.word	0x08014a70
 80037b8:	08014a7c 	.word	0x08014a7c
 80037bc:	08014a84 	.word	0x08014a84
 80037c0:	08014a90 	.word	0x08014a90
 80037c4:	08014a9c 	.word	0x08014a9c
 80037c8:	08014aa4 	.word	0x08014aa4
 80037cc:	08014a40 	.word	0x08014a40
 80037d0:	08014aac 	.word	0x08014aac
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d4:	2300      	movs	r3, #0
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	2302      	movs	r3, #2
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e0:	2232      	movs	r2, #50	; 0x32
 80037e2:	210a      	movs	r1, #10
 80037e4:	48b0      	ldr	r0, [pc, #704]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x8a8>)
 80037e6:	f00c f801 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ea:	2300      	movs	r3, #0
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	2302      	movs	r3, #2
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f6:	2246      	movs	r2, #70	; 0x46
 80037f8:	210a      	movs	r1, #10
 80037fa:	48ac      	ldr	r0, [pc, #688]	; (8003aac <FuncMenu_DrawOutputMenu+0x8ac>)
 80037fc:	f00b fff6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003800:	2300      	movs	r3, #0
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	2302      	movs	r3, #2
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800380c:	225a      	movs	r2, #90	; 0x5a
 800380e:	210a      	movs	r1, #10
 8003810:	48a7      	ldr	r0, [pc, #668]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003812:	f00b ffeb 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2302      	movs	r3, #2
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003822:	226e      	movs	r2, #110	; 0x6e
 8003824:	210a      	movs	r1, #10
 8003826:	48a3      	ldr	r0, [pc, #652]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003828:	f00b ffe0 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800382c:	2300      	movs	r3, #0
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	2302      	movs	r3, #2
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003838:	2282      	movs	r2, #130	; 0x82
 800383a:	210a      	movs	r1, #10
 800383c:	489e      	ldr	r0, [pc, #632]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x8b8>)
 800383e:	f00b ffd5 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003842:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	2302      	movs	r3, #2
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	2296      	movs	r2, #150	; 0x96
 8003850:	210a      	movs	r1, #10
 8003852:	489a      	ldr	r0, [pc, #616]	; (8003abc <FuncMenu_DrawOutputMenu+0x8bc>)
 8003854:	f00b ffca 	bl	800f7ec <ILI9341_Draw_Text>

				if(pOutChan)
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800385e:	2300      	movs	r3, #0
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2302      	movs	r3, #2
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800386a:	22aa      	movs	r2, #170	; 0xaa
 800386c:	210a      	movs	r1, #10
 800386e:	4894      	ldr	r0, [pc, #592]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003870:	f00b ffbc 	bl	800f7ec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003874:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	2302      	movs	r3, #2
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	22d2      	movs	r2, #210	; 0xd2
 8003882:	2105      	movs	r1, #5
 8003884:	488f      	ldr	r0, [pc, #572]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003886:	f00b ffb1 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800388a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	2302      	movs	r3, #2
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2300      	movs	r3, #0
 8003896:	22d2      	movs	r2, #210	; 0xd2
 8003898:	2161      	movs	r1, #97	; 0x61
 800389a:	488a      	ldr	r0, [pc, #552]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 800389c:	f00b ffa6 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80038a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	2302      	movs	r3, #2
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	22d2      	movs	r2, #210	; 0xd2
 80038ae:	21af      	movs	r1, #175	; 0xaf
 80038b0:	4884      	ldr	r0, [pc, #528]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80038b2:	f00b ff9b 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038b6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2302      	movs	r3, #2
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2300      	movs	r3, #0
 80038c2:	22d2      	movs	r2, #210	; 0xd2
 80038c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038c8:	487e      	ldr	r0, [pc, #504]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80038ca:	f00b ff8f 	bl	800f7ec <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ce:	2300      	movs	r3, #0
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2302      	movs	r3, #2
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038da:	2232      	movs	r2, #50	; 0x32
 80038dc:	2196      	movs	r1, #150	; 0x96
 80038de:	487a      	ldr	r0, [pc, #488]	; (8003ac8 <FuncMenu_DrawOutputMenu+0x8c8>)
 80038e0:	f00b ff84 	bl	800f7ec <ILI9341_Draw_Text>
				break;
 80038e4:	e0db      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038e6:	2300      	movs	r3, #0
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2302      	movs	r3, #2
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038f2:	2232      	movs	r2, #50	; 0x32
 80038f4:	210a      	movs	r1, #10
 80038f6:	486c      	ldr	r0, [pc, #432]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x8a8>)
 80038f8:	f00b ff78 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038fc:	2300      	movs	r3, #0
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	2302      	movs	r3, #2
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003908:	2246      	movs	r2, #70	; 0x46
 800390a:	210a      	movs	r1, #10
 800390c:	4867      	ldr	r0, [pc, #412]	; (8003aac <FuncMenu_DrawOutputMenu+0x8ac>)
 800390e:	f00b ff6d 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003912:	2300      	movs	r3, #0
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	2302      	movs	r3, #2
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800391e:	225a      	movs	r2, #90	; 0x5a
 8003920:	210a      	movs	r1, #10
 8003922:	4863      	ldr	r0, [pc, #396]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003924:	f00b ff62 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003928:	2300      	movs	r3, #0
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	2302      	movs	r3, #2
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003934:	226e      	movs	r2, #110	; 0x6e
 8003936:	210a      	movs	r1, #10
 8003938:	485e      	ldr	r0, [pc, #376]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x8b4>)
 800393a:	f00b ff57 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800393e:	2300      	movs	r3, #0
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2302      	movs	r3, #2
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800394a:	2282      	movs	r2, #130	; 0x82
 800394c:	210a      	movs	r1, #10
 800394e:	485a      	ldr	r0, [pc, #360]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003950:	f00b ff4c 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003954:	2300      	movs	r3, #0
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	2302      	movs	r3, #2
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003960:	2296      	movs	r2, #150	; 0x96
 8003962:	210a      	movs	r1, #10
 8003964:	4855      	ldr	r0, [pc, #340]	; (8003abc <FuncMenu_DrawOutputMenu+0x8bc>)
 8003966:	f00b ff41 	bl	800f7ec <ILI9341_Draw_Text>

				if(pOutChan)
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003970:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2302      	movs	r3, #2
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	22aa      	movs	r2, #170	; 0xaa
 800397e:	210a      	movs	r1, #10
 8003980:	484f      	ldr	r0, [pc, #316]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003982:	f00b ff33 	bl	800f7ec <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003986:	f240 23fd 	movw	r3, #765	; 0x2fd
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	2302      	movs	r3, #2
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2300      	movs	r3, #0
 8003992:	22d2      	movs	r2, #210	; 0xd2
 8003994:	2105      	movs	r1, #5
 8003996:	484b      	ldr	r0, [pc, #300]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003998:	f00b ff28 	bl	800f7ec <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800399c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	2302      	movs	r3, #2
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2300      	movs	r3, #0
 80039a8:	22d2      	movs	r2, #210	; 0xd2
 80039aa:	2161      	movs	r1, #97	; 0x61
 80039ac:	4845      	ldr	r0, [pc, #276]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80039ae:	f00b ff1d 	bl	800f7ec <ILI9341_Draw_Text>

				if(pOutChan)
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05a      	beq.n	8003a6e <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2302      	movs	r3, #2
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	22d2      	movs	r2, #210	; 0xd2
 80039c6:	21af      	movs	r1, #175	; 0xaf
 80039c8:	4840      	ldr	r0, [pc, #256]	; (8003acc <FuncMenu_DrawOutputMenu+0x8cc>)
 80039ca:	f00b ff0f 	bl	800f7ec <ILI9341_Draw_Text>
					char duty[10] = "";
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 80039dc:	4b3c      	ldr	r3, [pc, #240]	; (8003ad0 <FuncMenu_DrawOutputMenu+0x8d0>)
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	ee07 3a90 	vmov	s15, r3
 80039e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <FuncMenu_DrawOutputMenu+0x8d0>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	ee07 3a90 	vmov	s15, r3
 80039f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003ad4 <FuncMenu_DrawOutputMenu+0x8d4>
 80039fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a00:	ee17 0a90 	vmov	r0, s15
 8003a04:	f7fc fdc8 	bl	8000598 <__aeabi_f2d>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	f107 0008 	add.w	r0, r7, #8
 8003a10:	e9cd 3400 	strd	r3, r4, [sp]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <FuncMenu_DrawOutputMenu+0x8d8>)
 8003a16:	210a      	movs	r1, #10
 8003a18:	f00d faa4 	bl	8010f64 <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a1c:	f107 0008 	add.w	r0, r7, #8
 8003a20:	2300      	movs	r3, #0
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	2302      	movs	r3, #2
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a2c:	2232      	movs	r2, #50	; 0x32
 8003a2e:	21dc      	movs	r1, #220	; 0xdc
 8003a30:	f00b fedc 	bl	800f7ec <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003a34:	f003 f952 	bl	8006cdc <SM_IsFuncPwmDutyMode>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003a3e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	2302      	movs	r3, #2
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2232      	movs	r2, #50	; 0x32
 8003a4c:	2196      	movs	r1, #150	; 0x96
 8003a4e:	4823      	ldr	r0, [pc, #140]	; (8003adc <FuncMenu_DrawOutputMenu+0x8dc>)
 8003a50:	f00b fecc 	bl	800f7ec <ILI9341_Draw_Text>
 8003a54:	e016      	b.n	8003a84 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a56:	2300      	movs	r3, #0
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a62:	2232      	movs	r2, #50	; 0x32
 8003a64:	2196      	movs	r1, #150	; 0x96
 8003a66:	481d      	ldr	r0, [pc, #116]	; (8003adc <FuncMenu_DrawOutputMenu+0x8dc>)
 8003a68:	f00b fec0 	bl	800f7ec <ILI9341_Draw_Text>
 8003a6c:	e00a      	b.n	8003a84 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a6e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	2302      	movs	r3, #2
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	22d2      	movs	r2, #210	; 0xd2
 8003a7c:	21af      	movs	r1, #175	; 0xaf
 8003a7e:	4811      	ldr	r0, [pc, #68]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a80:	f00b feb4 	bl	800f7ec <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a84:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	22d2      	movs	r2, #210	; 0xd2
 8003a92:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a96:	480b      	ldr	r0, [pc, #44]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a98:	f00b fea8 	bl	800f7ec <ILI9341_Draw_Text>

				break;
 8003a9c:	bf00      	nop
				//
		}
	}
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd90      	pop	{r4, r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	08014a68 	.word	0x08014a68
 8003aac:	08014a70 	.word	0x08014a70
 8003ab0:	08014a7c 	.word	0x08014a7c
 8003ab4:	08014a84 	.word	0x08014a84
 8003ab8:	08014a90 	.word	0x08014a90
 8003abc:	08014a9c 	.word	0x08014a9c
 8003ac0:	08014aa4 	.word	0x08014aa4
 8003ac4:	08014a40 	.word	0x08014a40
 8003ac8:	08014aac 	.word	0x08014aac
 8003acc:	08014abc 	.word	0x08014abc
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	42c80000 	.word	0x42c80000
 8003ad8:	08014ac4 	.word	0x08014ac4
 8003adc:	08014acc 	.word	0x08014acc

08003ae0 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d007      	beq.n	8003b00 <GainMenu_DrawMenu+0x20>
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d008      	beq.n	8003b06 <GainMenu_DrawMenu+0x26>
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d000      	beq.n	8003afa <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003af8:	e008      	b.n	8003b0c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003afa:	f000 f80b 	bl	8003b14 <GainMenu_DrawMainMenu>
			break;
 8003afe:	e005      	b.n	8003b0c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003b00:	f000 f868 	bl	8003bd4 <GainMenu_DrawSignalMenu>
			break;
 8003b04:	e002      	b.n	8003b0c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003b06:	f000 f8af 	bl	8003c68 <GainMenu_DrawAuxMenu>
			break;
 8003b0a:	bf00      	nop

	}
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	2302      	movs	r3, #2
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	220a      	movs	r2, #10
 8003b28:	210a      	movs	r1, #10
 8003b2a:	4826      	ldr	r0, [pc, #152]	; (8003bc4 <GainMenu_DrawMainMenu+0xb0>)
 8003b2c:	f00b fe5e 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b30:	f7fd f9e2 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b34:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	22d2      	movs	r2, #210	; 0xd2
 8003b42:	2105      	movs	r1, #5
 8003b44:	4820      	ldr	r0, [pc, #128]	; (8003bc8 <GainMenu_DrawMainMenu+0xb4>)
 8003b46:	f00b fe51 	bl	800f7ec <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f002 fdc4 	bl	80066d8 <SM_GetOutputChannel>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	d10b      	bne.n	8003b78 <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b60:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	2302      	movs	r3, #2
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	22d2      	movs	r2, #210	; 0xd2
 8003b6e:	2164      	movs	r1, #100	; 0x64
 8003b70:	4816      	ldr	r0, [pc, #88]	; (8003bcc <GainMenu_DrawMainMenu+0xb8>)
 8003b72:	f00b fe3b 	bl	800f7ec <ILI9341_Draw_Text>
 8003b76:	e00a      	b.n	8003b8e <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b78:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	2302      	movs	r3, #2
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	22d2      	movs	r2, #210	; 0xd2
 8003b86:	2164      	movs	r1, #100	; 0x64
 8003b88:	4811      	ldr	r0, [pc, #68]	; (8003bd0 <GainMenu_DrawMainMenu+0xbc>)
 8003b8a:	f00b fe2f 	bl	800f7ec <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b8e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	2302      	movs	r3, #2
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	22d2      	movs	r2, #210	; 0xd2
 8003b9c:	21af      	movs	r1, #175	; 0xaf
 8003b9e:	480b      	ldr	r0, [pc, #44]	; (8003bcc <GainMenu_DrawMainMenu+0xb8>)
 8003ba0:	f00b fe24 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003ba4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2302      	movs	r3, #2
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	22d2      	movs	r2, #210	; 0xd2
 8003bb2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003bb6:	4805      	ldr	r0, [pc, #20]	; (8003bcc <GainMenu_DrawMainMenu+0xb8>)
 8003bb8:	f00b fe18 	bl	800f7ec <ILI9341_Draw_Text>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08014ad4 	.word	0x08014ad4
 8003bc8:	08014ae0 	.word	0x08014ae0
 8003bcc:	08014ae8 	.word	0x08014ae8
 8003bd0:	08014af0 	.word	0x08014af0

08003bd4 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2302      	movs	r3, #2
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	220a      	movs	r2, #10
 8003be8:	210a      	movs	r1, #10
 8003bea:	481a      	ldr	r0, [pc, #104]	; (8003c54 <GainMenu_DrawSignalMenu+0x80>)
 8003bec:	f00b fdfe 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bf0:	f7fd f982 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bf4:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	22d2      	movs	r2, #210	; 0xd2
 8003c02:	210f      	movs	r1, #15
 8003c04:	4814      	ldr	r0, [pc, #80]	; (8003c58 <GainMenu_DrawSignalMenu+0x84>)
 8003c06:	f00b fdf1 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003c0a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	2302      	movs	r3, #2
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	22d2      	movs	r2, #210	; 0xd2
 8003c18:	2161      	movs	r1, #97	; 0x61
 8003c1a:	4810      	ldr	r0, [pc, #64]	; (8003c5c <GainMenu_DrawSignalMenu+0x88>)
 8003c1c:	f00b fde6 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003c20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	2302      	movs	r3, #2
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	22d2      	movs	r2, #210	; 0xd2
 8003c2e:	21be      	movs	r1, #190	; 0xbe
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <GainMenu_DrawSignalMenu+0x8c>)
 8003c32:	f00b fddb 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c36:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	22d2      	movs	r2, #210	; 0xd2
 8003c44:	f240 1109 	movw	r1, #265	; 0x109
 8003c48:	4806      	ldr	r0, [pc, #24]	; (8003c64 <GainMenu_DrawSignalMenu+0x90>)
 8003c4a:	f00b fdcf 	bl	800f7ec <ILI9341_Draw_Text>
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	08014af4 	.word	0x08014af4
 8003c58:	08014b04 	.word	0x08014b04
 8003c5c:	08014b0c 	.word	0x08014b0c
 8003c60:	08014b14 	.word	0x08014b14
 8003c64:	08014b18 	.word	0x08014b18

08003c68 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	2302      	movs	r3, #2
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	220a      	movs	r2, #10
 8003c7c:	210a      	movs	r1, #10
 8003c7e:	4804      	ldr	r0, [pc, #16]	; (8003c90 <GainMenu_DrawAuxMenu+0x28>)
 8003c80:	f00b fdb4 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c84:	f7fd f938 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08014b1c 	.word	0x08014b1c

08003c94 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d007      	beq.n	8003cb4 <ToplevelMenu_DrawMenu+0x20>
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d008      	beq.n	8003cba <ToplevelMenu_DrawMenu+0x26>
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d000      	beq.n	8003cae <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003cac:	e008      	b.n	8003cc0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003cae:	f000 f80b 	bl	8003cc8 <ToplevelMenu_DrawMainMenu>
			break;
 8003cb2:	e005      	b.n	8003cc0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003cb4:	f000 f844 	bl	8003d40 <ToplevelMenu_DrawOutputMenu>
			break;
 8003cb8:	e002      	b.n	8003cc0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003cba:	f000 f88b 	bl	8003dd4 <ToplevelMenu_DrawInputMenu>
			break;
 8003cbe:	bf00      	nop

	}
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003cce:	f7fd f913 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003cd2:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2302      	movs	r3, #2
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	22d2      	movs	r2, #210	; 0xd2
 8003ce0:	2106      	movs	r1, #6
 8003ce2:	4814      	ldr	r0, [pc, #80]	; (8003d34 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003ce4:	f00b fd82 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003ce8:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	2302      	movs	r3, #2
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	22d2      	movs	r2, #210	; 0xd2
 8003cf6:	215d      	movs	r1, #93	; 0x5d
 8003cf8:	480f      	ldr	r0, [pc, #60]	; (8003d38 <ToplevelMenu_DrawMainMenu+0x70>)
 8003cfa:	f00b fd77 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cfe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	2302      	movs	r3, #2
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	22d2      	movs	r2, #210	; 0xd2
 8003d0c:	21af      	movs	r1, #175	; 0xaf
 8003d0e:	480b      	ldr	r0, [pc, #44]	; (8003d3c <ToplevelMenu_DrawMainMenu+0x74>)
 8003d10:	f00b fd6c 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d14:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	22d2      	movs	r2, #210	; 0xd2
 8003d22:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003d26:	4805      	ldr	r0, [pc, #20]	; (8003d3c <ToplevelMenu_DrawMainMenu+0x74>)
 8003d28:	f00b fd60 	bl	800f7ec <ILI9341_Draw_Text>


}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	08014b2c 	.word	0x08014b2c
 8003d38:	08014b34 	.word	0x08014b34
 8003d3c:	08014b3c 	.word	0x08014b3c

08003d40 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2300      	movs	r3, #0
 8003d52:	220a      	movs	r2, #10
 8003d54:	210a      	movs	r1, #10
 8003d56:	481a      	ldr	r0, [pc, #104]	; (8003dc0 <ToplevelMenu_DrawOutputMenu+0x80>)
 8003d58:	f00b fd48 	bl	800f7ec <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003d5c:	f7fd f8cc 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003d60:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	2302      	movs	r3, #2
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	22d2      	movs	r2, #210	; 0xd2
 8003d6e:	210f      	movs	r1, #15
 8003d70:	4814      	ldr	r0, [pc, #80]	; (8003dc4 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003d72:	f00b fd3b 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003d76:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	22d2      	movs	r2, #210	; 0xd2
 8003d84:	2162      	movs	r1, #98	; 0x62
 8003d86:	4810      	ldr	r0, [pc, #64]	; (8003dc8 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003d88:	f00b fd30 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003d8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2302      	movs	r3, #2
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2300      	movs	r3, #0
 8003d98:	22d2      	movs	r2, #210	; 0xd2
 8003d9a:	21b0      	movs	r1, #176	; 0xb0
 8003d9c:	480b      	ldr	r0, [pc, #44]	; (8003dcc <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003d9e:	f00b fd25 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003da2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	2302      	movs	r3, #2
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2300      	movs	r3, #0
 8003dae:	22d2      	movs	r2, #210	; 0xd2
 8003db0:	21f5      	movs	r1, #245	; 0xf5
 8003db2:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <ToplevelMenu_DrawOutputMenu+0x90>)
 8003db4:	f00b fd1a 	bl	800f7ec <ILI9341_Draw_Text>
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	08014b44 	.word	0x08014b44
 8003dc4:	08014b4c 	.word	0x08014b4c
 8003dc8:	08014b54 	.word	0x08014b54
 8003dcc:	08014b5c 	.word	0x08014b5c
 8003dd0:	08014b64 	.word	0x08014b64

08003dd4 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 8003dda:	f7fd fb4f 	bl	800147c <DM_DisplayInputTriggerStatus>

	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	2302      	movs	r3, #2
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2300      	movs	r3, #0
 8003dea:	220a      	movs	r2, #10
 8003dec:	210a      	movs	r1, #10
 8003dee:	4892      	ldr	r0, [pc, #584]	; (8004038 <ToplevelMenu_DrawInputMenu+0x264>)
 8003df0:	f00b fcfc 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003df4:	2300      	movs	r3, #0
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2302      	movs	r3, #2
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e00:	2232      	movs	r2, #50	; 0x32
 8003e02:	210a      	movs	r1, #10
 8003e04:	488d      	ldr	r0, [pc, #564]	; (800403c <ToplevelMenu_DrawInputMenu+0x268>)
 8003e06:	f00b fcf1 	bl	800f7ec <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 8003e0a:	f002 fafb 	bl	8006404 <IT_GetTriggerStatus>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d016      	beq.n	8003e42 <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e14:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2232      	movs	r2, #50	; 0x32
 8003e22:	2196      	movs	r1, #150	; 0x96
 8003e24:	4886      	ldr	r0, [pc, #536]	; (8004040 <ToplevelMenu_DrawInputMenu+0x26c>)
 8003e26:	f00b fce1 	bl	800f7ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2302      	movs	r3, #2
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e36:	2232      	movs	r2, #50	; 0x32
 8003e38:	21c8      	movs	r1, #200	; 0xc8
 8003e3a:	4882      	ldr	r0, [pc, #520]	; (8004044 <ToplevelMenu_DrawInputMenu+0x270>)
 8003e3c:	f00b fcd6 	bl	800f7ec <ILI9341_Draw_Text>
 8003e40:	e015      	b.n	8003e6e <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e42:	2300      	movs	r3, #0
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2302      	movs	r3, #2
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e4e:	2232      	movs	r2, #50	; 0x32
 8003e50:	2196      	movs	r1, #150	; 0x96
 8003e52:	487b      	ldr	r0, [pc, #492]	; (8004040 <ToplevelMenu_DrawInputMenu+0x26c>)
 8003e54:	f00b fcca 	bl	800f7ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e58:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	2302      	movs	r3, #2
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	2232      	movs	r2, #50	; 0x32
 8003e66:	21c8      	movs	r1, #200	; 0xc8
 8003e68:	4876      	ldr	r0, [pc, #472]	; (8004044 <ToplevelMenu_DrawInputMenu+0x270>)
 8003e6a:	f00b fcbf 	bl	800f7ec <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e7a:	2246      	movs	r2, #70	; 0x46
 8003e7c:	210a      	movs	r1, #10
 8003e7e:	4872      	ldr	r0, [pc, #456]	; (8004048 <ToplevelMenu_DrawInputMenu+0x274>)
 8003e80:	f00b fcb4 	bl	800f7ec <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_TIM)
 8003e84:	f002 faa2 	bl	80063cc <IT_GetActiveTriggerMode>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d12d      	bne.n	8003eea <ToplevelMenu_DrawInputMenu+0x116>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e8e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	2302      	movs	r3, #2
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2246      	movs	r2, #70	; 0x46
 8003e9c:	2196      	movs	r1, #150	; 0x96
 8003e9e:	486b      	ldr	r0, [pc, #428]	; (800404c <ToplevelMenu_DrawInputMenu+0x278>)
 8003ea0:	f00b fca4 	bl	800f7ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003eb0:	2246      	movs	r2, #70	; 0x46
 8003eb2:	21c8      	movs	r1, #200	; 0xc8
 8003eb4:	4866      	ldr	r0, [pc, #408]	; (8004050 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003eb6:	f00b fc99 	bl	800f7ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ec6:	2246      	movs	r2, #70	; 0x46
 8003ec8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003ecc:	4861      	ldr	r0, [pc, #388]	; (8004054 <ToplevelMenu_DrawInputMenu+0x280>)
 8003ece:	f00b fc8d 	bl	800f7ec <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ede:	2264      	movs	r2, #100	; 0x64
 8003ee0:	2196      	movs	r1, #150	; 0x96
 8003ee2:	485d      	ldr	r0, [pc, #372]	; (8004058 <ToplevelMenu_DrawInputMenu+0x284>)
 8003ee4:	f00b fc82 	bl	800f7ec <ILI9341_Draw_Text>
 8003ee8:	e076      	b.n	8003fd8 <ToplevelMenu_DrawInputMenu+0x204>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_COMP)
 8003eea:	f002 fa6f 	bl	80063cc <IT_GetActiveTriggerMode>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d13f      	bne.n	8003f74 <ToplevelMenu_DrawInputMenu+0x1a0>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	2302      	movs	r3, #2
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f00:	2246      	movs	r2, #70	; 0x46
 8003f02:	2196      	movs	r1, #150	; 0x96
 8003f04:	4851      	ldr	r0, [pc, #324]	; (800404c <ToplevelMenu_DrawInputMenu+0x278>)
 8003f06:	f00b fc71 	bl	800f7ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003f0a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	2302      	movs	r3, #2
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2300      	movs	r3, #0
 8003f16:	2246      	movs	r2, #70	; 0x46
 8003f18:	21c8      	movs	r1, #200	; 0xc8
 8003f1a:	484d      	ldr	r0, [pc, #308]	; (8004050 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003f1c:	f00b fc66 	bl	800f7ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f20:	2300      	movs	r3, #0
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	2302      	movs	r3, #2
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f2c:	2246      	movs	r2, #70	; 0x46
 8003f2e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003f32:	4848      	ldr	r0, [pc, #288]	; (8004054 <ToplevelMenu_DrawInputMenu+0x280>)
 8003f34:	f00b fc5a 	bl	800f7ec <ILI9341_Draw_Text>

		char comp_text[20] = "";
 8003f38:	2300      	movs	r3, #0
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	f107 0308 	add.w	r3, r7, #8
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8003f4a:	4844      	ldr	r0, [pc, #272]	; (800405c <ToplevelMenu_DrawInputMenu+0x288>)
 8003f4c:	f006 fe74 	bl	800ac38 <HAL_COMP_GetOutputLevel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	1d38      	adds	r0, r7, #4
 8003f54:	4a42      	ldr	r2, [pc, #264]	; (8004060 <ToplevelMenu_DrawInputMenu+0x28c>)
 8003f56:	2114      	movs	r1, #20
 8003f58:	f00d f804 	bl	8010f64 <sniprintf>


		ILI9341_Draw_Text(comp_text, 150, 100,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003f5c:	1d38      	adds	r0, r7, #4
 8003f5e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	2302      	movs	r3, #2
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2264      	movs	r2, #100	; 0x64
 8003f6c:	2196      	movs	r1, #150	; 0x96
 8003f6e:	f00b fc3d 	bl	800f7ec <ILI9341_Draw_Text>
 8003f72:	e031      	b.n	8003fd8 <ToplevelMenu_DrawInputMenu+0x204>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_ADC)
 8003f74:	f002 fa2a 	bl	80063cc <IT_GetActiveTriggerMode>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d12c      	bne.n	8003fd8 <ToplevelMenu_DrawInputMenu+0x204>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2302      	movs	r3, #2
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f8a:	2246      	movs	r2, #70	; 0x46
 8003f8c:	2196      	movs	r1, #150	; 0x96
 8003f8e:	482f      	ldr	r0, [pc, #188]	; (800404c <ToplevelMenu_DrawInputMenu+0x278>)
 8003f90:	f00b fc2c 	bl	800f7ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f94:	2300      	movs	r3, #0
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	2302      	movs	r3, #2
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003fa0:	2246      	movs	r2, #70	; 0x46
 8003fa2:	21c8      	movs	r1, #200	; 0xc8
 8003fa4:	482a      	ldr	r0, [pc, #168]	; (8004050 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003fa6:	f00b fc21 	bl	800f7ec <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003faa:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2246      	movs	r2, #70	; 0x46
 8003fb8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003fbc:	4825      	ldr	r0, [pc, #148]	; (8004054 <ToplevelMenu_DrawInputMenu+0x280>)
 8003fbe:	f00b fc15 	bl	800f7ec <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003fce:	2264      	movs	r2, #100	; 0x64
 8003fd0:	2196      	movs	r1, #150	; 0x96
 8003fd2:	4821      	ldr	r0, [pc, #132]	; (8004058 <ToplevelMenu_DrawInputMenu+0x284>)
 8003fd4:	f00b fc0a 	bl	800f7ec <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fd8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	2302      	movs	r3, #2
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	22cc      	movs	r2, #204	; 0xcc
 8003fe6:	2114      	movs	r1, #20
 8003fe8:	481e      	ldr	r0, [pc, #120]	; (8004064 <ToplevelMenu_DrawInputMenu+0x290>)
 8003fea:	f00b fbff 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fee:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	22de      	movs	r2, #222	; 0xde
 8003ffc:	2114      	movs	r1, #20
 8003ffe:	481a      	ldr	r0, [pc, #104]	; (8004068 <ToplevelMenu_DrawInputMenu+0x294>)
 8004000:	f00b fbf4 	bl	800f7ec <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8004004:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	2302      	movs	r3, #2
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	2300      	movs	r3, #0
 8004010:	22cc      	movs	r2, #204	; 0xcc
 8004012:	2168      	movs	r1, #104	; 0x68
 8004014:	4815      	ldr	r0, [pc, #84]	; (800406c <ToplevelMenu_DrawInputMenu+0x298>)
 8004016:	f00b fbe9 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800401a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	2302      	movs	r3, #2
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	22de      	movs	r2, #222	; 0xde
 8004028:	2161      	movs	r1, #97	; 0x61
 800402a:	4811      	ldr	r0, [pc, #68]	; (8004070 <ToplevelMenu_DrawInputMenu+0x29c>)
 800402c:	f00b fbde 	bl	800f7ec <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	08014b6c 	.word	0x08014b6c
 800403c:	08014b74 	.word	0x08014b74
 8004040:	08014b80 	.word	0x08014b80
 8004044:	08014b84 	.word	0x08014b84
 8004048:	08014b88 	.word	0x08014b88
 800404c:	08014b90 	.word	0x08014b90
 8004050:	08014b94 	.word	0x08014b94
 8004054:	08014b9c 	.word	0x08014b9c
 8004058:	08014ba0 	.word	0x08014ba0
 800405c:	200029c8 	.word	0x200029c8
 8004060:	08014ba8 	.word	0x08014ba8
 8004064:	08014bb0 	.word	0x08014bb0
 8004068:	08014bb4 	.word	0x08014bb4
 800406c:	08014bbc 	.word	0x08014bbc
 8004070:	08014bc0 	.word	0x08014bc0

08004074 <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <BiasMenu_getStatus+0x14>)
 800407a:	781b      	ldrb	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20001e55 	.word	0x20001e55

0800408c <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004090:	f7fd fa6c 	bl	800156c <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <BiasMenuEntryHandler+0x30>)
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <BiasMenuEntryHandler+0x34>)
 800409c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80040a2:	f001 f9dd 	bl	8005460 <BO_GetDcBiasEncoderValue>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <BiasMenuEntryHandler+0x34>)
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <BiasMenuEntryHandler+0x38>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80040b4:	230f      	movs	r3, #15
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20001e55 	.word	0x20001e55
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	20001e57 	.word	0x20001e57

080040c8 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d82d      	bhi.n	8004136 <BiasMenuInputHandler+0x6e>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <BiasMenuInputHandler+0x18>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004105 	.word	0x08004105
 80040e4:	08004117 	.word	0x08004117
 80040e8:	08004125 	.word	0x08004125
 80040ec:	08004137 	.word	0x08004137
 80040f0:	080040f5 	.word	0x080040f5
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80040f4:	2000      	movs	r0, #0
 80040f6:	f002 fd6b 	bl	8006bd0 <SM_GetEncoderValue>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 f9bb 	bl	8005478 <BO_MapEncoderPositionToSignalOutput>
			break;
 8004102:	e019      	b.n	8004138 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 8004104:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004108:	f001 f9b6 	bl	8005478 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <BiasMenuInputHandler+0x80>)
 800410e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004114:	e010      	b.n	8004138 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 8004116:	200a      	movs	r0, #10
 8004118:	f001 f9ae 	bl	8005478 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <BiasMenuInputHandler+0x80>)
 800411e:	220a      	movs	r2, #10
 8004120:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004122:	e009      	b.n	8004138 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 8004124:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004128:	f001 f9a6 	bl	8005478 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <BiasMenuInputHandler+0x80>)
 800412e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004132:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004134:	e000      	b.n	8004138 <BiasMenuInputHandler+0x70>

		default:
			break;
 8004136:	bf00      	nop
	}


	eNewEvent = evIdle;
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <BiasMenuInputHandler+0x84>)
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800413e:	230f      	movs	r3, #15
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40012c00 	.word	0x40012c00
 800414c:	20001e57 	.word	0x20001e57

08004150 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <BiasMenuExitHandler+0x1c>)
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 800415a:	f7fd fa07 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <BiasMenuExitHandler+0x20>)
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004164:	2301      	movs	r3, #1
}
 8004166:	4618      	mov	r0, r3
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20001e55 	.word	0x20001e55
 8004170:	20001e57 	.word	0x20001e57

08004174 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0

	switch(eNextState)
 8004178:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <EM_ProcessEvent+0xb4>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b0f      	cmp	r3, #15
 800417e:	d850      	bhi.n	8004222 <EM_ProcessEvent+0xae>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <EM_ProcessEvent+0x14>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041cf 	.word	0x080041cf
 8004190:	080041d5 	.word	0x080041d5
 8004194:	080041db 	.word	0x080041db
 8004198:	080041e1 	.word	0x080041e1
 800419c:	080041e7 	.word	0x080041e7
 80041a0:	080041ed 	.word	0x080041ed
 80041a4:	080041f3 	.word	0x080041f3
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	08004223 	.word	0x08004223
 80041b0:	080041ff 	.word	0x080041ff
 80041b4:	08004205 	.word	0x08004205
 80041b8:	0800420b 	.word	0x0800420b
 80041bc:	08004217 	.word	0x08004217
 80041c0:	08004211 	.word	0x08004211
 80041c4:	0800421d 	.word	0x0800421d
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 80041c8:	f000 f830 	bl	800422c <_ProcessIdleStateEvents>
			break;
 80041cc:	e02a      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 80041ce:	f000 f849 	bl	8004264 <_ProcessTopLevelOutputMenuStateEvents>
			break;
 80041d2:	e027      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 80041d4:	f000 f88c 	bl	80042f0 <_ProcessTopLevelInputMenuStateEvents>
			break;
 80041d8:	e024      	b.n	8004224 <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 80041da:	f000 f8b5 	bl	8004348 <_ProcessFuncMainMenuStateEvents>
			break;
 80041de:	e021      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 80041e0:	f000 f8d8 	bl	8004394 <_ProcessFuncSignalMenuStateEvents>
			break;
 80041e4:	e01e      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 80041e6:	f000 f8f1 	bl	80043cc <_ProcessFuncAuxMenuStateEvents>
			break;
 80041ea:	e01b      	b.n	8004224 <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 80041ec:	f000 f914 	bl	8004418 <_ProcessGainMainMenuStateEvents>
			break;
 80041f0:	e018      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 80041f2:	f000 f949 	bl	8004488 <_ProcessGainSignalMenuStateEvents>
			break;
 80041f6:	e015      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 80041f8:	f000 f990 	bl	800451c <_ProcessGainAuxMenuStateEvents>
			break;
 80041fc:	e012      	b.n	8004224 <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 80041fe:	f000 f9a9 	bl	8004554 <_ProcessFreqMainMenuStateEvents>
			break;
 8004202:	e00f      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 8004204:	f000 f9e4 	bl	80045d0 <_ProcessFreqPresetMenuStateEvents>
			break;
 8004208:	e00c      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 800420a:	f000 f9fd 	bl	8004608 <_ProcessFreqAdjustMenuState>
			break;
 800420e:	e009      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 8004210:	f000 fa16 	bl	8004640 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 8004214:	e006      	b.n	8004224 <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 8004216:	f000 fa2f 	bl	8004678 <_ProcessFreqSweepMenuStateEvents>
			break;
 800421a:	e003      	b.n	8004224 <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 800421c:	f000 fa76 	bl	800470c <_ProcessBiasMainMenuEvents>
			break;
 8004220:	e000      	b.n	8004224 <EM_ProcessEvent+0xb0>

		default:
			break;
 8004222:	bf00      	nop
	}

}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20001e56 	.word	0x20001e56

0800422c <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <_ProcessIdleStateEvents+0x30>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004238:	f000 ff2e 	bl	8005098 <ToplevelOutputMenuEntryHandler>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <_ProcessIdleStateEvents+0x34>)
 8004242:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <_ProcessIdleStateEvents+0x30>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d105      	bne.n	8004258 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 800424c:	f000 ff48 	bl	80050e0 <ToplevelInputMenuEntryHandler>
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <_ProcessIdleStateEvents+0x34>)
 8004256:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20001e57 	.word	0x20001e57
 8004260:	20001e56 	.word	0x20001e56

08004264 <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b06      	cmp	r3, #6
 800426e:	d105      	bne.n	800427c <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 8004270:	f000 ff24 	bl	80050bc <ToplevelOutputMenuExitHandler>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 800427a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d108      	bne.n	8004296 <_ProcessTopLevelOutputMenuStateEvents+0x32>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004284:	2000      	movs	r0, #0
 8004286:	f000 fef7 	bl	8005078 <ToplevelMenu_setStatus>
		eNextState = FuncMainMenuEntryHandler();
 800428a:	f000 fce5 	bl	8004c58 <FuncMainMenuEntryHandler>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004294:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d108      	bne.n	80042b0 <_ProcessTopLevelOutputMenuStateEvents+0x4c>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800429e:	2000      	movs	r0, #0
 80042a0:	f000 feea 	bl	8005078 <ToplevelMenu_setStatus>
		eNextState = FreqMainMenuEntryHandler();
 80042a4:	f000 fbd0 	bl	8004a48 <FreqMainMenuEntryHandler>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042ae:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d108      	bne.n	80042ca <_ProcessTopLevelOutputMenuStateEvents+0x66>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80042b8:	2000      	movs	r0, #0
 80042ba:	f000 fedd 	bl	8005078 <ToplevelMenu_setStatus>
		eNextState = GainMainMenuEntryHandler();
 80042be:	f000 fdc1 	bl	8004e44 <GainMainMenuEntryHandler>
 80042c2:	4603      	mov	r3, r0
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042c8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d108      	bne.n	80042e4 <_ProcessTopLevelOutputMenuStateEvents+0x80>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80042d2:	2000      	movs	r0, #0
 80042d4:	f000 fed0 	bl	8005078 <ToplevelMenu_setStatus>
		eNextState = BiasMenuEntryHandler();
 80042d8:	f7ff fed8 	bl	800408c <BiasMenuEntryHandler>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	4b02      	ldr	r3, [pc, #8]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042e2:	701a      	strb	r2, [r3, #0]
	}
}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20001e57 	.word	0x20001e57
 80042ec:	20001e56 	.word	0x20001e56

080042f0 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b06      	cmp	r3, #6
 80042fa:	d105      	bne.n	8004308 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 80042fc:	f000 ff24 	bl	8005148 <ToplevelInputMenuExitHandler>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004306:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d108      	bne.n	8004322 <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fef5 	bl	8005104 <ToplevelInputMenuInputHandler>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004320:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d108      	bne.n	800433c <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fee8 	bl	8005104 <ToplevelInputMenuInputHandler>
 8004334:	4603      	mov	r3, r0
 8004336:	461a      	mov	r2, r3
 8004338:	4b02      	ldr	r3, [pc, #8]	; (8004344 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800433a:	701a      	strb	r2, [r3, #0]
	}
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20001e57 	.word	0x20001e57
 8004344:	20001e56 	.word	0x20001e56

08004348 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <_ProcessFuncMainMenuStateEvents+0x44>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d105      	bne.n	8004360 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 8004354:	f000 fc92 	bl	8004c7c <FuncMainMenuExitHandler>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <_ProcessFuncMainMenuStateEvents+0x48>)
 800435e:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <_ProcessFuncMainMenuStateEvents+0x44>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004368:	f000 fc9c 	bl	8004ca4 <FuncSignalMenuEntryHandler>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004372:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <_ProcessFuncMainMenuStateEvents+0x44>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d105      	bne.n	8004388 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 800437c:	f000 fcd6 	bl	8004d2c <FuncAuxMenuEntryHandler>
 8004380:	4603      	mov	r3, r0
 8004382:	461a      	mov	r2, r3
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004386:	701a      	strb	r2, [r3, #0]
	}
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20001e57 	.word	0x20001e57
 8004390:	20001e56 	.word	0x20001e56

08004394 <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <_ProcessFuncSignalMenuStateEvents+0x30>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d105      	bne.n	80043ac <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 80043a0:	f000 fc9e 	bl	8004ce0 <FuncSignalMenuInputHandler>
 80043a4:	4603      	mov	r3, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80043aa:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b06      	cmp	r3, #6
 80043b2:	d105      	bne.n	80043c0 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 80043b4:	f000 fca6 	bl	8004d04 <FuncSignalMenuExitHandler>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80043be:	701a      	strb	r2, [r3, #0]
	}
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20001e57 	.word	0x20001e57
 80043c8:	20001e56 	.word	0x20001e56

080043cc <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d105      	bne.n	80043e4 <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 80043d8:	f000 fcc6 	bl	8004d68 <FuncAuxMenuInputHandler>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <_ProcessFuncAuxMenuStateEvents+0x48>)
 80043e2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d105      	bne.n	80043f8 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 80043ec:	f000 fd0a 	bl	8004e04 <FuncAuxMenuExitHandler>
 80043f0:	4603      	mov	r3, r0
 80043f2:	461a      	mov	r2, r3
 80043f4:	4b07      	ldr	r3, [pc, #28]	; (8004414 <_ProcessFuncAuxMenuStateEvents+0x48>)
 80043f6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d105      	bne.n	800440c <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 8004400:	f000 fcee 	bl	8004de0 <FuncAuxToggleDutyMode>
 8004404:	4603      	mov	r3, r0
 8004406:	461a      	mov	r2, r3
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <_ProcessFuncAuxMenuStateEvents+0x48>)
 800440a:	701a      	strb	r2, [r3, #0]
	}

}
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20001e57 	.word	0x20001e57
 8004414:	20001e56 	.word	0x20001e56

08004418 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <_ProcessGainMainMenuStateEvents+0x68>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b06      	cmp	r3, #6
 8004424:	d108      	bne.n	8004438 <_ProcessGainMainMenuStateEvents+0x20>
	{
		eNextState = GainMainMenuExitHandler();
 8004426:	f000 fd1f 	bl	8004e68 <GainMainMenuExitHandler>
 800442a:	4603      	mov	r3, r0
 800442c:	461a      	mov	r2, r3
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <_ProcessGainMainMenuStateEvents+0x6c>)
 8004430:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004432:	2002      	movs	r0, #2
 8004434:	f000 fe20 	bl	8005078 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <_ProcessGainMainMenuStateEvents+0x68>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <_ProcessGainMainMenuStateEvents+0x34>
	{
		eNextState = GainSignalMenuEntryHandler();
 8004440:	f000 fd24 	bl	8004e8c <GainSignalMenuEntryHandler>
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <_ProcessGainMainMenuStateEvents+0x6c>)
 800444a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <_ProcessGainMainMenuStateEvents+0x68>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d110      	bne.n	8004476 <_ProcessGainMainMenuStateEvents+0x5e>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004454:	2001      	movs	r0, #1
 8004456:	f002 f93f 	bl	80066d8 <SM_GetOutputChannel>
 800445a:	4603      	mov	r3, r0
 800445c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d005      	beq.n	8004476 <_ProcessGainMainMenuStateEvents+0x5e>
			eNextState = GainAuxMenuEntryHandler();
 800446a:	f000 fda5 	bl	8004fb8 <GainAuxMenuEntryHandler>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	4b04      	ldr	r3, [pc, #16]	; (8004484 <_ProcessGainMainMenuStateEvents+0x6c>)
 8004474:	701a      	strb	r2, [r3, #0]
	}
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20001e57 	.word	0x20001e57
 8004484:	20001e56 	.word	0x20001e56

08004488 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b05      	cmp	r3, #5
 8004492:	d106      	bne.n	80044a2 <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 8004494:	2005      	movs	r0, #5
 8004496:	f000 fd2b 	bl	8004ef0 <GainSignalMenuInputHandler>
 800449a:	4603      	mov	r3, r0
 800449c:	461a      	mov	r2, r3
 800449e:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044a0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d105      	bne.n	80044b6 <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 80044aa:	f000 fd73 	bl	8004f94 <GainSignalMenuExitHandler>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b19      	ldr	r3, [pc, #100]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044b4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d106      	bne.n	80044cc <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 80044be:	2001      	movs	r0, #1
 80044c0:	f000 fd16 	bl	8004ef0 <GainSignalMenuInputHandler>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044ca:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d106      	bne.n	80044e2 <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 80044d4:	2002      	movs	r0, #2
 80044d6:	f000 fd0b 	bl	8004ef0 <GainSignalMenuInputHandler>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044e0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d106      	bne.n	80044f8 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 80044ea:	2003      	movs	r0, #3
 80044ec:	f000 fd00 	bl	8004ef0 <GainSignalMenuInputHandler>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044f6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d106      	bne.n	800450e <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 8004500:	2004      	movs	r0, #4
 8004502:	f000 fcf5 	bl	8004ef0 <GainSignalMenuInputHandler>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4b03      	ldr	r3, [pc, #12]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 800450c:	701a      	strb	r2, [r3, #0]
	}

}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20001e57 	.word	0x20001e57
 8004518:	20001e56 	.word	0x20001e56

0800451c <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <_ProcessGainAuxMenuStateEvents+0x30>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d105      	bne.n	8004534 <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 8004528:	f000 fd76 	bl	8005018 <GainAuxMenuInputHandler>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <_ProcessGainAuxMenuStateEvents+0x34>)
 8004532:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <_ProcessGainAuxMenuStateEvents+0x30>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b06      	cmp	r3, #6
 800453a:	d105      	bne.n	8004548 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 800453c:	f000 fd7e 	bl	800503c <GainAuxMenuExitHandler>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	4b02      	ldr	r3, [pc, #8]	; (8004550 <_ProcessGainAuxMenuStateEvents+0x34>)
 8004546:	701a      	strb	r2, [r3, #0]
	}
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20001e57 	.word	0x20001e57
 8004550:	20001e56 	.word	0x20001e56

08004554 <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b06      	cmp	r3, #6
 800455e:	d108      	bne.n	8004572 <_ProcessFreqMainMenuStateEvents+0x1e>
	{
		eNextState = FreqMainMenuExitHandler();
 8004560:	f000 fa84 	bl	8004a6c <FreqMainMenuExitHandler>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 800456a:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800456c:	2002      	movs	r0, #2
 800456e:	f000 fd83 	bl	8005078 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <_ProcessFreqMainMenuStateEvents+0x32>
	{
		eNextState = FreqPresetMenuEntryHandler();
 800457a:	f000 fa8f 	bl	8004a9c <FreqPresetMenuEntryHandler>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 8004584:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d105      	bne.n	800459a <_ProcessFreqMainMenuStateEvents+0x46>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 800458e:	f000 fad5 	bl	8004b3c <FreqAdjustMenuEntryHandler>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 8004598:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d105      	bne.n	80045ae <_ProcessFreqMainMenuStateEvents+0x5a>
	{
		eNextState = FreqSweepMenuEntryHandler();
 80045a2:	f000 f905 	bl	80047b0 <FreqSweepMenuEntryHandler>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 80045ac:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d105      	bne.n	80045c2 <_ProcessFreqMainMenuStateEvents+0x6e>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 80045b6:	f000 fafd 	bl	8004bb4 <FreqPrescalerMenuEntryHandler>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	4b03      	ldr	r3, [pc, #12]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 80045c0:	701a      	strb	r2, [r3, #0]
	}
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20001e57 	.word	0x20001e57
 80045cc:	20001e56 	.word	0x20001e56

080045d0 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d105      	bne.n	80045e8 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80045dc:	f000 fa8a 	bl	8004af4 <FreqPresetMenuInputHandler>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <_ProcessFreqPresetMenuStateEvents+0x34>)
 80045e6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d105      	bne.n	80045fc <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 80045f0:	f000 fa92 	bl	8004b18 <FreqPresetMenuExitHandler>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <_ProcessFreqPresetMenuStateEvents+0x34>)
 80045fa:	701a      	strb	r2, [r3, #0]
	}
}
 80045fc:	bf00      	nop
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20001e57 	.word	0x20001e57
 8004604:	20001e56 	.word	0x20001e56

08004608 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <_ProcessFreqAdjustMenuState+0x30>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b05      	cmp	r3, #5
 8004612:	d105      	bne.n	8004620 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 8004614:	f000 fab0 	bl	8004b78 <FreqAdjustMenuInputHandler>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <_ProcessFreqAdjustMenuState+0x34>)
 800461e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <_ProcessFreqAdjustMenuState+0x30>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d105      	bne.n	8004634 <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 8004628:	f000 fab2 	bl	8004b90 <FreqAdjustMenuExitHandler>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4b02      	ldr	r3, [pc, #8]	; (800463c <_ProcessFreqAdjustMenuState+0x34>)
 8004632:	701a      	strb	r2, [r3, #0]
	}
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20001e57 	.word	0x20001e57
 800463c:	20001e56 	.word	0x20001e56

08004640 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b05      	cmp	r3, #5
 800464a:	d105      	bne.n	8004658 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 800464c:	f000 face 	bl	8004bec <FreqPrescalerMenuInputHandler>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004656:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b06      	cmp	r3, #6
 800465e:	d105      	bne.n	800466c <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 8004660:	f000 fad0 	bl	8004c04 <FreqPrescalerMenuExitHandler>
 8004664:	4603      	mov	r3, r0
 8004666:	461a      	mov	r2, r3
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 800466a:	701a      	strb	r2, [r3, #0]
	}
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20001e57 	.word	0x20001e57
 8004674:	20001e56 	.word	0x20001e56

08004678 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 800467c:	4b21      	ldr	r3, [pc, #132]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004684:	2007      	movs	r0, #7
 8004686:	f000 f8e9 	bl	800485c <FreqSweepMenuInputHandler>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004690:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d106      	bne.n	80046a8 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 800469a:	2008      	movs	r0, #8
 800469c:	f000 f8de 	bl	800485c <FreqSweepMenuInputHandler>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046a6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80046a8:	4b16      	ldr	r3, [pc, #88]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d106      	bne.n	80046be <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80046b0:	2009      	movs	r0, #9
 80046b2:	f000 f8d3 	bl	800485c <FreqSweepMenuInputHandler>
 80046b6:	4603      	mov	r3, r0
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b13      	ldr	r3, [pc, #76]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046bc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d106      	bne.n	80046d4 <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80046c6:	200a      	movs	r0, #10
 80046c8:	f000 f8c8 	bl	800485c <FreqSweepMenuInputHandler>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046d2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d106      	bne.n	80046ea <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80046dc:	200b      	movs	r0, #11
 80046de:	f000 f8bd 	bl	800485c <FreqSweepMenuInputHandler>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046e8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b06      	cmp	r3, #6
 80046f0:	d105      	bne.n	80046fe <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 80046f2:	f000 f989 	bl	8004a08 <FreqSweepMenuExitHandler>
 80046f6:	4603      	mov	r3, r0
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b03      	ldr	r3, [pc, #12]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046fc:	701a      	strb	r2, [r3, #0]
	}

}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20001e57 	.word	0x20001e57
 8004708:	20001e56 	.word	0x20001e56

0800470c <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004710:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b05      	cmp	r3, #5
 8004716:	d106      	bne.n	8004726 <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004718:	2005      	movs	r0, #5
 800471a:	f7ff fcd5 	bl	80040c8 <BiasMenuInputHandler>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 8004724:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004726:	4b18      	ldr	r3, [pc, #96]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b06      	cmp	r3, #6
 800472c:	d108      	bne.n	8004740 <_ProcessBiasMainMenuEvents+0x34>
	{
		eNextState = BiasMenuExitHandler();
 800472e:	f7ff fd0f 	bl	8004150 <BiasMenuExitHandler>
 8004732:	4603      	mov	r3, r0
 8004734:	461a      	mov	r2, r3
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 8004738:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800473a:	2002      	movs	r0, #2
 800473c:	f000 fc9c 	bl	8005078 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d106      	bne.n	8004756 <_ProcessBiasMainMenuEvents+0x4a>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 8004748:	2001      	movs	r0, #1
 800474a:	f7ff fcbd 	bl	80040c8 <BiasMenuInputHandler>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 8004754:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d106      	bne.n	800476c <_ProcessBiasMainMenuEvents+0x60>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 800475e:	2002      	movs	r0, #2
 8004760:	f7ff fcb2 	bl	80040c8 <BiasMenuInputHandler>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 800476a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d106      	bne.n	8004782 <_ProcessBiasMainMenuEvents+0x76>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004774:	2003      	movs	r0, #3
 8004776:	f7ff fca7 	bl	80040c8 <BiasMenuInputHandler>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	4b03      	ldr	r3, [pc, #12]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 8004780:	701a      	strb	r2, [r3, #0]
	}
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20001e57 	.word	0x20001e57
 800478c:	20001e56 	.word	0x20001e56

08004790 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 800479a:	4a04      	ldr	r2, [pc, #16]	; (80047ac <EM_SetNewEvent+0x1c>)
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	7013      	strb	r3, [r2, #0]
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	20001e57 	.word	0x20001e57

080047b0 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 80047b4:	f7fc feda 	bl	800156c <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <FreqSweepMenuEntryHandler+0x94>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	ee07 3a90 	vmov	s15, r3
 80047c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <FreqSweepMenuEntryHandler+0x98>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	eeb4 7a67 	vcmp.f32	s14, s15
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	d008      	beq.n	80047e6 <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <FreqSweepMenuEntryHandler+0x94>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <FreqSweepMenuEntryHandler+0x98>)
 80047e2:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <FreqSweepMenuEntryHandler+0x98>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80047f0:	eef4 7a47 	vcmp.f32	s15, s14
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	d101      	bne.n	80047fe <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 80047fa:	f001 f88f 	bl	800591c <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80047fe:	2000      	movs	r0, #0
 8004800:	f001 f8e6 	bl	80059d0 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004804:	2000      	movs	r0, #0
 8004806:	f001 f943 	bl	8005a90 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 800480a:	f001 f97d 	bl	8005b08 <FS_GetCalculatedSweepFrequencyInHertz>
 800480e:	eef0 7a40 	vmov.f32	s15, s0
 8004812:	4b0e      	ldr	r3, [pc, #56]	; (800484c <FreqSweepMenuEntryHandler+0x9c>)
 8004814:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <FreqSweepMenuEntryHandler+0xa0>)
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 800481e:	2009      	movs	r0, #9
 8004820:	f000 f81c 	bl	800485c <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <FreqSweepMenuEntryHandler+0xa0>)
 8004826:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <FreqSweepMenuEntryHandler+0xa0>)
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <FreqSweepMenuEntryHandler+0xa4>)
 8004834:	2204      	movs	r2, #4
 8004836:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004838:	4b07      	ldr	r3, [pc, #28]	; (8004858 <FreqSweepMenuEntryHandler+0xa8>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800483e:	230d      	movs	r3, #13
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40013400 	.word	0x40013400
 8004848:	20000124 	.word	0x20000124
 800484c:	2000226c 	.word	0x2000226c
 8004850:	40000c00 	.word	0x40000c00
 8004854:	20001e5a 	.word	0x20001e5a
 8004858:	20001e57 	.word	0x20001e57

0800485c <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	3b07      	subs	r3, #7
 800486a:	2b04      	cmp	r3, #4
 800486c:	f200 80b2 	bhi.w	80049d4 <FreqSweepMenuInputHandler+0x178>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <FreqSweepMenuInputHandler+0x1c>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	0800488d 	.word	0x0800488d
 800487c:	080048a7 	.word	0x080048a7
 8004880:	080049c5 	.word	0x080049c5
 8004884:	080049cd 	.word	0x080049cd
 8004888:	080048e1 	.word	0x080048e1
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 800488c:	4b56      	ldr	r3, [pc, #344]	; (80049e8 <FreqSweepMenuInputHandler+0x18c>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a55      	ldr	r2, [pc, #340]	; (80049e8 <FreqSweepMenuInputHandler+0x18c>)
 8004892:	f083 0301 	eor.w	r3, r3, #1
 8004896:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <FreqSweepMenuInputHandler+0x18c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <FreqSweepMenuInputHandler+0x18c>)
 800489e:	f083 0301 	eor.w	r3, r3, #1
 80048a2:	6013      	str	r3, [r2, #0]
			break;
 80048a4:	e097      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 80048a6:	4b51      	ldr	r3, [pc, #324]	; (80049ec <FreqSweepMenuInputHandler+0x190>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	f083 0301 	eor.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <FreqSweepMenuInputHandler+0x190>)
 80048b2:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 80048b4:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <FreqSweepMenuInputHandler+0x190>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d004      	beq.n	80048c6 <FreqSweepMenuInputHandler+0x6a>
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d008      	beq.n	80048d2 <FreqSweepMenuInputHandler+0x76>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <FreqSweepMenuInputHandler+0x70>
 80048c4:	e006      	b.n	80048d4 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 80048c6:	f001 f829 	bl	800591c <FS_SetSweepModeDown>
					break;
 80048ca:	e003      	b.n	80048d4 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 80048cc:	f001 f856 	bl	800597c <FS_SetSweepModeUp>
					break;
 80048d0:	e000      	b.n	80048d4 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 80048d2:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 80048d4:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <FreqSweepMenuInputHandler+0x194>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 f879 	bl	80059d0 <FS_SetEncoderControlMode>

			break;
 80048de:	e07a      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 80048e0:	4b43      	ldr	r3, [pc, #268]	; (80049f0 <FreqSweepMenuInputHandler+0x194>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <FreqSweepMenuInputHandler+0x92>
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d00b      	beq.n	8004904 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 80048ec:	e073      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 80048ee:	2000      	movs	r0, #0
 80048f0:	f001 f8ce 	bl	8005a90 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80048f4:	f001 f908 	bl	8005b08 <FS_GetCalculatedSweepFrequencyInHertz>
 80048f8:	eef0 7a40 	vmov.f32	s15, s0
 80048fc:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <FreqSweepMenuInputHandler+0x198>)
 80048fe:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004902:	e05e      	b.n	80049c2 <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <FreqSweepMenuInputHandler+0x190>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <FreqSweepMenuInputHandler+0xb6>
 800490c:	2b01      	cmp	r3, #1
 800490e:	d02a      	beq.n	8004966 <FreqSweepMenuInputHandler+0x10a>
							break;
 8004910:	e056      	b.n	80049c0 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004912:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d803      	bhi.n	8004922 <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800491a:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 800491c:	220d      	movs	r2, #13
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004920:	e04e      	b.n	80049c0 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004922:	4b35      	ldr	r3, [pc, #212]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800492e:	4b33      	ldr	r3, [pc, #204]	; (80049fc <FreqSweepMenuInputHandler+0x1a0>)
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	dd09      	ble.n	8004952 <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <FreqSweepMenuInputHandler+0x1a0>)
 8004940:	edd3 7a00 	vldr	s15, [r3]
 8004944:	4b2c      	ldr	r3, [pc, #176]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494a:	ee17 2a90 	vmov	r2, s15
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004950:	e036      	b.n	80049c0 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <FreqSweepMenuInputHandler+0x1a4>)
 8004960:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004964:	e02c      	b.n	80049c0 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800496e:	4293      	cmp	r3, r2
 8004970:	d904      	bls.n	800497c <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004972:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004978:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800497a:	e020      	b.n	80049be <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800497c:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <FreqSweepMenuInputHandler+0x1a4>)
 800498a:	edd3 7a00 	vldr	s15, [r3]
 800498e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	d509      	bpl.n	80049ac <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <FreqSweepMenuInputHandler+0x1a4>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 80049a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a4:	ee17 2a90 	vmov	r2, s15
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80049aa:	e008      	b.n	80049be <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <FreqSweepMenuInputHandler+0x1a0>)
 80049ba:	edc3 7a00 	vstr	s15, [r3]
							break;
 80049be:	bf00      	nop
					break;
 80049c0:	bf00      	nop
			break;
 80049c2:	e008      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f001 f803 	bl	80059d0 <FS_SetEncoderControlMode>

			break;
 80049ca:	e004      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 80049cc:	2001      	movs	r0, #1
 80049ce:	f000 ffff 	bl	80059d0 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 80049d2:	e000      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 80049d4:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <FreqSweepMenuInputHandler+0x1a8>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80049dc:	230d      	movs	r3, #13
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	20001e58 	.word	0x20001e58
 80049f0:	20001e59 	.word	0x20001e59
 80049f4:	2000226c 	.word	0x2000226c
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	20000124 	.word	0x20000124
 8004a00:	20000120 	.word	0x20000120
 8004a04:	20001e57 	.word	0x20001e57

08004a08 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a0c:	f7fc fdae 	bl	800156c <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <FreqSweepMenuExitHandler+0x34>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <FreqSweepMenuExitHandler+0x34>)
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <FreqSweepMenuExitHandler+0x34>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <FreqSweepMenuExitHandler+0x34>)
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <FreqSweepMenuExitHandler+0x38>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <FreqSweepMenuExitHandler+0x3c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004a34:	230a      	movs	r3, #10
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	20001e5a 	.word	0x20001e5a
 8004a44:	20001e57 	.word	0x20001e57

08004a48 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a4c:	f7fc fd8e 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <FreqMainMenuEntryHandler+0x1c>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004a56:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <FreqMainMenuEntryHandler+0x20>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004a5c:	230a      	movs	r3, #10
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20001e5a 	.word	0x20001e5a
 8004a68:	20001e57 	.word	0x20001e57

08004a6c <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <FreqMainMenuExitHandler+0x24>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <FreqMainMenuExitHandler+0x28>)
 8004a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004a7e:	f7fc fd75 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <FreqMainMenuExitHandler+0x2c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004a88:	2301      	movs	r3, #1
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20001e5a 	.word	0x20001e5a
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	20001e57 	.word	0x20001e57

08004a9c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004aa2:	f7fc fd63 	bl	800156c <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004aa6:	f000 ff2d 	bl	8005904 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <FreqPresetMenuEntryHandler+0x48>)
 8004aac:	2202      	movs	r2, #2
 8004aae:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004ab0:	f000 feda 	bl	8005868 <FreqO_GetFPresetObject>
 8004ab4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <FreqPresetMenuEntryHandler+0x4c>)
 8004abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <FreqPresetMenuEntryHandler+0x4c>)
 8004ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8004acc:	e002      	b.n	8004ad4 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004ace:	4807      	ldr	r0, [pc, #28]	; (8004aec <FreqPresetMenuEntryHandler+0x50>)
 8004ad0:	f7fc fd92 	bl	80015f8 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <FreqPresetMenuEntryHandler+0x54>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004ada:	230b      	movs	r3, #11
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20001e5a 	.word	0x20001e5a
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	08014bc8 	.word	0x08014bc8
 8004af0:	20001e57 	.word	0x20001e57

08004af4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004af8:	2000      	movs	r0, #0
 8004afa:	f002 f869 	bl	8006bd0 <SM_GetEncoderValue>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fd8d 	bl	8005620 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004b06:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <FreqPresetMenuInputHandler+0x20>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004b0c:	230b      	movs	r3, #11
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20001e57 	.word	0x20001e57

08004b18 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b1c:	f7fc fd26 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004b20:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <FreqPresetMenuExitHandler+0x1c>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <FreqPresetMenuExitHandler+0x20>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004b2c:	230a      	movs	r3, #10
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20001e5a 	.word	0x20001e5a
 8004b38:	20001e57 	.word	0x20001e57

08004b3c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b40:	f7fc fd14 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <FreqAdjustMenuEntryHandler+0x2c>)
 8004b46:	2203      	movs	r2, #3
 8004b48:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004b4a:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <FreqAdjustMenuEntryHandler+0x30>)
 8004b4c:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <FreqAdjustMenuEntryHandler+0x34>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <FreqAdjustMenuEntryHandler+0x34>)
 8004b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <FreqAdjustMenuEntryHandler+0x38>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004b60:	230c      	movs	r3, #12
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20001e5a 	.word	0x20001e5a
 8004b6c:	40013400 	.word	0x40013400
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	20001e57 	.word	0x20001e57

08004b78 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004b7c:	f000 fe20 	bl	80057c0 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004b80:	4b02      	ldr	r3, [pc, #8]	; (8004b8c <FreqAdjustMenuInputHandler+0x14>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004b86:	230c      	movs	r3, #12
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20001e57 	.word	0x20001e57

08004b90 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b94:	f7fc fcea 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <FreqAdjustMenuExitHandler+0x1c>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <FreqAdjustMenuExitHandler+0x20>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004ba4:	230a      	movs	r3, #10
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20001e5a 	.word	0x20001e5a
 8004bb0:	20001e57 	.word	0x20001e57

08004bb4 <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bb8:	f7fc fcd8 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESCALER_MENU;
 8004bbc:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <FreqPrescalerMenuEntryHandler+0x30>)
 8004bc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <FreqPrescalerMenuEntryHandler+0x30>)
 8004bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <FreqPrescalerMenuEntryHandler+0x34>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004bd8:	230e      	movs	r3, #14
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20001e5a 	.word	0x20001e5a
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	20001e57 	.word	0x20001e57

08004bec <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004bf0:	f000 fe12 	bl	8005818 <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004bf4:	4b02      	ldr	r3, [pc, #8]	; (8004c00 <FreqPrescalerMenuInputHandler+0x14>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004bfa:	230e      	movs	r3, #14
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20001e57 	.word	0x20001e57

08004c04 <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c08:	f7fc fcb0 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <FreqPrescalerMenuExitHandler+0x1c>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004c12:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <FreqPrescalerMenuExitHandler+0x20>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004c18:	230a      	movs	r3, #10
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20001e5a 	.word	0x20001e5a
 8004c24:	20001e57 	.word	0x20001e57

08004c28 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <FreqMenu_getStatus+0x14>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20001e5a 	.word	0x20001e5a

08004c40 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <FuncMenu_getStatus+0x14>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20001e5b 	.word	0x20001e5b

08004c58 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c5c:	f7fc fc86 	bl	800156c <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <FuncMainMenuEntryHandler+0x1c>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <FuncMainMenuEntryHandler+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004c6c:	2303      	movs	r3, #3
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20001e5b 	.word	0x20001e5b
 8004c78:	20001e57 	.word	0x20001e57

08004c7c <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <FuncMainMenuExitHandler+0x20>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004c86:	2002      	movs	r0, #2
 8004c88:	f000 f9f6 	bl	8005078 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8004c8c:	f7fc fc6e 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004c90:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <FuncMainMenuExitHandler+0x24>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004c96:	2301      	movs	r3, #1
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20001e5b 	.word	0x20001e5b
 8004ca0:	20001e57 	.word	0x20001e57

08004ca4 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ca8:	f7fc fc60 	bl	800156c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004cac:	f000 ff5a 	bl	8005b64 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004cb0:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <FuncSignalMenuEntryHandler+0x30>)
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <FuncSignalMenuEntryHandler+0x34>)
 8004cb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <FuncSignalMenuEntryHandler+0x34>)
 8004cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <FuncSignalMenuEntryHandler+0x38>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004ccc:	2304      	movs	r3, #4
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20001e5b 	.word	0x20001e5b
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	20001e57 	.word	0x20001e57

08004ce0 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f001 ff73 	bl	8006bd0 <SM_GetEncoderValue>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 ff45 	bl	8005b7c <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 8004cf2:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <FuncSignalMenuInputHandler+0x20>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004cf8:	2304      	movs	r3, #4
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20001e57 	.word	0x20001e57

08004d04 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <FuncSignalMenuExitHandler+0x20>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004d0e:	f7fc fc2d 	bl	800156c <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004d12:	f001 ffff 	bl	8006d14 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <FuncSignalMenuExitHandler+0x24>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004d1c:	2303      	movs	r3, #3
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20001e5b 	.word	0x20001e5b
 8004d28:	20001e57 	.word	0x20001e57

08004d2c <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d30:	f7fc fc1c 	bl	800156c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004d34:	f000 ff16 	bl	8005b64 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <FuncAuxMenuEntryHandler+0x30>)
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004d3e:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <FuncAuxMenuEntryHandler+0x34>)
 8004d40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <FuncAuxMenuEntryHandler+0x34>)
 8004d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d4c:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <FuncAuxMenuEntryHandler+0x38>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004d54:	2305      	movs	r3, #5
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20001e5b 	.word	0x20001e5b
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	20001e57 	.word	0x20001e57

08004d68 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004d6e:	f001 ffb5 	bl	8006cdc <SM_IsFuncPwmDutyMode>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f001 ff29 	bl	8006bd0 <SM_GetEncoderValue>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb fbe5 	bl	8000554 <__aeabi_ui2d>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004dd0 <FuncAuxMenuInputHandler+0x68>
 8004d92:	ec44 3b10 	vmov	d0, r3, r4
 8004d96:	f00e f9f7 	bl	8013188 <pow>
 8004d9a:	ec53 2b10 	vmov	r2, r3, d0
 8004d9e:	4c0e      	ldr	r4, [pc, #56]	; (8004dd8 <FuncAuxMenuInputHandler+0x70>)
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	f7fb ff28 	bl	8000bf8 <__aeabi_d2uiz>
 8004da8:	4603      	mov	r3, r0
 8004daa:	6363      	str	r3, [r4, #52]	; 0x34
 8004dac:	e006      	b.n	8004dbc <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004dae:	2000      	movs	r0, #0
 8004db0:	f001 ff0e 	bl	8006bd0 <SM_GetEncoderValue>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 ff1a 	bl	8005bf0 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <FuncAuxMenuInputHandler+0x74>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004dc2:	2305      	movs	r3, #5
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd90      	pop	{r4, r7, pc}
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	00000000 	.word	0x00000000
 8004dd4:	40000000 	.word	0x40000000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	20001e57 	.word	0x20001e57

08004de0 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004de4:	f001 ff86 	bl	8006cf4 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <FuncAuxToggleDutyMode+0x1c>)
 8004dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <FuncAuxToggleDutyMode+0x20>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004df6:	2305      	movs	r3, #5
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	20001e57 	.word	0x20001e57

08004e04 <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <FuncAuxMenuExitHandler+0x20>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004e0e:	f001 ff81 	bl	8006d14 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8004e12:	f7fc fbab 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004e16:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <FuncAuxMenuExitHandler+0x24>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004e1c:	2303      	movs	r3, #3
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20001e5b 	.word	0x20001e5b
 8004e28:	20001e57 	.word	0x20001e57

08004e2c <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <GainMenu_getStatus+0x14>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20001e5c 	.word	0x20001e5c

08004e44 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e48:	f7fc fb90 	bl	800156c <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <GainMainMenuEntryHandler+0x1c>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004e52:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <GainMainMenuEntryHandler+0x20>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004e58:	2306      	movs	r3, #6
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20001e5c 	.word	0x20001e5c
 8004e64:	20001e57 	.word	0x20001e57

08004e68 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <GainMainMenuExitHandler+0x1c>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004e72:	f7fc fb7b 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004e76:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <GainMainMenuExitHandler+0x20>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004e7c:	2301      	movs	r3, #1
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20001e5c 	.word	0x20001e5c
 8004e88:	20001e57 	.word	0x20001e57

08004e8c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e92:	f7fc fb6b 	bl	800156c <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004e96:	f001 f8a1 	bl	8005fdc <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004e9a:	f001 ff47 	bl	8006d2c <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <GainSignalMenuEntryHandler+0x54>)
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f001 fc17 	bl	80066d8 <SM_GetOutputChannel>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004eb0:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <GainSignalMenuEntryHandler+0x58>)
 8004eba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <GainSignalMenuEntryHandler+0x58>)
 8004ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ec8:	e002      	b.n	8004ed0 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004eca:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <GainSignalMenuEntryHandler+0x5c>)
 8004ecc:	f7fc fb94 	bl	80015f8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <GainSignalMenuEntryHandler+0x60>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004ed6:	2307      	movs	r3, #7
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20001e5c 	.word	0x20001e5c
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	08014c04 	.word	0x08014c04
 8004eec:	20001e57 	.word	0x20001e57

08004ef0 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004efa:	2000      	movs	r0, #0
 8004efc:	f001 fbec 	bl	80066d8 <SM_GetOutputChannel>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004f06:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d834      	bhi.n	8004f7a <GainSignalMenuInputHandler+0x8a>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <GainSignalMenuInputHandler+0x28>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f5b 	.word	0x08004f5b
 8004f1c:	08004f63 	.word	0x08004f63
 8004f20:	08004f6b 	.word	0x08004f6b
 8004f24:	08004f73 	.word	0x08004f73
 8004f28:	08004f2d 	.word	0x08004f2d
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d025      	beq.n	8004f7e <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b06      	cmp	r3, #6
 8004f38:	d107      	bne.n	8004f4a <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f001 fe48 	bl	8006bd0 <SM_GetEncoderValue>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 f856 	bl	8005ff4 <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8004f48:	e019      	b.n	8004f7e <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f001 fe40 	bl	8006bd0 <SM_GetEncoderValue>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 f85c 	bl	8007010 <VPP_MapEncoderPositionToSignalOutput>
			break;
 8004f58:	e011      	b.n	8004f7e <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8004f5a:	2011      	movs	r0, #17
 8004f5c:	f001 fef2 	bl	8006d44 <VPP_ApplyProfileToSignal>
			break;
 8004f60:	e00e      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 8004f62:	2020      	movs	r0, #32
 8004f64:	f001 feee 	bl	8006d44 <VPP_ApplyProfileToSignal>
			break;
 8004f68:	e00a      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8004f6a:	2031      	movs	r0, #49	; 0x31
 8004f6c:	f001 feea 	bl	8006d44 <VPP_ApplyProfileToSignal>
			break;
 8004f70:	e006      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 8004f72:	2059      	movs	r0, #89	; 0x59
 8004f74:	f001 fee6 	bl	8006d44 <VPP_ApplyProfileToSignal>
			break;
 8004f78:	e002      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>
			break;
 8004f7e:	bf00      	nop
	}

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evIdle;
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <GainSignalMenuInputHandler+0xa0>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004f86:	2307      	movs	r3, #7
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20001e57 	.word	0x20001e57

08004f94 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <GainSignalMenuExitHandler+0x1c>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004f9e:	f7fc fae5 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004fa2:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <GainSignalMenuExitHandler+0x20>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004fa8:	2306      	movs	r3, #6
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20001e5c 	.word	0x20001e5c
 8004fb4:	20001e57 	.word	0x20001e57

08004fb8 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004fbe:	f7fc fad5 	bl	800156c <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004fc2:	f001 feb3 	bl	8006d2c <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <GainAuxMenuEntryHandler+0x50>)
 8004fc8:	2203      	movs	r2, #3
 8004fca:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f001 fb83 	bl	80066d8 <SM_GetOutputChannel>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004fd8:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <GainAuxMenuEntryHandler+0x54>)
 8004fe2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <GainAuxMenuEntryHandler+0x54>)
 8004fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ff0:	e002      	b.n	8004ff8 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004ff2:	4807      	ldr	r0, [pc, #28]	; (8005010 <GainAuxMenuEntryHandler+0x58>)
 8004ff4:	f7fc fb00 	bl	80015f8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <GainAuxMenuEntryHandler+0x5c>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004ffe:	2308      	movs	r3, #8
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20001e5c 	.word	0x20001e5c
 800500c:	40012c00 	.word	0x40012c00
 8005010:	08014c04 	.word	0x08014c04
 8005014:	20001e57 	.word	0x20001e57

08005018 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 800501c:	2000      	movs	r0, #0
 800501e:	f001 fdd7 	bl	8006bd0 <SM_GetEncoderValue>
 8005022:	4603      	mov	r3, r0
 8005024:	4618      	mov	r0, r3
 8005026:	f002 f82d 	bl	8007084 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 800502a:	4b03      	ldr	r3, [pc, #12]	; (8005038 <GainAuxMenuInputHandler+0x20>)
 800502c:	2203      	movs	r2, #3
 800502e:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005030:	2308      	movs	r3, #8
}
 8005032:	4618      	mov	r0, r3
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20001e57 	.word	0x20001e57

0800503c <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <GainAuxMenuExitHandler+0x1c>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8005046:	f7fc fa91 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 800504a:	4b04      	ldr	r3, [pc, #16]	; (800505c <GainAuxMenuExitHandler+0x20>)
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005050:	2306      	movs	r3, #6
}
 8005052:	4618      	mov	r0, r3
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20001e5c 	.word	0x20001e5c
 800505c:	20001e57 	.word	0x20001e57

08005060 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <ToplevelMenu_getStatus+0x14>)
 8005066:	781b      	ldrb	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000000 	.word	0x20000000

08005078 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8005082:	4a04      	ldr	r2, [pc, #16]	; (8005094 <ToplevelMenu_setStatus+0x1c>)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	7013      	strb	r3, [r2, #0]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	20000000 	.word	0x20000000

08005098 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800509c:	f7fc fa66 	bl	800156c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 80050a0:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <ToplevelOutputMenuEntryHandler+0x1c>)
 80050a2:	2202      	movs	r2, #2
 80050a4:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <ToplevelOutputMenuEntryHandler+0x20>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80050ac:	2301      	movs	r3, #1
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000000 	.word	0x20000000
 80050b8:	20001e57 	.word	0x20001e57

080050bc <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050c0:	f7fc fa54 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <ToplevelOutputMenuExitHandler+0x1c>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80050ca:	4b04      	ldr	r3, [pc, #16]	; (80050dc <ToplevelOutputMenuExitHandler+0x20>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000000 	.word	0x20000000
 80050dc:	20001e57 	.word	0x20001e57

080050e0 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050e4:	f7fc fa42 	bl	800156c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <ToplevelInputMenuEntryHandler+0x1c>)
 80050ea:	2203      	movs	r2, #3
 80050ec:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <ToplevelInputMenuEntryHandler+0x20>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80050f4:	2302      	movs	r3, #2
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000000 	.word	0x20000000
 8005100:	20001e57 	.word	0x20001e57

08005104 <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d002      	beq.n	800511a <ToplevelInputMenuInputHandler+0x16>
 8005114:	2b02      	cmp	r3, #2
 8005116:	d003      	beq.n	8005120 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005118:	e00b      	b.n	8005132 <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 800511a:	f001 f857 	bl	80061cc <IT_ArbitrateInputTrigger>
				break;
 800511e:	e008      	b.n	8005132 <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8005120:	f001 f93a 	bl	8006398 <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8005124:	2001      	movs	r0, #1
 8005126:	f7ff ffed 	bl	8005104 <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 800512a:	2001      	movs	r0, #1
 800512c:	f7ff ffea 	bl	8005104 <ToplevelInputMenuInputHandler>
				break;
 8005130:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <ToplevelInputMenuInputHandler+0x40>)
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8005138:	2302      	movs	r3, #2
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20001e57 	.word	0x20001e57

08005148 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800514c:	f7fc fa0e 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <ToplevelInputMenuExitHandler+0x1c>)
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8005156:	4b04      	ldr	r3, [pc, #16]	; (8005168 <ToplevelInputMenuExitHandler+0x20>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000000 	.word	0x20000000
 8005168:	20001e57 	.word	0x20001e57

0800516c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4013      	ands	r3, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	d101      	bne.n	8005186 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40010400 	.word	0x40010400

08005198 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <IM_Init+0x1c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a04      	ldr	r2, [pc, #16]	; (80051b4 <IM_Init+0x1c>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6013      	str	r3, [r2, #0]
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40014400 	.word	0x40014400

080051b8 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80051bc:	4b26      	ldr	r3, [pc, #152]	; (8005258 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d11c      	bne.n	8005202 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80051c8:	4b24      	ldr	r3, [pc, #144]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051d4:	4b22      	ldr	r3, [pc, #136]	; (8005260 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80051d6:	edd3 7a00 	vldr	s15, [r3]
 80051da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e2:	db09      	blt.n	80051f8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 80051e4:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80051e6:	edd3 7a00 	vldr	s15, [r3]
 80051ea:	4b1c      	ldr	r3, [pc, #112]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80051ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f0:	ee17 2a90 	vmov	r2, s15
 80051f4:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 80051f6:	e029      	b.n	800524c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80051fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fc:	3201      	adds	r2, #1
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005200:	e024      	b.n	800524c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8005202:	4b16      	ldr	r3, [pc, #88]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d104      	bne.n	8005214 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800520c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005210:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005212:	e01b      	b.n	800524c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8005214:	4b11      	ldr	r3, [pc, #68]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005220:	4b10      	ldr	r3, [pc, #64]	; (8005264 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8005222:	edd3 7a00 	vldr	s15, [r3]
 8005226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	d809      	bhi.n	8005244 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8005232:	edd3 7a00 	vldr	s15, [r3]
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800523c:	ee17 2a90 	vmov	r2, s15
 8005240:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005242:	e003      	b.n	800524c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	3a01      	subs	r2, #1
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40013400 	.word	0x40013400
 8005260:	20000124 	.word	0x20000124
 8005264:	20000120 	.word	0x20000120

08005268 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <IM_BTN1_EXTI14_Handler+0x44>)
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	4a0e      	ldr	r2, [pc, #56]	; (80052b0 <IM_BTN1_EXTI14_Handler+0x48>)
 8005278:	8812      	ldrh	r2, [r2, #0]
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005280:	dd0c      	ble.n	800529c <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005282:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005286:	f7ff ff71 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005290:	2001      	movs	r0, #1
 8005292:	f7ff fa7d 	bl	8004790 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8005296:	4807      	ldr	r0, [pc, #28]	; (80052b4 <IM_BTN1_EXTI14_Handler+0x4c>)
 8005298:	f00b fe5c 	bl	8010f54 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 800529c:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <IM_BTN1_EXTI14_Handler+0x48>)
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	8013      	strh	r3, [r2, #0]


}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40014400 	.word	0x40014400
 80052b0:	20001e5e 	.word	0x20001e5e
 80052b4:	08014c3c 	.word	0x08014c3c

080052b8 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <IM_BTN2_EXTI15_Handler+0x44>)
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <IM_BTN2_EXTI15_Handler+0x48>)
 80052c8:	8812      	ldrh	r2, [r2, #0]
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d0:	dd0c      	ble.n	80052ec <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80052d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80052d6:	f7ff ff49 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80052e0:	2003      	movs	r0, #3
 80052e2:	f7ff fa55 	bl	8004790 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80052e6:	4807      	ldr	r0, [pc, #28]	; (8005304 <IM_BTN2_EXTI15_Handler+0x4c>)
 80052e8:	f00b fe34 	bl	8010f54 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80052ec:	4a04      	ldr	r2, [pc, #16]	; (8005300 <IM_BTN2_EXTI15_Handler+0x48>)
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	8013      	strh	r3, [r2, #0]


}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40014400 	.word	0x40014400
 8005300:	20001e60 	.word	0x20001e60
 8005304:	08014c54 	.word	0x08014c54

08005308 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <IM_BTN3_EXTI0_Handler+0x40>)
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	4a0d      	ldr	r2, [pc, #52]	; (800534c <IM_BTN3_EXTI0_Handler+0x44>)
 8005318:	8812      	ldrh	r2, [r2, #0]
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005320:	dd0b      	ble.n	800533a <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8005322:	2001      	movs	r0, #1
 8005324:	f7ff ff22 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 800532e:	2004      	movs	r0, #4
 8005330:	f7ff fa2e 	bl	8004790 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8005334:	4806      	ldr	r0, [pc, #24]	; (8005350 <IM_BTN3_EXTI0_Handler+0x48>)
 8005336:	f00b fe0d 	bl	8010f54 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 800533a:	4a04      	ldr	r2, [pc, #16]	; (800534c <IM_BTN3_EXTI0_Handler+0x44>)
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	8013      	strh	r3, [r2, #0]


}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40014400 	.word	0x40014400
 800534c:	20001e62 	.word	0x20001e62
 8005350:	08014c70 	.word	0x08014c70

08005354 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <IM_BTN4_EXTI1_Handler+0x40>)
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <IM_BTN4_EXTI1_Handler+0x44>)
 8005364:	8812      	ldrh	r2, [r2, #0]
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800536c:	dd0b      	ble.n	8005386 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 800536e:	2002      	movs	r0, #2
 8005370:	f7ff fefc 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 800537a:	2002      	movs	r0, #2
 800537c:	f7ff fa08 	bl	8004790 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005380:	4806      	ldr	r0, [pc, #24]	; (800539c <IM_BTN4_EXTI1_Handler+0x48>)
 8005382:	f00b fde7 	bl	8010f54 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8005386:	4a04      	ldr	r2, [pc, #16]	; (8005398 <IM_BTN4_EXTI1_Handler+0x44>)
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	8013      	strh	r3, [r2, #0]


}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40014400 	.word	0x40014400
 8005398:	20001e64 	.word	0x20001e64
 800539c:	08014c88 	.word	0x08014c88

080053a0 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <IM_ENC_EXTI2_Handler+0x40>)
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <IM_ENC_EXTI2_Handler+0x44>)
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053b8:	dd0b      	ble.n	80053d2 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80053ba:	2004      	movs	r0, #4
 80053bc:	f7ff fed6 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80053c6:	2006      	movs	r0, #6
 80053c8:	f7ff f9e2 	bl	8004790 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80053cc:	4806      	ldr	r0, [pc, #24]	; (80053e8 <IM_ENC_EXTI2_Handler+0x48>)
 80053ce:	f00b fdc1 	bl	8010f54 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80053d2:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <IM_ENC_EXTI2_Handler+0x44>)
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	8013      	strh	r3, [r2, #0]


}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40014400 	.word	0x40014400
 80053e4:	20001e66 	.word	0x20001e66
 80053e8:	08014ca0 	.word	0x08014ca0

080053ec <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <IM_ENC_DIRF_Handler+0x4c>)
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053fe:	d117      	bne.n	8005430 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <IM_ENC_DIRF_Handler+0x50>)
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	4a0d      	ldr	r2, [pc, #52]	; (8005440 <IM_ENC_DIRF_Handler+0x54>)
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	dd0b      	ble.n	800542a <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8005412:	2005      	movs	r0, #5
 8005414:	f7ff f9bc 	bl	8004790 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8005418:	480a      	ldr	r0, [pc, #40]	; (8005444 <IM_ENC_DIRF_Handler+0x58>)
 800541a:	f00b fd9b 	bl	8010f54 <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 800541e:	4b06      	ldr	r3, [pc, #24]	; (8005438 <IM_ENC_DIRF_Handler+0x4c>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	4a05      	ldr	r2, [pc, #20]	; (8005438 <IM_ENC_DIRF_Handler+0x4c>)
 8005424:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005428:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 800542a:	4a05      	ldr	r2, [pc, #20]	; (8005440 <IM_ENC_DIRF_Handler+0x54>)
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	8013      	strh	r3, [r2, #0]


	}


}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40014400 	.word	0x40014400
 8005440:	20001e68 	.word	0x20001e68
 8005444:	08014cbc 	.word	0x08014cbc

08005448 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 800544c:	4b03      	ldr	r3, [pc, #12]	; (800545c <BO_GetBiasPolarity+0x14>)
 800544e:	781b      	ldrb	r3, [r3, #0]
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000001 	.word	0x20000001

08005460 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <BO_GetDcBiasEncoderValue+0x14>)
 8005466:	881b      	ldrh	r3, [r3, #0]
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000002 	.word	0x20000002

08005478 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005482:	2000      	movs	r0, #0
 8005484:	f001 fba4 	bl	8006bd0 <SM_GetEncoderValue>
 8005488:	4603      	mov	r3, r0
 800548a:	461a      	mov	r2, r3
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <BO_MapEncoderPositionToSignalOutput+0x84>)
 800548e:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005496:	d214      	bcs.n	80054c2 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <BO_MapEncoderPositionToSignalOutput+0x88>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80054ac:	2200      	movs	r2, #0
 80054ae:	2110      	movs	r1, #16
 80054b0:	4814      	ldr	r0, [pc, #80]	; (8005504 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80054b2:	f005 fe9d 	bl	800b1f0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80054b6:	2201      	movs	r2, #1
 80054b8:	2108      	movs	r1, #8
 80054ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054be:	f006 fe59 	bl	800c174 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80054c8:	d314      	bcc.n	80054f4 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80054de:	2200      	movs	r2, #0
 80054e0:	2110      	movs	r1, #16
 80054e2:	4808      	ldr	r0, [pc, #32]	; (8005504 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80054e4:	f005 fe84 	bl	800b1f0 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80054e8:	2200      	movs	r2, #0
 80054ea:	2108      	movs	r1, #8
 80054ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f0:	f006 fe40 	bl	800c174 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20000002 	.word	0x20000002
 8005500:	20000001 	.word	0x20000001
 8005504:	20002a00 	.word	0x20002a00

08005508 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 800550c:	2110      	movs	r1, #16
 800550e:	4803      	ldr	r0, [pc, #12]	; (800551c <BO_GetOutputBias+0x14>)
 8005510:	f005 feb4 	bl	800b27c <HAL_DAC_GetValue>
 8005514:	4603      	mov	r3, r0
}
 8005516:	4618      	mov	r0, r3
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20002a00 	.word	0x20002a00

08005520 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005526:	2300      	movs	r3, #0
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	e06b      	b.n	8005604 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 800552c:	493a      	ldr	r1, [pc, #232]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	3308      	adds	r3, #8
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d129      	bne.n	8005596 <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 8005542:	4935      	ldr	r1, [pc, #212]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	3304      	adds	r3, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a31      	ldr	r2, [pc, #196]	; (800561c <FreqO_InitFreqProfiles+0xfc>)
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005562:	492d      	ldr	r1, [pc, #180]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	3310      	adds	r3, #16
 8005572:	edd3 7a00 	vldr	s15, [r3]
 8005576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800557e:	ee17 0a90 	vmov	r0, s15
 8005582:	4925      	ldr	r1, [pc, #148]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	330c      	adds	r3, #12
 8005592:	6018      	str	r0, [r3, #0]
 8005594:	e033      	b.n	80055fe <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 8005596:	4920      	ldr	r1, [pc, #128]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3304      	adds	r3, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <FreqO_InitFreqProfiles+0xfc>)
 80055aa:	fbb2 f1f3 	udiv	r1, r2, r3
 80055ae:	481a      	ldr	r0, [pc, #104]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4403      	add	r3, r0
 80055bc:	3308      	adds	r3, #8
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055cc:	4912      	ldr	r1, [pc, #72]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	3310      	adds	r3, #16
 80055dc:	edd3 7a00 	vldr	s15, [r3]
 80055e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e8:	ee17 0a90 	vmov	r0, s15
 80055ec:	490a      	ldr	r1, [pc, #40]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	330c      	adds	r3, #12
 80055fc:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3301      	adds	r3, #1
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b0d      	cmp	r3, #13
 8005608:	dd90      	ble.n	800552c <FreqO_InitFreqProfiles+0xc>
	}
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000004 	.word	0x20000004
 800561c:	00155cc0 	.word	0x00155cc0

08005620 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <FreqO_MapEncoderPositionCoarse+0x78>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8005632:	4b1a      	ldr	r3, [pc, #104]	; (800569c <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	429a      	cmp	r2, r3
 800563a:	d910      	bls.n	800565e <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b0d      	cmp	r3, #13
 8005646:	d901      	bls.n	800564c <FreqO_MapEncoderPositionCoarse+0x2c>
 8005648:	230d      	movs	r3, #13
 800564a:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f945 	bl	80058dc <FreqO_GetProfileByIndex>
 8005652:	4603      	mov	r3, r0
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f872 	bl	8005740 <FreqO_ApplyProfile>
 800565c:	e014      	b.n	8005688 <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	429a      	cmp	r2, r3
 8005666:	d20f      	bcs.n	8005688 <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3b01      	subs	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b0d      	cmp	r3, #13
 8005672:	d901      	bls.n	8005678 <FreqO_MapEncoderPositionCoarse+0x58>
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f92f 	bl	80058dc <FreqO_GetProfileByIndex>
 800567e:	4603      	mov	r3, r0
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f85c 	bl	8005740 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <FreqO_MapEncoderPositionCoarse+0x7c>)
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	8013      	strh	r3, [r2, #0]

}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	2000011c 	.word	0x2000011c
 800569c:	20001e6a 	.word	0x20001e6a

080056a0 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <FreqO_MapEncoderPositionFine+0x44>)
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d904      	bls.n	80056be <FreqO_MapEncoderPositionFine+0x1e>
	{
		OUTPUT_TIMER->ARR++;
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <FreqO_MapEncoderPositionFine+0x48>)
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	3201      	adds	r2, #1
 80056ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80056bc:	e008      	b.n	80056d0 <FreqO_MapEncoderPositionFine+0x30>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <FreqO_MapEncoderPositionFine+0x44>)
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d203      	bcs.n	80056d0 <FreqO_MapEncoderPositionFine+0x30>
	{
		OUTPUT_TIMER->ARR--;
 80056c8:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <FreqO_MapEncoderPositionFine+0x48>)
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	3a01      	subs	r2, #1
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 80056d0:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <FreqO_MapEncoderPositionFine+0x44>)
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	8013      	strh	r3, [r2, #0]

}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20001e6a 	.word	0x20001e6a
 80056e8:	40013400 	.word	0x40013400

080056ec <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 80056f6:	4b10      	ldr	r3, [pc, #64]	; (8005738 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d904      	bls.n	800570a <FreqO_MapEncoderPositionToPrescaler+0x1e>
	{
		OUTPUT_TIMER->PSC++;
 8005700:	4b0e      	ldr	r3, [pc, #56]	; (800573c <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005704:	3201      	adds	r2, #1
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
 8005708:	e00c      	b.n	8005724 <FreqO_MapEncoderPositionToPrescaler+0x38>

	}
	else if (pEncValue < freq_last_encoder_value)
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	429a      	cmp	r2, r3
 8005712:	d207      	bcs.n	8005724 <FreqO_MapEncoderPositionToPrescaler+0x38>
	{
		if(OUTPUT_TIMER->PSC > 0)
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <FreqO_MapEncoderPositionToPrescaler+0x38>
			OUTPUT_TIMER->PSC--;
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <FreqO_MapEncoderPositionToPrescaler+0x50>)
 800571e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005720:	3a01      	subs	r2, #1
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005724:	4a04      	ldr	r2, [pc, #16]	; (8005738 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	8013      	strh	r3, [r2, #0]

}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20001e6a 	.word	0x20001e6a
 800573c:	40013400 	.word	0x40013400

08005740 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f899 	bl	8005880 <FreqO_FindFPresetObject>
 800574e:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d024      	beq.n	80057a0 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8005756:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <FreqO_ApplyProfile+0x70>)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 800575e:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <FreqO_ApplyProfile+0x70>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005766:	2001      	movs	r0, #1
 8005768:	f000 ffb6 	bl	80066d8 <SM_GetOutputChannel>
 800576c:	4603      	mov	r3, r0
 800576e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	2b06      	cmp	r3, #6
 800577a:	d10d      	bne.n	8005798 <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <FreqO_ApplyProfile+0x74>)
 800577e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <FreqO_ApplyProfile+0x74>)
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <FreqO_ApplyProfile+0x74>)
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <FreqO_ApplyProfile+0x74>)
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005798:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <FreqO_ApplyProfile+0x78>)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 800579e:	e002      	b.n	80057a6 <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 80057a0:	4806      	ldr	r0, [pc, #24]	; (80057bc <FreqO_ApplyProfile+0x7c>)
 80057a2:	f7fb ff29 	bl	80015f8 <DM_SetErrorDebugMsg>
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40000400 	.word	0x40000400
 80057b8:	2000011c 	.word	0x2000011c
 80057bc:	08014cd4 	.word	0x08014cd4

080057c0 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 80057c6:	2000      	movs	r0, #0
 80057c8:	f001 fa02 	bl	8006bd0 <SM_GetEncoderValue>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff ff66 	bl	80056a0 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80057d4:	2001      	movs	r0, #1
 80057d6:	f000 ff7f 	bl	80066d8 <SM_GetOutputChannel>
 80057da:	4603      	mov	r3, r0
 80057dc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d110      	bne.n	800580c <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <FreqO_AdjustFreq+0x54>)
 80057ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f0:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 80057f2:	2000      	movs	r0, #0
 80057f4:	f001 f9ec 	bl	8006bd0 <SM_GetEncoderValue>
 80057f8:	4603      	mov	r3, r0
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <FreqO_AdjustFreq+0x54>)
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005802:	4b04      	ldr	r3, [pc, #16]	; (8005814 <FreqO_AdjustFreq+0x54>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	4a03      	ldr	r2, [pc, #12]	; (8005814 <FreqO_AdjustFreq+0x54>)
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40000400 	.word	0x40000400

08005818 <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 800581e:	2000      	movs	r0, #0
 8005820:	f001 f9d6 	bl	8006bd0 <SM_GetEncoderValue>
 8005824:	4603      	mov	r3, r0
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff ff60 	bl	80056ec <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800582c:	2001      	movs	r0, #1
 800582e:	f000 ff53 	bl	80066d8 <SM_GetOutputChannel>
 8005832:	4603      	mov	r3, r0
 8005834:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	2b06      	cmp	r3, #6
 8005840:	d10c      	bne.n	800585c <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005842:	2000      	movs	r0, #0
 8005844:	f001 f9c4 	bl	8006bd0 <SM_GetEncoderValue>
 8005848:	4603      	mov	r3, r0
 800584a:	085b      	lsrs	r3, r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <FreqO_AdjustPrescaler+0x4c>)
 8005850:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005852:	4b04      	ldr	r3, [pc, #16]	; (8005864 <FreqO_AdjustPrescaler+0x4c>)
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	4a03      	ldr	r2, [pc, #12]	; (8005864 <FreqO_AdjustPrescaler+0x4c>)
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40000400 	.word	0x40000400

08005868 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
	return freq_profile;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <FreqO_GetFPresetObject+0x14>)
 800586e:	681b      	ldr	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	2000011c 	.word	0x2000011c

08005880 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e016      	b.n	80058bc <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800588e:	4911      	ldr	r1, [pc, #68]	; (80058d4 <FreqO_FindFPresetObject+0x54>)
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3304      	adds	r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d107      	bne.n	80058b6 <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <FreqO_FindFPresetObject+0x54>)
 80058b2:	4413      	add	r3, r2
 80058b4:	e009      	b.n	80058ca <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b0d      	cmp	r3, #13
 80058c0:	dde5      	ble.n	800588e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80058c2:	4805      	ldr	r0, [pc, #20]	; (80058d8 <FreqO_FindFPresetObject+0x58>)
 80058c4:	f7fb fe98 	bl	80015f8 <DM_SetErrorDebugMsg>
	return 0;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000004 	.word	0x20000004
 80058d8:	08014cfc 	.word	0x08014cfc

080058dc <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4a04      	ldr	r2, [pc, #16]	; (8005900 <FreqO_GetProfileByIndex+0x24>)
 80058f0:	4413      	add	r3, r2
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000004 	.word	0x20000004

08005904 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005908:	4b03      	ldr	r3, [pc, #12]	; (8005918 <FreqO_ResetLastEncoderValue+0x14>)
 800590a:	2200      	movs	r2, #0
 800590c:	801a      	strh	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	20001e6a 	.word	0x20001e6a

0800591c <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <FS_SetSweepModeDown+0x48>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <FS_SetSweepModeDown+0x48>)
 8005926:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800592a:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <FS_SetSweepModeDown+0x48>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <FS_SetSweepModeDown+0x48>)
 8005932:	f043 0310 	orr.w	r3, r3, #16
 8005936:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <FS_SetSweepModeDown+0x4c>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <FS_SetSweepModeDown+0x50>)
 8005946:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 800594a:	4b09      	ldr	r3, [pc, #36]	; (8005970 <FS_SetSweepModeDown+0x54>)
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <FS_SetSweepModeDown+0x58>)
 800594e:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <FS_SetSweepModeDown+0x5c>)
 8005952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005956:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40013400 	.word	0x40013400
 800596c:	20000120 	.word	0x20000120
 8005970:	20000124 	.word	0x20000124
 8005974:	477fff00 	.word	0x477fff00
 8005978:	40012c00 	.word	0x40012c00

0800597c <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005980:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005986:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800598a:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <FS_SetSweepModeUp+0x40>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005992:	f023 0310 	bic.w	r3, r3, #16
 8005996:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <FS_SetSweepModeUp+0x44>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <FS_SetSweepModeUp+0x48>)
 80059a6:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <FS_SetSweepModeUp+0x4c>)
 80059ac:	4a07      	ldr	r2, [pc, #28]	; (80059cc <FS_SetSweepModeUp+0x50>)
 80059ae:	601a      	str	r2, [r3, #0]


}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	20000124 	.word	0x20000124
 80059c8:	20000120 	.word	0x20000120
 80059cc:	41500000 	.word	0x41500000

080059d0 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d038      	beq.n	8005a52 <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80059e0:	4a24      	ldr	r2, [pc, #144]	; (8005a74 <FS_SetEncoderControlMode+0xa4>)
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80059e6:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 80059e8:	220d      	movs	r2, #13
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 80059ec:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 80059ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <FS_SetEncoderControlMode+0xac>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <FS_SetEncoderControlMode+0x32>
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d014      	beq.n	8005a2a <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005a00:	e031      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005a02:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <FS_SetEncoderControlMode+0xb0>)
 8005a10:	edd3 7a00 	vldr	s15, [r3]
 8005a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1c:	dc00      	bgt.n	8005a20 <FS_SetEncoderControlMode+0x50>
				break;
 8005a1e:	e022      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <FS_SetEncoderControlMode+0xb4>)
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005a28:	e01d      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <FS_SetEncoderControlMode+0xb8>)
 8005a38:	edd3 7a00 	vldr	s15, [r3]
 8005a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a44:	d400      	bmi.n	8005a48 <FS_SetEncoderControlMode+0x78>
				break;
 8005a46:	e00e      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005a48:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <FS_SetEncoderControlMode+0xb4>)
 8005a4a:	4a0b      	ldr	r2, [pc, #44]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005a50:	e009      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005a52:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <FS_SetEncoderControlMode+0xa4>)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005a58:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20001e59 	.word	0x20001e59
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	20001e58 	.word	0x20001e58
 8005a80:	20000124 	.word	0x20000124
 8005a84:	40013400 	.word	0x40013400
 8005a88:	20000120 	.word	0x20000120
 8005a8c:	00000000 	.word	0x00000000

08005a90 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d122      	bne.n	8005ae6 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fa fd55 	bl	8000554 <__aeabi_ui2d>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005af0 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005ab2:	ec44 3b10 	vmov	d0, r3, r4
 8005ab6:	f00d fb67 	bl	8013188 <pow>
 8005aba:	ec51 0b10 	vmov	r0, r1, d0
 8005abe:	a30e      	add	r3, pc, #56	; (adr r3, 8005af8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fc0a 	bl	80002dc <__adddf3>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	4618      	mov	r0, r3
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f7fb f892 	bl	8000bf8 <__aeabi_d2uiz>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ade:	d002      	beq.n	8005ae6 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005ae0:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd90      	pop	{r4, r7, pc}
 8005aee:	bf00      	nop
 8005af0:	00000000 	.word	0x00000000
 8005af4:	40080000 	.word	0x40080000
 8005af8:	00000000 	.word	0x00000000
 8005afc:	40d06800 	.word	0x40d06800
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40000c00 	.word	0x40000c00

08005b08 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005b0c:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005b14:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b20:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005b60 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b28:	e011      	b.n	8005b4e <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b46:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005b60 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	4d2037a0 	.word	0x4d2037a0

08005b64 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <FuncO_ResetLastEncoderValue+0x14>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	801a      	strh	r2, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20001e96 	.word	0x20001e96

08005b7c <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005b86:	2000      	movs	r0, #0
 8005b88:	f000 fda6 	bl	80066d8 <SM_GetOutputChannel>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d90c      	bls.n	8005bba <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	d901      	bls.n	8005bb0 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005bac:	2305      	movs	r3, #5
 8005bae:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f856 	bl	8005c64 <FuncO_ApplyProfileToSignal>
 8005bb8:	e010      	b.n	8005bdc <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005bba:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d20b      	bcs.n	8005bdc <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d901      	bls.n	8005bd4 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f844 	bl	8005c64 <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005bdc:	4a03      	ldr	r2, [pc, #12]	; (8005bec <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	8013      	strh	r3, [r2, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20001e96 	.word	0x20001e96

08005bf0 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	f000 fd6c 	bl	80066d8 <SM_GetOutputChannel>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005c0a:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d90c      	bls.n	8005c2e <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	3301      	adds	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b06      	cmp	r3, #6
 8005c1e:	d901      	bls.n	8005c24 <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005c20:	2306      	movs	r3, #6
 8005c22:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f880 	bl	8005d2c <FuncO_ApplyProfileToAux>
 8005c2c:	e010      	b.n	8005c50 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d20b      	bcs.n	8005c50 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b06      	cmp	r3, #6
 8005c42:	d901      	bls.n	8005c48 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f86e 	bl	8005d2c <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005c50:	4a03      	ldr	r2, [pc, #12]	; (8005c60 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	8013      	strh	r3, [r2, #0]
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20001e96 	.word	0x20001e96

08005c64 <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005c6e:	79fc      	ldrb	r4, [r7, #7]
 8005c70:	2000      	movs	r0, #0
 8005c72:	f000 fd31 	bl	80066d8 <SM_GetOutputChannel>
 8005c76:	4601      	mov	r1, r0
 8005c78:	00e3      	lsls	r3, r4, #3
 8005c7a:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <FuncO_ApplyProfileToSignal+0xb4>)
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 8005c82:	4826      	ldr	r0, [pc, #152]	; (8005d1c <FuncO_ApplyProfileToSignal+0xb8>)
 8005c84:	f00b f966 	bl	8010f54 <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005c88:	79fc      	ldrb	r4, [r7, #7]
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f000 fd24 	bl	80066d8 <SM_GetOutputChannel>
 8005c90:	4601      	mov	r1, r0
 8005c92:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <FuncO_ApplyProfileToSignal+0xb4>)
 8005c94:	00e3      	lsls	r3, r4, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	f000 fd1b 	bl	80066d8 <SM_GetOutputChannel>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 f848 	bl	8006d44 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <FuncO_ApplyProfileToSignal+0xbc>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <FuncO_ApplyProfileToSignal+0xbc>)
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4818      	ldr	r0, [pc, #96]	; (8005d24 <FuncO_ApplyProfileToSignal+0xc0>)
 8005cc4:	f005 fa3e 	bl	800b144 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f000 fd05 	bl	80066d8 <SM_GetOutputChannel>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f103 0208 	add.w	r2, r3, #8
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	2378      	movs	r3, #120	; 0x78
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4811      	ldr	r0, [pc, #68]	; (8005d24 <FuncO_ApplyProfileToSignal+0xc0>)
 8005cde:	f005 f96f 	bl	800afc0 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4810      	ldr	r0, [pc, #64]	; (8005d28 <FuncO_ApplyProfileToSignal+0xc4>)
 8005ce6:	f005 fa2d 	bl	800b144 <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005cea:	2001      	movs	r0, #1
 8005cec:	f000 fcf4 	bl	80066d8 <SM_GetOutputChannel>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f103 0208 	add.w	r2, r3, #8
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	2378      	movs	r3, #120	; 0x78
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	480a      	ldr	r0, [pc, #40]	; (8005d28 <FuncO_ApplyProfileToSignal+0xc4>)
 8005d00:	f005 f95e 	bl	800afc0 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005d04:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <FuncO_ApplyProfileToSignal+0xbc>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a05      	ldr	r2, [pc, #20]	; (8005d20 <FuncO_ApplyProfileToSignal+0xbc>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	6013      	str	r3, [r2, #0]



}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd90      	pop	{r4, r7, pc}
 8005d18:	20000128 	.word	0x20000128
 8005d1c:	08014d2c 	.word	0x08014d2c
 8005d20:	40013400 	.word	0x40013400
 8005d24:	20002a00 	.word	0x20002a00
 8005d28:	200029ec 	.word	0x200029ec

08005d2c <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005d36:	79fc      	ldrb	r4, [r7, #7]
 8005d38:	2001      	movs	r0, #1
 8005d3a:	f000 fccd 	bl	80066d8 <SM_GetOutputChannel>
 8005d3e:	4601      	mov	r1, r0
 8005d40:	00e3      	lsls	r3, r4, #3
 8005d42:	4a96      	ldr	r2, [pc, #600]	; (8005f9c <FuncO_ApplyProfileToAux+0x270>)
 8005d44:	4413      	add	r3, r2
 8005d46:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	2b06      	cmp	r3, #6
 8005d4e:	d10a      	bne.n	8005d66 <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005d50:	4893      	ldr	r0, [pc, #588]	; (8005fa0 <FuncO_ApplyProfileToAux+0x274>)
 8005d52:	f00b f8ff 	bl	8010f54 <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005d56:	f000 ff27 	bl	8006ba8 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005d5a:	f000 fcd3 	bl	8006704 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005d5e:	4b91      	ldr	r3, [pc, #580]	; (8005fa4 <FuncO_ApplyProfileToAux+0x278>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005d64:	e115      	b.n	8005f92 <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005d66:	4b8f      	ldr	r3, [pc, #572]	; (8005fa4 <FuncO_ApplyProfileToAux+0x278>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 808e 	beq.w	8005e8c <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005d70:	488d      	ldr	r0, [pc, #564]	; (8005fa8 <FuncO_ApplyProfileToAux+0x27c>)
 8005d72:	f00b f8ef 	bl	8010f54 <puts>
		SM_DisablePwmToAux();
 8005d76:	f000 fe01 	bl	800697c <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005d7a:	f000 fe3b 	bl	80069f4 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d7e:	488b      	ldr	r0, [pc, #556]	; (8005fac <FuncO_ApplyProfileToAux+0x280>)
 8005d80:	f00b f8e8 	bl	8010f54 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005d84:	79fc      	ldrb	r4, [r7, #7]
 8005d86:	2001      	movs	r0, #1
 8005d88:	f000 fca6 	bl	80066d8 <SM_GetOutputChannel>
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	4a83      	ldr	r2, [pc, #524]	; (8005f9c <FuncO_ApplyProfileToAux+0x270>)
 8005d90:	00e3      	lsls	r3, r4, #3
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d98:	4884      	ldr	r0, [pc, #528]	; (8005fac <FuncO_ApplyProfileToAux+0x280>)
 8005d9a:	f00b f8db 	bl	8010f54 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005d9e:	2001      	movs	r0, #1
 8005da0:	f000 fc9a 	bl	80066d8 <SM_GetOutputChannel>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005dae:	4880      	ldr	r0, [pc, #512]	; (8005fb0 <FuncO_ApplyProfileToAux+0x284>)
 8005db0:	f00b f85c 	bl	8010e6c <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005db4:	7b7b      	ldrb	r3, [r7, #13]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f000 fff2 	bl	8006da0 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005dbc:	487d      	ldr	r0, [pc, #500]	; (8005fb4 <FuncO_ApplyProfileToAux+0x288>)
 8005dbe:	f00b f8c9 	bl	8010f54 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005dc2:	487d      	ldr	r0, [pc, #500]	; (8005fb8 <FuncO_ApplyProfileToAux+0x28c>)
 8005dc4:	f007 fafe 	bl	800d3c4 <HAL_TIM_Base_Stop>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	487a      	ldr	r0, [pc, #488]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005dd2:	f00b f84b 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005dd6:	487a      	ldr	r0, [pc, #488]	; (8005fc0 <FuncO_ApplyProfileToAux+0x294>)
 8005dd8:	f00b f8bc 	bl	8010f54 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4879      	ldr	r0, [pc, #484]	; (8005fc4 <FuncO_ApplyProfileToAux+0x298>)
 8005de0:	f005 f9b0 	bl	800b144 <HAL_DAC_Stop_DMA>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	4619      	mov	r1, r3
 8005dec:	4873      	ldr	r0, [pc, #460]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005dee:	f00b f83d 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005df2:	4875      	ldr	r0, [pc, #468]	; (8005fc8 <FuncO_ApplyProfileToAux+0x29c>)
 8005df4:	f00b f8ae 	bl	8010f54 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005df8:	2001      	movs	r0, #1
 8005dfa:	f000 fc6d 	bl	80066d8 <SM_GetOutputChannel>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f103 0208 	add.w	r2, r3, #8
 8005e04:	2300      	movs	r3, #0
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	2378      	movs	r3, #120	; 0x78
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	486d      	ldr	r0, [pc, #436]	; (8005fc4 <FuncO_ApplyProfileToAux+0x298>)
 8005e0e:	f005 f8d7 	bl	800afc0 <HAL_DAC_Start_DMA>
 8005e12:	4603      	mov	r3, r0
 8005e14:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4868      	ldr	r0, [pc, #416]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005e1c:	f00b f826 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005e20:	486a      	ldr	r0, [pc, #424]	; (8005fcc <FuncO_ApplyProfileToAux+0x2a0>)
 8005e22:	f00b f897 	bl	8010f54 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005e26:	2100      	movs	r1, #0
 8005e28:	4869      	ldr	r0, [pc, #420]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a4>)
 8005e2a:	f005 f98b 	bl	800b144 <HAL_DAC_Stop_DMA>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	4619      	mov	r1, r3
 8005e36:	4861      	ldr	r0, [pc, #388]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005e38:	f00b f818 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005e3c:	4865      	ldr	r0, [pc, #404]	; (8005fd4 <FuncO_ApplyProfileToAux+0x2a8>)
 8005e3e:	f00b f889 	bl	8010f54 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005e42:	2000      	movs	r0, #0
 8005e44:	f000 fc48 	bl	80066d8 <SM_GetOutputChannel>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f103 0208 	add.w	r2, r3, #8
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	2378      	movs	r3, #120	; 0x78
 8005e54:	2100      	movs	r1, #0
 8005e56:	485e      	ldr	r0, [pc, #376]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a4>)
 8005e58:	f005 f8b2 	bl	800afc0 <HAL_DAC_Start_DMA>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	4619      	mov	r1, r3
 8005e64:	4855      	ldr	r0, [pc, #340]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005e66:	f00b f801 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005e6a:	485b      	ldr	r0, [pc, #364]	; (8005fd8 <FuncO_ApplyProfileToAux+0x2ac>)
 8005e6c:	f00b f872 	bl	8010f54 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005e70:	4851      	ldr	r0, [pc, #324]	; (8005fb8 <FuncO_ApplyProfileToAux+0x28c>)
 8005e72:	f007 fa79 	bl	800d368 <HAL_TIM_Base_Start>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	484f      	ldr	r0, [pc, #316]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005e80:	f00a fff4 	bl	8010e6c <iprintf>
		last_output_mode_was_pwm = 0;
 8005e84:	4b47      	ldr	r3, [pc, #284]	; (8005fa4 <FuncO_ApplyProfileToAux+0x278>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
}
 8005e8a:	e082      	b.n	8005f92 <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005e8c:	4847      	ldr	r0, [pc, #284]	; (8005fac <FuncO_ApplyProfileToAux+0x280>)
 8005e8e:	f00b f861 	bl	8010f54 <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005e92:	79fc      	ldrb	r4, [r7, #7]
 8005e94:	2001      	movs	r0, #1
 8005e96:	f000 fc1f 	bl	80066d8 <SM_GetOutputChannel>
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	; (8005f9c <FuncO_ApplyProfileToAux+0x270>)
 8005e9e:	00e3      	lsls	r3, r4, #3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005ea6:	4841      	ldr	r0, [pc, #260]	; (8005fac <FuncO_ApplyProfileToAux+0x280>)
 8005ea8:	f00b f854 	bl	8010f54 <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005eac:	2001      	movs	r0, #1
 8005eae:	f000 fc13 	bl	80066d8 <SM_GetOutputChannel>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005ebc:	483c      	ldr	r0, [pc, #240]	; (8005fb0 <FuncO_ApplyProfileToAux+0x284>)
 8005ebe:	f00a ffd5 	bl	8010e6c <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 ff6b 	bl	8006da0 <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005eca:	483a      	ldr	r0, [pc, #232]	; (8005fb4 <FuncO_ApplyProfileToAux+0x288>)
 8005ecc:	f00b f842 	bl	8010f54 <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005ed0:	4839      	ldr	r0, [pc, #228]	; (8005fb8 <FuncO_ApplyProfileToAux+0x28c>)
 8005ed2:	f007 fa77 	bl	800d3c4 <HAL_TIM_Base_Stop>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	4619      	mov	r1, r3
 8005ede:	4837      	ldr	r0, [pc, #220]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005ee0:	f00a ffc4 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005ee4:	4836      	ldr	r0, [pc, #216]	; (8005fc0 <FuncO_ApplyProfileToAux+0x294>)
 8005ee6:	f00b f835 	bl	8010f54 <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005eea:	2100      	movs	r1, #0
 8005eec:	4835      	ldr	r0, [pc, #212]	; (8005fc4 <FuncO_ApplyProfileToAux+0x298>)
 8005eee:	f005 f929 	bl	800b144 <HAL_DAC_Stop_DMA>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4830      	ldr	r0, [pc, #192]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005efc:	f00a ffb6 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005f00:	4831      	ldr	r0, [pc, #196]	; (8005fc8 <FuncO_ApplyProfileToAux+0x29c>)
 8005f02:	f00b f827 	bl	8010f54 <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f06:	2001      	movs	r0, #1
 8005f08:	f000 fbe6 	bl	80066d8 <SM_GetOutputChannel>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f103 0208 	add.w	r2, r3, #8
 8005f12:	2300      	movs	r3, #0
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2378      	movs	r3, #120	; 0x78
 8005f18:	2100      	movs	r1, #0
 8005f1a:	482a      	ldr	r0, [pc, #168]	; (8005fc4 <FuncO_ApplyProfileToAux+0x298>)
 8005f1c:	f005 f850 	bl	800afc0 <HAL_DAC_Start_DMA>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4619      	mov	r1, r3
 8005f28:	4824      	ldr	r0, [pc, #144]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005f2a:	f00a ff9f 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f2e:	4827      	ldr	r0, [pc, #156]	; (8005fcc <FuncO_ApplyProfileToAux+0x2a0>)
 8005f30:	f00b f810 	bl	8010f54 <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005f34:	2100      	movs	r1, #0
 8005f36:	4826      	ldr	r0, [pc, #152]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a4>)
 8005f38:	f005 f904 	bl	800b144 <HAL_DAC_Stop_DMA>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	4619      	mov	r1, r3
 8005f44:	481d      	ldr	r0, [pc, #116]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005f46:	f00a ff91 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f4a:	4822      	ldr	r0, [pc, #136]	; (8005fd4 <FuncO_ApplyProfileToAux+0x2a8>)
 8005f4c:	f00b f802 	bl	8010f54 <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f50:	2000      	movs	r0, #0
 8005f52:	f000 fbc1 	bl	80066d8 <SM_GetOutputChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f103 0208 	add.w	r2, r3, #8
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2378      	movs	r3, #120	; 0x78
 8005f62:	2100      	movs	r1, #0
 8005f64:	481a      	ldr	r0, [pc, #104]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a4>)
 8005f66:	f005 f82b 	bl	800afc0 <HAL_DAC_Start_DMA>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
 8005f70:	4619      	mov	r1, r3
 8005f72:	4812      	ldr	r0, [pc, #72]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005f74:	f00a ff7a 	bl	8010e6c <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005f78:	4817      	ldr	r0, [pc, #92]	; (8005fd8 <FuncO_ApplyProfileToAux+0x2ac>)
 8005f7a:	f00a ffeb 	bl	8010f54 <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005f7e:	480e      	ldr	r0, [pc, #56]	; (8005fb8 <FuncO_ApplyProfileToAux+0x28c>)
 8005f80:	f007 f9f2 	bl	800d368 <HAL_TIM_Base_Start>
 8005f84:	4603      	mov	r3, r0
 8005f86:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	480b      	ldr	r0, [pc, #44]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005f8e:	f00a ff6d 	bl	8010e6c <iprintf>
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd90      	pop	{r4, r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000128 	.word	0x20000128
 8005fa0:	08014d40 	.word	0x08014d40
 8005fa4:	20001e94 	.word	0x20001e94
 8005fa8:	08014d68 	.word	0x08014d68
 8005fac:	08014d94 	.word	0x08014d94
 8005fb0:	08014dc0 	.word	0x08014dc0
 8005fb4:	08014dd8 	.word	0x08014dd8
 8005fb8:	20002ad8 	.word	0x20002ad8
 8005fbc:	08014e0c 	.word	0x08014e0c
 8005fc0:	08014e18 	.word	0x08014e18
 8005fc4:	200029ec 	.word	0x200029ec
 8005fc8:	08014e5c 	.word	0x08014e5c
 8005fcc:	08014ea0 	.word	0x08014ea0
 8005fd0:	20002a00 	.word	0x20002a00
 8005fd4:	08014ee4 	.word	0x08014ee4
 8005fd8:	08014f28 	.word	0x08014f28

08005fdc <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <GO_ResetLastEncoderValue+0x14>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	801a      	strh	r2, [r3, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20001e98 	.word	0x20001e98

08005ff4 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005ffe:	2000      	movs	r0, #0
 8006000:	f000 fb6a 	bl	80066d8 <SM_GetOutputChannel>
 8006004:	4603      	mov	r3, r0
 8006006:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 800600e:	4b15      	ldr	r3, [pc, #84]	; (8006064 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	429a      	cmp	r2, r3
 8006016:	d90c      	bls.n	8006032 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	3301      	adds	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	2b07      	cmp	r3, #7
 8006022:	d901      	bls.n	8006028 <GO_MapEncoderPositionToSignalOutput+0x34>
 8006024:	2307      	movs	r3, #7
 8006026:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 f81c 	bl	8006068 <GO_ApplyPresetToSignal>
 8006030:	e010      	b.n	8006054 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	88fa      	ldrh	r2, [r7, #6]
 8006038:	429a      	cmp	r2, r3
 800603a:	d20b      	bcs.n	8006054 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	3b01      	subs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b07      	cmp	r3, #7
 8006046:	d901      	bls.n	800604c <GO_MapEncoderPositionToSignalOutput+0x58>
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f80a 	bl	8006068 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8006054:	4a03      	ldr	r2, [pc, #12]	; (8006064 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20001e98 	.word	0x20001e98

08006068 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8006068:	b590      	push	{r4, r7, lr}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8006072:	79fc      	ldrb	r4, [r7, #7]
 8006074:	2000      	movs	r0, #0
 8006076:	f000 fb2f 	bl	80066d8 <SM_GetOutputChannel>
 800607a:	4601      	mov	r1, r0
 800607c:	4623      	mov	r3, r4
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	4423      	add	r3, r4
 8006082:	4a4f      	ldr	r2, [pc, #316]	; (80061c0 <GO_ApplyPresetToSignal+0x158>)
 8006084:	4413      	add	r3, r2
 8006086:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	2b07      	cmp	r3, #7
 800608e:	f200 8093 	bhi.w	80061b8 <GO_ApplyPresetToSignal+0x150>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <GO_ApplyPresetToSignal+0x30>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060b9 	.word	0x080060b9
 800609c:	080060d9 	.word	0x080060d9
 80060a0:	080060f9 	.word	0x080060f9
 80060a4:	08006119 	.word	0x08006119
 80060a8:	08006139 	.word	0x08006139
 80060ac:	08006159 	.word	0x08006159
 80060b0:	08006179 	.word	0x08006179
 80060b4:	08006199 	.word	0x08006199
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80060b8:	2200      	movs	r2, #0
 80060ba:	2101      	movs	r1, #1
 80060bc:	4841      	ldr	r0, [pc, #260]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 80060be:	f006 f859 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2120      	movs	r1, #32
 80060c6:	4840      	ldr	r0, [pc, #256]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80060c8:	f006 f854 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80060cc:	2200      	movs	r2, #0
 80060ce:	2110      	movs	r1, #16
 80060d0:	483d      	ldr	r0, [pc, #244]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80060d2:	f006 f84f 	bl	800c174 <HAL_GPIO_WritePin>
			break;
 80060d6:	e06f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80060d8:	2201      	movs	r2, #1
 80060da:	2101      	movs	r1, #1
 80060dc:	4839      	ldr	r0, [pc, #228]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 80060de:	f006 f849 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80060e2:	2200      	movs	r2, #0
 80060e4:	2120      	movs	r1, #32
 80060e6:	4838      	ldr	r0, [pc, #224]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80060e8:	f006 f844 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80060ec:	2200      	movs	r2, #0
 80060ee:	2110      	movs	r1, #16
 80060f0:	4835      	ldr	r0, [pc, #212]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80060f2:	f006 f83f 	bl	800c174 <HAL_GPIO_WritePin>
			break;
 80060f6:	e05f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80060f8:	2200      	movs	r2, #0
 80060fa:	2101      	movs	r1, #1
 80060fc:	4831      	ldr	r0, [pc, #196]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 80060fe:	f006 f839 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006102:	2201      	movs	r2, #1
 8006104:	2120      	movs	r1, #32
 8006106:	4830      	ldr	r0, [pc, #192]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006108:	f006 f834 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 800610c:	2200      	movs	r2, #0
 800610e:	2110      	movs	r1, #16
 8006110:	482d      	ldr	r0, [pc, #180]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006112:	f006 f82f 	bl	800c174 <HAL_GPIO_WritePin>
			break;
 8006116:	e04f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006118:	2201      	movs	r2, #1
 800611a:	2101      	movs	r1, #1
 800611c:	4829      	ldr	r0, [pc, #164]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800611e:	f006 f829 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006122:	2201      	movs	r2, #1
 8006124:	2120      	movs	r1, #32
 8006126:	4828      	ldr	r0, [pc, #160]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006128:	f006 f824 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 800612c:	2200      	movs	r2, #0
 800612e:	2110      	movs	r1, #16
 8006130:	4825      	ldr	r0, [pc, #148]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006132:	f006 f81f 	bl	800c174 <HAL_GPIO_WritePin>
			break;
 8006136:	e03f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006138:	2200      	movs	r2, #0
 800613a:	2101      	movs	r1, #1
 800613c:	4821      	ldr	r0, [pc, #132]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800613e:	f006 f819 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8006142:	2200      	movs	r2, #0
 8006144:	2120      	movs	r1, #32
 8006146:	4820      	ldr	r0, [pc, #128]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006148:	f006 f814 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 800614c:	2201      	movs	r2, #1
 800614e:	2110      	movs	r1, #16
 8006150:	481d      	ldr	r0, [pc, #116]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006152:	f006 f80f 	bl	800c174 <HAL_GPIO_WritePin>
			break;
 8006156:	e02f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006158:	2201      	movs	r2, #1
 800615a:	2101      	movs	r1, #1
 800615c:	4819      	ldr	r0, [pc, #100]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800615e:	f006 f809 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8006162:	2200      	movs	r2, #0
 8006164:	2120      	movs	r1, #32
 8006166:	4818      	ldr	r0, [pc, #96]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006168:	f006 f804 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 800616c:	2201      	movs	r2, #1
 800616e:	2110      	movs	r1, #16
 8006170:	4815      	ldr	r0, [pc, #84]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006172:	f005 ffff 	bl	800c174 <HAL_GPIO_WritePin>
			break;
 8006176:	e01f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006178:	2200      	movs	r2, #0
 800617a:	2101      	movs	r1, #1
 800617c:	4811      	ldr	r0, [pc, #68]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800617e:	f005 fff9 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006182:	2201      	movs	r2, #1
 8006184:	2120      	movs	r1, #32
 8006186:	4810      	ldr	r0, [pc, #64]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006188:	f005 fff4 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 800618c:	2201      	movs	r2, #1
 800618e:	2110      	movs	r1, #16
 8006190:	480d      	ldr	r0, [pc, #52]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006192:	f005 ffef 	bl	800c174 <HAL_GPIO_WritePin>
			break;
 8006196:	e00f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006198:	2201      	movs	r2, #1
 800619a:	2101      	movs	r1, #1
 800619c:	4809      	ldr	r0, [pc, #36]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800619e:	f005 ffe9 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80061a2:	2201      	movs	r2, #1
 80061a4:	2120      	movs	r1, #32
 80061a6:	4808      	ldr	r0, [pc, #32]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80061a8:	f005 ffe4 	bl	800c174 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80061ac:	2201      	movs	r2, #1
 80061ae:	2110      	movs	r1, #16
 80061b0:	4805      	ldr	r0, [pc, #20]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80061b2:	f005 ffdf 	bl	800c174 <HAL_GPIO_WritePin>
			break;
 80061b6:	bf00      	nop
	}

}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd90      	pop	{r4, r7, pc}
 80061c0:	20000160 	.word	0x20000160
 80061c4:	48000400 	.word	0x48000400
 80061c8:	48000800 	.word	0x48000800

080061cc <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 80061d2:	f000 f917 	bl	8006404 <IT_GetTriggerStatus>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d02e      	beq.n	800623a <IT_ArbitrateInputTrigger+0x6e>
	{
		// disable timer external clock source
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_ECE);
 80061dc:	4b66      	ldr	r3, [pc, #408]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4a65      	ldr	r2, [pc, #404]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80061e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061e6:	6093      	str	r3, [r2, #8]
		// disable timer enable "Filtered timer input 1" (tim_ti1fp1)
		OUTPUT_TIMER->SMCR &= ~(TIM_TS_TI1FP1);
 80061e8:	4b63      	ldr	r3, [pc, #396]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	4a62      	ldr	r2, [pc, #392]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80061ee:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80061f2:	6093      	str	r3, [r2, #8]
		// disable timer reset trigger mode
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
 80061f4:	4b60      	ldr	r3, [pc, #384]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a5f      	ldr	r2, [pc, #380]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80061fa:	f023 0304 	bic.w	r3, r3, #4
 80061fe:	6093      	str	r3, [r2, #8]
		// set status to disabled

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 8006200:	485e      	ldr	r0, [pc, #376]	; (800637c <IT_ArbitrateInputTrigger+0x1b0>)
 8006202:	f004 fc73 	bl	800aaec <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 8006206:	485e      	ldr	r0, [pc, #376]	; (8006380 <IT_ArbitrateInputTrigger+0x1b4>)
 8006208:	f003 fa16 	bl	8009638 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 800620c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006216:	f023 0301 	bic.w	r3, r3, #1
 800621a:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 800621c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006226:	f023 0308 	bic.w	r3, r3, #8
 800622a:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 800622c:	2000      	movs	r0, #0
 800622e:	f000 f8f5 	bl	800641c <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006232:	2000      	movs	r0, #0
 8006234:	f7ff fd16 	bl	8005c64 <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 8006238:	e09b      	b.n	8006372 <IT_ArbitrateInputTrigger+0x1a6>
		switch(IT_GetActiveTriggerMode())
 800623a:	f000 f8c7 	bl	80063cc <IT_GetActiveTriggerMode>
 800623e:	4603      	mov	r3, r0
 8006240:	2b01      	cmp	r3, #1
 8006242:	d043      	beq.n	80062cc <IT_ArbitrateInputTrigger+0x100>
 8006244:	2b02      	cmp	r3, #2
 8006246:	d07c      	beq.n	8006342 <IT_ArbitrateInputTrigger+0x176>
 8006248:	2b00      	cmp	r3, #0
 800624a:	d000      	beq.n	800624e <IT_ArbitrateInputTrigger+0x82>
				break;
 800624c:	e08e      	b.n	800636c <IT_ArbitrateInputTrigger+0x1a0>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 800624e:	2201      	movs	r2, #1
 8006250:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006254:	484b      	ldr	r0, [pc, #300]	; (8006384 <IT_ArbitrateInputTrigger+0x1b8>)
 8006256:	f005 ff8d 	bl	800c174 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 800625a:	2200      	movs	r2, #0
 800625c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006260:	4848      	ldr	r0, [pc, #288]	; (8006384 <IT_ArbitrateInputTrigger+0x1b8>)
 8006262:	f005 ff87 	bl	800c174 <HAL_GPIO_WritePin>
				GPIOA->MODER &= ~(GPIO_MODER_MODE0_0 | GPIO_MODER_MODE0_1);	// reset mode registers
 8006266:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006270:	f023 0303 	bic.w	r3, r3, #3
 8006274:	6013      	str	r3, [r2, #0]
				GPIOA->MODER |= (GPIO_MODER_MODE0_1);	// set port mode to AF
 8006276:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006280:	f043 0302 	orr.w	r3, r3, #2
 8006284:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset AF registers - See Table 13 "Alternate Functions" in STM32G474 datasheet
 8006286:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006290:	f023 031e 	bic.w	r3, r3, #30
 8006294:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= GPIO_AF14_TIM2;	// set AF to TIM2_ETR
 8006296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80062a0:	f043 030e 	orr.w	r3, r3, #14
 80062a4:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_ECE);		// enable timer external clock source
 80062a6:	4b34      	ldr	r3, [pc, #208]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	4a33      	ldr	r2, [pc, #204]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80062ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062b0:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= TIM_TS_ETRF;
 80062b2:	4b31      	ldr	r3, [pc, #196]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	4a30      	ldr	r2, [pc, #192]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80062b8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80062bc:	6093      	str	r3, [r2, #8]
				OUTPUT_TIMER->SMCR |= (TIM_SMCR_SMS_2);		// enable timer reset trigger mode
 80062be:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	4a2d      	ldr	r2, [pc, #180]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 80062c4:	f043 0304 	orr.w	r3, r3, #4
 80062c8:	6093      	str	r3, [r2, #8]
				break;
 80062ca:	e04f      	b.n	800636c <IT_ArbitrateInputTrigger+0x1a0>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80062cc:	2200      	movs	r2, #0
 80062ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d2:	482c      	ldr	r0, [pc, #176]	; (8006384 <IT_ArbitrateInputTrigger+0x1b8>)
 80062d4:	f005 ff4e 	bl	800c174 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 80062d8:	2201      	movs	r2, #1
 80062da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062de:	4829      	ldr	r0, [pc, #164]	; (8006384 <IT_ArbitrateInputTrigger+0x1b8>)
 80062e0:	f005 ff48 	bl	800c174 <HAL_GPIO_WritePin>
				COMP1->CSR |= COMP_CSR_EN;
 80062e4:	4b28      	ldr	r3, [pc, #160]	; (8006388 <IT_ArbitrateInputTrigger+0x1bc>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a27      	ldr	r2, [pc, #156]	; (8006388 <IT_ArbitrateInputTrigger+0x1bc>)
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 80062f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80062fa:	f023 031e 	bic.w	r3, r3, #30
 80062fe:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= (GPIO_AF8_COMP1);
 8006300:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006304:	6a1b      	ldr	r3, [r3, #32]
 8006306:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800630a:	f043 0308 	orr.w	r3, r3, #8
 800630e:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8006310:	4b19      	ldr	r3, [pc, #100]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a18      	ldr	r2, [pc, #96]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800631c:	2100      	movs	r1, #0
 800631e:	481b      	ldr	r0, [pc, #108]	; (800638c <IT_ArbitrateInputTrigger+0x1c0>)
 8006320:	f004 ff10 	bl	800b144 <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);
 8006324:	2300      	movs	r3, #0
 8006326:	9300      	str	r3, [sp, #0]
 8006328:	2301      	movs	r3, #1
 800632a:	4a19      	ldr	r2, [pc, #100]	; (8006390 <IT_ArbitrateInputTrigger+0x1c4>)
 800632c:	2100      	movs	r1, #0
 800632e:	4817      	ldr	r0, [pc, #92]	; (800638c <IT_ArbitrateInputTrigger+0x1c0>)
 8006330:	f004 fe46 	bl	800afc0 <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8006334:	4b10      	ldr	r3, [pc, #64]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a0f      	ldr	r2, [pc, #60]	; (8006378 <IT_ArbitrateInputTrigger+0x1ac>)
 800633a:	f043 0301 	orr.w	r3, r3, #1
 800633e:	6013      	str	r3, [r2, #0]
				break;
 8006340:	e014      	b.n	800636c <IT_ArbitrateInputTrigger+0x1a0>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006342:	2201      	movs	r2, #1
 8006344:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006348:	480e      	ldr	r0, [pc, #56]	; (8006384 <IT_ArbitrateInputTrigger+0x1b8>)
 800634a:	f005 ff13 	bl	800c174 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 800634e:	2201      	movs	r2, #1
 8006350:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006354:	480b      	ldr	r0, [pc, #44]	; (8006384 <IT_ArbitrateInputTrigger+0x1b8>)
 8006356:	f005 ff0d 	bl	800c174 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
 800635a:	22f0      	movs	r2, #240	; 0xf0
 800635c:	490d      	ldr	r1, [pc, #52]	; (8006394 <IT_ArbitrateInputTrigger+0x1c8>)
 800635e:	4808      	ldr	r0, [pc, #32]	; (8006380 <IT_ArbitrateInputTrigger+0x1b4>)
 8006360:	f003 f89c 	bl	800949c <HAL_ADC_Start_DMA>
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006364:	2000      	movs	r0, #0
 8006366:	f7ff fc7d 	bl	8005c64 <FuncO_ApplyProfileToSignal>
				break;
 800636a:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 800636c:	2001      	movs	r0, #1
 800636e:	f000 f855 	bl	800641c <IT_SetTriggerStatus>
}
 8006372:	bf00      	nop
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	40013400 	.word	0x40013400
 800637c:	200029c8 	.word	0x200029c8
 8006380:	200028fc 	.word	0x200028fc
 8006384:	48000800 	.word	0x48000800
 8006388:	40010200 	.word	0x40010200
 800638c:	20002a00 	.word	0x20002a00
 8006390:	2000232c 	.word	0x2000232c
 8006394:	20001e9c 	.word	0x20001e9c

08006398 <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 8006398:	b580      	push	{r7, lr}
 800639a:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 800639c:	f000 f816 	bl	80063cc <IT_GetActiveTriggerMode>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d008      	beq.n	80063b8 <IT_CycleInputTriggerMode+0x20>
 80063a6:	2b02      	cmp	r3, #2
 80063a8:	d00a      	beq.n	80063c0 <IT_CycleInputTriggerMode+0x28>
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d000      	beq.n	80063b0 <IT_CycleInputTriggerMode+0x18>
		case INPUT_TRIGGER_ADC:
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
			break;

		default:
			break;
 80063ae:	e00b      	b.n	80063c8 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_COMP);
 80063b0:	2001      	movs	r0, #1
 80063b2:	f000 f817 	bl	80063e4 <IT_SetActiveTriggerMode>
			break;
 80063b6:	e007      	b.n	80063c8 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_ADC);
 80063b8:	2002      	movs	r0, #2
 80063ba:	f000 f813 	bl	80063e4 <IT_SetActiveTriggerMode>
			break;
 80063be:	e003      	b.n	80063c8 <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
 80063c0:	2000      	movs	r0, #0
 80063c2:	f000 f80f 	bl	80063e4 <IT_SetActiveTriggerMode>
			break;
 80063c6:	bf00      	nop
	}
}
 80063c8:	bf00      	nop
 80063ca:	bd80      	pop	{r7, pc}

080063cc <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 80063cc:	b480      	push	{r7}
 80063ce:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 80063d0:	4b03      	ldr	r3, [pc, #12]	; (80063e0 <IT_GetActiveTriggerMode+0x14>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	20000178 	.word	0x20000178

080063e4 <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	4603      	mov	r3, r0
 80063ec:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 80063ee:	4a04      	ldr	r2, [pc, #16]	; (8006400 <IT_SetActiveTriggerMode+0x1c>)
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	7013      	strb	r3, [r2, #0]
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr
 8006400:	20000178 	.word	0x20000178

08006404 <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 8006404:	b480      	push	{r7}
 8006406:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 8006408:	4b03      	ldr	r3, [pc, #12]	; (8006418 <IT_GetTriggerStatus+0x14>)
 800640a:	781b      	ldrb	r3, [r3, #0]
}
 800640c:	4618      	mov	r0, r3
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	20001e9a 	.word	0x20001e9a

0800641c <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 8006426:	4a04      	ldr	r2, [pc, #16]	; (8006438 <IT_SetTriggerStatus+0x1c>)
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	7013      	strb	r3, [r2, #0]
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr
 8006438:	20001e9a 	.word	0x20001e9a

0800643c <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 8006444:	4808      	ldr	r0, [pc, #32]	; (8006468 <HAL_COMP_TriggerCallback+0x2c>)
 8006446:	f004 fbf7 	bl	800ac38 <HAL_COMP_GetOutputLevel>
 800644a:	4603      	mov	r3, r0
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 8006450:	4b06      	ldr	r3, [pc, #24]	; (800646c <HAL_COMP_TriggerCallback+0x30>)
 8006452:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006456:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 8006458:	e002      	b.n	8006460 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 800645a:	4b04      	ldr	r3, [pc, #16]	; (800646c <HAL_COMP_TriggerCallback+0x30>)
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	200029c8 	.word	0x200029c8
 800646c:	2000232c 	.word	0x2000232c

08006470 <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
	if(trigger_input[0] == 0)
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <HAL_ADC_ConvCpltCallback+0x34>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <HAL_ADC_ConvCpltCallback+0x18>
		OUTPUT_TIMER->ARR = 1;
 8006480:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <HAL_ADC_ConvCpltCallback+0x38>)
 8006482:	2201      	movs	r2, #1
 8006484:	62da      	str	r2, [r3, #44]	; 0x2c
 8006486:	e003      	b.n	8006490 <HAL_ADC_ConvCpltCallback+0x20>
	else
		OUTPUT_TIMER->ARR = trigger_input[0];
 8006488:	4a07      	ldr	r2, [pc, #28]	; (80064a8 <HAL_ADC_ConvCpltCallback+0x38>)
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <HAL_ADC_ConvCpltCallback+0x34>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	62d3      	str	r3, [r2, #44]	; 0x2c
	printf("%lu\n", trigger_input[0]);
 8006490:	4b04      	ldr	r3, [pc, #16]	; (80064a4 <HAL_ADC_ConvCpltCallback+0x34>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4619      	mov	r1, r3
 8006496:	4805      	ldr	r0, [pc, #20]	; (80064ac <HAL_ADC_ConvCpltCallback+0x3c>)
 8006498:	f00a fce8 	bl	8010e6c <iprintf>
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20001e9c 	.word	0x20001e9c
 80064a8:	40013400 	.word	0x40013400
 80064ac:	08014f8c 	.word	0x08014f8c

080064b0 <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 80064b4:	f7ff f834 	bl	8005520 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 80064b8:	f000 f8ae 	bl	8006618 <_InitOutputChannels>
	_InitAmpProfiles();
 80064bc:	f000 f824 	bl	8006508 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80064c0:	2110      	movs	r1, #16
 80064c2:	480f      	ldr	r0, [pc, #60]	; (8006500 <SM_Init+0x50>)
 80064c4:	f004 fd29 	bl	800af1a <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 80064c8:	2201      	movs	r2, #1
 80064ca:	2108      	movs	r1, #8
 80064cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064d0:	f005 fe50 	bl	800c174 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80064d4:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <SM_Init+0x54>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a0a      	ldr	r2, [pc, #40]	; (8006504 <SM_Init+0x54>)
 80064da:	f043 0301 	orr.w	r3, r3, #1
 80064de:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80064e0:	2000      	movs	r0, #0
 80064e2:	f7ff fbbf 	bl	8005c64 <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 80064e6:	2059      	movs	r0, #89	; 0x59
 80064e8:	f000 fc2c 	bl	8006d44 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7ff fc1d 	bl	8005d2c <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 80064f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80064f6:	f7ff f923 	bl	8005740 <FreqO_ApplyProfile>

}
 80064fa:	bf00      	nop
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20002a00 	.word	0x20002a00
 8006504:	40013400 	.word	0x40013400

08006508 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8006508:	b590      	push	{r4, r7, lr}
 800650a:	b08b      	sub	sp, #44	; 0x2c
 800650c:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800650e:	2300      	movs	r3, #0
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	e033      	b.n	800657c <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006514:	493c      	ldr	r1, [pc, #240]	; (8006608 <_InitAmpProfiles+0x100>)
 8006516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006518:	4613      	mov	r3, r2
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	1a9b      	subs	r3, r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	440b      	add	r3, r1
 8006522:	3304      	adds	r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8006528:	4b38      	ldr	r3, [pc, #224]	; (800660c <_InitAmpProfiles+0x104>)
 800652a:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 800652c:	4936      	ldr	r1, [pc, #216]	; (8006608 <_InitAmpProfiles+0x100>)
 800652e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006530:	4613      	mov	r3, r2
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	3308      	adds	r3, #8
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006546:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 800654a:	ed97 7a04 	vldr	s14, [r7, #16]
 800654e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006552:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006556:	ed97 7a02 	vldr	s14, [r7, #8]
 800655a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800655e:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 8006562:	4929      	ldr	r1, [pc, #164]	; (8006608 <_InitAmpProfiles+0x100>)
 8006564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006566:	4613      	mov	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	1a9b      	subs	r3, r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	3310      	adds	r3, #16
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	3301      	adds	r3, #1
 800657a:	627b      	str	r3, [r7, #36]	; 0x24
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	2b61      	cmp	r3, #97	; 0x61
 8006580:	ddc8      	ble.n	8006514 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006582:	2300      	movs	r3, #0
 8006584:	623b      	str	r3, [r7, #32]
 8006586:	e037      	b.n	80065f8 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <_InitAmpProfiles+0x108>)
 800658a:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 800658c:	491e      	ldr	r1, [pc, #120]	; (8006608 <_InitAmpProfiles+0x100>)
 800658e:	6a3a      	ldr	r2, [r7, #32]
 8006590:	4613      	mov	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	3304      	adds	r3, #4
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80065a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80065a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80065a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065ac:	ee16 0a90 	vmov	r0, s13
 80065b0:	f7f9 fff2 	bl	8000598 <__aeabi_f2d>
 80065b4:	4603      	mov	r3, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	ec44 3b10 	vmov	d0, r3, r4
 80065bc:	f00c fd64 	bl	8013088 <log10>
 80065c0:	ec51 0b10 	vmov	r0, r1, d0
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	4b12      	ldr	r3, [pc, #72]	; (8006614 <_InitAmpProfiles+0x10c>)
 80065ca:	f7fa f83d 	bl	8000648 <__aeabi_dmul>
 80065ce:	4603      	mov	r3, r0
 80065d0:	460c      	mov	r4, r1
 80065d2:	4618      	mov	r0, r3
 80065d4:	4621      	mov	r1, r4
 80065d6:	f7fa fb2f 	bl	8000c38 <__aeabi_d2f>
 80065da:	4603      	mov	r3, r0
 80065dc:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80065de:	490a      	ldr	r1, [pc, #40]	; (8006608 <_InitAmpProfiles+0x100>)
 80065e0:	6a3a      	ldr	r2, [r7, #32]
 80065e2:	4613      	mov	r3, r2
 80065e4:	00db      	lsls	r3, r3, #3
 80065e6:	1a9b      	subs	r3, r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	440b      	add	r3, r1
 80065ec:	330c      	adds	r3, #12
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	3301      	adds	r3, #1
 80065f6:	623b      	str	r3, [r7, #32]
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	2b61      	cmp	r3, #97	; 0x61
 80065fc:	ddc4      	ble.n	8006588 <_InitAmpProfiles+0x80>

	}
}
 80065fe:	bf00      	nop
 8006600:	372c      	adds	r7, #44	; 0x2c
 8006602:	46bd      	mov	sp, r7
 8006604:	bd90      	pop	{r4, r7, pc}
 8006606:	bf00      	nop
 8006608:	2000017c 	.word	0x2000017c
 800660c:	402ccccd 	.word	0x402ccccd
 8006610:	3a83126f 	.word	0x3a83126f
 8006614:	40340000 	.word	0x40340000

08006618 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 800661e:	4b28      	ldr	r3, [pc, #160]	; (80066c0 <_InitOutputChannels+0xa8>)
 8006620:	2200      	movs	r2, #0
 8006622:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006624:	4b27      	ldr	r3, [pc, #156]	; (80066c4 <_InitOutputChannels+0xac>)
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4a25      	ldr	r2, [pc, #148]	; (80066c0 <_InitOutputChannels+0xa8>)
 800662a:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 800662c:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <_InitOutputChannels+0xa8>)
 800662e:	4a25      	ldr	r2, [pc, #148]	; (80066c4 <_InitOutputChannels+0xac>)
 8006630:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006634:	2300      	movs	r3, #0
 8006636:	607b      	str	r3, [r7, #4]
 8006638:	e00b      	b.n	8006652 <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 800663a:	4a23      	ldr	r2, [pc, #140]	; (80066c8 <_InitOutputChannels+0xb0>)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006642:	491f      	ldr	r1, [pc, #124]	; (80066c0 <_InitOutputChannels+0xa8>)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3302      	adds	r3, #2
 8006648:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	3301      	adds	r3, #1
 8006650:	607b      	str	r3, [r7, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2b77      	cmp	r3, #119	; 0x77
 8006656:	ddf0      	ble.n	800663a <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006658:	4b19      	ldr	r3, [pc, #100]	; (80066c0 <_InitOutputChannels+0xa8>)
 800665a:	4a1c      	ldr	r2, [pc, #112]	; (80066cc <_InitOutputChannels+0xb4>)
 800665c:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8006660:	4b17      	ldr	r3, [pc, #92]	; (80066c0 <_InitOutputChannels+0xa8>)
 8006662:	4a1b      	ldr	r2, [pc, #108]	; (80066d0 <_InitOutputChannels+0xb8>)
 8006664:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006668:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <_InitOutputChannels+0xbc>)
 800666a:	2201      	movs	r2, #1
 800666c:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800666e:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <_InitOutputChannels+0xac>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4a18      	ldr	r2, [pc, #96]	; (80066d4 <_InitOutputChannels+0xbc>)
 8006674:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006676:	4b17      	ldr	r3, [pc, #92]	; (80066d4 <_InitOutputChannels+0xbc>)
 8006678:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <_InitOutputChannels+0xac>)
 800667a:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800667e:	2300      	movs	r3, #0
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	e00b      	b.n	800669c <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006684:	4a10      	ldr	r2, [pc, #64]	; (80066c8 <_InitOutputChannels+0xb0>)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800668c:	4911      	ldr	r1, [pc, #68]	; (80066d4 <_InitOutputChannels+0xbc>)
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	3302      	adds	r3, #2
 8006692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	3301      	adds	r3, #1
 800669a:	603b      	str	r3, [r7, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b77      	cmp	r3, #119	; 0x77
 80066a0:	ddf0      	ble.n	8006684 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80066a2:	4b0c      	ldr	r3, [pc, #48]	; (80066d4 <_InitOutputChannels+0xbc>)
 80066a4:	4a09      	ldr	r2, [pc, #36]	; (80066cc <_InitOutputChannels+0xb4>)
 80066a6:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <_InitOutputChannels+0xbc>)
 80066ac:	4a08      	ldr	r2, [pc, #32]	; (80066d0 <_InitOutputChannels+0xb8>)
 80066ae:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 80066b2:	bf00      	nop
 80066b4:	370c      	adds	r7, #12
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	20002334 	.word	0x20002334
 80066c4:	20000128 	.word	0x20000128
 80066c8:	200014b8 	.word	0x200014b8
 80066cc:	20000b38 	.word	0x20000b38
 80066d0:	20000175 	.word	0x20000175
 80066d4:	20002528 	.word	0x20002528

080066d8 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d101      	bne.n	80066ec <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80066e8:	4b04      	ldr	r3, [pc, #16]	; (80066fc <SM_GetOutputChannel+0x24>)
 80066ea:	e000      	b.n	80066ee <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 80066ec:	4b04      	ldr	r3, [pc, #16]	; (8006700 <SM_GetOutputChannel+0x28>)
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	370c      	adds	r7, #12
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20002334 	.word	0x20002334
 8006700:	20002528 	.word	0x20002528

08006704 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b096      	sub	sp, #88	; 0x58
 8006708:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 800670a:	4889      	ldr	r0, [pc, #548]	; (8006930 <SM_EnablePwmToAux+0x22c>)
 800670c:	f00a fc22 	bl	8010f54 <puts>

	HAL_StatusTypeDef res = 0;
 8006710:	2300      	movs	r3, #0
 8006712:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006716:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
 800671e:	605a      	str	r2, [r3, #4]
 8006720:	609a      	str	r2, [r3, #8]
 8006722:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006724:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	605a      	str	r2, [r3, #4]
 800672e:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8006730:	f107 031c 	add.w	r3, r7, #28
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]
 8006738:	605a      	str	r2, [r3, #4]
 800673a:	609a      	str	r2, [r3, #8]
 800673c:	60da      	str	r2, [r3, #12]
 800673e:	611a      	str	r2, [r3, #16]
 8006740:	615a      	str	r2, [r3, #20]
 8006742:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006744:	f107 0308 	add.w	r3, r7, #8
 8006748:	2200      	movs	r2, #0
 800674a:	601a      	str	r2, [r3, #0]
 800674c:	605a      	str	r2, [r3, #4]
 800674e:	609a      	str	r2, [r3, #8]
 8006750:	60da      	str	r2, [r3, #12]
 8006752:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006754:	4b77      	ldr	r3, [pc, #476]	; (8006934 <SM_EnablePwmToAux+0x230>)
 8006756:	4a78      	ldr	r2, [pc, #480]	; (8006938 <SM_EnablePwmToAux+0x234>)
 8006758:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 800675a:	4b76      	ldr	r3, [pc, #472]	; (8006934 <SM_EnablePwmToAux+0x230>)
 800675c:	2200      	movs	r2, #0
 800675e:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8006760:	4b74      	ldr	r3, [pc, #464]	; (8006934 <SM_EnablePwmToAux+0x230>)
 8006762:	2210      	movs	r2, #16
 8006764:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006766:	4b73      	ldr	r3, [pc, #460]	; (8006934 <SM_EnablePwmToAux+0x230>)
 8006768:	2201      	movs	r2, #1
 800676a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800676c:	4b71      	ldr	r3, [pc, #452]	; (8006934 <SM_EnablePwmToAux+0x230>)
 800676e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006772:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006774:	4b6f      	ldr	r3, [pc, #444]	; (8006934 <SM_EnablePwmToAux+0x230>)
 8006776:	2280      	movs	r2, #128	; 0x80
 8006778:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 800677a:	486e      	ldr	r0, [pc, #440]	; (8006934 <SM_EnablePwmToAux+0x230>)
 800677c:	f006 fd9c 	bl	800d2b8 <HAL_TIM_Base_Init>
 8006780:	4603      	mov	r3, r0
 8006782:	461a      	mov	r2, r3
 8006784:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006788:	4293      	cmp	r3, r2
 800678a:	d107      	bne.n	800679c <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 800678c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006790:	4619      	mov	r1, r3
 8006792:	486a      	ldr	r0, [pc, #424]	; (800693c <SM_EnablePwmToAux+0x238>)
 8006794:	f00a fb6a 	bl	8010e6c <iprintf>
		Error_Handler();
 8006798:	f001 fb92 	bl	8007ec0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800679c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067a0:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 80067a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80067a6:	4619      	mov	r1, r3
 80067a8:	4862      	ldr	r0, [pc, #392]	; (8006934 <SM_EnablePwmToAux+0x230>)
 80067aa:	f007 fba5 	bl	800def8 <HAL_TIM_ConfigClockSource>
 80067ae:	4603      	mov	r3, r0
 80067b0:	461a      	mov	r2, r3
 80067b2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d107      	bne.n	80067ca <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 80067ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067be:	4619      	mov	r1, r3
 80067c0:	485f      	ldr	r0, [pc, #380]	; (8006940 <SM_EnablePwmToAux+0x23c>)
 80067c2:	f00a fb53 	bl	8010e6c <iprintf>
		Error_Handler();
 80067c6:	f001 fb7b 	bl	8007ec0 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 80067ca:	485a      	ldr	r0, [pc, #360]	; (8006934 <SM_EnablePwmToAux+0x230>)
 80067cc:	f006 fe87 	bl	800d4de <HAL_TIM_PWM_Init>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067d8:	4293      	cmp	r3, r2
 80067da:	d107      	bne.n	80067ec <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 80067dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067e0:	4619      	mov	r1, r3
 80067e2:	4858      	ldr	r0, [pc, #352]	; (8006944 <SM_EnablePwmToAux+0x240>)
 80067e4:	f00a fb42 	bl	8010e6c <iprintf>
		Error_Handler();
 80067e8:	f001 fb6a 	bl	8007ec0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80067ec:	2320      	movs	r3, #32
 80067ee:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80067f0:	2300      	movs	r3, #0
 80067f2:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 80067f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80067f8:	4619      	mov	r1, r3
 80067fa:	484e      	ldr	r0, [pc, #312]	; (8006934 <SM_EnablePwmToAux+0x230>)
 80067fc:	f008 f932 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 8006800:	4603      	mov	r3, r0
 8006802:	461a      	mov	r2, r3
 8006804:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006808:	4293      	cmp	r3, r2
 800680a:	d107      	bne.n	800681c <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 800680c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006810:	4619      	mov	r1, r3
 8006812:	484d      	ldr	r0, [pc, #308]	; (8006948 <SM_EnablePwmToAux+0x244>)
 8006814:	f00a fb2a 	bl	8010e6c <iprintf>
		Error_Handler();
 8006818:	f001 fb52 	bl	8007ec0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800681c:	2360      	movs	r3, #96	; 0x60
 800681e:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 8006820:	2300      	movs	r3, #0
 8006822:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006824:	2300      	movs	r3, #0
 8006826:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006828:	2300      	movs	r3, #0
 800682a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 800682c:	f107 031c 	add.w	r3, r7, #28
 8006830:	2200      	movs	r2, #0
 8006832:	4619      	mov	r1, r3
 8006834:	483f      	ldr	r0, [pc, #252]	; (8006934 <SM_EnablePwmToAux+0x230>)
 8006836:	f007 fa4f 	bl	800dcd8 <HAL_TIM_PWM_ConfigChannel>
 800683a:	4603      	mov	r3, r0
 800683c:	461a      	mov	r2, r3
 800683e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006842:	4293      	cmp	r3, r2
 8006844:	d107      	bne.n	8006856 <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006846:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800684a:	4619      	mov	r1, r3
 800684c:	483f      	ldr	r0, [pc, #252]	; (800694c <SM_EnablePwmToAux+0x248>)
 800684e:	f00a fb0d 	bl	8010e6c <iprintf>
		Error_Handler();
 8006852:	f001 fb35 	bl	8007ec0 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006856:	483e      	ldr	r0, [pc, #248]	; (8006950 <SM_EnablePwmToAux+0x24c>)
 8006858:	f00a fb7c 	bl	8010f54 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800685c:	4b3d      	ldr	r3, [pc, #244]	; (8006954 <SM_EnablePwmToAux+0x250>)
 800685e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006860:	4a3c      	ldr	r2, [pc, #240]	; (8006954 <SM_EnablePwmToAux+0x250>)
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006868:	4b3a      	ldr	r3, [pc, #232]	; (8006954 <SM_EnablePwmToAux+0x250>)
 800686a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800686c:	f003 0301 	and.w	r3, r3, #1
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006874:	2340      	movs	r3, #64	; 0x40
 8006876:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006878:	2302      	movs	r3, #2
 800687a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800687c:	2300      	movs	r3, #0
 800687e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006884:	2302      	movs	r3, #2
 8006886:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 8006888:	4833      	ldr	r0, [pc, #204]	; (8006958 <SM_EnablePwmToAux+0x254>)
 800688a:	f00a fb63 	bl	8010f54 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800688e:	f107 0308 	add.w	r3, r7, #8
 8006892:	4619      	mov	r1, r3
 8006894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006898:	f005 fa08 	bl	800bcac <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 800689c:	482f      	ldr	r0, [pc, #188]	; (800695c <SM_EnablePwmToAux+0x258>)
 800689e:	f00a fb59 	bl	8010f54 <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 80068a2:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <SM_EnablePwmToAux+0x250>)
 80068a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a6:	4a2b      	ldr	r2, [pc, #172]	; (8006954 <SM_EnablePwmToAux+0x250>)
 80068a8:	f043 0302 	orr.w	r3, r3, #2
 80068ac:	6593      	str	r3, [r2, #88]	; 0x58
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <SM_EnablePwmToAux+0x250>)
 80068b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068b2:	f003 0302 	and.w	r3, r3, #2
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 80068ba:	4829      	ldr	r0, [pc, #164]	; (8006960 <SM_EnablePwmToAux+0x25c>)
 80068bc:	f00a fb4a 	bl	8010f54 <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80068c0:	2200      	movs	r2, #0
 80068c2:	2100      	movs	r1, #0
 80068c4:	201d      	movs	r0, #29
 80068c6:	f004 fac4 	bl	800ae52 <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 80068ca:	4826      	ldr	r0, [pc, #152]	; (8006964 <SM_EnablePwmToAux+0x260>)
 80068cc:	f00a fb42 	bl	8010f54 <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80068d0:	201d      	movs	r0, #29
 80068d2:	f004 fad8 	bl	800ae86 <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 80068d6:	4824      	ldr	r0, [pc, #144]	; (8006968 <SM_EnablePwmToAux+0x264>)
 80068d8:	f00a fb3c 	bl	8010f54 <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80068dc:	2100      	movs	r1, #0
 80068de:	4815      	ldr	r0, [pc, #84]	; (8006934 <SM_EnablePwmToAux+0x230>)
 80068e0:	f006 fe5e 	bl	800d5a0 <HAL_TIM_PWM_Start>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d107      	bne.n	8006900 <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 80068f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068f4:	4619      	mov	r1, r3
 80068f6:	481d      	ldr	r0, [pc, #116]	; (800696c <SM_EnablePwmToAux+0x268>)
 80068f8:	f00a fab8 	bl	8010e6c <iprintf>
		Error_Handler();
 80068fc:	f001 fae0 	bl	8007ec0 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 8006900:	481b      	ldr	r0, [pc, #108]	; (8006970 <SM_EnablePwmToAux+0x26c>)
 8006902:	f00a fb27 	bl	8010f54 <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006906:	2007      	movs	r0, #7
 8006908:	f7ff fbae 	bl	8006068 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 800690c:	4819      	ldr	r0, [pc, #100]	; (8006974 <SM_EnablePwmToAux+0x270>)
 800690e:	f00a fb21 	bl	8010f54 <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 8006912:	4b09      	ldr	r3, [pc, #36]	; (8006938 <SM_EnablePwmToAux+0x234>)
 8006914:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006918:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 800691a:	4817      	ldr	r0, [pc, #92]	; (8006978 <SM_EnablePwmToAux+0x274>)
 800691c:	f00a fb1a 	bl	8010f54 <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <SM_EnablePwmToAux+0x234>)
 8006922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006928:	bf00      	nop
 800692a:	3758      	adds	r7, #88	; 0x58
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	08014fdc 	.word	0x08014fdc
 8006934:	200022dc 	.word	0x200022dc
 8006938:	40000400 	.word	0x40000400
 800693c:	08014ff0 	.word	0x08014ff0
 8006940:	08015024 	.word	0x08015024
 8006944:	08015060 	.word	0x08015060
 8006948:	08015090 	.word	0x08015090
 800694c:	080150d8 	.word	0x080150d8
 8006950:	08015114 	.word	0x08015114
 8006954:	40021000 	.word	0x40021000
 8006958:	08015144 	.word	0x08015144
 800695c:	08015168 	.word	0x08015168
 8006960:	080151a0 	.word	0x080151a0
 8006964:	080151c8 	.word	0x080151c8
 8006968:	080151f0 	.word	0x080151f0
 800696c:	08015218 	.word	0x08015218
 8006970:	0801524c 	.word	0x0801524c
 8006974:	08015278 	.word	0x08015278
 8006978:	080152ac 	.word	0x080152ac

0800697c <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 8006982:	4815      	ldr	r0, [pc, #84]	; (80069d8 <SM_DisablePwmToAux+0x5c>)
 8006984:	f00a fa72 	bl	8010e6c <iprintf>

	HAL_StatusTypeDef res = 0;
 8006988:	2300      	movs	r3, #0
 800698a:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 800698c:	4813      	ldr	r0, [pc, #76]	; (80069dc <SM_DisablePwmToAux+0x60>)
 800698e:	f00a fae1 	bl	8010f54 <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 8006992:	2100      	movs	r1, #0
 8006994:	4812      	ldr	r0, [pc, #72]	; (80069e0 <SM_DisablePwmToAux+0x64>)
 8006996:	f006 fedd 	bl	800d754 <HAL_TIM_PWM_Stop>
 800699a:	4603      	mov	r3, r0
 800699c:	461a      	mov	r2, r3
 800699e:	79fb      	ldrb	r3, [r7, #7]
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d106      	bne.n	80069b2 <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 80069a4:	79fb      	ldrb	r3, [r7, #7]
 80069a6:	4619      	mov	r1, r3
 80069a8:	480e      	ldr	r0, [pc, #56]	; (80069e4 <SM_DisablePwmToAux+0x68>)
 80069aa:	f00a fa5f 	bl	8010e6c <iprintf>
		Error_Handler();
 80069ae:	f001 fa87 	bl	8007ec0 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 80069b2:	480d      	ldr	r0, [pc, #52]	; (80069e8 <SM_DisablePwmToAux+0x6c>)
 80069b4:	f00a face 	bl	8010f54 <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 80069b8:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <SM_DisablePwmToAux+0x70>)
 80069ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069bc:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <SM_DisablePwmToAux+0x70>)
 80069be:	f023 0302 	bic.w	r3, r3, #2
 80069c2:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 80069c4:	480a      	ldr	r0, [pc, #40]	; (80069f0 <SM_DisablePwmToAux+0x74>)
 80069c6:	f00a fac5 	bl	8010f54 <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80069ca:	201d      	movs	r0, #29
 80069cc:	f004 fa69 	bl	800aea2 <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 80069d0:	bf00      	nop
 80069d2:	3708      	adds	r7, #8
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	080152dc 	.word	0x080152dc
 80069dc:	080152f0 	.word	0x080152f0
 80069e0:	200022dc 	.word	0x200022dc
 80069e4:	08015318 	.word	0x08015318
 80069e8:	0801534c 	.word	0x0801534c
 80069ec:	40021000 	.word	0x40021000
 80069f0:	08015388 	.word	0x08015388

080069f4 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b0b2      	sub	sp, #200	; 0xc8
 80069f8:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 80069fa:	4860      	ldr	r0, [pc, #384]	; (8006b7c <SM_EnableDacToAux+0x188>)
 80069fc:	f00a fa36 	bl	8010e6c <iprintf>

	HAL_StatusTypeDef res = 0;
 8006a00:	2300      	movs	r3, #0
 8006a02:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006a06:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a0a:	2230      	movs	r2, #48	; 0x30
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f009 fdc8 	bl	80105a4 <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a14:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a18:	2200      	movs	r2, #0
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	605a      	str	r2, [r3, #4]
 8006a1e:	609a      	str	r2, [r3, #8]
 8006a20:	60da      	str	r2, [r3, #12]
 8006a22:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006a24:	4b56      	ldr	r3, [pc, #344]	; (8006b80 <SM_EnableDacToAux+0x18c>)
 8006a26:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006a28:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f004 fa52 	bl	800aed6 <HAL_DAC_Init>
 8006a32:	4603      	mov	r3, r0
 8006a34:	461a      	mov	r2, r3
 8006a36:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d107      	bne.n	8006a4e <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006a3e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a42:	4619      	mov	r1, r3
 8006a44:	484f      	ldr	r0, [pc, #316]	; (8006b84 <SM_EnableDacToAux+0x190>)
 8006a46:	f00a fa11 	bl	8010e6c <iprintf>
		Error_Handler();
 8006a4a:	f001 fa39 	bl	8007ec0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006a4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006a62:	2300      	movs	r3, #0
 8006a64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006a68:	2306      	movs	r3, #6
 8006a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006a74:	2300      	movs	r3, #0
 8006a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006a80:	2300      	movs	r3, #0
 8006a82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006a86:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006a8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a8e:	2200      	movs	r2, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f004 fc09 	bl	800b2a8 <HAL_DAC_ConfigChannel>
 8006a96:	4603      	mov	r3, r0
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d107      	bne.n	8006ab2 <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006aa2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	4837      	ldr	r0, [pc, #220]	; (8006b88 <SM_EnableDacToAux+0x194>)
 8006aaa:	f00a f9df 	bl	8010e6c <iprintf>
		Error_Handler();
 8006aae:	f001 fa07 	bl	8007ec0 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006ab2:	4836      	ldr	r0, [pc, #216]	; (8006b8c <SM_EnableDacToAux+0x198>)
 8006ab4:	f00a fa4e 	bl	8010f54 <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006ab8:	4b35      	ldr	r3, [pc, #212]	; (8006b90 <SM_EnableDacToAux+0x19c>)
 8006aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006abc:	4a34      	ldr	r2, [pc, #208]	; (8006b90 <SM_EnableDacToAux+0x19c>)
 8006abe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ac4:	4b32      	ldr	r3, [pc, #200]	; (8006b90 <SM_EnableDacToAux+0x19c>)
 8006ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006ad0:	4830      	ldr	r0, [pc, #192]	; (8006b94 <SM_EnableDacToAux+0x1a0>)
 8006ad2:	f00a fa3f 	bl	8010f54 <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006ad6:	4b2e      	ldr	r3, [pc, #184]	; (8006b90 <SM_EnableDacToAux+0x19c>)
 8006ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ada:	4a2d      	ldr	r2, [pc, #180]	; (8006b90 <SM_EnableDacToAux+0x19c>)
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ae2:	4b2b      	ldr	r3, [pc, #172]	; (8006b90 <SM_EnableDacToAux+0x19c>)
 8006ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	607b      	str	r3, [r7, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006aee:	2340      	movs	r3, #64	; 0x40
 8006af0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006af4:	2303      	movs	r3, #3
 8006af6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006b00:	4825      	ldr	r0, [pc, #148]	; (8006b98 <SM_EnableDacToAux+0x1a4>)
 8006b02:	f00a fa27 	bl	8010f54 <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b06:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b10:	f005 f8cc 	bl	800bcac <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006b14:	4b21      	ldr	r3, [pc, #132]	; (8006b9c <SM_EnableDacToAux+0x1a8>)
 8006b16:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006b18:	2329      	movs	r3, #41	; 0x29
 8006b1a:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b1c:	2310      	movs	r3, #16
 8006b1e:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b20:	2300      	movs	r3, #0
 8006b22:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006b24:	2380      	movs	r3, #128	; 0x80
 8006b26:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b2c:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006b34:	2320      	movs	r3, #32
 8006b36:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006b3c:	f107 030c 	add.w	r3, r7, #12
 8006b40:	4618      	mov	r0, r3
 8006b42:	f004 fde7 	bl	800b714 <HAL_DMA_Init>
 8006b46:	4603      	mov	r3, r0
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d107      	bne.n	8006b62 <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006b52:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006b56:	4619      	mov	r1, r3
 8006b58:	4811      	ldr	r0, [pc, #68]	; (8006ba0 <SM_EnableDacToAux+0x1ac>)
 8006b5a:	f00a f987 	bl	8010e6c <iprintf>
		Error_Handler();
 8006b5e:	f001 f9af 	bl	8007ec0 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006b62:	4810      	ldr	r0, [pc, #64]	; (8006ba4 <SM_EnableDacToAux+0x1b0>)
 8006b64:	f00a f9f6 	bl	8010f54 <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006b68:	f107 030c 	add.w	r3, r7, #12
 8006b6c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b72:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006b74:	bf00      	nop
 8006b76:	37c8      	adds	r7, #200	; 0xc8
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	080153b0 	.word	0x080153b0
 8006b80:	50000c00 	.word	0x50000c00
 8006b84:	080153c4 	.word	0x080153c4
 8006b88:	080153f0 	.word	0x080153f0
 8006b8c:	08015428 	.word	0x08015428
 8006b90:	40021000 	.word	0x40021000
 8006b94:	08015458 	.word	0x08015458
 8006b98:	08015488 	.word	0x08015488
 8006b9c:	40020030 	.word	0x40020030
 8006ba0:	080154ac 	.word	0x080154ac
 8006ba4:	080154d8 	.word	0x080154d8

08006ba8 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006bac:	4806      	ldr	r0, [pc, #24]	; (8006bc8 <SM_DisableDacToAux+0x20>)
 8006bae:	f00a f9d1 	bl	8010f54 <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006bb2:	4806      	ldr	r0, [pc, #24]	; (8006bcc <SM_DisableDacToAux+0x24>)
 8006bb4:	f00a f9ce 	bl	8010f54 <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006bb8:	2140      	movs	r1, #64	; 0x40
 8006bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bbe:	f005 f9f7 	bl	800bfb0 <HAL_GPIO_DeInit>

}
 8006bc2:	bf00      	nop
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	080154fc 	.word	0x080154fc
 8006bcc:	08015510 	.word	0x08015510

08006bd0 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d008      	beq.n	8006bf2 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006be0:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <SM_GetEncoderValue+0x34>)
 8006be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <SM_GetEncoderValue+0x34>)
 8006be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	e002      	b.n	8006bf8 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006bf2:	4b04      	ldr	r3, [pc, #16]	; (8006c04 <SM_GetEncoderValue+0x34>)
 8006bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf6:	b29b      	uxth	r3, r3
	}
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	40012c00 	.word	0x40012c00

08006c08 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b085      	sub	sp, #20
 8006c0c:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006c0e:	4b1d      	ldr	r3, [pc, #116]	; (8006c84 <SM_GetOutputInHertz+0x7c>)
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d103      	bne.n	8006c1e <SM_GetOutputInHertz+0x16>
 8006c16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c1a:	60bb      	str	r3, [r7, #8]
 8006c1c:	e007      	b.n	8006c2e <SM_GetOutputInHertz+0x26>
 8006c1e:	4b19      	ldr	r3, [pc, #100]	; (8006c84 <SM_GetOutputInHertz+0x7c>)
 8006c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c2a:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006c2e:	4b15      	ldr	r3, [pc, #84]	; (8006c84 <SM_GetOutputInHertz+0x7c>)
 8006c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d103      	bne.n	8006c3e <SM_GetOutputInHertz+0x36>
 8006c36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c3a:	607b      	str	r3, [r7, #4]
 8006c3c:	e007      	b.n	8006c4e <SM_GetOutputInHertz+0x46>
 8006c3e:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <SM_GetOutputInHertz+0x7c>)
 8006c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c42:	ee07 3a90 	vmov	s15, r3
 8006c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c4a:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006c4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8006c52:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c5a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006c88 <SM_GetOutputInHertz+0x80>
 8006c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c62:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006c66:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c6a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006c8c <SM_GetOutputInHertz+0x84>
 8006c6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c72:	eef0 7a66 	vmov.f32	s15, s13
}
 8006c76:	eeb0 0a67 	vmov.f32	s0, s15
 8006c7a:	3714      	adds	r7, #20
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr
 8006c84:	40013400 	.word	0x40013400
 8006c88:	4d2037a0 	.word	0x4d2037a0
 8006c8c:	42f00000 	.word	0x42f00000

08006c90 <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006c9c:	887b      	ldrh	r3, [r7, #2]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <SM_ConvertPeriodToHertz+0x16>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006ca6:	887b      	ldrh	r3, [r7, #2]
 8006ca8:	ee07 3a90 	vmov	s15, r3
 8006cac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cbe:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006cd8 <SM_ConvertPeriodToHertz+0x48>
 8006cc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006cc6:	eef0 7a66 	vmov.f32	s15, s13
}
 8006cca:	eeb0 0a67 	vmov.f32	s0, s15
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	4d2037a0 	.word	0x4d2037a0

08006cdc <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006cdc:	b480      	push	{r7}
 8006cde:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006ce0:	4b03      	ldr	r3, [pc, #12]	; (8006cf0 <SM_IsFuncPwmDutyMode+0x14>)
 8006ce2:	781b      	ldrb	r3, [r3, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	2000225c 	.word	0x2000225c

08006cf4 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006cf8:	4b05      	ldr	r3, [pc, #20]	; (8006d10 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f083 0301 	eor.w	r3, r3, #1
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	4b03      	ldr	r3, [pc, #12]	; (8006d10 <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006d04:	701a      	strb	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr
 8006d10:	2000225c 	.word	0x2000225c

08006d14 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006d14:	b480      	push	{r7}
 8006d16:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006d18:	4b03      	ldr	r3, [pc, #12]	; (8006d28 <SM_ResetFuncPwmDutyMode+0x14>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	701a      	strb	r2, [r3, #0]

}
 8006d1e:	bf00      	nop
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	2000225c 	.word	0x2000225c

08006d2c <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006d30:	4b03      	ldr	r3, [pc, #12]	; (8006d40 <VPP_ResetLastEncoderValue+0x14>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	801a      	strh	r2, [r3, #0]
}
 8006d36:	bf00      	nop
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr
 8006d40:	2000225e 	.word	0x2000225e

08006d44 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006d4e:	79fa      	ldrb	r2, [r7, #7]
 8006d50:	4613      	mov	r3, r2
 8006d52:	00db      	lsls	r3, r3, #3
 8006d54:	1a9b      	subs	r3, r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4a10      	ldr	r2, [pc, #64]	; (8006d9c <VPP_ApplyProfileToSignal+0x58>)
 8006d5a:	4413      	add	r3, r2
 8006d5c:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f7ff fcba 	bl	80066d8 <SM_GetOutputChannel>
 8006d64:	4602      	mov	r2, r0
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	7a1b      	ldrb	r3, [r3, #8]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f7ff f979 	bl	8006068 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	ed93 7a05 	vldr	s14, [r3, #20]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8b1b      	ldrh	r3, [r3, #24]
 8006d86:	4618      	mov	r0, r3
 8006d88:	eef0 0a47 	vmov.f32	s1, s14
 8006d8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006d90:	f000 f830 	bl	8006df4 <_ProcessSignalDataTable>


}
 8006d94:	bf00      	nop
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	2000017c 	.word	0x2000017c

08006da0 <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006daa:	79fa      	ldrb	r2, [r7, #7]
 8006dac:	4613      	mov	r3, r2
 8006dae:	00db      	lsls	r3, r3, #3
 8006db0:	1a9b      	subs	r3, r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	4a0e      	ldr	r2, [pc, #56]	; (8006df0 <VPP_ApplyProfileToAux+0x50>)
 8006db6:	4413      	add	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 8006dba:	2001      	movs	r0, #1
 8006dbc:	f7ff fc8c 	bl	80066d8 <SM_GetOutputChannel>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	edd3 7a04 	vldr	s15, [r3, #16]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	ed93 7a05 	vldr	s14, [r3, #20]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8b1b      	ldrh	r3, [r3, #24]
 8006dd8:	4618      	mov	r0, r3
 8006dda:	eef0 0a47 	vmov.f32	s1, s14
 8006dde:	eeb0 0a67 	vmov.f32	s0, s15
 8006de2:	f000 f88d 	bl	8006f00 <_ProcessAuxDataTable>



}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	2000017c 	.word	0x2000017c

08006df4 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b08a      	sub	sp, #40	; 0x28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	ed87 0a03 	vstr	s0, [r7, #12]
 8006dfe:	edc7 0a02 	vstr	s1, [r7, #8]
 8006e02:	4603      	mov	r3, r0
 8006e04:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006e06:	2000      	movs	r0, #0
 8006e08:	f7ff fc66 	bl	80066d8 <SM_GetOutputChannel>
 8006e0c:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2b06      	cmp	r3, #6
 8006e18:	d06b      	beq.n	8006ef2 <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e1e:	e00c      	b.n	8006e3a <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	4933      	ldr	r1, [pc, #204]	; (8006efc <_ProcessSignalDataTable+0x108>)
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	3301      	adds	r3, #1
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3c:	2b77      	cmp	r3, #119	; 0x77
 8006e3e:	ddef      	ble.n	8006e20 <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006e40:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006e44:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006e46:	88fb      	ldrh	r3, [r7, #6]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d008      	beq.n	8006e5e <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006e4c:	88fb      	ldrh	r3, [r7, #6]
 8006e4e:	089b      	lsrs	r3, r3, #2
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	ee07 3a90 	vmov	s15, r3
 8006e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e5a:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e5e:	2300      	movs	r3, #0
 8006e60:	61fb      	str	r3, [r7, #28]
 8006e62:	e02e      	b.n	8006ec2 <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006e64:	4a25      	ldr	r2, [pc, #148]	; (8006efc <_ProcessSignalDataTable+0x108>)
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e6c:	ee07 3a90 	vmov	s15, r3
 8006e70:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e74:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e80:	ee17 1a90 	vmov	r1, s15
 8006e84:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <_ProcessSignalDataTable+0x108>)
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006e8c:	4a1b      	ldr	r2, [pc, #108]	; (8006efc <_ProcessSignalDataTable+0x108>)
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e94:	ee07 3a90 	vmov	s15, r3
 8006e98:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8006ea0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006ea4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ea8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eb0:	ee17 1a90 	vmov	r1, s15
 8006eb4:	4a11      	ldr	r2, [pc, #68]	; (8006efc <_ProcessSignalDataTable+0x108>)
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	2b77      	cmp	r3, #119	; 0x77
 8006ec6:	ddcd      	ble.n	8006e64 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ec8:	2300      	movs	r3, #0
 8006eca:	61bb      	str	r3, [r7, #24]
 8006ecc:	e00e      	b.n	8006eec <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006ece:	2000      	movs	r0, #0
 8006ed0:	f7ff fc02 	bl	80066d8 <SM_GetOutputChannel>
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	4a09      	ldr	r2, [pc, #36]	; (8006efc <_ProcessSignalDataTable+0x108>)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	2b77      	cmp	r3, #119	; 0x77
 8006ef0:	dded      	ble.n	8006ece <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006ef2:	bf00      	nop
 8006ef4:	3728      	adds	r7, #40	; 0x28
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	2000271c 	.word	0x2000271c

08006f00 <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b088      	sub	sp, #32
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	ed87 0a03 	vstr	s0, [r7, #12]
 8006f0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8006f0e:	4603      	mov	r3, r0
 8006f10:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006f12:	2001      	movs	r0, #1
 8006f14:	f7ff fbe0 	bl	80066d8 <SM_GetOutputChannel>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	2b06      	cmp	r3, #6
 8006f22:	d059      	beq.n	8006fd8 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f24:	2300      	movs	r3, #0
 8006f26:	61fb      	str	r3, [r7, #28]
 8006f28:	e00f      	b.n	8006f4a <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8006f2a:	2001      	movs	r0, #1
 8006f2c:	f7ff fbd4 	bl	80066d8 <SM_GetOutputChannel>
 8006f30:	4603      	mov	r3, r0
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4933      	ldr	r1, [pc, #204]	; (800700c <_ProcessAuxDataTable+0x10c>)
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	3301      	adds	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	2b77      	cmp	r3, #119	; 0x77
 8006f4e:	ddec      	ble.n	8006f2a <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006f50:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f54:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006f56:	88fb      	ldrh	r3, [r7, #6]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d008      	beq.n	8006f6e <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006f5c:	88fb      	ldrh	r3, [r7, #6]
 8006f5e:	089b      	lsrs	r3, r3, #2
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f6a:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	e02e      	b.n	8006fd2 <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006f74:	4a25      	ldr	r2, [pc, #148]	; (800700c <_ProcessAuxDataTable+0x10c>)
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f7c:	ee07 3a90 	vmov	s15, r3
 8006f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f84:	edd7 7a03 	vldr	s15, [r7, #12]
 8006f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f90:	ee17 1a90 	vmov	r1, s15
 8006f94:	4a1d      	ldr	r2, [pc, #116]	; (800700c <_ProcessAuxDataTable+0x10c>)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006f9c:	4a1b      	ldr	r2, [pc, #108]	; (800700c <_ProcessAuxDataTable+0x10c>)
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa4:	ee07 3a90 	vmov	s15, r3
 8006fa8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fac:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fb0:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006fb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006fb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fc0:	ee17 1a90 	vmov	r1, s15
 8006fc4:	4a11      	ldr	r2, [pc, #68]	; (800700c <_ProcessAuxDataTable+0x10c>)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2b77      	cmp	r3, #119	; 0x77
 8006fd6:	ddcd      	ble.n	8006f74 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006fd8:	2300      	movs	r3, #0
 8006fda:	613b      	str	r3, [r7, #16]
 8006fdc:	e00e      	b.n	8006ffc <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006fde:	2001      	movs	r0, #1
 8006fe0:	f7ff fb7a 	bl	80066d8 <SM_GetOutputChannel>
 8006fe4:	4601      	mov	r1, r0
 8006fe6:	4a09      	ldr	r2, [pc, #36]	; (800700c <_ProcessAuxDataTable+0x10c>)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	3302      	adds	r3, #2
 8006ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	613b      	str	r3, [r7, #16]
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2b77      	cmp	r3, #119	; 0x77
 8007000:	dded      	ble.n	8006fde <_ProcessAuxDataTable+0xde>
	}
}
 8007002:	bf00      	nop
 8007004:	3720      	adds	r7, #32
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	2000271c 	.word	0x2000271c

08007010 <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b084      	sub	sp, #16
 8007014:	af00      	add	r7, sp, #0
 8007016:	4603      	mov	r3, r0
 8007018:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 800701a:	2000      	movs	r0, #0
 800701c:	f7ff fb5c 	bl	80066d8 <SM_GetOutputChannel>
 8007020:	4603      	mov	r3, r0
 8007022:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800702a:	4b15      	ldr	r3, [pc, #84]	; (8007080 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	88fa      	ldrh	r2, [r7, #6]
 8007030:	429a      	cmp	r2, r3
 8007032:	d90c      	bls.n	800704e <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
 8007036:	3301      	adds	r3, #1
 8007038:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 800703a:	7bfb      	ldrb	r3, [r7, #15]
 800703c:	2b61      	cmp	r3, #97	; 0x61
 800703e:	d901      	bls.n	8007044 <VPP_MapEncoderPositionToSignalOutput+0x34>
 8007040:	2361      	movs	r3, #97	; 0x61
 8007042:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007044:	7bfb      	ldrb	r3, [r7, #15]
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff fe7c 	bl	8006d44 <VPP_ApplyProfileToSignal>
 800704c:	e010      	b.n	8007070 <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 800704e:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007050:	881b      	ldrh	r3, [r3, #0]
 8007052:	88fa      	ldrh	r2, [r7, #6]
 8007054:	429a      	cmp	r2, r3
 8007056:	d20b      	bcs.n	8007070 <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	3b01      	subs	r3, #1
 800705c:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	2b61      	cmp	r3, #97	; 0x61
 8007062:	d901      	bls.n	8007068 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8007064:	2300      	movs	r3, #0
 8007066:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff fe6a 	bl	8006d44 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 8007070:	4a03      	ldr	r2, [pc, #12]	; (8007080 <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007072:	88fb      	ldrh	r3, [r7, #6]
 8007074:	8013      	strh	r3, [r2, #0]

}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	2000225e 	.word	0x2000225e

08007084 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	4603      	mov	r3, r0
 800708c:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 800708e:	2001      	movs	r0, #1
 8007090:	f7ff fb22 	bl	80066d8 <SM_GetOutputChannel>
 8007094:	4603      	mov	r3, r0
 8007096:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 800709e:	4b15      	ldr	r3, [pc, #84]	; (80070f4 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	88fa      	ldrh	r2, [r7, #6]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	d90c      	bls.n	80070c2 <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	3301      	adds	r3, #1
 80070ac:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80070ae:	7bfb      	ldrb	r3, [r7, #15]
 80070b0:	2b61      	cmp	r3, #97	; 0x61
 80070b2:	d901      	bls.n	80070b8 <VPP_MapEncoderPositionToAuxOutput+0x34>
 80070b4:	2361      	movs	r3, #97	; 0x61
 80070b6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80070b8:	7bfb      	ldrb	r3, [r7, #15]
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7ff fe70 	bl	8006da0 <VPP_ApplyProfileToAux>
 80070c0:	e010      	b.n	80070e4 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80070c2:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80070c4:	881b      	ldrh	r3, [r3, #0]
 80070c6:	88fa      	ldrh	r2, [r7, #6]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d20b      	bcs.n	80070e4 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	2b61      	cmp	r3, #97	; 0x61
 80070d6:	d901      	bls.n	80070dc <VPP_MapEncoderPositionToAuxOutput+0x58>
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	4618      	mov	r0, r3
 80070e0:	f7ff fe5e 	bl	8006da0 <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 80070e4:	4a03      	ldr	r2, [pc, #12]	; (80070f4 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	8013      	strh	r3, [r2, #0]

}
 80070ea:	bf00      	nop
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	2000225e 	.word	0x2000225e

080070f8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08c      	sub	sp, #48	; 0x30
 80070fc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80070fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007102:	2200      	movs	r2, #0
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	605a      	str	r2, [r3, #4]
 8007108:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800710a:	1d3b      	adds	r3, r7, #4
 800710c:	2220      	movs	r2, #32
 800710e:	2100      	movs	r1, #0
 8007110:	4618      	mov	r0, r3
 8007112:	f009 fa47 	bl	80105a4 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007116:	4b32      	ldr	r3, [pc, #200]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007118:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800711c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800711e:	4b30      	ldr	r3, [pc, #192]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007120:	2200      	movs	r2, #0
 8007122:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007124:	4b2e      	ldr	r3, [pc, #184]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007126:	2200      	movs	r2, #0
 8007128:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800712a:	4b2d      	ldr	r3, [pc, #180]	; (80071e0 <MX_ADC1_Init+0xe8>)
 800712c:	2200      	movs	r2, #0
 800712e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007130:	4b2b      	ldr	r3, [pc, #172]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007132:	2200      	movs	r2, #0
 8007134:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007136:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007138:	2200      	movs	r2, #0
 800713a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800713c:	4b28      	ldr	r3, [pc, #160]	; (80071e0 <MX_ADC1_Init+0xe8>)
 800713e:	2204      	movs	r2, #4
 8007140:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007142:	4b27      	ldr	r3, [pc, #156]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007144:	2200      	movs	r2, #0
 8007146:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007148:	4b25      	ldr	r3, [pc, #148]	; (80071e0 <MX_ADC1_Init+0xe8>)
 800714a:	2201      	movs	r2, #1
 800714c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800714e:	4b24      	ldr	r3, [pc, #144]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007150:	2201      	movs	r2, #1
 8007152:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007154:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007156:	2200      	movs	r2, #0
 8007158:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800715c:	4b20      	ldr	r3, [pc, #128]	; (80071e0 <MX_ADC1_Init+0xe8>)
 800715e:	2200      	movs	r2, #0
 8007160:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007162:	4b1f      	ldr	r3, [pc, #124]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007164:	2200      	movs	r2, #0
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007168:	4b1d      	ldr	r3, [pc, #116]	; (80071e0 <MX_ADC1_Init+0xe8>)
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8007170:	4b1b      	ldr	r3, [pc, #108]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007172:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007176:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007178:	4b19      	ldr	r3, [pc, #100]	; (80071e0 <MX_ADC1_Init+0xe8>)
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007180:	4817      	ldr	r0, [pc, #92]	; (80071e0 <MX_ADC1_Init+0xe8>)
 8007182:	f001 ffcb 	bl	800911c <HAL_ADC_Init>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d001      	beq.n	8007190 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800718c:	f000 fe98 	bl	8007ec0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8007190:	2300      	movs	r3, #0
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8007194:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007198:	4619      	mov	r1, r3
 800719a:	4811      	ldr	r0, [pc, #68]	; (80071e0 <MX_ADC1_Init+0xe8>)
 800719c:	f003 f892 	bl	800a2c4 <HAL_ADCEx_MultiModeConfigChannel>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80071a6:	f000 fe8b 	bl	8007ec0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80071aa:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <MX_ADC1_Init+0xec>)
 80071ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80071ae:	2306      	movs	r3, #6
 80071b0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80071b6:	237f      	movs	r3, #127	; 0x7f
 80071b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80071ba:	2304      	movs	r3, #4
 80071bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071c2:	1d3b      	adds	r3, r7, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4806      	ldr	r0, [pc, #24]	; (80071e0 <MX_ADC1_Init+0xe8>)
 80071c8:	f002 faac 	bl	8009724 <HAL_ADC_ConfigChannel>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80071d2:	f000 fe75 	bl	8007ec0 <Error_Handler>
  }

}
 80071d6:	bf00      	nop
 80071d8:	3730      	adds	r7, #48	; 0x30
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200028fc 	.word	0x200028fc
 80071e4:	0c900008 	.word	0x0c900008

080071e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08a      	sub	sp, #40	; 0x28
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071f0:	f107 0314 	add.w	r3, r7, #20
 80071f4:	2200      	movs	r2, #0
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	605a      	str	r2, [r3, #4]
 80071fa:	609a      	str	r2, [r3, #8]
 80071fc:	60da      	str	r2, [r3, #12]
 80071fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007208:	d14f      	bne.n	80072aa <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800720a:	4b2a      	ldr	r3, [pc, #168]	; (80072b4 <HAL_ADC_MspInit+0xcc>)
 800720c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800720e:	4a29      	ldr	r2, [pc, #164]	; (80072b4 <HAL_ADC_MspInit+0xcc>)
 8007210:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007216:	4b27      	ldr	r3, [pc, #156]	; (80072b4 <HAL_ADC_MspInit+0xcc>)
 8007218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800721a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800721e:	613b      	str	r3, [r7, #16]
 8007220:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007222:	4b24      	ldr	r3, [pc, #144]	; (80072b4 <HAL_ADC_MspInit+0xcc>)
 8007224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007226:	4a23      	ldr	r2, [pc, #140]	; (80072b4 <HAL_ADC_MspInit+0xcc>)
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800722e:	4b21      	ldr	r3, [pc, #132]	; (80072b4 <HAL_ADC_MspInit+0xcc>)
 8007230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	60fb      	str	r3, [r7, #12]
 8007238:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800723a:	2304      	movs	r3, #4
 800723c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800723e:	2303      	movs	r3, #3
 8007240:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007242:	2300      	movs	r3, #0
 8007244:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007246:	f107 0314 	add.w	r3, r7, #20
 800724a:	4619      	mov	r1, r3
 800724c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007250:	f004 fd2c 	bl	800bcac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007254:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 8007256:	4a19      	ldr	r2, [pc, #100]	; (80072bc <HAL_ADC_MspInit+0xd4>)
 8007258:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 800725c:	2205      	movs	r2, #5
 800725e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007260:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 8007262:	2200      	movs	r2, #0
 8007264:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 8007268:	2200      	movs	r2, #0
 800726a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800726c:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 800726e:	2280      	movs	r2, #128	; 0x80
 8007270:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 8007274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007278:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800727a:	4b0f      	ldr	r3, [pc, #60]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 800727c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007280:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007282:	4b0d      	ldr	r3, [pc, #52]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 8007284:	2220      	movs	r2, #32
 8007286:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007288:	4b0b      	ldr	r3, [pc, #44]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 800728a:	2200      	movs	r2, #0
 800728c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800728e:	480a      	ldr	r0, [pc, #40]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 8007290:	f004 fa40 	bl	800b714 <HAL_DMA_Init>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d001      	beq.n	800729e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 800729a:	f000 fe11 	bl	8007ec0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a05      	ldr	r2, [pc, #20]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
 80072a4:	4a04      	ldr	r2, [pc, #16]	; (80072b8 <HAL_ADC_MspInit+0xd0>)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80072aa:	bf00      	nop
 80072ac:	3728      	adds	r7, #40	; 0x28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	40021000 	.word	0x40021000
 80072b8:	20002968 	.word	0x20002968
 80072bc:	40020008 	.word	0x40020008

080072c0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80072c4:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <MX_COMP1_Init+0x44>)
 80072c6:	4a10      	ldr	r2, [pc, #64]	; (8007308 <MX_COMP1_Init+0x48>)
 80072c8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80072ca:	4b0e      	ldr	r3, [pc, #56]	; (8007304 <MX_COMP1_Init+0x44>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80072d0:	4b0c      	ldr	r3, [pc, #48]	; (8007304 <MX_COMP1_Init+0x44>)
 80072d2:	4a0e      	ldr	r2, [pc, #56]	; (800730c <MX_COMP1_Init+0x4c>)
 80072d4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80072d6:	4b0b      	ldr	r3, [pc, #44]	; (8007304 <MX_COMP1_Init+0x44>)
 80072d8:	2200      	movs	r2, #0
 80072da:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80072dc:	4b09      	ldr	r3, [pc, #36]	; (8007304 <MX_COMP1_Init+0x44>)
 80072de:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80072e2:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80072e4:	4b07      	ldr	r3, [pc, #28]	; (8007304 <MX_COMP1_Init+0x44>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 80072ea:	4b06      	ldr	r3, [pc, #24]	; (8007304 <MX_COMP1_Init+0x44>)
 80072ec:	2231      	movs	r2, #49	; 0x31
 80072ee:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80072f0:	4804      	ldr	r0, [pc, #16]	; (8007304 <MX_COMP1_Init+0x44>)
 80072f2:	f003 fa67 	bl	800a7c4 <HAL_COMP_Init>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 80072fc:	f000 fde0 	bl	8007ec0 <Error_Handler>
  }

}
 8007300:	bf00      	nop
 8007302:	bd80      	pop	{r7, pc}
 8007304:	200029c8 	.word	0x200029c8
 8007308:	40010200 	.word	0x40010200
 800730c:	00800030 	.word	0x00800030

08007310 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007318:	f107 030c 	add.w	r3, r7, #12
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a13      	ldr	r2, [pc, #76]	; (800737c <HAL_COMP_MspInit+0x6c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d120      	bne.n	8007374 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007332:	4b13      	ldr	r3, [pc, #76]	; (8007380 <HAL_COMP_MspInit+0x70>)
 8007334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007336:	4a12      	ldr	r2, [pc, #72]	; (8007380 <HAL_COMP_MspInit+0x70>)
 8007338:	f043 0301 	orr.w	r3, r3, #1
 800733c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800733e:	4b10      	ldr	r3, [pc, #64]	; (8007380 <HAL_COMP_MspInit+0x70>)
 8007340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007342:	f003 0301 	and.w	r3, r3, #1
 8007346:	60bb      	str	r3, [r7, #8]
 8007348:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800734a:	2302      	movs	r3, #2
 800734c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800734e:	2303      	movs	r3, #3
 8007350:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007356:	f107 030c 	add.w	r3, r7, #12
 800735a:	4619      	mov	r1, r3
 800735c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007360:	f004 fca4 	bl	800bcac <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8007364:	2200      	movs	r2, #0
 8007366:	2100      	movs	r1, #0
 8007368:	2040      	movs	r0, #64	; 0x40
 800736a:	f003 fd72 	bl	800ae52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800736e:	2040      	movs	r0, #64	; 0x40
 8007370:	f003 fd89 	bl	800ae86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007374:	bf00      	nop
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	40010200 	.word	0x40010200
 8007380:	40021000 	.word	0x40021000

08007384 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b08c      	sub	sp, #48	; 0x30
 8007388:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800738a:	463b      	mov	r3, r7
 800738c:	2230      	movs	r2, #48	; 0x30
 800738e:	2100      	movs	r1, #0
 8007390:	4618      	mov	r0, r3
 8007392:	f009 f907 	bl	80105a4 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8007396:	4b1e      	ldr	r3, [pc, #120]	; (8007410 <MX_DAC1_Init+0x8c>)
 8007398:	4a1e      	ldr	r2, [pc, #120]	; (8007414 <MX_DAC1_Init+0x90>)
 800739a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800739c:	481c      	ldr	r0, [pc, #112]	; (8007410 <MX_DAC1_Init+0x8c>)
 800739e:	f003 fd9a 	bl	800aed6 <HAL_DAC_Init>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d001      	beq.n	80073ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80073a8:	f000 fd8a 	bl	8007ec0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80073ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073b0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80073b2:	2300      	movs	r3, #0
 80073b4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80073b6:	2300      	movs	r3, #0
 80073b8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80073be:	2306      	movs	r3, #6
 80073c0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80073c2:	2300      	movs	r3, #0
 80073c4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80073ca:	2301      	movs	r3, #1
 80073cc:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80073ce:	2300      	movs	r3, #0
 80073d0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80073d2:	463b      	mov	r3, r7
 80073d4:	2200      	movs	r2, #0
 80073d6:	4619      	mov	r1, r3
 80073d8:	480d      	ldr	r0, [pc, #52]	; (8007410 <MX_DAC1_Init+0x8c>)
 80073da:	f003 ff65 	bl	800b2a8 <HAL_DAC_ConfigChannel>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80073e4:	f000 fd6c 	bl	8007ec0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80073e8:	2300      	movs	r3, #0
 80073ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80073ec:	2301      	movs	r3, #1
 80073ee:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80073f0:	463b      	mov	r3, r7
 80073f2:	2210      	movs	r2, #16
 80073f4:	4619      	mov	r1, r3
 80073f6:	4806      	ldr	r0, [pc, #24]	; (8007410 <MX_DAC1_Init+0x8c>)
 80073f8:	f003 ff56 	bl	800b2a8 <HAL_DAC_ConfigChannel>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8007402:	f000 fd5d 	bl	8007ec0 <Error_Handler>
  }

}
 8007406:	bf00      	nop
 8007408:	3730      	adds	r7, #48	; 0x30
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20002a00 	.word	0x20002a00
 8007414:	50000800 	.word	0x50000800

08007418 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b08c      	sub	sp, #48	; 0x30
 800741c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800741e:	463b      	mov	r3, r7
 8007420:	2230      	movs	r2, #48	; 0x30
 8007422:	2100      	movs	r1, #0
 8007424:	4618      	mov	r0, r3
 8007426:	f009 f8bd 	bl	80105a4 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800742a:	4b16      	ldr	r3, [pc, #88]	; (8007484 <MX_DAC2_Init+0x6c>)
 800742c:	4a16      	ldr	r2, [pc, #88]	; (8007488 <MX_DAC2_Init+0x70>)
 800742e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8007430:	4814      	ldr	r0, [pc, #80]	; (8007484 <MX_DAC2_Init+0x6c>)
 8007432:	f003 fd50 	bl	800aed6 <HAL_DAC_Init>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800743c:	f000 fd40 	bl	8007ec0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007440:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007444:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007446:	2300      	movs	r3, #0
 8007448:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800744a:	2300      	movs	r3, #0
 800744c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800744e:	2300      	movs	r3, #0
 8007450:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8007452:	2306      	movs	r3, #6
 8007454:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007456:	2300      	movs	r3, #0
 8007458:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800745e:	2301      	movs	r3, #1
 8007460:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007462:	2300      	movs	r3, #0
 8007464:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007466:	463b      	mov	r3, r7
 8007468:	2200      	movs	r2, #0
 800746a:	4619      	mov	r1, r3
 800746c:	4805      	ldr	r0, [pc, #20]	; (8007484 <MX_DAC2_Init+0x6c>)
 800746e:	f003 ff1b 	bl	800b2a8 <HAL_DAC_ConfigChannel>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007478:	f000 fd22 	bl	8007ec0 <Error_Handler>
  }

}
 800747c:	bf00      	nop
 800747e:	3730      	adds	r7, #48	; 0x30
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	200029ec 	.word	0x200029ec
 8007488:	50000c00 	.word	0x50000c00

0800748c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b08c      	sub	sp, #48	; 0x30
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007494:	f107 031c 	add.w	r3, r7, #28
 8007498:	2200      	movs	r2, #0
 800749a:	601a      	str	r2, [r3, #0]
 800749c:	605a      	str	r2, [r3, #4]
 800749e:	609a      	str	r2, [r3, #8]
 80074a0:	60da      	str	r2, [r3, #12]
 80074a2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4a56      	ldr	r2, [pc, #344]	; (8007604 <HAL_DAC_MspInit+0x178>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d150      	bne.n	8007550 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80074ae:	4b56      	ldr	r3, [pc, #344]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 80074b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b2:	4a55      	ldr	r2, [pc, #340]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074ba:	4b53      	ldr	r3, [pc, #332]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 80074bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074c2:	61bb      	str	r3, [r7, #24]
 80074c4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074c6:	4b50      	ldr	r3, [pc, #320]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 80074c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ca:	4a4f      	ldr	r2, [pc, #316]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 80074cc:	f043 0301 	orr.w	r3, r3, #1
 80074d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074d2:	4b4d      	ldr	r3, [pc, #308]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 80074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	617b      	str	r3, [r7, #20]
 80074dc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80074de:	2330      	movs	r3, #48	; 0x30
 80074e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074e2:	2303      	movs	r3, #3
 80074e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074ea:	f107 031c 	add.w	r3, r7, #28
 80074ee:	4619      	mov	r1, r3
 80074f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80074f4:	f004 fbda 	bl	800bcac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80074f8:	4b44      	ldr	r3, [pc, #272]	; (800760c <HAL_DAC_MspInit+0x180>)
 80074fa:	4a45      	ldr	r2, [pc, #276]	; (8007610 <HAL_DAC_MspInit+0x184>)
 80074fc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80074fe:	4b43      	ldr	r3, [pc, #268]	; (800760c <HAL_DAC_MspInit+0x180>)
 8007500:	2206      	movs	r2, #6
 8007502:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007504:	4b41      	ldr	r3, [pc, #260]	; (800760c <HAL_DAC_MspInit+0x180>)
 8007506:	2210      	movs	r2, #16
 8007508:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800750a:	4b40      	ldr	r3, [pc, #256]	; (800760c <HAL_DAC_MspInit+0x180>)
 800750c:	2200      	movs	r2, #0
 800750e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007510:	4b3e      	ldr	r3, [pc, #248]	; (800760c <HAL_DAC_MspInit+0x180>)
 8007512:	2280      	movs	r2, #128	; 0x80
 8007514:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007516:	4b3d      	ldr	r3, [pc, #244]	; (800760c <HAL_DAC_MspInit+0x180>)
 8007518:	f44f 7200 	mov.w	r2, #512	; 0x200
 800751c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800751e:	4b3b      	ldr	r3, [pc, #236]	; (800760c <HAL_DAC_MspInit+0x180>)
 8007520:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007524:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007526:	4b39      	ldr	r3, [pc, #228]	; (800760c <HAL_DAC_MspInit+0x180>)
 8007528:	2220      	movs	r2, #32
 800752a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800752c:	4b37      	ldr	r3, [pc, #220]	; (800760c <HAL_DAC_MspInit+0x180>)
 800752e:	2200      	movs	r2, #0
 8007530:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007532:	4836      	ldr	r0, [pc, #216]	; (800760c <HAL_DAC_MspInit+0x180>)
 8007534:	f004 f8ee 	bl	800b714 <HAL_DMA_Init>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d001      	beq.n	8007542 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800753e:	f000 fcbf 	bl	8007ec0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a31      	ldr	r2, [pc, #196]	; (800760c <HAL_DAC_MspInit+0x180>)
 8007546:	609a      	str	r2, [r3, #8]
 8007548:	4a30      	ldr	r2, [pc, #192]	; (800760c <HAL_DAC_MspInit+0x180>)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800754e:	e054      	b.n	80075fa <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a2f      	ldr	r2, [pc, #188]	; (8007614 <HAL_DAC_MspInit+0x188>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d14f      	bne.n	80075fa <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800755a:	4b2b      	ldr	r3, [pc, #172]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 800755c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800755e:	4a2a      	ldr	r2, [pc, #168]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 8007560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007566:	4b28      	ldr	r3, [pc, #160]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756e:	613b      	str	r3, [r7, #16]
 8007570:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007572:	4b25      	ldr	r3, [pc, #148]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 8007574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007576:	4a24      	ldr	r2, [pc, #144]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800757e:	4b22      	ldr	r3, [pc, #136]	; (8007608 <HAL_DAC_MspInit+0x17c>)
 8007580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800758a:	2340      	movs	r3, #64	; 0x40
 800758c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800758e:	2303      	movs	r3, #3
 8007590:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007592:	2300      	movs	r3, #0
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007596:	f107 031c 	add.w	r3, r7, #28
 800759a:	4619      	mov	r1, r3
 800759c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075a0:	f004 fb84 	bl	800bcac <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80075a4:	4b1c      	ldr	r3, [pc, #112]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075a6:	4a1d      	ldr	r2, [pc, #116]	; (800761c <HAL_DAC_MspInit+0x190>)
 80075a8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80075aa:	4b1b      	ldr	r3, [pc, #108]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075ac:	2229      	movs	r2, #41	; 0x29
 80075ae:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80075b0:	4b19      	ldr	r3, [pc, #100]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075b2:	2210      	movs	r2, #16
 80075b4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80075b6:	4b18      	ldr	r3, [pc, #96]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80075bc:	4b16      	ldr	r3, [pc, #88]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075be:	2280      	movs	r2, #128	; 0x80
 80075c0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80075c2:	4b15      	ldr	r3, [pc, #84]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80075ca:	4b13      	ldr	r3, [pc, #76]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075d0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80075d2:	4b11      	ldr	r3, [pc, #68]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075d4:	2220      	movs	r2, #32
 80075d6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80075d8:	4b0f      	ldr	r3, [pc, #60]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075da:	2200      	movs	r2, #0
 80075dc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80075de:	480e      	ldr	r0, [pc, #56]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075e0:	f004 f898 	bl	800b714 <HAL_DMA_Init>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80075ea:	f000 fc69 	bl	8007ec0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a09      	ldr	r2, [pc, #36]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075f2:	609a      	str	r2, [r3, #8]
 80075f4:	4a08      	ldr	r2, [pc, #32]	; (8007618 <HAL_DAC_MspInit+0x18c>)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80075fa:	bf00      	nop
 80075fc:	3730      	adds	r7, #48	; 0x30
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	50000800 	.word	0x50000800
 8007608:	40021000 	.word	0x40021000
 800760c:	20002270 	.word	0x20002270
 8007610:	4002001c 	.word	0x4002001c
 8007614:	50000c00 	.word	0x50000c00
 8007618:	20002a14 	.word	0x20002a14
 800761c:	40020030 	.word	0x40020030

08007620 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b082      	sub	sp, #8
 8007624:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007626:	4b1a      	ldr	r3, [pc, #104]	; (8007690 <MX_DMA_Init+0x70>)
 8007628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762a:	4a19      	ldr	r2, [pc, #100]	; (8007690 <MX_DMA_Init+0x70>)
 800762c:	f043 0304 	orr.w	r3, r3, #4
 8007630:	6493      	str	r3, [r2, #72]	; 0x48
 8007632:	4b17      	ldr	r3, [pc, #92]	; (8007690 <MX_DMA_Init+0x70>)
 8007634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007636:	f003 0304 	and.w	r3, r3, #4
 800763a:	607b      	str	r3, [r7, #4]
 800763c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800763e:	4b14      	ldr	r3, [pc, #80]	; (8007690 <MX_DMA_Init+0x70>)
 8007640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007642:	4a13      	ldr	r2, [pc, #76]	; (8007690 <MX_DMA_Init+0x70>)
 8007644:	f043 0301 	orr.w	r3, r3, #1
 8007648:	6493      	str	r3, [r2, #72]	; 0x48
 800764a:	4b11      	ldr	r3, [pc, #68]	; (8007690 <MX_DMA_Init+0x70>)
 800764c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800764e:	f003 0301 	and.w	r3, r3, #1
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007656:	2200      	movs	r2, #0
 8007658:	2101      	movs	r1, #1
 800765a:	200b      	movs	r0, #11
 800765c:	f003 fbf9 	bl	800ae52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007660:	200b      	movs	r0, #11
 8007662:	f003 fc10 	bl	800ae86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007666:	2200      	movs	r2, #0
 8007668:	2100      	movs	r1, #0
 800766a:	200c      	movs	r0, #12
 800766c:	f003 fbf1 	bl	800ae52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007670:	200c      	movs	r0, #12
 8007672:	f003 fc08 	bl	800ae86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007676:	2200      	movs	r2, #0
 8007678:	2100      	movs	r1, #0
 800767a:	200d      	movs	r0, #13
 800767c:	f003 fbe9 	bl	800ae52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007680:	200d      	movs	r0, #13
 8007682:	f003 fc00 	bl	800ae86 <HAL_NVIC_EnableIRQ>

}
 8007686:	bf00      	nop
 8007688:	3708      	adds	r7, #8
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40021000 	.word	0x40021000

08007694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007694:	b480      	push	{r7}
 8007696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007698:	4b04      	ldr	r3, [pc, #16]	; (80076ac <__NVIC_GetPriorityGrouping+0x18>)
 800769a:	68db      	ldr	r3, [r3, #12]
 800769c:	0a1b      	lsrs	r3, r3, #8
 800769e:	f003 0307 	and.w	r3, r3, #7
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	e000ed00 	.word	0xe000ed00

080076b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	db0b      	blt.n	80076da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076c2:	79fb      	ldrb	r3, [r7, #7]
 80076c4:	f003 021f 	and.w	r2, r3, #31
 80076c8:	4907      	ldr	r1, [pc, #28]	; (80076e8 <__NVIC_EnableIRQ+0x38>)
 80076ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ce:	095b      	lsrs	r3, r3, #5
 80076d0:	2001      	movs	r0, #1
 80076d2:	fa00 f202 	lsl.w	r2, r0, r2
 80076d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80076da:	bf00      	nop
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr
 80076e6:	bf00      	nop
 80076e8:	e000e100 	.word	0xe000e100

080076ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	db0a      	blt.n	8007716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	b2da      	uxtb	r2, r3
 8007704:	490c      	ldr	r1, [pc, #48]	; (8007738 <__NVIC_SetPriority+0x4c>)
 8007706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800770a:	0112      	lsls	r2, r2, #4
 800770c:	b2d2      	uxtb	r2, r2
 800770e:	440b      	add	r3, r1
 8007710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007714:	e00a      	b.n	800772c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	b2da      	uxtb	r2, r3
 800771a:	4908      	ldr	r1, [pc, #32]	; (800773c <__NVIC_SetPriority+0x50>)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	f003 030f 	and.w	r3, r3, #15
 8007722:	3b04      	subs	r3, #4
 8007724:	0112      	lsls	r2, r2, #4
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	440b      	add	r3, r1
 800772a:	761a      	strb	r2, [r3, #24]
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	e000e100 	.word	0xe000e100
 800773c:	e000ed00 	.word	0xe000ed00

08007740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007740:	b480      	push	{r7}
 8007742:	b089      	sub	sp, #36	; 0x24
 8007744:	af00      	add	r7, sp, #0
 8007746:	60f8      	str	r0, [r7, #12]
 8007748:	60b9      	str	r1, [r7, #8]
 800774a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f003 0307 	and.w	r3, r3, #7
 8007752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f1c3 0307 	rsb	r3, r3, #7
 800775a:	2b04      	cmp	r3, #4
 800775c:	bf28      	it	cs
 800775e:	2304      	movcs	r3, #4
 8007760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	3304      	adds	r3, #4
 8007766:	2b06      	cmp	r3, #6
 8007768:	d902      	bls.n	8007770 <NVIC_EncodePriority+0x30>
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	3b03      	subs	r3, #3
 800776e:	e000      	b.n	8007772 <NVIC_EncodePriority+0x32>
 8007770:	2300      	movs	r3, #0
 8007772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	fa02 f303 	lsl.w	r3, r2, r3
 800777e:	43da      	mvns	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	401a      	ands	r2, r3
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007788:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	fa01 f303 	lsl.w	r3, r1, r3
 8007792:	43d9      	mvns	r1, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007798:	4313      	orrs	r3, r2
         );
}
 800779a:	4618      	mov	r0, r3
 800779c:	3724      	adds	r7, #36	; 0x24
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
	...

080077a8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b085      	sub	sp, #20
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80077b2:	4a14      	ldr	r2, [pc, #80]	; (8007804 <LL_SYSCFG_SetEXTISource+0x5c>)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f003 0303 	and.w	r3, r3, #3
 80077ba:	3302      	adds	r3, #2
 80077bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	0c1b      	lsrs	r3, r3, #16
 80077c4:	43db      	mvns	r3, r3
 80077c6:	ea02 0103 	and.w	r1, r2, r3
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	0c1b      	lsrs	r3, r3, #16
 80077ce:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	fa93 f3a3 	rbit	r3, r3
 80077d6:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	fab3 f383 	clz	r3, r3
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 031f 	and.w	r3, r3, #31
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	409a      	lsls	r2, r3
 80077e8:	4806      	ldr	r0, [pc, #24]	; (8007804 <LL_SYSCFG_SetEXTISource+0x5c>)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	430a      	orrs	r2, r1
 80077f2:	3302      	adds	r3, #2
 80077f4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	40010000 	.word	0x40010000

08007808 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007808:	b480      	push	{r7}
 800780a:	b089      	sub	sp, #36	; 0x24
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	fa93 f3a3 	rbit	r3, r3
 8007822:	613b      	str	r3, [r7, #16]
  return result;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	fab3 f383 	clz	r3, r3
 800782a:	b2db      	uxtb	r3, r3
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	2103      	movs	r1, #3
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	43db      	mvns	r3, r3
 8007836:	401a      	ands	r2, r3
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	fa93 f3a3 	rbit	r3, r3
 8007842:	61bb      	str	r3, [r7, #24]
  return result;
 8007844:	69bb      	ldr	r3, [r7, #24]
 8007846:	fab3 f383 	clz	r3, r3
 800784a:	b2db      	uxtb	r3, r3
 800784c:	005b      	lsls	r3, r3, #1
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	fa01 f303 	lsl.w	r3, r1, r3
 8007854:	431a      	orrs	r2, r3
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	601a      	str	r2, [r3, #0]
}
 800785a:	bf00      	nop
 800785c:	3724      	adds	r7, #36	; 0x24
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007866:	b480      	push	{r7}
 8007868:	b089      	sub	sp, #36	; 0x24
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	68da      	ldr	r2, [r3, #12]
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	fa93 f3a3 	rbit	r3, r3
 8007880:	613b      	str	r3, [r7, #16]
  return result;
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	fab3 f383 	clz	r3, r3
 8007888:	b2db      	uxtb	r3, r3
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	2103      	movs	r1, #3
 800788e:	fa01 f303 	lsl.w	r3, r1, r3
 8007892:	43db      	mvns	r3, r3
 8007894:	401a      	ands	r2, r3
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	fa93 f3a3 	rbit	r3, r3
 80078a0:	61bb      	str	r3, [r7, #24]
  return result;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	fab3 f383 	clz	r3, r3
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	6879      	ldr	r1, [r7, #4]
 80078ae:	fa01 f303 	lsl.w	r3, r1, r3
 80078b2:	431a      	orrs	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	60da      	str	r2, [r3, #12]
}
 80078b8:	bf00      	nop
 80078ba:	3724      	adds	r7, #36	; 0x24
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80078d4:	bf00      	nop
 80078d6:	370c      	adds	r7, #12
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80078e8:	4b08      	ldr	r3, [pc, #32]	; (800790c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80078ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078ec:	4907      	ldr	r1, [pc, #28]	; (800790c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80078f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4013      	ands	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80078fe:	68fb      	ldr	r3, [r7, #12]
}
 8007900:	bf00      	nop
 8007902:	3714      	adds	r7, #20
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	40021000 	.word	0x40021000

08007910 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	; 0x28
 8007914:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007916:	f107 031c 	add.w	r3, r7, #28
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
 800791e:	605a      	str	r2, [r3, #4]
 8007920:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007922:	1d3b      	adds	r3, r7, #4
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	605a      	str	r2, [r3, #4]
 800792a:	609a      	str	r2, [r3, #8]
 800792c:	60da      	str	r2, [r3, #12]
 800792e:	611a      	str	r2, [r3, #16]
 8007930:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8007932:	2004      	movs	r0, #4
 8007934:	f7ff ffd4 	bl	80078e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007938:	2020      	movs	r0, #32
 800793a:	f7ff ffd1 	bl	80078e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800793e:	2001      	movs	r0, #1
 8007940:	f7ff ffce 	bl	80078e0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007944:	2002      	movs	r0, #2
 8007946:	f7ff ffcb 	bl	80078e0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 800794a:	2108      	movs	r1, #8
 800794c:	48d3      	ldr	r0, [pc, #844]	; (8007c9c <MX_GPIO_Init+0x38c>)
 800794e:	f7ff ffb9 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 8007952:	2108      	movs	r1, #8
 8007954:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007958:	f7ff ffb4 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 800795c:	2110      	movs	r1, #16
 800795e:	48cf      	ldr	r0, [pc, #828]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007960:	f7ff ffb0 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007964:	2120      	movs	r1, #32
 8007966:	48cd      	ldr	r0, [pc, #820]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007968:	f7ff ffac 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 800796c:	2101      	movs	r1, #1
 800796e:	48cc      	ldr	r0, [pc, #816]	; (8007ca0 <MX_GPIO_Init+0x390>)
 8007970:	f7ff ffa8 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8007974:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007978:	48c8      	ldr	r0, [pc, #800]	; (8007c9c <MX_GPIO_Init+0x38c>)
 800797a:	f7ff ffa3 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800797e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007982:	48c6      	ldr	r0, [pc, #792]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007984:	f7ff ff9e 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8007988:	2140      	movs	r1, #64	; 0x40
 800798a:	48c5      	ldr	r0, [pc, #788]	; (8007ca0 <MX_GPIO_Init+0x390>)
 800798c:	f7ff ff9a 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8007990:	2180      	movs	r1, #128	; 0x80
 8007992:	48c3      	ldr	r0, [pc, #780]	; (8007ca0 <MX_GPIO_Init+0x390>)
 8007994:	f7ff ff96 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8007998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800799c:	48c0      	ldr	r0, [pc, #768]	; (8007ca0 <MX_GPIO_Init+0x390>)
 800799e:	f7ff ff91 	bl	80078c4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80079a2:	49c0      	ldr	r1, [pc, #768]	; (8007ca4 <MX_GPIO_Init+0x394>)
 80079a4:	2002      	movs	r0, #2
 80079a6:	f7ff feff 	bl	80077a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80079aa:	49bf      	ldr	r1, [pc, #764]	; (8007ca8 <MX_GPIO_Init+0x398>)
 80079ac:	2002      	movs	r0, #2
 80079ae:	f7ff fefb 	bl	80077a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80079b2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80079b6:	2005      	movs	r0, #5
 80079b8:	f7ff fef6 	bl	80077a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80079bc:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80079c0:	2005      	movs	r0, #5
 80079c2:	f7ff fef1 	bl	80077a8 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80079c6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80079ca:	2002      	movs	r0, #2
 80079cc:	f7ff feec 	bl	80077a8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80079d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80079d4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80079dc:	2300      	movs	r3, #0
 80079de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80079e2:	2302      	movs	r3, #2
 80079e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80079e8:	f107 031c 	add.w	r3, r7, #28
 80079ec:	4618      	mov	r0, r3
 80079ee:	f007 faf7 	bl	800efe0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80079f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079f6:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a04:	2302      	movs	r3, #2
 8007a06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a0a:	f107 031c 	add.w	r3, r7, #28
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f007 fae6 	bl	800efe0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007a14:	2301      	movs	r3, #1
 8007a16:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a24:	2302      	movs	r3, #2
 8007a26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a2a:	f107 031c 	add.w	r3, r7, #28
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f007 fad6 	bl	800efe0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007a34:	2302      	movs	r3, #2
 8007a36:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a44:	2302      	movs	r3, #2
 8007a46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a4a:	f107 031c 	add.w	r3, r7, #28
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f007 fac6 	bl	800efe0 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007a54:	2304      	movs	r3, #4
 8007a56:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a64:	2302      	movs	r3, #2
 8007a66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a6a:	f107 031c 	add.w	r3, r7, #28
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f007 fab6 	bl	800efe0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007a74:	2201      	movs	r2, #1
 8007a76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a7a:	4888      	ldr	r0, [pc, #544]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007a7c:	f7ff fef3 	bl	8007866 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007a80:	2201      	movs	r2, #1
 8007a82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a86:	4885      	ldr	r0, [pc, #532]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007a88:	f7ff feed 	bl	8007866 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	2101      	movs	r1, #1
 8007a90:	4886      	ldr	r0, [pc, #536]	; (8007cac <MX_GPIO_Init+0x39c>)
 8007a92:	f7ff fee8 	bl	8007866 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007a96:	2201      	movs	r2, #1
 8007a98:	2102      	movs	r1, #2
 8007a9a:	4884      	ldr	r0, [pc, #528]	; (8007cac <MX_GPIO_Init+0x39c>)
 8007a9c:	f7ff fee3 	bl	8007866 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	2104      	movs	r1, #4
 8007aa4:	487d      	ldr	r0, [pc, #500]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007aa6:	f7ff fede 	bl	8007866 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ab0:	487a      	ldr	r0, [pc, #488]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007ab2:	f7ff fea9 	bl	8007808 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007abc:	4877      	ldr	r0, [pc, #476]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007abe:	f7ff fea3 	bl	8007808 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	4879      	ldr	r0, [pc, #484]	; (8007cac <MX_GPIO_Init+0x39c>)
 8007ac8:	f7ff fe9e 	bl	8007808 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007acc:	2200      	movs	r2, #0
 8007ace:	2102      	movs	r1, #2
 8007ad0:	4876      	ldr	r0, [pc, #472]	; (8007cac <MX_GPIO_Init+0x39c>)
 8007ad2:	f7ff fe99 	bl	8007808 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	2104      	movs	r1, #4
 8007ada:	4870      	ldr	r0, [pc, #448]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007adc:	f7ff fe94 	bl	8007808 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007ae0:	2308      	movs	r3, #8
 8007ae2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007af0:	2302      	movs	r3, #2
 8007af2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007af4:	1d3b      	adds	r3, r7, #4
 8007af6:	4619      	mov	r1, r3
 8007af8:	4868      	ldr	r0, [pc, #416]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007afa:	f007 fc64 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007afe:	2308      	movs	r3, #8
 8007b00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b02:	2301      	movs	r3, #1
 8007b04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007b12:	1d3b      	adds	r3, r7, #4
 8007b14:	4619      	mov	r1, r3
 8007b16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b1a:	f007 fc54 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007b1e:	2310      	movs	r3, #16
 8007b20:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b22:	2301      	movs	r3, #1
 8007b24:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b26:	2300      	movs	r3, #0
 8007b28:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007b32:	1d3b      	adds	r3, r7, #4
 8007b34:	4619      	mov	r1, r3
 8007b36:	4859      	ldr	r0, [pc, #356]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007b38:	f007 fc45 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007b3c:	2320      	movs	r3, #32
 8007b3e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b40:	2301      	movs	r3, #1
 8007b42:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b44:	2300      	movs	r3, #0
 8007b46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007b50:	1d3b      	adds	r3, r7, #4
 8007b52:	4619      	mov	r1, r3
 8007b54:	4851      	ldr	r0, [pc, #324]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007b56:	f007 fc36 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b62:	2300      	movs	r3, #0
 8007b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b66:	2300      	movs	r3, #0
 8007b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007b6e:	1d3b      	adds	r3, r7, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	484b      	ldr	r0, [pc, #300]	; (8007ca0 <MX_GPIO_Init+0x390>)
 8007b74:	f007 fc27 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007b78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b7c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b82:	2300      	movs	r3, #0
 8007b84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b86:	2300      	movs	r3, #0
 8007b88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007b8e:	1d3b      	adds	r3, r7, #4
 8007b90:	4619      	mov	r1, r3
 8007b92:	4842      	ldr	r0, [pc, #264]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007b94:	f007 fc17 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007b98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007baa:	2300      	movs	r3, #0
 8007bac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007bae:	1d3b      	adds	r3, r7, #4
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	483a      	ldr	r0, [pc, #232]	; (8007c9c <MX_GPIO_Init+0x38c>)
 8007bb4:	f007 fc07 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007bb8:	2340      	movs	r3, #64	; 0x40
 8007bba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007bcc:	1d3b      	adds	r3, r7, #4
 8007bce:	4619      	mov	r1, r3
 8007bd0:	4833      	ldr	r0, [pc, #204]	; (8007ca0 <MX_GPIO_Init+0x390>)
 8007bd2:	f007 fbf8 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007bd6:	2380      	movs	r3, #128	; 0x80
 8007bd8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007bde:	2303      	movs	r3, #3
 8007be0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007be2:	2300      	movs	r3, #0
 8007be4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007bea:	1d3b      	adds	r3, r7, #4
 8007bec:	4619      	mov	r1, r3
 8007bee:	482c      	ldr	r0, [pc, #176]	; (8007ca0 <MX_GPIO_Init+0x390>)
 8007bf0:	f007 fbe9 	bl	800f3c6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bf8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007bfe:	2303      	movs	r3, #3
 8007c00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c02:	2300      	movs	r3, #0
 8007c04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c06:	2300      	movs	r3, #0
 8007c08:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007c0a:	1d3b      	adds	r3, r7, #4
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4824      	ldr	r0, [pc, #144]	; (8007ca0 <MX_GPIO_Init+0x390>)
 8007c10:	f007 fbd9 	bl	800f3c6 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c14:	f7ff fd3e 	bl	8007694 <__NVIC_GetPriorityGrouping>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	2100      	movs	r1, #0
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fd8e 	bl	8007740 <NVIC_EncodePriority>
 8007c24:	4603      	mov	r3, r0
 8007c26:	4619      	mov	r1, r3
 8007c28:	2006      	movs	r0, #6
 8007c2a:	f7ff fd5f 	bl	80076ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007c2e:	2006      	movs	r0, #6
 8007c30:	f7ff fd3e 	bl	80076b0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c34:	f7ff fd2e 	bl	8007694 <__NVIC_GetPriorityGrouping>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	2100      	movs	r1, #0
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7ff fd7e 	bl	8007740 <NVIC_EncodePriority>
 8007c44:	4603      	mov	r3, r0
 8007c46:	4619      	mov	r1, r3
 8007c48:	2007      	movs	r0, #7
 8007c4a:	f7ff fd4f 	bl	80076ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007c4e:	2007      	movs	r0, #7
 8007c50:	f7ff fd2e 	bl	80076b0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c54:	f7ff fd1e 	bl	8007694 <__NVIC_GetPriorityGrouping>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7ff fd6e 	bl	8007740 <NVIC_EncodePriority>
 8007c64:	4603      	mov	r3, r0
 8007c66:	4619      	mov	r1, r3
 8007c68:	2008      	movs	r0, #8
 8007c6a:	f7ff fd3f 	bl	80076ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007c6e:	2008      	movs	r0, #8
 8007c70:	f7ff fd1e 	bl	80076b0 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c74:	f7ff fd0e 	bl	8007694 <__NVIC_GetPriorityGrouping>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fd5e 	bl	8007740 <NVIC_EncodePriority>
 8007c84:	4603      	mov	r3, r0
 8007c86:	4619      	mov	r1, r3
 8007c88:	2028      	movs	r0, #40	; 0x28
 8007c8a:	f7ff fd2f 	bl	80076ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007c8e:	2028      	movs	r0, #40	; 0x28
 8007c90:	f7ff fd0e 	bl	80076b0 <__NVIC_EnableIRQ>

}
 8007c94:	bf00      	nop
 8007c96:	3728      	adds	r7, #40	; 0x28
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	e009      	b.n	8007cb0 <MX_GPIO_Init+0x3a0>
 8007c9c:	48000800 	.word	0x48000800
 8007ca0:	48000400 	.word	0x48000400
 8007ca4:	0f000003 	.word	0x0f000003
 8007ca8:	f0000003 	.word	0xf0000003
 8007cac:	48001400 	.word	0x48001400
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop

08007cb4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007cbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007cc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007cc4:	f003 0301 	and.w	r3, r3, #1
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d013      	beq.n	8007cf4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007ccc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007cd0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007cd4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00b      	beq.n	8007cf4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007cdc:	e000      	b.n	8007ce0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8007cde:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007ce0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d0f9      	beq.n	8007cde <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007cea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007cee:	687a      	ldr	r2, [r7, #4]
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007cf4:	687b      	ldr	r3, [r7, #4]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007d02:	b580      	push	{r7, lr}
 8007d04:	b086      	sub	sp, #24
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	60f8      	str	r0, [r7, #12]
 8007d0a:	60b9      	str	r1, [r7, #8]
 8007d0c:	607a      	str	r2, [r7, #4]
  int i=0;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007d12:	2300      	movs	r3, #0
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	e009      	b.n	8007d2c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	1c5a      	adds	r2, r3, #1
 8007d1c:	60ba      	str	r2, [r7, #8]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff ffc7 	bl	8007cb4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	697a      	ldr	r2, [r7, #20]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	dbf1      	blt.n	8007d18 <_write+0x16>
  return len;
 8007d34:	687b      	ldr	r3, [r7, #4]
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d44:	f000 fefd 	bl	8008b42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d48:	f000 f84c 	bl	8007de4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d4c:	f7ff fde0 	bl	8007910 <MX_GPIO_Init>
  MX_DMA_Init();
 8007d50:	f7ff fc66 	bl	8007620 <MX_DMA_Init>
  MX_DAC1_Init();
 8007d54:	f7ff fb16 	bl	8007384 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007d58:	f7ff f9ce 	bl	80070f8 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007d5c:	f7ff fab0 	bl	80072c0 <MX_COMP1_Init>
  MX_SPI3_Init();
 8007d60:	f000 f8ec 	bl	8007f3c <MX_SPI3_Init>
  MX_RNG_Init();
 8007d64:	f000 f8dc 	bl	8007f20 <MX_RNG_Init>
  MX_TIM1_Init();
 8007d68:	f000 fb50 	bl	800840c <MX_TIM1_Init>
  MX_TIM8_Init();
 8007d6c:	f000 fca6 	bl	80086bc <MX_TIM8_Init>
  MX_TIM16_Init();
 8007d70:	f000 fd5e 	bl	8008830 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007d74:	f000 fd0a 	bl	800878c <MX_TIM15_Init>
  MX_TIM5_Init();
 8007d78:	f000 fc52 	bl	8008620 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007d7c:	f000 fc02 	bl	8008584 <MX_TIM3_Init>
  MX_DAC2_Init();
 8007d80:	f7ff fb4a 	bl	8007418 <MX_DAC2_Init>
  MX_TIM17_Init();
 8007d84:	f000 fd7c 	bl	8008880 <MX_TIM17_Init>
  MX_TIM2_Init();
 8007d88:	f000 fbb0 	bl	80084ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8007d8c:	f7fe fb90 	bl	80064b0 <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 8007d90:	4810      	ldr	r0, [pc, #64]	; (8007dd4 <main+0x94>)
 8007d92:	f005 fb3f 	bl	800d414 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007d96:	2200      	movs	r2, #0
 8007d98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d9c:	480e      	ldr	r0, [pc, #56]	; (8007dd8 <main+0x98>)
 8007d9e:	f004 f9e9 	bl	800c174 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007da2:	2200      	movs	r2, #0
 8007da4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007da8:	480b      	ldr	r0, [pc, #44]	; (8007dd8 <main+0x98>)
 8007daa:	f004 f9e3 	bl	800c174 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007dae:	480b      	ldr	r0, [pc, #44]	; (8007ddc <main+0x9c>)
 8007db0:	f005 fada 	bl	800d368 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007db4:	4b0a      	ldr	r3, [pc, #40]	; (8007de0 <main+0xa0>)
 8007db6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dba:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007dbc:	4b08      	ldr	r3, [pc, #32]	; (8007de0 <main+0xa0>)
 8007dbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dc2:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 8007dc4:	f7f8 ffd4 	bl	8000d70 <DM_Init>
  DM_PostInit();
 8007dc8:	f7f8 ffe0 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007dcc:	f7fd f9e4 	bl	8005198 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007dd0:	e7fe      	b.n	8007dd0 <main+0x90>
 8007dd2:	bf00      	nop
 8007dd4:	20002b70 	.word	0x20002b70
 8007dd8:	48000800 	.word	0x48000800
 8007ddc:	20002c08 	.word	0x20002c08
 8007de0:	40001000 	.word	0x40001000

08007de4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b0a8      	sub	sp, #160	; 0xa0
 8007de8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007dea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007dee:	2238      	movs	r2, #56	; 0x38
 8007df0:	2100      	movs	r1, #0
 8007df2:	4618      	mov	r0, r3
 8007df4:	f008 fbd6 	bl	80105a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007df8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	601a      	str	r2, [r3, #0]
 8007e00:	605a      	str	r2, [r3, #4]
 8007e02:	609a      	str	r2, [r3, #8]
 8007e04:	60da      	str	r2, [r3, #12]
 8007e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e08:	463b      	mov	r3, r7
 8007e0a:	2254      	movs	r2, #84	; 0x54
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f008 fbc8 	bl	80105a4 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007e14:	2000      	movs	r0, #0
 8007e16:	f004 f9c5 	bl	800c1a4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007e1a:	2322      	movs	r3, #34	; 0x22
 8007e1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e22:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007e24:	2340      	movs	r3, #64	; 0x40
 8007e26:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e2e:	2302      	movs	r3, #2
 8007e30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007e34:	2302      	movs	r3, #2
 8007e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007e40:	232a      	movs	r3, #42	; 0x2a
 8007e42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007e46:	2302      	movs	r3, #2
 8007e48:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007e4c:	2304      	movs	r3, #4
 8007e4e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007e52:	2302      	movs	r3, #2
 8007e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e58:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	f004 fa45 	bl	800c2ec <HAL_RCC_OscConfig>
 8007e62:	4603      	mov	r3, r0
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d001      	beq.n	8007e6c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007e68:	f000 f82a 	bl	8007ec0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e6c:	230f      	movs	r3, #15
 8007e6e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e70:	2303      	movs	r3, #3
 8007e72:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e74:	2300      	movs	r3, #0
 8007e76:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007e80:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e84:	2108      	movs	r1, #8
 8007e86:	4618      	mov	r0, r3
 8007e88:	f004 fd48 	bl	800c91c <HAL_RCC_ClockConfig>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007e92:	f000 f815 	bl	8007ec0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007e96:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007e9a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007ea0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ea4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ea6:	463b      	mov	r3, r7
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f004 ff27 	bl	800ccfc <HAL_RCCEx_PeriphCLKConfig>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007eb4:	f000 f804 	bl	8007ec0 <Error_Handler>
  }
}
 8007eb8:	bf00      	nop
 8007eba:	37a0      	adds	r7, #160	; 0xa0
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ec4:	bf00      	nop
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f043 0204 	orr.w	r2, r3, #4
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	601a      	str	r2, [r3, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	370c      	adds	r7, #12
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
	...

08007ef0 <LL_AHB2_GRP1_EnableClock>:
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007ef8:	4b08      	ldr	r3, [pc, #32]	; (8007f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007efc:	4907      	ldr	r1, [pc, #28]	; (8007f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4313      	orrs	r3, r2
 8007f02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007f04:	4b05      	ldr	r3, [pc, #20]	; (8007f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
}
 8007f10:	bf00      	nop
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	40021000 	.word	0x40021000

08007f20 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007f24:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007f28:	f7ff ffe2 	bl	8007ef0 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007f2c:	4802      	ldr	r0, [pc, #8]	; (8007f38 <MX_RNG_Init+0x18>)
 8007f2e:	f7ff ffce 	bl	8007ece <LL_RNG_Enable>

}
 8007f32:	bf00      	nop
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	50060800 	.word	0x50060800

08007f3c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007f40:	4b1b      	ldr	r3, [pc, #108]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f42:	4a1c      	ldr	r2, [pc, #112]	; (8007fb4 <MX_SPI3_Init+0x78>)
 8007f44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007f46:	4b1a      	ldr	r3, [pc, #104]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007f4e:	4b18      	ldr	r3, [pc, #96]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f54:	4b16      	ldr	r3, [pc, #88]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007f5a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f5c:	4b14      	ldr	r3, [pc, #80]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f62:	4b13      	ldr	r3, [pc, #76]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007f68:	4b11      	ldr	r3, [pc, #68]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f6e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007f70:	4b0f      	ldr	r3, [pc, #60]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f72:	2210      	movs	r2, #16
 8007f74:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f76:	4b0e      	ldr	r3, [pc, #56]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f82:	4b0b      	ldr	r3, [pc, #44]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007f88:	4b09      	ldr	r3, [pc, #36]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f8a:	2207      	movs	r2, #7
 8007f8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007f8e:	4b08      	ldr	r3, [pc, #32]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007f94:	4b06      	ldr	r3, [pc, #24]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f96:	2208      	movs	r2, #8
 8007f98:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007f9a:	4805      	ldr	r0, [pc, #20]	; (8007fb0 <MX_SPI3_Init+0x74>)
 8007f9c:	f005 f8fa 	bl	800d194 <HAL_SPI_Init>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007fa6:	f7ff ff8b 	bl	8007ec0 <Error_Handler>
  }

}
 8007faa:	bf00      	nop
 8007fac:	bd80      	pop	{r7, pc}
 8007fae:	bf00      	nop
 8007fb0:	20002a74 	.word	0x20002a74
 8007fb4:	40003c00 	.word	0x40003c00

08007fb8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	; 0x28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fc0:	f107 0314 	add.w	r3, r7, #20
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	605a      	str	r2, [r3, #4]
 8007fca:	609a      	str	r2, [r3, #8]
 8007fcc:	60da      	str	r2, [r3, #12]
 8007fce:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a17      	ldr	r2, [pc, #92]	; (8008034 <HAL_SPI_MspInit+0x7c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d128      	bne.n	800802c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007fda:	4b17      	ldr	r3, [pc, #92]	; (8008038 <HAL_SPI_MspInit+0x80>)
 8007fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fde:	4a16      	ldr	r2, [pc, #88]	; (8008038 <HAL_SPI_MspInit+0x80>)
 8007fe0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8007fe6:	4b14      	ldr	r3, [pc, #80]	; (8008038 <HAL_SPI_MspInit+0x80>)
 8007fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ff2:	4b11      	ldr	r3, [pc, #68]	; (8008038 <HAL_SPI_MspInit+0x80>)
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	4a10      	ldr	r2, [pc, #64]	; (8008038 <HAL_SPI_MspInit+0x80>)
 8007ff8:	f043 0304 	orr.w	r3, r3, #4
 8007ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ffe:	4b0e      	ldr	r3, [pc, #56]	; (8008038 <HAL_SPI_MspInit+0x80>)
 8008000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008002:	f003 0304 	and.w	r3, r3, #4
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800800a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800800e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008010:	2302      	movs	r3, #2
 8008012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008014:	2300      	movs	r3, #0
 8008016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008018:	2300      	movs	r3, #0
 800801a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800801c:	2306      	movs	r3, #6
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008020:	f107 0314 	add.w	r3, r7, #20
 8008024:	4619      	mov	r1, r3
 8008026:	4805      	ldr	r0, [pc, #20]	; (800803c <HAL_SPI_MspInit+0x84>)
 8008028:	f003 fe40 	bl	800bcac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800802c:	bf00      	nop
 800802e:	3728      	adds	r7, #40	; 0x28
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}
 8008034:	40003c00 	.word	0x40003c00
 8008038:	40021000 	.word	0x40021000
 800803c:	48000800 	.word	0x48000800

08008040 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8008040:	b480      	push	{r7}
 8008042:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008044:	4b05      	ldr	r3, [pc, #20]	; (800805c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	4a04      	ldr	r2, [pc, #16]	; (800805c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800804a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800804e:	6093      	str	r3, [r2, #8]
}
 8008050:	bf00      	nop
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	40007000 	.word	0x40007000

08008060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008066:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <HAL_MspInit+0x44>)
 8008068:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806a:	4a0e      	ldr	r2, [pc, #56]	; (80080a4 <HAL_MspInit+0x44>)
 800806c:	f043 0301 	orr.w	r3, r3, #1
 8008070:	6613      	str	r3, [r2, #96]	; 0x60
 8008072:	4b0c      	ldr	r3, [pc, #48]	; (80080a4 <HAL_MspInit+0x44>)
 8008074:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008076:	f003 0301 	and.w	r3, r3, #1
 800807a:	607b      	str	r3, [r7, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800807e:	4b09      	ldr	r3, [pc, #36]	; (80080a4 <HAL_MspInit+0x44>)
 8008080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008082:	4a08      	ldr	r2, [pc, #32]	; (80080a4 <HAL_MspInit+0x44>)
 8008084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008088:	6593      	str	r3, [r2, #88]	; 0x58
 800808a:	4b06      	ldr	r3, [pc, #24]	; (80080a4 <HAL_MspInit+0x44>)
 800808c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800808e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8008096:	f7ff ffd3 	bl	8008040 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800809a:	bf00      	nop
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	40021000 	.word	0x40021000

080080a8 <LL_EXTI_IsActiveFlag_0_31>:
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80080b2:	695a      	ldr	r2, [r3, #20]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4013      	ands	r3, r2
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d101      	bne.n	80080c2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr
 80080d0:	40010400 	.word	0x40010400

080080d4 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80080dc:	4a04      	ldr	r2, [pc, #16]	; (80080f0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6153      	str	r3, [r2, #20]
}
 80080e2:	bf00      	nop
 80080e4:	370c      	adds	r7, #12
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40010400 	.word	0x40010400

080080f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80080f4:	b480      	push	{r7}
 80080f6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80080f8:	bf00      	nop
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
	...

08008104 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8008108:	4801      	ldr	r0, [pc, #4]	; (8008110 <HardFault_Handler+0xc>)
 800810a:	f7f9 fa75 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800810e:	e7fe      	b.n	800810e <HardFault_Handler+0xa>
 8008110:	08015534 	.word	0x08015534

08008114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8008118:	4801      	ldr	r0, [pc, #4]	; (8008120 <MemManage_Handler+0xc>)
 800811a:	f7f9 fa6d 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800811e:	e7fe      	b.n	800811e <MemManage_Handler+0xa>
 8008120:	08015540 	.word	0x08015540

08008124 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8008128:	4801      	ldr	r0, [pc, #4]	; (8008130 <BusFault_Handler+0xc>)
 800812a:	f7f9 fa65 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800812e:	e7fe      	b.n	800812e <BusFault_Handler+0xa>
 8008130:	08015550 	.word	0x08015550

08008134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <UsageFault_Handler+0xc>)
 800813a:	f7f9 fa5d 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800813e:	e7fe      	b.n	800813e <UsageFault_Handler+0xa>
 8008140:	0801555c 	.word	0x0801555c

08008144 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008144:	b480      	push	{r7}
 8008146:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008148:	bf00      	nop
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr

08008152 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008152:	b480      	push	{r7}
 8008154:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008156:	bf00      	nop
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008160:	b480      	push	{r7}
 8008162:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008164:	bf00      	nop
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008172:	f000 fd39 	bl	8008be8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008176:	bf00      	nop
 8008178:	bd80      	pop	{r7, pc}

0800817a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800817a:	b580      	push	{r7, lr}
 800817c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 800817e:	f7fd f8c3 	bl	8005308 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8008182:	2001      	movs	r0, #1
 8008184:	f7ff ff90 	bl	80080a8 <LL_EXTI_IsActiveFlag_0_31>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d002      	beq.n	8008194 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 800818e:	2001      	movs	r0, #1
 8008190:	f7ff ffa0 	bl	80080d4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8008194:	bf00      	nop
 8008196:	bd80      	pop	{r7, pc}

08008198 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 800819c:	f7fd f8da 	bl	8005354 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80081a0:	2002      	movs	r0, #2
 80081a2:	f7ff ff81 	bl	80080a8 <LL_EXTI_IsActiveFlag_0_31>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80081ac:	2002      	movs	r0, #2
 80081ae:	f7ff ff91 	bl	80080d4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80081b2:	bf00      	nop
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80081ba:	f7fd f8f1 	bl	80053a0 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80081be:	2004      	movs	r0, #4
 80081c0:	f7ff ff72 	bl	80080a8 <LL_EXTI_IsActiveFlag_0_31>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d002      	beq.n	80081d0 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80081ca:	2004      	movs	r0, #4
 80081cc:	f7ff ff82 	bl	80080d4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80081d0:	bf00      	nop
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80081d8:	4802      	ldr	r0, [pc, #8]	; (80081e4 <DMA1_Channel1_IRQHandler+0x10>)
 80081da:	f003 fc17 	bl	800ba0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80081de:	bf00      	nop
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	20002968 	.word	0x20002968

080081e8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80081ec:	4802      	ldr	r0, [pc, #8]	; (80081f8 <DMA1_Channel2_IRQHandler+0x10>)
 80081ee:	f003 fc0d 	bl	800ba0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80081f2:	bf00      	nop
 80081f4:	bd80      	pop	{r7, pc}
 80081f6:	bf00      	nop
 80081f8:	20002270 	.word	0x20002270

080081fc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8008200:	4802      	ldr	r0, [pc, #8]	; (800820c <DMA1_Channel3_IRQHandler+0x10>)
 8008202:	f003 fc03 	bl	800ba0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008206:	bf00      	nop
 8008208:	bd80      	pop	{r7, pc}
 800820a:	bf00      	nop
 800820c:	20002a14 	.word	0x20002a14

08008210 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8008214:	f7f8 fdd4 	bl	8000dc0 <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8008218:	f7fd f8e8 	bl	80053ec <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800821c:	4803      	ldr	r0, [pc, #12]	; (800822c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 800821e:	f005 fbdb 	bl	800d9d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8008222:	4803      	ldr	r0, [pc, #12]	; (8008230 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8008224:	f005 fbd8 	bl	800d9d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20002c08 	.word	0x20002c08
 8008230:	20002b24 	.word	0x20002b24

08008234 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 8008238:	f7fb ff9c 	bl	8004174 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800823c:	4803      	ldr	r0, [pc, #12]	; (800824c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 800823e:	f005 fbcb 	bl	800d9d8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8008242:	4803      	ldr	r0, [pc, #12]	; (8008250 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8008244:	f005 fbc8 	bl	800d9d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8008248:	bf00      	nop
 800824a:	bd80      	pop	{r7, pc}
 800824c:	20002c08 	.word	0x20002c08
 8008250:	20002b70 	.word	0x20002b70

08008254 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008258:	4802      	ldr	r0, [pc, #8]	; (8008264 <TIM2_IRQHandler+0x10>)
 800825a:	f005 fbbd 	bl	800d9d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800825e:	bf00      	nop
 8008260:	bd80      	pop	{r7, pc}
 8008262:	bf00      	nop
 8008264:	20002c54 	.word	0x20002c54

08008268 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800826c:	4802      	ldr	r0, [pc, #8]	; (8008278 <TIM3_IRQHandler+0x10>)
 800826e:	f005 fbb3 	bl	800d9d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008272:	bf00      	nop
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	200022dc 	.word	0x200022dc

0800827c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8008280:	f7fc fff2 	bl	8005268 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8008284:	f7fd f818 	bl	80052b8 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8008288:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800828c:	f7ff ff0c 	bl	80080a8 <LL_EXTI_IsActiveFlag_0_31>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8008296:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800829a:	f7ff ff1b 	bl	80080d4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 800829e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80082a2:	f7ff ff01 	bl	80080a8 <LL_EXTI_IsActiveFlag_0_31>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d003      	beq.n	80082b4 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80082ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80082b0:	f7ff ff10 	bl	80080d4 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80082b4:	bf00      	nop
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 80082bc:	f7fc ff7c 	bl	80051b8 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80082c0:	4802      	ldr	r0, [pc, #8]	; (80082cc <TIM5_IRQHandler+0x14>)
 80082c2:	f005 fb89 	bl	800d9d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80082c6:	bf00      	nop
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20002bbc 	.word	0x20002bbc

080082d0 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80082d4:	4802      	ldr	r0, [pc, #8]	; (80082e0 <COMP1_2_3_IRQHandler+0x10>)
 80082d6:	f002 fc3b 	bl	800ab50 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 80082da:	bf00      	nop
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	200029c8 	.word	0x200029c8

080082e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
 80082f4:	e00a      	b.n	800830c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80082f6:	f3af 8000 	nop.w
 80082fa:	4601      	mov	r1, r0
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1c5a      	adds	r2, r3, #1
 8008300:	60ba      	str	r2, [r7, #8]
 8008302:	b2ca      	uxtb	r2, r1
 8008304:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	3301      	adds	r3, #1
 800830a:	617b      	str	r3, [r7, #20]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	429a      	cmp	r2, r3
 8008312:	dbf0      	blt.n	80082f6 <_read+0x12>
	}

return len;
 8008314:	687b      	ldr	r3, [r7, #4]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <_close>:
	}
	return len;
}

int _close(int file)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
	return -1;
 8008326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800832a:	4618      	mov	r0, r3
 800832c:	370c      	adds	r7, #12
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr

08008336 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008336:	b480      	push	{r7}
 8008338:	b083      	sub	sp, #12
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
 800833e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008346:	605a      	str	r2, [r3, #4]
	return 0;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	370c      	adds	r7, #12
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <_isatty>:

int _isatty(int file)
{
 8008356:	b480      	push	{r7}
 8008358:	b083      	sub	sp, #12
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
	return 1;
 800835e:	2301      	movs	r3, #1
}
 8008360:	4618      	mov	r0, r3
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800836c:	b480      	push	{r7}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
	return 0;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	3714      	adds	r7, #20
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
	...

08008388 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008390:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <_sbrk+0x50>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d102      	bne.n	800839e <_sbrk+0x16>
		heap_end = &end;
 8008398:	4b0f      	ldr	r3, [pc, #60]	; (80083d8 <_sbrk+0x50>)
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <_sbrk+0x54>)
 800839c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800839e:	4b0e      	ldr	r3, [pc, #56]	; (80083d8 <_sbrk+0x50>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <_sbrk+0x50>)
 80083a6:	681a      	ldr	r2, [r3, #0]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4413      	add	r3, r2
 80083ac:	466a      	mov	r2, sp
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d907      	bls.n	80083c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80083b2:	f008 f8cd 	bl	8010550 <__errno>
 80083b6:	4602      	mov	r2, r0
 80083b8:	230c      	movs	r3, #12
 80083ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80083bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80083c0:	e006      	b.n	80083d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <_sbrk+0x50>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4413      	add	r3, r2
 80083ca:	4a03      	ldr	r2, [pc, #12]	; (80083d8 <_sbrk+0x50>)
 80083cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80083ce:	68fb      	ldr	r3, [r7, #12]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	20002260 	.word	0x20002260
 80083dc:	20002cf8 	.word	0x20002cf8

080083e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80083e4:	4b08      	ldr	r3, [pc, #32]	; (8008408 <SystemInit+0x28>)
 80083e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ea:	4a07      	ldr	r2, [pc, #28]	; (8008408 <SystemInit+0x28>)
 80083ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80083f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80083f4:	4b04      	ldr	r3, [pc, #16]	; (8008408 <SystemInit+0x28>)
 80083f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80083fa:	609a      	str	r2, [r3, #8]
#endif
}
 80083fc:	bf00      	nop
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop
 8008408:	e000ed00 	.word	0xe000ed00

0800840c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b09a      	sub	sp, #104	; 0x68
 8008410:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8008412:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008416:	2224      	movs	r2, #36	; 0x24
 8008418:	2100      	movs	r1, #0
 800841a:	4618      	mov	r0, r3
 800841c:	f008 f8c2 	bl	80105a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008420:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]
 8008428:	605a      	str	r2, [r3, #4]
 800842a:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800842c:	1d3b      	adds	r3, r7, #4
 800842e:	2234      	movs	r2, #52	; 0x34
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f008 f8b6 	bl	80105a4 <memset>

  htim1.Instance = TIM1;
 8008438:	4b2a      	ldr	r3, [pc, #168]	; (80084e4 <MX_TIM1_Init+0xd8>)
 800843a:	4a2b      	ldr	r2, [pc, #172]	; (80084e8 <MX_TIM1_Init+0xdc>)
 800843c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800843e:	4b29      	ldr	r3, [pc, #164]	; (80084e4 <MX_TIM1_Init+0xd8>)
 8008440:	2200      	movs	r2, #0
 8008442:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8008444:	4b27      	ldr	r3, [pc, #156]	; (80084e4 <MX_TIM1_Init+0xd8>)
 8008446:	2260      	movs	r2, #96	; 0x60
 8008448:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800844a:	4b26      	ldr	r3, [pc, #152]	; (80084e4 <MX_TIM1_Init+0xd8>)
 800844c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008450:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008452:	4b24      	ldr	r3, [pc, #144]	; (80084e4 <MX_TIM1_Init+0xd8>)
 8008454:	2200      	movs	r2, #0
 8008456:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008458:	4b22      	ldr	r3, [pc, #136]	; (80084e4 <MX_TIM1_Init+0xd8>)
 800845a:	2200      	movs	r2, #0
 800845c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800845e:	4b21      	ldr	r3, [pc, #132]	; (80084e4 <MX_TIM1_Init+0xd8>)
 8008460:	2280      	movs	r2, #128	; 0x80
 8008462:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 8008464:	2302      	movs	r3, #2
 8008466:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8008468:	2300      	movs	r3, #0
 800846a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800846c:	2301      	movs	r3, #1
 800846e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008470:	2300      	movs	r3, #0
 8008472:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8008474:	2300      	movs	r3, #0
 8008476:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8008478:	2300      	movs	r3, #0
 800847a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800847c:	2301      	movs	r3, #1
 800847e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008480:	2300      	movs	r3, #0
 8008482:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8008484:	2300      	movs	r3, #0
 8008486:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8008488:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800848c:	4619      	mov	r1, r3
 800848e:	4815      	ldr	r0, [pc, #84]	; (80084e4 <MX_TIM1_Init+0xd8>)
 8008490:	f005 f9fc 	bl	800d88c <HAL_TIM_Encoder_Init>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d001      	beq.n	800849e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800849a:	f7ff fd11 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800849e:	2320      	movs	r3, #32
 80084a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80084a2:	2300      	movs	r3, #0
 80084a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084a6:	2300      	movs	r3, #0
 80084a8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80084aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084ae:	4619      	mov	r1, r3
 80084b0:	480c      	ldr	r0, [pc, #48]	; (80084e4 <MX_TIM1_Init+0xd8>)
 80084b2:	f006 fad7 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80084bc:	f7ff fd00 	bl	8007ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80084c0:	2300      	movs	r3, #0
 80084c2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80084c4:	2300      	movs	r3, #0
 80084c6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80084c8:	1d3b      	adds	r3, r7, #4
 80084ca:	4619      	mov	r1, r3
 80084cc:	4805      	ldr	r0, [pc, #20]	; (80084e4 <MX_TIM1_Init+0xd8>)
 80084ce:	f006 fb5f 	bl	800eb90 <HAL_TIMEx_ConfigBreakDeadTime>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80084d8:	f7ff fcf2 	bl	8007ec0 <Error_Handler>
  }

}
 80084dc:	bf00      	nop
 80084de:	3768      	adds	r7, #104	; 0x68
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	20002c08 	.word	0x20002c08
 80084e8:	40012c00 	.word	0x40012c00

080084ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b088      	sub	sp, #32
 80084f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80084f2:	f107 0310 	add.w	r3, r7, #16
 80084f6:	2200      	movs	r2, #0
 80084f8:	601a      	str	r2, [r3, #0]
 80084fa:	605a      	str	r2, [r3, #4]
 80084fc:	609a      	str	r2, [r3, #8]
 80084fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008500:	1d3b      	adds	r3, r7, #4
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800850a:	4b1d      	ldr	r3, [pc, #116]	; (8008580 <MX_TIM2_Init+0x94>)
 800850c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008510:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008512:	4b1b      	ldr	r3, [pc, #108]	; (8008580 <MX_TIM2_Init+0x94>)
 8008514:	2200      	movs	r2, #0
 8008516:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008518:	4b19      	ldr	r3, [pc, #100]	; (8008580 <MX_TIM2_Init+0x94>)
 800851a:	2200      	movs	r2, #0
 800851c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800851e:	4b18      	ldr	r3, [pc, #96]	; (8008580 <MX_TIM2_Init+0x94>)
 8008520:	2201      	movs	r2, #1
 8008522:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008524:	4b16      	ldr	r3, [pc, #88]	; (8008580 <MX_TIM2_Init+0x94>)
 8008526:	2200      	movs	r2, #0
 8008528:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800852a:	4b15      	ldr	r3, [pc, #84]	; (8008580 <MX_TIM2_Init+0x94>)
 800852c:	2280      	movs	r2, #128	; 0x80
 800852e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008530:	4813      	ldr	r0, [pc, #76]	; (8008580 <MX_TIM2_Init+0x94>)
 8008532:	f004 fec1 	bl	800d2b8 <HAL_TIM_Base_Init>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800853c:	f7ff fcc0 	bl	8007ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008544:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008546:	f107 0310 	add.w	r3, r7, #16
 800854a:	4619      	mov	r1, r3
 800854c:	480c      	ldr	r0, [pc, #48]	; (8008580 <MX_TIM2_Init+0x94>)
 800854e:	f005 fcd3 	bl	800def8 <HAL_TIM_ConfigClockSource>
 8008552:	4603      	mov	r3, r0
 8008554:	2b00      	cmp	r3, #0
 8008556:	d001      	beq.n	800855c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008558:	f7ff fcb2 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800855c:	2320      	movs	r3, #32
 800855e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008564:	1d3b      	adds	r3, r7, #4
 8008566:	4619      	mov	r1, r3
 8008568:	4805      	ldr	r0, [pc, #20]	; (8008580 <MX_TIM2_Init+0x94>)
 800856a:	f006 fa7b 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008574:	f7ff fca4 	bl	8007ec0 <Error_Handler>
  }

}
 8008578:	bf00      	nop
 800857a:	3720      	adds	r7, #32
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20002c54 	.word	0x20002c54

08008584 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800858a:	f107 0310 	add.w	r3, r7, #16
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]
 8008592:	605a      	str	r2, [r3, #4]
 8008594:	609a      	str	r2, [r3, #8]
 8008596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008598:	1d3b      	adds	r3, r7, #4
 800859a:	2200      	movs	r2, #0
 800859c:	601a      	str	r2, [r3, #0]
 800859e:	605a      	str	r2, [r3, #4]
 80085a0:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 80085a2:	4b1d      	ldr	r3, [pc, #116]	; (8008618 <MX_TIM3_Init+0x94>)
 80085a4:	4a1d      	ldr	r2, [pc, #116]	; (800861c <MX_TIM3_Init+0x98>)
 80085a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80085a8:	4b1b      	ldr	r3, [pc, #108]	; (8008618 <MX_TIM3_Init+0x94>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80085ae:	4b1a      	ldr	r3, [pc, #104]	; (8008618 <MX_TIM3_Init+0x94>)
 80085b0:	2210      	movs	r2, #16
 80085b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80085b4:	4b18      	ldr	r3, [pc, #96]	; (8008618 <MX_TIM3_Init+0x94>)
 80085b6:	2201      	movs	r2, #1
 80085b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80085ba:	4b17      	ldr	r3, [pc, #92]	; (8008618 <MX_TIM3_Init+0x94>)
 80085bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80085c2:	4b15      	ldr	r3, [pc, #84]	; (8008618 <MX_TIM3_Init+0x94>)
 80085c4:	2280      	movs	r2, #128	; 0x80
 80085c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80085c8:	4813      	ldr	r0, [pc, #76]	; (8008618 <MX_TIM3_Init+0x94>)
 80085ca:	f004 fe75 	bl	800d2b8 <HAL_TIM_Base_Init>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80085d4:	f7ff fc74 	bl	8007ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80085d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80085de:	f107 0310 	add.w	r3, r7, #16
 80085e2:	4619      	mov	r1, r3
 80085e4:	480c      	ldr	r0, [pc, #48]	; (8008618 <MX_TIM3_Init+0x94>)
 80085e6:	f005 fc87 	bl	800def8 <HAL_TIM_ConfigClockSource>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80085f0:	f7ff fc66 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80085f4:	2320      	movs	r3, #32
 80085f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80085fc:	1d3b      	adds	r3, r7, #4
 80085fe:	4619      	mov	r1, r3
 8008600:	4805      	ldr	r0, [pc, #20]	; (8008618 <MX_TIM3_Init+0x94>)
 8008602:	f006 fa2f 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	d001      	beq.n	8008610 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800860c:	f7ff fc58 	bl	8007ec0 <Error_Handler>
  }

}
 8008610:	bf00      	nop
 8008612:	3720      	adds	r7, #32
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	200022dc 	.word	0x200022dc
 800861c:	40000400 	.word	0x40000400

08008620 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008626:	f107 0310 	add.w	r3, r7, #16
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	605a      	str	r2, [r3, #4]
 8008630:	609a      	str	r2, [r3, #8]
 8008632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008634:	1d3b      	adds	r3, r7, #4
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	605a      	str	r2, [r3, #4]
 800863c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800863e:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <MX_TIM5_Init+0x94>)
 8008640:	4a1d      	ldr	r2, [pc, #116]	; (80086b8 <MX_TIM5_Init+0x98>)
 8008642:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008644:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <MX_TIM5_Init+0x94>)
 8008646:	2200      	movs	r2, #0
 8008648:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800864a:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <MX_TIM5_Init+0x94>)
 800864c:	2200      	movs	r2, #0
 800864e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008650:	4b18      	ldr	r3, [pc, #96]	; (80086b4 <MX_TIM5_Init+0x94>)
 8008652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008656:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008658:	4b16      	ldr	r3, [pc, #88]	; (80086b4 <MX_TIM5_Init+0x94>)
 800865a:	2200      	movs	r2, #0
 800865c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800865e:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <MX_TIM5_Init+0x94>)
 8008660:	2200      	movs	r2, #0
 8008662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008664:	4813      	ldr	r0, [pc, #76]	; (80086b4 <MX_TIM5_Init+0x94>)
 8008666:	f004 fe27 	bl	800d2b8 <HAL_TIM_Base_Init>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8008670:	f7ff fc26 	bl	8007ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008678:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800867a:	f107 0310 	add.w	r3, r7, #16
 800867e:	4619      	mov	r1, r3
 8008680:	480c      	ldr	r0, [pc, #48]	; (80086b4 <MX_TIM5_Init+0x94>)
 8008682:	f005 fc39 	bl	800def8 <HAL_TIM_ConfigClockSource>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800868c:	f7ff fc18 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008690:	2300      	movs	r3, #0
 8008692:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008698:	1d3b      	adds	r3, r7, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4805      	ldr	r0, [pc, #20]	; (80086b4 <MX_TIM5_Init+0x94>)
 800869e:	f006 f9e1 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80086a8:	f7ff fc0a 	bl	8007ec0 <Error_Handler>
  }

}
 80086ac:	bf00      	nop
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20002bbc 	.word	0x20002bbc
 80086b8:	40000c00 	.word	0x40000c00

080086bc <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b094      	sub	sp, #80	; 0x50
 80086c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80086c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	609a      	str	r2, [r3, #8]
 80086ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80086d4:	2200      	movs	r2, #0
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	605a      	str	r2, [r3, #4]
 80086da:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80086dc:	463b      	mov	r3, r7
 80086de:	2234      	movs	r2, #52	; 0x34
 80086e0:	2100      	movs	r1, #0
 80086e2:	4618      	mov	r0, r3
 80086e4:	f007 ff5e 	bl	80105a4 <memset>

  htim8.Instance = TIM8;
 80086e8:	4b26      	ldr	r3, [pc, #152]	; (8008784 <MX_TIM8_Init+0xc8>)
 80086ea:	4a27      	ldr	r2, [pc, #156]	; (8008788 <MX_TIM8_Init+0xcc>)
 80086ec:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80086ee:	4b25      	ldr	r3, [pc, #148]	; (8008784 <MX_TIM8_Init+0xc8>)
 80086f0:	2200      	movs	r2, #0
 80086f2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086f4:	4b23      	ldr	r3, [pc, #140]	; (8008784 <MX_TIM8_Init+0xc8>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80086fa:	4b22      	ldr	r3, [pc, #136]	; (8008784 <MX_TIM8_Init+0xc8>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008700:	4b20      	ldr	r3, [pc, #128]	; (8008784 <MX_TIM8_Init+0xc8>)
 8008702:	2200      	movs	r2, #0
 8008704:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008706:	4b1f      	ldr	r3, [pc, #124]	; (8008784 <MX_TIM8_Init+0xc8>)
 8008708:	2200      	movs	r2, #0
 800870a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800870c:	4b1d      	ldr	r3, [pc, #116]	; (8008784 <MX_TIM8_Init+0xc8>)
 800870e:	2280      	movs	r2, #128	; 0x80
 8008710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008712:	481c      	ldr	r0, [pc, #112]	; (8008784 <MX_TIM8_Init+0xc8>)
 8008714:	f004 fdd0 	bl	800d2b8 <HAL_TIM_Base_Init>
 8008718:	4603      	mov	r3, r0
 800871a:	2b00      	cmp	r3, #0
 800871c:	d001      	beq.n	8008722 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800871e:	f7ff fbcf 	bl	8007ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008726:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008728:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800872c:	4619      	mov	r1, r3
 800872e:	4815      	ldr	r0, [pc, #84]	; (8008784 <MX_TIM8_Init+0xc8>)
 8008730:	f005 fbe2 	bl	800def8 <HAL_TIM_ConfigClockSource>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d001      	beq.n	800873e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800873a:	f7ff fbc1 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800873e:	2320      	movs	r3, #32
 8008740:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8008742:	2300      	movs	r3, #0
 8008744:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008746:	2300      	movs	r3, #0
 8008748:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800874a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800874e:	4619      	mov	r1, r3
 8008750:	480c      	ldr	r0, [pc, #48]	; (8008784 <MX_TIM8_Init+0xc8>)
 8008752:	f006 f987 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d001      	beq.n	8008760 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 800875c:	f7ff fbb0 	bl	8007ec0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008760:	2300      	movs	r3, #0
 8008762:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008764:	2300      	movs	r3, #0
 8008766:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008768:	463b      	mov	r3, r7
 800876a:	4619      	mov	r1, r3
 800876c:	4805      	ldr	r0, [pc, #20]	; (8008784 <MX_TIM8_Init+0xc8>)
 800876e:	f006 fa0f 	bl	800eb90 <HAL_TIMEx_ConfigBreakDeadTime>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d001      	beq.n	800877c <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008778:	f7ff fba2 	bl	8007ec0 <Error_Handler>
  }

}
 800877c:	bf00      	nop
 800877e:	3750      	adds	r7, #80	; 0x50
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	20002ad8 	.word	0x20002ad8
 8008788:	40013400 	.word	0x40013400

0800878c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b088      	sub	sp, #32
 8008790:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008792:	f107 0310 	add.w	r3, r7, #16
 8008796:	2200      	movs	r2, #0
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	605a      	str	r2, [r3, #4]
 800879c:	609a      	str	r2, [r3, #8]
 800879e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80087a0:	1d3b      	adds	r3, r7, #4
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]
 80087a6:	605a      	str	r2, [r3, #4]
 80087a8:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80087aa:	4b1f      	ldr	r3, [pc, #124]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087ac:	4a1f      	ldr	r2, [pc, #124]	; (800882c <MX_TIM15_Init+0xa0>)
 80087ae:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80087b0:	4b1d      	ldr	r3, [pc, #116]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087b6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80087b8:	4b1b      	ldr	r3, [pc, #108]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087ba:	2200      	movs	r2, #0
 80087bc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80087be:	4b1a      	ldr	r3, [pc, #104]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087c4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80087c6:	4b18      	ldr	r3, [pc, #96]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80087cc:	4b16      	ldr	r3, [pc, #88]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80087d2:	4b15      	ldr	r3, [pc, #84]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80087d8:	4813      	ldr	r0, [pc, #76]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087da:	f004 fd6d 	bl	800d2b8 <HAL_TIM_Base_Init>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80087e4:	f7ff fb6c 	bl	8007ec0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80087ee:	f107 0310 	add.w	r3, r7, #16
 80087f2:	4619      	mov	r1, r3
 80087f4:	480c      	ldr	r0, [pc, #48]	; (8008828 <MX_TIM15_Init+0x9c>)
 80087f6:	f005 fb7f 	bl	800def8 <HAL_TIM_ConfigClockSource>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d001      	beq.n	8008804 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008800:	f7ff fb5e 	bl	8007ec0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008804:	2300      	movs	r3, #0
 8008806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008808:	2300      	movs	r3, #0
 800880a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800880c:	1d3b      	adds	r3, r7, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4805      	ldr	r0, [pc, #20]	; (8008828 <MX_TIM15_Init+0x9c>)
 8008812:	f006 f927 	bl	800ea64 <HAL_TIMEx_MasterConfigSynchronization>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 800881c:	f7ff fb50 	bl	8007ec0 <Error_Handler>
  }

}
 8008820:	bf00      	nop
 8008822:	3720      	adds	r7, #32
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20002b24 	.word	0x20002b24
 800882c:	40014000 	.word	0x40014000

08008830 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8008834:	4b10      	ldr	r3, [pc, #64]	; (8008878 <MX_TIM16_Init+0x48>)
 8008836:	4a11      	ldr	r2, [pc, #68]	; (800887c <MX_TIM16_Init+0x4c>)
 8008838:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 800883a:	4b0f      	ldr	r3, [pc, #60]	; (8008878 <MX_TIM16_Init+0x48>)
 800883c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008840:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008842:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <MX_TIM16_Init+0x48>)
 8008844:	2200      	movs	r2, #0
 8008846:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008848:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <MX_TIM16_Init+0x48>)
 800884a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800884e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008850:	4b09      	ldr	r3, [pc, #36]	; (8008878 <MX_TIM16_Init+0x48>)
 8008852:	2200      	movs	r2, #0
 8008854:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8008856:	4b08      	ldr	r3, [pc, #32]	; (8008878 <MX_TIM16_Init+0x48>)
 8008858:	2200      	movs	r2, #0
 800885a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800885c:	4b06      	ldr	r3, [pc, #24]	; (8008878 <MX_TIM16_Init+0x48>)
 800885e:	2200      	movs	r2, #0
 8008860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8008862:	4805      	ldr	r0, [pc, #20]	; (8008878 <MX_TIM16_Init+0x48>)
 8008864:	f004 fd28 	bl	800d2b8 <HAL_TIM_Base_Init>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 800886e:	f7ff fb27 	bl	8007ec0 <Error_Handler>
  }

}
 8008872:	bf00      	nop
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20002ca0 	.word	0x20002ca0
 800887c:	40014400 	.word	0x40014400

08008880 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8008884:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <MX_TIM17_Init+0x48>)
 8008886:	4a11      	ldr	r2, [pc, #68]	; (80088cc <MX_TIM17_Init+0x4c>)
 8008888:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 800888a:	4b0f      	ldr	r3, [pc, #60]	; (80088c8 <MX_TIM17_Init+0x48>)
 800888c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008890:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <MX_TIM17_Init+0x48>)
 8008894:	2200      	movs	r2, #0
 8008896:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 8008898:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <MX_TIM17_Init+0x48>)
 800889a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800889e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088a0:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <MX_TIM17_Init+0x48>)
 80088a2:	2200      	movs	r2, #0
 80088a4:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80088a6:	4b08      	ldr	r3, [pc, #32]	; (80088c8 <MX_TIM17_Init+0x48>)
 80088a8:	2200      	movs	r2, #0
 80088aa:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <MX_TIM17_Init+0x48>)
 80088ae:	2200      	movs	r2, #0
 80088b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80088b2:	4805      	ldr	r0, [pc, #20]	; (80088c8 <MX_TIM17_Init+0x48>)
 80088b4:	f004 fd00 	bl	800d2b8 <HAL_TIM_Base_Init>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d001      	beq.n	80088c2 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80088be:	f7ff faff 	bl	8007ec0 <Error_Handler>
  }

}
 80088c2:	bf00      	nop
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	20002b70 	.word	0x20002b70
 80088cc:	40014800 	.word	0x40014800

080088d0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b08a      	sub	sp, #40	; 0x28
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d8:	f107 0314 	add.w	r3, r7, #20
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	609a      	str	r2, [r3, #8]
 80088e4:	60da      	str	r2, [r3, #12]
 80088e6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1f      	ldr	r2, [pc, #124]	; (800896c <HAL_TIM_Encoder_MspInit+0x9c>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d137      	bne.n	8008962 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80088f2:	4b1f      	ldr	r3, [pc, #124]	; (8008970 <HAL_TIM_Encoder_MspInit+0xa0>)
 80088f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088f6:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <HAL_TIM_Encoder_MspInit+0xa0>)
 80088f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80088fc:	6613      	str	r3, [r2, #96]	; 0x60
 80088fe:	4b1c      	ldr	r3, [pc, #112]	; (8008970 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008902:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008906:	613b      	str	r3, [r7, #16]
 8008908:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800890a:	4b19      	ldr	r3, [pc, #100]	; (8008970 <HAL_TIM_Encoder_MspInit+0xa0>)
 800890c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800890e:	4a18      	ldr	r2, [pc, #96]	; (8008970 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008910:	f043 0304 	orr.w	r3, r3, #4
 8008914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008916:	4b16      	ldr	r3, [pc, #88]	; (8008970 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800891a:	f003 0304 	and.w	r3, r3, #4
 800891e:	60fb      	str	r3, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008922:	2303      	movs	r3, #3
 8008924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008926:	2302      	movs	r3, #2
 8008928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800892a:	2300      	movs	r3, #0
 800892c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800892e:	2300      	movs	r3, #0
 8008930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008932:	2302      	movs	r3, #2
 8008934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008936:	f107 0314 	add.w	r3, r7, #20
 800893a:	4619      	mov	r1, r3
 800893c:	480d      	ldr	r0, [pc, #52]	; (8008974 <HAL_TIM_Encoder_MspInit+0xa4>)
 800893e:	f003 f9b5 	bl	800bcac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008942:	2200      	movs	r2, #0
 8008944:	2100      	movs	r1, #0
 8008946:	2018      	movs	r0, #24
 8008948:	f002 fa83 	bl	800ae52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800894c:	2018      	movs	r0, #24
 800894e:	f002 fa9a 	bl	800ae86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008952:	2200      	movs	r2, #0
 8008954:	2101      	movs	r1, #1
 8008956:	201a      	movs	r0, #26
 8008958:	f002 fa7b 	bl	800ae52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800895c:	201a      	movs	r0, #26
 800895e:	f002 fa92 	bl	800ae86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008962:	bf00      	nop
 8008964:	3728      	adds	r7, #40	; 0x28
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}
 800896a:	bf00      	nop
 800896c:	40012c00 	.word	0x40012c00
 8008970:	40021000 	.word	0x40021000
 8008974:	48000800 	.word	0x48000800

08008978 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008988:	d114      	bne.n	80089b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800898a:	4b52      	ldr	r3, [pc, #328]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 800898c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800898e:	4a51      	ldr	r2, [pc, #324]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008990:	f043 0301 	orr.w	r3, r3, #1
 8008994:	6593      	str	r3, [r2, #88]	; 0x58
 8008996:	4b4f      	ldr	r3, [pc, #316]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	627b      	str	r3, [r7, #36]	; 0x24
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80089a2:	2200      	movs	r2, #0
 80089a4:	2100      	movs	r1, #0
 80089a6:	201c      	movs	r0, #28
 80089a8:	f002 fa53 	bl	800ae52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80089ac:	201c      	movs	r0, #28
 80089ae:	f002 fa6a 	bl	800ae86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80089b2:	e08a      	b.n	8008aca <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM3)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	4a47      	ldr	r2, [pc, #284]	; (8008ad8 <HAL_TIM_Base_MspInit+0x160>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d114      	bne.n	80089e8 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80089be:	4b45      	ldr	r3, [pc, #276]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	4a44      	ldr	r2, [pc, #272]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 80089c4:	f043 0302 	orr.w	r3, r3, #2
 80089c8:	6593      	str	r3, [r2, #88]	; 0x58
 80089ca:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 80089cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089ce:	f003 0302 	and.w	r3, r3, #2
 80089d2:	623b      	str	r3, [r7, #32]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80089d6:	2200      	movs	r2, #0
 80089d8:	2100      	movs	r1, #0
 80089da:	201d      	movs	r0, #29
 80089dc:	f002 fa39 	bl	800ae52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80089e0:	201d      	movs	r0, #29
 80089e2:	f002 fa50 	bl	800ae86 <HAL_NVIC_EnableIRQ>
}
 80089e6:	e070      	b.n	8008aca <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM5)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a3b      	ldr	r2, [pc, #236]	; (8008adc <HAL_TIM_Base_MspInit+0x164>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d114      	bne.n	8008a1c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80089f2:	4b38      	ldr	r3, [pc, #224]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 80089f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089f6:	4a37      	ldr	r2, [pc, #220]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 80089f8:	f043 0308 	orr.w	r3, r3, #8
 80089fc:	6593      	str	r3, [r2, #88]	; 0x58
 80089fe:	4b35      	ldr	r3, [pc, #212]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a02:	f003 0308 	and.w	r3, r3, #8
 8008a06:	61fb      	str	r3, [r7, #28]
 8008a08:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	2102      	movs	r1, #2
 8008a0e:	2032      	movs	r0, #50	; 0x32
 8008a10:	f002 fa1f 	bl	800ae52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008a14:	2032      	movs	r0, #50	; 0x32
 8008a16:	f002 fa36 	bl	800ae86 <HAL_NVIC_EnableIRQ>
}
 8008a1a:	e056      	b.n	8008aca <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM8)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a2f      	ldr	r2, [pc, #188]	; (8008ae0 <HAL_TIM_Base_MspInit+0x168>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d10c      	bne.n	8008a40 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008a26:	4b2b      	ldr	r3, [pc, #172]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2a:	4a2a      	ldr	r2, [pc, #168]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008a30:	6613      	str	r3, [r2, #96]	; 0x60
 8008a32:	4b28      	ldr	r3, [pc, #160]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a3a:	61bb      	str	r3, [r7, #24]
 8008a3c:	69bb      	ldr	r3, [r7, #24]
}
 8008a3e:	e044      	b.n	8008aca <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM15)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a27      	ldr	r2, [pc, #156]	; (8008ae4 <HAL_TIM_Base_MspInit+0x16c>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d114      	bne.n	8008a74 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008a4a:	4b22      	ldr	r3, [pc, #136]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4e:	4a21      	ldr	r2, [pc, #132]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a54:	6613      	str	r3, [r2, #96]	; 0x60
 8008a56:	4b1f      	ldr	r3, [pc, #124]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008a62:	2200      	movs	r2, #0
 8008a64:	2100      	movs	r1, #0
 8008a66:	2018      	movs	r0, #24
 8008a68:	f002 f9f3 	bl	800ae52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008a6c:	2018      	movs	r0, #24
 8008a6e:	f002 fa0a 	bl	800ae86 <HAL_NVIC_EnableIRQ>
}
 8008a72:	e02a      	b.n	8008aca <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM16)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a1b      	ldr	r2, [pc, #108]	; (8008ae8 <HAL_TIM_Base_MspInit+0x170>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d10c      	bne.n	8008a98 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008a7e:	4b15      	ldr	r3, [pc, #84]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a82:	4a14      	ldr	r2, [pc, #80]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a88:	6613      	str	r3, [r2, #96]	; 0x60
 8008a8a:	4b12      	ldr	r3, [pc, #72]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	693b      	ldr	r3, [r7, #16]
}
 8008a96:	e018      	b.n	8008aca <HAL_TIM_Base_MspInit+0x152>
  else if(tim_baseHandle->Instance==TIM17)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a13      	ldr	r2, [pc, #76]	; (8008aec <HAL_TIM_Base_MspInit+0x174>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d113      	bne.n	8008aca <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008aa2:	4b0c      	ldr	r3, [pc, #48]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa6:	4a0b      	ldr	r2, [pc, #44]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008aac:	6613      	str	r3, [r2, #96]	; 0x60
 8008aae:	4b09      	ldr	r3, [pc, #36]	; (8008ad4 <HAL_TIM_Base_MspInit+0x15c>)
 8008ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008aba:	2200      	movs	r2, #0
 8008abc:	2101      	movs	r1, #1
 8008abe:	201a      	movs	r0, #26
 8008ac0:	f002 f9c7 	bl	800ae52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008ac4:	201a      	movs	r0, #26
 8008ac6:	f002 f9de 	bl	800ae86 <HAL_NVIC_EnableIRQ>
}
 8008aca:	bf00      	nop
 8008acc:	3728      	adds	r7, #40	; 0x28
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	40021000 	.word	0x40021000
 8008ad8:	40000400 	.word	0x40000400
 8008adc:	40000c00 	.word	0x40000c00
 8008ae0:	40013400 	.word	0x40013400
 8008ae4:	40014000 	.word	0x40014000
 8008ae8:	40014400 	.word	0x40014400
 8008aec:	40014800 	.word	0x40014800

08008af0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008af0:	480d      	ldr	r0, [pc, #52]	; (8008b28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008af2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008af4:	480d      	ldr	r0, [pc, #52]	; (8008b2c <LoopForever+0x6>)
  ldr r1, =_edata
 8008af6:	490e      	ldr	r1, [pc, #56]	; (8008b30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008af8:	4a0e      	ldr	r2, [pc, #56]	; (8008b34 <LoopForever+0xe>)
  movs r3, #0
 8008afa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008afc:	e002      	b.n	8008b04 <LoopCopyDataInit>

08008afe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008afe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008b00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008b02:	3304      	adds	r3, #4

08008b04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008b04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008b06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008b08:	d3f9      	bcc.n	8008afe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008b0a:	4a0b      	ldr	r2, [pc, #44]	; (8008b38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008b0c:	4c0b      	ldr	r4, [pc, #44]	; (8008b3c <LoopForever+0x16>)
  movs r3, #0
 8008b0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b10:	e001      	b.n	8008b16 <LoopFillZerobss>

08008b12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b14:	3204      	adds	r2, #4

08008b16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b18:	d3fb      	bcc.n	8008b12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008b1a:	f7ff fc61 	bl	80083e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008b1e:	f007 fd1d 	bl	801055c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008b22:	f7ff f90d 	bl	8007d40 <main>

08008b26 <LoopForever>:

LoopForever:
    b LoopForever
 8008b26:	e7fe      	b.n	8008b26 <LoopForever>
  ldr   r0, =_estack
 8008b28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008b2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b30:	20001e0c 	.word	0x20001e0c
  ldr r2, =_sidata
 8008b34:	08015ad0 	.word	0x08015ad0
  ldr r2, =_sbss
 8008b38:	20001e0c 	.word	0x20001e0c
  ldr r4, =_ebss
 8008b3c:	20002cf4 	.word	0x20002cf4

08008b40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008b40:	e7fe      	b.n	8008b40 <ADC1_2_IRQHandler>

08008b42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008b4c:	2003      	movs	r0, #3
 8008b4e:	f002 f975 	bl	800ae3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008b52:	2000      	movs	r0, #0
 8008b54:	f000 f80e 	bl	8008b74 <HAL_InitTick>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	71fb      	strb	r3, [r7, #7]
 8008b62:	e001      	b.n	8008b68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008b64:	f7ff fa7c 	bl	8008060 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008b68:	79fb      	ldrb	r3, [r7, #7]

}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008b80:	4b16      	ldr	r3, [pc, #88]	; (8008bdc <HAL_InitTick+0x68>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d022      	beq.n	8008bce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008b88:	4b15      	ldr	r3, [pc, #84]	; (8008be0 <HAL_InitTick+0x6c>)
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	4b13      	ldr	r3, [pc, #76]	; (8008bdc <HAL_InitTick+0x68>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f002 f98e 	bl	800aebe <HAL_SYSTICK_Config>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d10f      	bne.n	8008bc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b0f      	cmp	r3, #15
 8008bac:	d809      	bhi.n	8008bc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008bae:	2200      	movs	r2, #0
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bb6:	f002 f94c 	bl	800ae52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008bba:	4a0a      	ldr	r2, [pc, #40]	; (8008be4 <HAL_InitTick+0x70>)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6013      	str	r3, [r2, #0]
 8008bc0:	e007      	b.n	8008bd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	73fb      	strb	r3, [r7, #15]
 8008bc6:	e004      	b.n	8008bd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	73fb      	strb	r3, [r7, #15]
 8008bcc:	e001      	b.n	8008bd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3710      	adds	r7, #16
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}
 8008bdc:	20000c3c 	.word	0x20000c3c
 8008be0:	20000c34 	.word	0x20000c34
 8008be4:	20000c38 	.word	0x20000c38

08008be8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008bec:	4b05      	ldr	r3, [pc, #20]	; (8008c04 <HAL_IncTick+0x1c>)
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	4b05      	ldr	r3, [pc, #20]	; (8008c08 <HAL_IncTick+0x20>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4a03      	ldr	r2, [pc, #12]	; (8008c04 <HAL_IncTick+0x1c>)
 8008bf8:	6013      	str	r3, [r2, #0]
}
 8008bfa:	bf00      	nop
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	20002cec 	.word	0x20002cec
 8008c08:	20000c3c 	.word	0x20000c3c

08008c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8008c10:	4b03      	ldr	r3, [pc, #12]	; (8008c20 <HAL_GetTick+0x14>)
 8008c12:	681b      	ldr	r3, [r3, #0]
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	20002cec 	.word	0x20002cec

08008c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c2c:	f7ff ffee 	bl	8008c0c <HAL_GetTick>
 8008c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c3c:	d004      	beq.n	8008c48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <HAL_Delay+0x40>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	4413      	add	r3, r2
 8008c46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008c48:	bf00      	nop
 8008c4a:	f7ff ffdf 	bl	8008c0c <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	68fa      	ldr	r2, [r7, #12]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d8f7      	bhi.n	8008c4a <HAL_Delay+0x26>
  {
  }
}
 8008c5a:	bf00      	nop
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000c3c 	.word	0x20000c3c

08008c68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	609a      	str	r2, [r3, #8]
}
 8008c82:	bf00      	nop
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	609a      	str	r2, [r3, #8]
}
 8008ca8:	bf00      	nop
 8008caa:	370c      	adds	r7, #12
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b083      	sub	sp, #12
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008cd0:	b490      	push	{r4, r7}
 8008cd2:	b084      	sub	sp, #16
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	3360      	adds	r3, #96	; 0x60
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008cec:	6822      	ldr	r2, [r4, #0]
 8008cee:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <LL_ADC_SetOffset+0x40>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	687a      	ldr	r2, [r7, #4]
 8008cf4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008cf8:	683a      	ldr	r2, [r7, #0]
 8008cfa:	430a      	orrs	r2, r1
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008d02:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bc90      	pop	{r4, r7}
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	03fff000 	.word	0x03fff000

08008d14 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008d14:	b490      	push	{r4, r7}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3360      	adds	r3, #96	; 0x60
 8008d22:	461a      	mov	r2, r3
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	009b      	lsls	r3, r3, #2
 8008d28:	4413      	add	r3, r2
 8008d2a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008d2c:	6823      	ldr	r3, [r4, #0]
 8008d2e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bc90      	pop	{r4, r7}
 8008d3a:	4770      	bx	lr

08008d3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008d3c:	b490      	push	{r4, r7}
 8008d3e:	b084      	sub	sp, #16
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3360      	adds	r3, #96	; 0x60
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008d62:	bf00      	nop
 8008d64:	3710      	adds	r7, #16
 8008d66:	46bd      	mov	sp, r7
 8008d68:	bc90      	pop	{r4, r7}
 8008d6a:	4770      	bx	lr

08008d6c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008d6c:	b490      	push	{r4, r7}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	3360      	adds	r3, #96	; 0x60
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008d86:	6823      	ldr	r3, [r4, #0]
 8008d88:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008d92:	bf00      	nop
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bc90      	pop	{r4, r7}
 8008d9a:	4770      	bx	lr

08008d9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008d9c:	b490      	push	{r4, r7}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3360      	adds	r3, #96	; 0x60
 8008dac:	461a      	mov	r2, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	4413      	add	r3, r2
 8008db4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008dc2:	bf00      	nop
 8008dc4:	3710      	adds	r7, #16
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bc90      	pop	{r4, r7}
 8008dca:	4770      	bx	lr

08008dcc <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b083      	sub	sp, #12
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	431a      	orrs	r2, r3
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	615a      	str	r2, [r3, #20]
}
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d101      	bne.n	8008e0a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e000      	b.n	8008e0c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008e18:	b490      	push	{r4, r7}
 8008e1a:	b084      	sub	sp, #16
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3330      	adds	r3, #48	; 0x30
 8008e28:	461a      	mov	r2, r3
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	0a1b      	lsrs	r3, r3, #8
 8008e2e:	009b      	lsls	r3, r3, #2
 8008e30:	f003 030c 	and.w	r3, r3, #12
 8008e34:	4413      	add	r3, r2
 8008e36:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f003 031f 	and.w	r3, r3, #31
 8008e40:	211f      	movs	r1, #31
 8008e42:	fa01 f303 	lsl.w	r3, r1, r3
 8008e46:	43db      	mvns	r3, r3
 8008e48:	401a      	ands	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	0e9b      	lsrs	r3, r3, #26
 8008e4e:	f003 011f 	and.w	r1, r3, #31
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	f003 031f 	and.w	r3, r3, #31
 8008e58:	fa01 f303 	lsl.w	r3, r1, r3
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8008e60:	bf00      	nop
 8008e62:	3710      	adds	r7, #16
 8008e64:	46bd      	mov	sp, r7
 8008e66:	bc90      	pop	{r4, r7}
 8008e68:	4770      	bx	lr

08008e6a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008e6a:	b490      	push	{r4, r7}
 8008e6c:	b084      	sub	sp, #16
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	60f8      	str	r0, [r7, #12]
 8008e72:	60b9      	str	r1, [r7, #8]
 8008e74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3314      	adds	r3, #20
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	0e5b      	lsrs	r3, r3, #25
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	f003 0304 	and.w	r3, r3, #4
 8008e86:	4413      	add	r3, r2
 8008e88:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008e8a:	6822      	ldr	r2, [r4, #0]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	0d1b      	lsrs	r3, r3, #20
 8008e90:	f003 031f 	and.w	r3, r3, #31
 8008e94:	2107      	movs	r1, #7
 8008e96:	fa01 f303 	lsl.w	r3, r1, r3
 8008e9a:	43db      	mvns	r3, r3
 8008e9c:	401a      	ands	r2, r3
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	0d1b      	lsrs	r3, r3, #20
 8008ea2:	f003 031f 	and.w	r3, r3, #31
 8008ea6:	6879      	ldr	r1, [r7, #4]
 8008ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8008eac:	4313      	orrs	r3, r2
 8008eae:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008eb0:	bf00      	nop
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bc90      	pop	{r4, r7}
 8008eb8:	4770      	bx	lr
	...

08008ebc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	60f8      	str	r0, [r7, #12]
 8008ec4:	60b9      	str	r1, [r7, #8]
 8008ec6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ed4:	43db      	mvns	r3, r3
 8008ed6:	401a      	ands	r2, r3
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f003 0318 	and.w	r3, r3, #24
 8008ede:	4908      	ldr	r1, [pc, #32]	; (8008f00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008ee0:	40d9      	lsrs	r1, r3
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	400b      	ands	r3, r1
 8008ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eea:	431a      	orrs	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	0007ffff 	.word	0x0007ffff

08008f04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f003 031f 	and.w	r3, r3, #31
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	370c      	adds	r7, #12
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	6093      	str	r3, [r2, #8]
}
 8008f38:	bf00      	nop
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f58:	d101      	bne.n	8008f5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e000      	b.n	8008f60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8008f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8008f88:	bf00      	nop
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	689b      	ldr	r3, [r3, #8]
 8008fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fa8:	d101      	bne.n	8008fae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8008faa:	2301      	movs	r3, #1
 8008fac:	e000      	b.n	8008fb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8008fae:	2300      	movs	r3, #0
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr

08008fbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b083      	sub	sp, #12
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008fd0:	f043 0201 	orr.w	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008ff8:	f043 0202 	orr.w	r2, r3, #2
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009000:	bf00      	nop
 8009002:	370c      	adds	r7, #12
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr

0800900c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	f003 0301 	and.w	r3, r3, #1
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <LL_ADC_IsEnabled+0x18>
 8009020:	2301      	movs	r3, #1
 8009022:	e000      	b.n	8009026 <LL_ADC_IsEnabled+0x1a>
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8009032:	b480      	push	{r7}
 8009034:	b083      	sub	sp, #12
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	f003 0302 	and.w	r3, r3, #2
 8009042:	2b02      	cmp	r3, #2
 8009044:	d101      	bne.n	800904a <LL_ADC_IsDisableOngoing+0x18>
 8009046:	2301      	movs	r3, #1
 8009048:	e000      	b.n	800904c <LL_ADC_IsDisableOngoing+0x1a>
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800906c:	f043 0204 	orr.w	r2, r3, #4
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009090:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009094:	f043 0210 	orr.w	r2, r3, #16
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f003 0304 	and.w	r3, r3, #4
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d101      	bne.n	80090c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80090bc:	2301      	movs	r3, #1
 80090be:	e000      	b.n	80090c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80090c0:	2300      	movs	r3, #0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80090de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80090e2:	f043 0220 	orr.w	r2, r3, #32
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr

080090f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b083      	sub	sp, #12
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b08      	cmp	r3, #8
 8009108:	d101      	bne.n	800910e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800910a:	2301      	movs	r3, #1
 800910c:	e000      	b.n	8009110 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800911c:	b590      	push	{r4, r7, lr}
 800911e:	b089      	sub	sp, #36	; 0x24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009124:	2300      	movs	r3, #0
 8009126:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009128:	2300      	movs	r3, #0
 800912a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e1ad      	b.n	8009492 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d109      	bne.n	8009158 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fe f84f 	bl	80071e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2200      	movs	r2, #0
 8009154:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	f7ff fef1 	bl	8008f44 <LL_ADC_IsDeepPowerDownEnabled>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d004      	beq.n	8009172 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff fed7 	bl	8008f20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff ff0c 	bl	8008f94 <LL_ADC_IsInternalRegulatorEnabled>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d113      	bne.n	80091aa <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff fef0 	bl	8008f6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800918c:	4b9e      	ldr	r3, [pc, #632]	; (8009408 <HAL_ADC_Init+0x2ec>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	099b      	lsrs	r3, r3, #6
 8009192:	4a9e      	ldr	r2, [pc, #632]	; (800940c <HAL_ADC_Init+0x2f0>)
 8009194:	fba2 2303 	umull	r2, r3, r2, r3
 8009198:	099b      	lsrs	r3, r3, #6
 800919a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800919c:	e002      	b.n	80091a4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	3b01      	subs	r3, #1
 80091a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1f9      	bne.n	800919e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7ff fef0 	bl	8008f94 <LL_ADC_IsInternalRegulatorEnabled>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d10d      	bne.n	80091d6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091be:	f043 0210 	orr.w	r2, r3, #16
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091ca:	f043 0201 	orr.w	r2, r3, #1
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7ff ff64 	bl	80090a8 <LL_ADC_REG_IsConversionOngoing>
 80091e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e6:	f003 0310 	and.w	r3, r3, #16
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	f040 8148 	bne.w	8009480 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	f040 8144 	bne.w	8009480 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009200:	f043 0202 	orr.w	r2, r3, #2
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f7ff fefd 	bl	800900c <LL_ADC_IsEnabled>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d141      	bne.n	800929c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009220:	d004      	beq.n	800922c <HAL_ADC_Init+0x110>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	4a7a      	ldr	r2, [pc, #488]	; (8009410 <HAL_ADC_Init+0x2f4>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d10f      	bne.n	800924c <HAL_ADC_Init+0x130>
 800922c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009230:	f7ff feec 	bl	800900c <LL_ADC_IsEnabled>
 8009234:	4604      	mov	r4, r0
 8009236:	4876      	ldr	r0, [pc, #472]	; (8009410 <HAL_ADC_Init+0x2f4>)
 8009238:	f7ff fee8 	bl	800900c <LL_ADC_IsEnabled>
 800923c:	4603      	mov	r3, r0
 800923e:	4323      	orrs	r3, r4
 8009240:	2b00      	cmp	r3, #0
 8009242:	bf0c      	ite	eq
 8009244:	2301      	moveq	r3, #1
 8009246:	2300      	movne	r3, #0
 8009248:	b2db      	uxtb	r3, r3
 800924a:	e012      	b.n	8009272 <HAL_ADC_Init+0x156>
 800924c:	4871      	ldr	r0, [pc, #452]	; (8009414 <HAL_ADC_Init+0x2f8>)
 800924e:	f7ff fedd 	bl	800900c <LL_ADC_IsEnabled>
 8009252:	4604      	mov	r4, r0
 8009254:	4870      	ldr	r0, [pc, #448]	; (8009418 <HAL_ADC_Init+0x2fc>)
 8009256:	f7ff fed9 	bl	800900c <LL_ADC_IsEnabled>
 800925a:	4603      	mov	r3, r0
 800925c:	431c      	orrs	r4, r3
 800925e:	486f      	ldr	r0, [pc, #444]	; (800941c <HAL_ADC_Init+0x300>)
 8009260:	f7ff fed4 	bl	800900c <LL_ADC_IsEnabled>
 8009264:	4603      	mov	r3, r0
 8009266:	4323      	orrs	r3, r4
 8009268:	2b00      	cmp	r3, #0
 800926a:	bf0c      	ite	eq
 800926c:	2301      	moveq	r3, #1
 800926e:	2300      	movne	r3, #0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b00      	cmp	r3, #0
 8009274:	d012      	beq.n	800929c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800927e:	d004      	beq.n	800928a <HAL_ADC_Init+0x16e>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a62      	ldr	r2, [pc, #392]	; (8009410 <HAL_ADC_Init+0x2f4>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d101      	bne.n	800928e <HAL_ADC_Init+0x172>
 800928a:	4a65      	ldr	r2, [pc, #404]	; (8009420 <HAL_ADC_Init+0x304>)
 800928c:	e000      	b.n	8009290 <HAL_ADC_Init+0x174>
 800928e:	4a65      	ldr	r2, [pc, #404]	; (8009424 <HAL_ADC_Init+0x308>)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	4619      	mov	r1, r3
 8009296:	4610      	mov	r0, r2
 8009298:	f7ff fce6 	bl	8008c68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	7f5b      	ldrb	r3, [r3, #29]
 80092a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80092a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80092ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80092b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80092bc:	4313      	orrs	r3, r2
 80092be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d106      	bne.n	80092d8 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ce:	3b01      	subs	r3, #1
 80092d0:	045b      	lsls	r3, r3, #17
 80092d2:	69ba      	ldr	r2, [r7, #24]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d009      	beq.n	80092f4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80092ee:	69ba      	ldr	r2, [r7, #24]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68da      	ldr	r2, [r3, #12]
 80092fa:	4b4b      	ldr	r3, [pc, #300]	; (8009428 <HAL_ADC_Init+0x30c>)
 80092fc:	4013      	ands	r3, r2
 80092fe:	687a      	ldr	r2, [r7, #4]
 8009300:	6812      	ldr	r2, [r2, #0]
 8009302:	69b9      	ldr	r1, [r7, #24]
 8009304:	430b      	orrs	r3, r1
 8009306:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4618      	mov	r0, r3
 8009324:	f7ff fec0 	bl	80090a8 <LL_ADC_REG_IsConversionOngoing>
 8009328:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff fee1 	bl	80090f6 <LL_ADC_INJ_IsConversionOngoing>
 8009334:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d17f      	bne.n	800943c <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d17c      	bne.n	800943c <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009346:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800934e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009350:	4313      	orrs	r3, r2
 8009352:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800935e:	f023 0302 	bic.w	r3, r3, #2
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	6812      	ldr	r2, [r2, #0]
 8009366:	69b9      	ldr	r1, [r7, #24]
 8009368:	430b      	orrs	r3, r1
 800936a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d017      	beq.n	80093a4 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	691a      	ldr	r2, [r3, #16]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009382:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800938c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009390:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009394:	687a      	ldr	r2, [r7, #4]
 8009396:	6911      	ldr	r1, [r2, #16]
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	6812      	ldr	r2, [r2, #0]
 800939c:	430b      	orrs	r3, r1
 800939e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80093a2:	e013      	b.n	80093cc <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80093b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	6812      	ldr	r2, [r2, #0]
 80093c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80093c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80093c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d12a      	bne.n	800942c <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80093e0:	f023 0304 	bic.w	r3, r3, #4
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80093e8:	687a      	ldr	r2, [r7, #4]
 80093ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80093ec:	4311      	orrs	r1, r2
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80093f2:	4311      	orrs	r1, r2
 80093f4:	687a      	ldr	r2, [r7, #4]
 80093f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80093f8:	430a      	orrs	r2, r1
 80093fa:	431a      	orrs	r2, r3
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0201 	orr.w	r2, r2, #1
 8009404:	611a      	str	r2, [r3, #16]
 8009406:	e019      	b.n	800943c <HAL_ADC_Init+0x320>
 8009408:	20000c34 	.word	0x20000c34
 800940c:	053e2d63 	.word	0x053e2d63
 8009410:	50000100 	.word	0x50000100
 8009414:	50000400 	.word	0x50000400
 8009418:	50000500 	.word	0x50000500
 800941c:	50000600 	.word	0x50000600
 8009420:	50000300 	.word	0x50000300
 8009424:	50000700 	.word	0x50000700
 8009428:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	691a      	ldr	r2, [r3, #16]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0201 	bic.w	r2, r2, #1
 800943a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	2b01      	cmp	r3, #1
 8009442:	d10c      	bne.n	800945e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	f023 010f 	bic.w	r1, r3, #15
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a1b      	ldr	r3, [r3, #32]
 8009452:	1e5a      	subs	r2, r3, #1
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	430a      	orrs	r2, r1
 800945a:	631a      	str	r2, [r3, #48]	; 0x30
 800945c:	e007      	b.n	800946e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 020f 	bic.w	r2, r2, #15
 800946c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009472:	f023 0303 	bic.w	r3, r3, #3
 8009476:	f043 0201 	orr.w	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	65da      	str	r2, [r3, #92]	; 0x5c
 800947e:	e007      	b.n	8009490 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009484:	f043 0210 	orr.w	r2, r3, #16
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009490:	7ffb      	ldrb	r3, [r7, #31]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3724      	adds	r7, #36	; 0x24
 8009496:	46bd      	mov	sp, r7
 8009498:	bd90      	pop	{r4, r7, pc}
 800949a:	bf00      	nop

0800949c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b086      	sub	sp, #24
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094b0:	d004      	beq.n	80094bc <HAL_ADC_Start_DMA+0x20>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a58      	ldr	r2, [pc, #352]	; (8009618 <HAL_ADC_Start_DMA+0x17c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d101      	bne.n	80094c0 <HAL_ADC_Start_DMA+0x24>
 80094bc:	4b57      	ldr	r3, [pc, #348]	; (800961c <HAL_ADC_Start_DMA+0x180>)
 80094be:	e000      	b.n	80094c2 <HAL_ADC_Start_DMA+0x26>
 80094c0:	4b57      	ldr	r3, [pc, #348]	; (8009620 <HAL_ADC_Start_DMA+0x184>)
 80094c2:	4618      	mov	r0, r3
 80094c4:	f7ff fd1e 	bl	8008f04 <LL_ADC_GetMultimode>
 80094c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7ff fdea 	bl	80090a8 <LL_ADC_REG_IsConversionOngoing>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	f040 8096 	bne.w	8009608 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d101      	bne.n	80094ea <HAL_ADC_Start_DMA+0x4e>
 80094e6:	2302      	movs	r3, #2
 80094e8:	e091      	b.n	800960e <HAL_ADC_Start_DMA+0x172>
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2201      	movs	r2, #1
 80094ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d005      	beq.n	8009504 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	2b05      	cmp	r3, #5
 80094fc:	d002      	beq.n	8009504 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80094fe:	693b      	ldr	r3, [r7, #16]
 8009500:	2b09      	cmp	r3, #9
 8009502:	d17a      	bne.n	80095fa <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fd71 	bl	8009fec <ADC_Enable>
 800950a:	4603      	mov	r3, r0
 800950c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d16d      	bne.n	80095f0 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009518:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800951c:	f023 0301 	bic.w	r3, r3, #1
 8009520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a3a      	ldr	r2, [pc, #232]	; (8009618 <HAL_ADC_Start_DMA+0x17c>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d009      	beq.n	8009546 <HAL_ADC_Start_DMA+0xaa>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a3b      	ldr	r2, [pc, #236]	; (8009624 <HAL_ADC_Start_DMA+0x188>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d002      	beq.n	8009542 <HAL_ADC_Start_DMA+0xa6>
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	e003      	b.n	800954a <HAL_ADC_Start_DMA+0xae>
 8009542:	4b39      	ldr	r3, [pc, #228]	; (8009628 <HAL_ADC_Start_DMA+0x18c>)
 8009544:	e001      	b.n	800954a <HAL_ADC_Start_DMA+0xae>
 8009546:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800954a:	68fa      	ldr	r2, [r7, #12]
 800954c:	6812      	ldr	r2, [r2, #0]
 800954e:	4293      	cmp	r3, r2
 8009550:	d002      	beq.n	8009558 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d105      	bne.n	8009564 <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009568:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d006      	beq.n	800957e <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009574:	f023 0206 	bic.w	r2, r3, #6
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	661a      	str	r2, [r3, #96]	; 0x60
 800957c:	e002      	b.n	8009584 <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	2200      	movs	r2, #0
 8009582:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009588:	4a28      	ldr	r2, [pc, #160]	; (800962c <HAL_ADC_Start_DMA+0x190>)
 800958a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009590:	4a27      	ldr	r2, [pc, #156]	; (8009630 <HAL_ADC_Start_DMA+0x194>)
 8009592:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009598:	4a26      	ldr	r2, [pc, #152]	; (8009634 <HAL_ADC_Start_DMA+0x198>)
 800959a:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	221c      	movs	r2, #28
 80095a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	685a      	ldr	r2, [r3, #4]
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f042 0210 	orr.w	r2, r2, #16
 80095ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68da      	ldr	r2, [r3, #12]
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0201 	orr.w	r2, r2, #1
 80095ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3340      	adds	r3, #64	; 0x40
 80095d6:	4619      	mov	r1, r3
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f002 f942 	bl	800b864 <HAL_DMA_Start_IT>
 80095e0:	4603      	mov	r3, r0
 80095e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4618      	mov	r0, r3
 80095ea:	f7ff fd35 	bl	8009058 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80095ee:	e00d      	b.n	800960c <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80095f8:	e008      	b.n	800960c <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8009606:	e001      	b.n	800960c <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009608:	2302      	movs	r3, #2
 800960a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800960c:	7dfb      	ldrb	r3, [r7, #23]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3718      	adds	r7, #24
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
 8009616:	bf00      	nop
 8009618:	50000100 	.word	0x50000100
 800961c:	50000300 	.word	0x50000300
 8009620:	50000700 	.word	0x50000700
 8009624:	50000500 	.word	0x50000500
 8009628:	50000400 	.word	0x50000400
 800962c:	0800a151 	.word	0x0800a151
 8009630:	0800a229 	.word	0x0800a229
 8009634:	0800a245 	.word	0x0800a245

08009638 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009646:	2b01      	cmp	r3, #1
 8009648:	d101      	bne.n	800964e <HAL_ADC_Stop_DMA+0x16>
 800964a:	2302      	movs	r3, #2
 800964c:	e051      	b.n	80096f2 <HAL_ADC_Stop_DMA+0xba>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2201      	movs	r2, #1
 8009652:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8009656:	2103      	movs	r1, #3
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 fc13 	bl	8009e84 <ADC_ConversionStop>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d13f      	bne.n	80096e8 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68da      	ldr	r2, [r3, #12]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f022 0201 	bic.w	r2, r2, #1
 8009676:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d10f      	bne.n	80096a6 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968a:	4618      	mov	r0, r3
 800968c:	f002 f965 	bl	800b95a <HAL_DMA_Abort>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8009694:	7bfb      	ldrb	r3, [r7, #15]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d005      	beq.n	80096a6 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800969e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f022 0210 	bic.w	r2, r2, #16
 80096b4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d105      	bne.n	80096c8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fcef 	bl	800a0a0 <ADC_Disable>
 80096c2:	4603      	mov	r3, r0
 80096c4:	73fb      	strb	r3, [r7, #15]
 80096c6:	e002      	b.n	80096ce <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 fce9 	bl	800a0a0 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d109      	bne.n	80096e8 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80096dc:	f023 0301 	bic.w	r3, r3, #1
 80096e0:	f043 0201 	orr.w	r2, r3, #1
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2200      	movs	r2, #0
 80096ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3710      	adds	r7, #16
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8009702:	bf00      	nop
 8009704:	370c      	adds	r7, #12
 8009706:	46bd      	mov	sp, r7
 8009708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970c:	4770      	bx	lr

0800970e <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800970e:	b480      	push	{r7}
 8009710:	b083      	sub	sp, #12
 8009712:	af00      	add	r7, sp, #0
 8009714:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009716:	bf00      	nop
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
	...

08009724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b0a6      	sub	sp, #152	; 0x98
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800973e:	2b01      	cmp	r3, #1
 8009740:	d101      	bne.n	8009746 <HAL_ADC_ConfigChannel+0x22>
 8009742:	2302      	movs	r3, #2
 8009744:	e38e      	b.n	8009e64 <HAL_ADC_ConfigChannel+0x740>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff fca8 	bl	80090a8 <LL_ADC_REG_IsConversionOngoing>
 8009758:	4603      	mov	r3, r0
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 836f 	bne.w	8009e3e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6818      	ldr	r0, [r3, #0]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	6859      	ldr	r1, [r3, #4]
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	f7ff fb53 	bl	8008e18 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff fc96 	bl	80090a8 <LL_ADC_REG_IsConversionOngoing>
 800977c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fcb6 	bl	80090f6 <LL_ADC_INJ_IsConversionOngoing>
 800978a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800978e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009792:	2b00      	cmp	r3, #0
 8009794:	f040 817b 	bne.w	8009a8e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800979c:	2b00      	cmp	r3, #0
 800979e:	f040 8176 	bne.w	8009a8e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	689b      	ldr	r3, [r3, #8]
 80097a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097aa:	d10f      	bne.n	80097cc <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2200      	movs	r2, #0
 80097b6:	4619      	mov	r1, r3
 80097b8:	f7ff fb57 	bl	8008e6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80097c4:	4618      	mov	r0, r3
 80097c6:	f7ff fb01 	bl	8008dcc <LL_ADC_SetSamplingTimeCommonConfig>
 80097ca:	e00e      	b.n	80097ea <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6818      	ldr	r0, [r3, #0]
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	6819      	ldr	r1, [r3, #0]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	461a      	mov	r2, r3
 80097da:	f7ff fb46 	bl	8008e6a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	2100      	movs	r1, #0
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7ff faf1 	bl	8008dcc <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	695a      	ldr	r2, [r3, #20]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	08db      	lsrs	r3, r3, #3
 80097f6:	f003 0303 	and.w	r3, r3, #3
 80097fa:	005b      	lsls	r3, r3, #1
 80097fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009800:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	2b04      	cmp	r3, #4
 800980a:	d022      	beq.n	8009852 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6818      	ldr	r0, [r3, #0]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	6919      	ldr	r1, [r3, #16]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800981c:	f7ff fa58 	bl	8008cd0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6818      	ldr	r0, [r3, #0]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	6919      	ldr	r1, [r3, #16]
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	699b      	ldr	r3, [r3, #24]
 800982c:	461a      	mov	r2, r3
 800982e:	f7ff fa9d 	bl	8008d6c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6818      	ldr	r0, [r3, #0]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	6919      	ldr	r1, [r3, #16]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	7f1b      	ldrb	r3, [r3, #28]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d102      	bne.n	8009848 <HAL_ADC_ConfigChannel+0x124>
 8009842:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009846:	e000      	b.n	800984a <HAL_ADC_ConfigChannel+0x126>
 8009848:	2300      	movs	r3, #0
 800984a:	461a      	mov	r2, r3
 800984c:	f7ff faa6 	bl	8008d9c <LL_ADC_SetOffsetSaturation>
 8009850:	e11d      	b.n	8009a8e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	2100      	movs	r1, #0
 8009858:	4618      	mov	r0, r3
 800985a:	f7ff fa5b 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 800985e:	4603      	mov	r3, r0
 8009860:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10a      	bne.n	800987e <HAL_ADC_ConfigChannel+0x15a>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2100      	movs	r1, #0
 800986e:	4618      	mov	r0, r3
 8009870:	f7ff fa50 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009874:	4603      	mov	r3, r0
 8009876:	0e9b      	lsrs	r3, r3, #26
 8009878:	f003 021f 	and.w	r2, r3, #31
 800987c:	e012      	b.n	80098a4 <HAL_ADC_ConfigChannel+0x180>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	2100      	movs	r1, #0
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff fa45 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 800988a:	4603      	mov	r3, r0
 800988c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009890:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009894:	fa93 f3a3 	rbit	r3, r3
 8009898:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800989a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800989c:	fab3 f383 	clz	r3, r3
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	461a      	mov	r2, r3
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d105      	bne.n	80098bc <HAL_ADC_ConfigChannel+0x198>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	0e9b      	lsrs	r3, r3, #26
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	e00a      	b.n	80098d2 <HAL_ADC_ConfigChannel+0x1ae>
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80098c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098c4:	fa93 f3a3 	rbit	r3, r3
 80098c8:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80098ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098cc:	fab3 f383 	clz	r3, r3
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d106      	bne.n	80098e4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	2200      	movs	r2, #0
 80098dc:	2100      	movs	r1, #0
 80098de:	4618      	mov	r0, r3
 80098e0:	f7ff fa2c 	bl	8008d3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2101      	movs	r1, #1
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7ff fa12 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 80098f0:	4603      	mov	r3, r0
 80098f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10a      	bne.n	8009910 <HAL_ADC_ConfigChannel+0x1ec>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2101      	movs	r1, #1
 8009900:	4618      	mov	r0, r3
 8009902:	f7ff fa07 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009906:	4603      	mov	r3, r0
 8009908:	0e9b      	lsrs	r3, r3, #26
 800990a:	f003 021f 	and.w	r2, r3, #31
 800990e:	e010      	b.n	8009932 <HAL_ADC_ConfigChannel+0x20e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2101      	movs	r1, #1
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff f9fc 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 800991c:	4603      	mov	r3, r0
 800991e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009920:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009922:	fa93 f3a3 	rbit	r3, r3
 8009926:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800992a:	fab3 f383 	clz	r3, r3
 800992e:	b2db      	uxtb	r3, r3
 8009930:	461a      	mov	r2, r3
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800993a:	2b00      	cmp	r3, #0
 800993c:	d105      	bne.n	800994a <HAL_ADC_ConfigChannel+0x226>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	0e9b      	lsrs	r3, r3, #26
 8009944:	f003 031f 	and.w	r3, r3, #31
 8009948:	e00a      	b.n	8009960 <HAL_ADC_ConfigChannel+0x23c>
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009952:	fa93 f3a3 	rbit	r3, r3
 8009956:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009958:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800995a:	fab3 f383 	clz	r3, r3
 800995e:	b2db      	uxtb	r3, r3
 8009960:	429a      	cmp	r2, r3
 8009962:	d106      	bne.n	8009972 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2200      	movs	r2, #0
 800996a:	2101      	movs	r1, #1
 800996c:	4618      	mov	r0, r3
 800996e:	f7ff f9e5 	bl	8008d3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2102      	movs	r1, #2
 8009978:	4618      	mov	r0, r3
 800997a:	f7ff f9cb 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 800997e:	4603      	mov	r3, r0
 8009980:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009984:	2b00      	cmp	r3, #0
 8009986:	d10a      	bne.n	800999e <HAL_ADC_ConfigChannel+0x27a>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2102      	movs	r1, #2
 800998e:	4618      	mov	r0, r3
 8009990:	f7ff f9c0 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009994:	4603      	mov	r3, r0
 8009996:	0e9b      	lsrs	r3, r3, #26
 8009998:	f003 021f 	and.w	r2, r3, #31
 800999c:	e010      	b.n	80099c0 <HAL_ADC_ConfigChannel+0x29c>
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2102      	movs	r1, #2
 80099a4:	4618      	mov	r0, r3
 80099a6:	f7ff f9b5 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 80099aa:	4603      	mov	r3, r0
 80099ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099b0:	fa93 f3a3 	rbit	r3, r3
 80099b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80099b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099b8:	fab3 f383 	clz	r3, r3
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	461a      	mov	r2, r3
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d105      	bne.n	80099d8 <HAL_ADC_ConfigChannel+0x2b4>
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	0e9b      	lsrs	r3, r3, #26
 80099d2:	f003 031f 	and.w	r3, r3, #31
 80099d6:	e00a      	b.n	80099ee <HAL_ADC_ConfigChannel+0x2ca>
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80099de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80099e0:	fa93 f3a3 	rbit	r3, r3
 80099e4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80099e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80099e8:	fab3 f383 	clz	r3, r3
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d106      	bne.n	8009a00 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2200      	movs	r2, #0
 80099f8:	2102      	movs	r1, #2
 80099fa:	4618      	mov	r0, r3
 80099fc:	f7ff f99e 	bl	8008d3c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	2103      	movs	r1, #3
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7ff f984 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d10a      	bne.n	8009a2c <HAL_ADC_ConfigChannel+0x308>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2103      	movs	r1, #3
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	f7ff f979 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009a22:	4603      	mov	r3, r0
 8009a24:	0e9b      	lsrs	r3, r3, #26
 8009a26:	f003 021f 	and.w	r2, r3, #31
 8009a2a:	e010      	b.n	8009a4e <HAL_ADC_ConfigChannel+0x32a>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2103      	movs	r1, #3
 8009a32:	4618      	mov	r0, r3
 8009a34:	f7ff f96e 	bl	8008d14 <LL_ADC_GetOffsetChannel>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a3e:	fa93 f3a3 	rbit	r3, r3
 8009a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a46:	fab3 f383 	clz	r3, r3
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d105      	bne.n	8009a66 <HAL_ADC_ConfigChannel+0x342>
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	0e9b      	lsrs	r3, r3, #26
 8009a60:	f003 031f 	and.w	r3, r3, #31
 8009a64:	e00a      	b.n	8009a7c <HAL_ADC_ConfigChannel+0x358>
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a6e:	fa93 f3a3 	rbit	r3, r3
 8009a72:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a76:	fab3 f383 	clz	r3, r3
 8009a7a:	b2db      	uxtb	r3, r3
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d106      	bne.n	8009a8e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2200      	movs	r2, #0
 8009a86:	2103      	movs	r1, #3
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7ff f957 	bl	8008d3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7ff faba 	bl	800900c <LL_ADC_IsEnabled>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	f040 810c 	bne.w	8009cb8 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6818      	ldr	r0, [r3, #0]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	6819      	ldr	r1, [r3, #0]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	461a      	mov	r2, r3
 8009aae:	f7ff fa05 	bl	8008ebc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	4aaf      	ldr	r2, [pc, #700]	; (8009d74 <HAL_ADC_ConfigChannel+0x650>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	f040 80fd 	bne.w	8009cb8 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10b      	bne.n	8009ae6 <HAL_ADC_ConfigChannel+0x3c2>
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	0e9b      	lsrs	r3, r3, #26
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	f003 031f 	and.w	r3, r3, #31
 8009ada:	2b09      	cmp	r3, #9
 8009adc:	bf94      	ite	ls
 8009ade:	2301      	movls	r3, #1
 8009ae0:	2300      	movhi	r3, #0
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	e012      	b.n	8009b0c <HAL_ADC_ConfigChannel+0x3e8>
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aee:	fa93 f3a3 	rbit	r3, r3
 8009af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009af6:	fab3 f383 	clz	r3, r3
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	3301      	adds	r3, #1
 8009afe:	f003 031f 	and.w	r3, r3, #31
 8009b02:	2b09      	cmp	r3, #9
 8009b04:	bf94      	ite	ls
 8009b06:	2301      	movls	r3, #1
 8009b08:	2300      	movhi	r3, #0
 8009b0a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d064      	beq.n	8009bda <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d107      	bne.n	8009b2c <HAL_ADC_ConfigChannel+0x408>
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	0e9b      	lsrs	r3, r3, #26
 8009b22:	3301      	adds	r3, #1
 8009b24:	069b      	lsls	r3, r3, #26
 8009b26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009b2a:	e00e      	b.n	8009b4a <HAL_ADC_ConfigChannel+0x426>
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b34:	fa93 f3a3 	rbit	r3, r3
 8009b38:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b3c:	fab3 f383 	clz	r3, r3
 8009b40:	b2db      	uxtb	r3, r3
 8009b42:	3301      	adds	r3, #1
 8009b44:	069b      	lsls	r3, r3, #26
 8009b46:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d109      	bne.n	8009b6a <HAL_ADC_ConfigChannel+0x446>
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	0e9b      	lsrs	r3, r3, #26
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	f003 031f 	and.w	r3, r3, #31
 8009b62:	2101      	movs	r1, #1
 8009b64:	fa01 f303 	lsl.w	r3, r1, r3
 8009b68:	e010      	b.n	8009b8c <HAL_ADC_ConfigChannel+0x468>
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	fa93 f3a3 	rbit	r3, r3
 8009b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	fab3 f383 	clz	r3, r3
 8009b7e:	b2db      	uxtb	r3, r3
 8009b80:	3301      	adds	r3, #1
 8009b82:	f003 031f 	and.w	r3, r3, #31
 8009b86:	2101      	movs	r1, #1
 8009b88:	fa01 f303 	lsl.w	r3, r1, r3
 8009b8c:	ea42 0103 	orr.w	r1, r2, r3
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10a      	bne.n	8009bb2 <HAL_ADC_ConfigChannel+0x48e>
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	0e9b      	lsrs	r3, r3, #26
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	f003 021f 	and.w	r2, r3, #31
 8009ba8:	4613      	mov	r3, r2
 8009baa:	005b      	lsls	r3, r3, #1
 8009bac:	4413      	add	r3, r2
 8009bae:	051b      	lsls	r3, r3, #20
 8009bb0:	e011      	b.n	8009bd6 <HAL_ADC_ConfigChannel+0x4b2>
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bba:	fa93 f3a3 	rbit	r3, r3
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	fab3 f383 	clz	r3, r3
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	3301      	adds	r3, #1
 8009bca:	f003 021f 	and.w	r2, r3, #31
 8009bce:	4613      	mov	r3, r2
 8009bd0:	005b      	lsls	r3, r3, #1
 8009bd2:	4413      	add	r3, r2
 8009bd4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009bd6:	430b      	orrs	r3, r1
 8009bd8:	e069      	b.n	8009cae <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d107      	bne.n	8009bf6 <HAL_ADC_ConfigChannel+0x4d2>
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	0e9b      	lsrs	r3, r3, #26
 8009bec:	3301      	adds	r3, #1
 8009bee:	069b      	lsls	r3, r3, #26
 8009bf0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009bf4:	e00e      	b.n	8009c14 <HAL_ADC_ConfigChannel+0x4f0>
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bfc:	6a3b      	ldr	r3, [r7, #32]
 8009bfe:	fa93 f3a3 	rbit	r3, r3
 8009c02:	61fb      	str	r3, [r7, #28]
  return result;
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	fab3 f383 	clz	r3, r3
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	069b      	lsls	r3, r3, #26
 8009c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d109      	bne.n	8009c34 <HAL_ADC_ConfigChannel+0x510>
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	0e9b      	lsrs	r3, r3, #26
 8009c26:	3301      	adds	r3, #1
 8009c28:	f003 031f 	and.w	r3, r3, #31
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c32:	e010      	b.n	8009c56 <HAL_ADC_ConfigChannel+0x532>
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	fa93 f3a3 	rbit	r3, r3
 8009c40:	617b      	str	r3, [r7, #20]
  return result;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	fab3 f383 	clz	r3, r3
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	f003 031f 	and.w	r3, r3, #31
 8009c50:	2101      	movs	r1, #1
 8009c52:	fa01 f303 	lsl.w	r3, r1, r3
 8009c56:	ea42 0103 	orr.w	r1, r2, r3
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d10d      	bne.n	8009c82 <HAL_ADC_ConfigChannel+0x55e>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	0e9b      	lsrs	r3, r3, #26
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	f003 021f 	and.w	r2, r3, #31
 8009c72:	4613      	mov	r3, r2
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	4413      	add	r3, r2
 8009c78:	3b1e      	subs	r3, #30
 8009c7a:	051b      	lsls	r3, r3, #20
 8009c7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c80:	e014      	b.n	8009cac <HAL_ADC_ConfigChannel+0x588>
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	fa93 f3a3 	rbit	r3, r3
 8009c8e:	60fb      	str	r3, [r7, #12]
  return result;
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	fab3 f383 	clz	r3, r3
 8009c96:	b2db      	uxtb	r3, r3
 8009c98:	3301      	adds	r3, #1
 8009c9a:	f003 021f 	and.w	r2, r3, #31
 8009c9e:	4613      	mov	r3, r2
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4413      	add	r3, r2
 8009ca4:	3b1e      	subs	r3, #30
 8009ca6:	051b      	lsls	r3, r3, #20
 8009ca8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009cac:	430b      	orrs	r3, r1
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	6892      	ldr	r2, [r2, #8]
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	f7ff f8d9 	bl	8008e6a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4b2e      	ldr	r3, [pc, #184]	; (8009d78 <HAL_ADC_ConfigChannel+0x654>)
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 80c9 	beq.w	8009e58 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009cce:	d004      	beq.n	8009cda <HAL_ADC_ConfigChannel+0x5b6>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a29      	ldr	r2, [pc, #164]	; (8009d7c <HAL_ADC_ConfigChannel+0x658>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d101      	bne.n	8009cde <HAL_ADC_ConfigChannel+0x5ba>
 8009cda:	4b29      	ldr	r3, [pc, #164]	; (8009d80 <HAL_ADC_ConfigChannel+0x65c>)
 8009cdc:	e000      	b.n	8009ce0 <HAL_ADC_ConfigChannel+0x5bc>
 8009cde:	4b29      	ldr	r3, [pc, #164]	; (8009d84 <HAL_ADC_ConfigChannel+0x660>)
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f7fe ffe7 	bl	8008cb4 <LL_ADC_GetCommonPathInternalCh>
 8009ce6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	4a26      	ldr	r2, [pc, #152]	; (8009d88 <HAL_ADC_ConfigChannel+0x664>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d004      	beq.n	8009cfe <HAL_ADC_ConfigChannel+0x5da>
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a24      	ldr	r2, [pc, #144]	; (8009d8c <HAL_ADC_ConfigChannel+0x668>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d14e      	bne.n	8009d9c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d148      	bne.n	8009d9c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d12:	d005      	beq.n	8009d20 <HAL_ADC_ConfigChannel+0x5fc>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a1d      	ldr	r2, [pc, #116]	; (8009d90 <HAL_ADC_ConfigChannel+0x66c>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	f040 8099 	bne.w	8009e52 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009d28:	d004      	beq.n	8009d34 <HAL_ADC_ConfigChannel+0x610>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a13      	ldr	r2, [pc, #76]	; (8009d7c <HAL_ADC_ConfigChannel+0x658>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d101      	bne.n	8009d38 <HAL_ADC_ConfigChannel+0x614>
 8009d34:	4a12      	ldr	r2, [pc, #72]	; (8009d80 <HAL_ADC_ConfigChannel+0x65c>)
 8009d36:	e000      	b.n	8009d3a <HAL_ADC_ConfigChannel+0x616>
 8009d38:	4a12      	ldr	r2, [pc, #72]	; (8009d84 <HAL_ADC_ConfigChannel+0x660>)
 8009d3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009d3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d42:	4619      	mov	r1, r3
 8009d44:	4610      	mov	r0, r2
 8009d46:	f7fe ffa2 	bl	8008c8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009d4a:	4b12      	ldr	r3, [pc, #72]	; (8009d94 <HAL_ADC_ConfigChannel+0x670>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	099b      	lsrs	r3, r3, #6
 8009d50:	4a11      	ldr	r2, [pc, #68]	; (8009d98 <HAL_ADC_ConfigChannel+0x674>)
 8009d52:	fba2 2303 	umull	r2, r3, r2, r3
 8009d56:	099a      	lsrs	r2, r3, #6
 8009d58:	4613      	mov	r3, r2
 8009d5a:	005b      	lsls	r3, r3, #1
 8009d5c:	4413      	add	r3, r2
 8009d5e:	009b      	lsls	r3, r3, #2
 8009d60:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009d62:	e002      	b.n	8009d6a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d1f9      	bne.n	8009d64 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009d70:	e06f      	b.n	8009e52 <HAL_ADC_ConfigChannel+0x72e>
 8009d72:	bf00      	nop
 8009d74:	407f0000 	.word	0x407f0000
 8009d78:	80080000 	.word	0x80080000
 8009d7c:	50000100 	.word	0x50000100
 8009d80:	50000300 	.word	0x50000300
 8009d84:	50000700 	.word	0x50000700
 8009d88:	c3210000 	.word	0xc3210000
 8009d8c:	90c00010 	.word	0x90c00010
 8009d90:	50000600 	.word	0x50000600
 8009d94:	20000c34 	.word	0x20000c34
 8009d98:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a32      	ldr	r2, [pc, #200]	; (8009e6c <HAL_ADC_ConfigChannel+0x748>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d125      	bne.n	8009df2 <HAL_ADC_ConfigChannel+0x6ce>
 8009da6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d11f      	bne.n	8009df2 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a2e      	ldr	r2, [pc, #184]	; (8009e70 <HAL_ADC_ConfigChannel+0x74c>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d104      	bne.n	8009dc6 <HAL_ADC_ConfigChannel+0x6a2>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a2c      	ldr	r2, [pc, #176]	; (8009e74 <HAL_ADC_ConfigChannel+0x750>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d047      	beq.n	8009e56 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009dce:	d004      	beq.n	8009dda <HAL_ADC_ConfigChannel+0x6b6>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a26      	ldr	r2, [pc, #152]	; (8009e70 <HAL_ADC_ConfigChannel+0x74c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d101      	bne.n	8009dde <HAL_ADC_ConfigChannel+0x6ba>
 8009dda:	4a27      	ldr	r2, [pc, #156]	; (8009e78 <HAL_ADC_ConfigChannel+0x754>)
 8009ddc:	e000      	b.n	8009de0 <HAL_ADC_ConfigChannel+0x6bc>
 8009dde:	4a27      	ldr	r2, [pc, #156]	; (8009e7c <HAL_ADC_ConfigChannel+0x758>)
 8009de0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009de8:	4619      	mov	r1, r3
 8009dea:	4610      	mov	r0, r2
 8009dec:	f7fe ff4f 	bl	8008c8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009df0:	e031      	b.n	8009e56 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a22      	ldr	r2, [pc, #136]	; (8009e80 <HAL_ADC_ConfigChannel+0x75c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d12d      	bne.n	8009e58 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8009dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d127      	bne.n	8009e58 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a18      	ldr	r2, [pc, #96]	; (8009e70 <HAL_ADC_ConfigChannel+0x74c>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d022      	beq.n	8009e58 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e1a:	d004      	beq.n	8009e26 <HAL_ADC_ConfigChannel+0x702>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a13      	ldr	r2, [pc, #76]	; (8009e70 <HAL_ADC_ConfigChannel+0x74c>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d101      	bne.n	8009e2a <HAL_ADC_ConfigChannel+0x706>
 8009e26:	4a14      	ldr	r2, [pc, #80]	; (8009e78 <HAL_ADC_ConfigChannel+0x754>)
 8009e28:	e000      	b.n	8009e2c <HAL_ADC_ConfigChannel+0x708>
 8009e2a:	4a14      	ldr	r2, [pc, #80]	; (8009e7c <HAL_ADC_ConfigChannel+0x758>)
 8009e2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e34:	4619      	mov	r1, r3
 8009e36:	4610      	mov	r0, r2
 8009e38:	f7fe ff29 	bl	8008c8e <LL_ADC_SetCommonPathInternalCh>
 8009e3c:	e00c      	b.n	8009e58 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e42:	f043 0220 	orr.w	r2, r3, #32
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009e50:	e002      	b.n	8009e58 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009e52:	bf00      	nop
 8009e54:	e000      	b.n	8009e58 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009e56:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009e60:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3798      	adds	r7, #152	; 0x98
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	c7520000 	.word	0xc7520000
 8009e70:	50000100 	.word	0x50000100
 8009e74:	50000500 	.word	0x50000500
 8009e78:	50000300 	.word	0x50000300
 8009e7c:	50000700 	.word	0x50000700
 8009e80:	cb840000 	.word	0xcb840000

08009e84 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b088      	sub	sp, #32
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8009e8e:	2300      	movs	r3, #0
 8009e90:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7ff f904 	bl	80090a8 <LL_ADC_REG_IsConversionOngoing>
 8009ea0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7ff f925 	bl	80090f6 <LL_ADC_INJ_IsConversionOngoing>
 8009eac:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8009eae:	693b      	ldr	r3, [r7, #16]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d103      	bne.n	8009ebc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	f000 8090 	beq.w	8009fdc <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d02a      	beq.n	8009f20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	7f5b      	ldrb	r3, [r3, #29]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d126      	bne.n	8009f20 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	7f1b      	ldrb	r3, [r3, #28]
 8009ed6:	2b01      	cmp	r3, #1
 8009ed8:	d122      	bne.n	8009f20 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8009eda:	2301      	movs	r3, #1
 8009edc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009ede:	e014      	b.n	8009f0a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	4a41      	ldr	r2, [pc, #260]	; (8009fe8 <ADC_ConversionStop+0x164>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d90d      	bls.n	8009f04 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009eec:	f043 0210 	orr.w	r2, r3, #16
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ef8:	f043 0201 	orr.w	r2, r3, #1
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e06c      	b.n	8009fde <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	3301      	adds	r3, #1
 8009f08:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f14:	2b40      	cmp	r3, #64	; 0x40
 8009f16:	d1e3      	bne.n	8009ee0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	2240      	movs	r2, #64	; 0x40
 8009f1e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d014      	beq.n	8009f50 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff f8bc 	bl	80090a8 <LL_ADC_REG_IsConversionOngoing>
 8009f30:	4603      	mov	r3, r0
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d00c      	beq.n	8009f50 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7ff f879 	bl	8009032 <LL_ADC_IsDisableOngoing>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d104      	bne.n	8009f50 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f7ff f898 	bl	8009080 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d014      	beq.n	8009f80 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	f7ff f8cb 	bl	80090f6 <LL_ADC_INJ_IsConversionOngoing>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d00c      	beq.n	8009f80 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7ff f861 	bl	8009032 <LL_ADC_IsDisableOngoing>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d104      	bne.n	8009f80 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7ff f8a7 	bl	80090ce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8009f80:	69bb      	ldr	r3, [r7, #24]
 8009f82:	2b02      	cmp	r3, #2
 8009f84:	d004      	beq.n	8009f90 <ADC_ConversionStop+0x10c>
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d105      	bne.n	8009f96 <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8009f8a:	230c      	movs	r3, #12
 8009f8c:	617b      	str	r3, [r7, #20]
        break;
 8009f8e:	e005      	b.n	8009f9c <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8009f90:	2308      	movs	r3, #8
 8009f92:	617b      	str	r3, [r7, #20]
        break;
 8009f94:	e002      	b.n	8009f9c <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8009f96:	2304      	movs	r3, #4
 8009f98:	617b      	str	r3, [r7, #20]
        break;
 8009f9a:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8009f9c:	f7fe fe36 	bl	8008c0c <HAL_GetTick>
 8009fa0:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009fa2:	e014      	b.n	8009fce <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8009fa4:	f7fe fe32 	bl	8008c0c <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b05      	cmp	r3, #5
 8009fb0:	d90d      	bls.n	8009fce <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fb6:	f043 0210 	orr.w	r2, r3, #16
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc2:	f043 0201 	orr.w	r2, r3, #1
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e007      	b.n	8009fde <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d1e3      	bne.n	8009fa4 <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3720      	adds	r7, #32
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	a33fffff 	.word	0xa33fffff

08009fec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f7ff f807 	bl	800900c <LL_ADC_IsEnabled>
 8009ffe:	4603      	mov	r3, r0
 800a000:	2b00      	cmp	r3, #0
 800a002:	d146      	bne.n	800a092 <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	4b24      	ldr	r3, [pc, #144]	; (800a09c <ADC_Enable+0xb0>)
 800a00c:	4013      	ands	r3, r2
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00d      	beq.n	800a02e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a016:	f043 0210 	orr.w	r2, r3, #16
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a022:	f043 0201 	orr.w	r2, r3, #1
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e032      	b.n	800a094 <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe ffc2 	bl	8008fbc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a038:	f7fe fde8 	bl	8008c0c <HAL_GetTick>
 800a03c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a03e:	e021      	b.n	800a084 <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4618      	mov	r0, r3
 800a046:	f7fe ffe1 	bl	800900c <LL_ADC_IsEnabled>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d104      	bne.n	800a05a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4618      	mov	r0, r3
 800a056:	f7fe ffb1 	bl	8008fbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a05a:	f7fe fdd7 	bl	8008c0c <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	2b02      	cmp	r3, #2
 800a066:	d90d      	bls.n	800a084 <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a06c:	f043 0210 	orr.w	r2, r3, #16
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a078:	f043 0201 	orr.w	r2, r3, #1
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a080:	2301      	movs	r3, #1
 800a082:	e007      	b.n	800a094 <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f003 0301 	and.w	r3, r3, #1
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d1d6      	bne.n	800a040 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3710      	adds	r7, #16
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}
 800a09c:	8000003f 	.word	0x8000003f

0800a0a0 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b084      	sub	sp, #16
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f7fe ffc0 	bl	8009032 <LL_ADC_IsDisableOngoing>
 800a0b2:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	f7fe ffa7 	bl	800900c <LL_ADC_IsEnabled>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d040      	beq.n	800a146 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d13d      	bne.n	800a146 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f003 030d 	and.w	r3, r3, #13
 800a0d4:	2b01      	cmp	r3, #1
 800a0d6:	d10c      	bne.n	800a0f2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7fe ff81 	bl	8008fe4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2203      	movs	r2, #3
 800a0e8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a0ea:	f7fe fd8f 	bl	8008c0c <HAL_GetTick>
 800a0ee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a0f0:	e022      	b.n	800a138 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f6:	f043 0210 	orr.w	r2, r3, #16
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a102:	f043 0201 	orr.w	r2, r3, #1
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a10a:	2301      	movs	r3, #1
 800a10c:	e01c      	b.n	800a148 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a10e:	f7fe fd7d 	bl	8008c0c <HAL_GetTick>
 800a112:	4602      	mov	r2, r0
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	2b02      	cmp	r3, #2
 800a11a:	d90d      	bls.n	800a138 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a120:	f043 0210 	orr.w	r2, r3, #16
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a12c:	f043 0201 	orr.w	r2, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a134:	2301      	movs	r3, #1
 800a136:	e007      	b.n	800a148 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d1e3      	bne.n	800a10e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3710      	adds	r7, #16
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}

0800a150 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a150:	b580      	push	{r7, lr}
 800a152:	b084      	sub	sp, #16
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a162:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a166:	2b00      	cmp	r3, #0
 800a168:	d14b      	bne.n	800a202 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a16e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0308 	and.w	r3, r3, #8
 800a180:	2b00      	cmp	r3, #0
 800a182:	d021      	beq.n	800a1c8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4618      	mov	r0, r3
 800a18a:	f7fe fe32 	bl	8008df2 <LL_ADC_REG_IsTriggerSourceSWStart>
 800a18e:	4603      	mov	r3, r0
 800a190:	2b00      	cmp	r3, #0
 800a192:	d032      	beq.n	800a1fa <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d12b      	bne.n	800a1fa <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d11f      	bne.n	800a1fa <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1be:	f043 0201 	orr.w	r2, r3, #1
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	65da      	str	r2, [r3, #92]	; 0x5c
 800a1c6:	e018      	b.n	800a1fa <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f003 0302 	and.w	r3, r3, #2
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d111      	bne.n	800a1fa <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d105      	bne.n	800a1fa <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1f2:	f043 0201 	orr.w	r2, r3, #1
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7fc f938 	bl	8006470 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a200:	e00e      	b.n	800a220 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a206:	f003 0310 	and.w	r3, r3, #16
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d003      	beq.n	800a216 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f7ff fa7d 	bl	800970e <HAL_ADC_ErrorCallback>
}
 800a214:	e004      	b.n	800a220 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
}
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a234:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a236:	68f8      	ldr	r0, [r7, #12]
 800a238:	f7ff fa5f 	bl	80096fa <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a23c:	bf00      	nop
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}

0800a244 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b084      	sub	sp, #16
 800a248:	af00      	add	r7, sp, #0
 800a24a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a250:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a256:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a262:	f043 0204 	orr.w	r2, r3, #4
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	f7ff fa4f 	bl	800970e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a270:	bf00      	nop
 800a272:	3710      	adds	r7, #16
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <LL_ADC_IsEnabled>:
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	f003 0301 	and.w	r3, r3, #1
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d101      	bne.n	800a290 <LL_ADC_IsEnabled+0x18>
 800a28c:	2301      	movs	r3, #1
 800a28e:	e000      	b.n	800a292 <LL_ADC_IsEnabled+0x1a>
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	370c      	adds	r7, #12
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <LL_ADC_REG_IsConversionOngoing>:
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b083      	sub	sp, #12
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f003 0304 	and.w	r3, r3, #4
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	d101      	bne.n	800a2b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e000      	b.n	800a2b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a2c4:	b590      	push	{r4, r7, lr}
 800a2c6:	b0a1      	sub	sp, #132	; 0x84
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e0e3      	b.n	800a4aa <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2f2:	d102      	bne.n	800a2fa <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a2f4:	4b6f      	ldr	r3, [pc, #444]	; (800a4b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a2f6:	60bb      	str	r3, [r7, #8]
 800a2f8:	e009      	b.n	800a30e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	4a6e      	ldr	r2, [pc, #440]	; (800a4b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a300:	4293      	cmp	r3, r2
 800a302:	d102      	bne.n	800a30a <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a304:	4b6d      	ldr	r3, [pc, #436]	; (800a4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a306:	60bb      	str	r3, [r7, #8]
 800a308:	e001      	b.n	800a30e <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a30a:	2300      	movs	r3, #0
 800a30c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d10b      	bne.n	800a32c <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a318:	f043 0220 	orr.w	r2, r3, #32
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a328:	2301      	movs	r3, #1
 800a32a:	e0be      	b.n	800a4aa <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	4618      	mov	r0, r3
 800a330:	f7ff ffb5 	bl	800a29e <LL_ADC_REG_IsConversionOngoing>
 800a334:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	4618      	mov	r0, r3
 800a33c:	f7ff ffaf 	bl	800a29e <LL_ADC_REG_IsConversionOngoing>
 800a340:	4603      	mov	r3, r0
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 80a0 	bne.w	800a488 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	f040 809c 	bne.w	800a488 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a358:	d004      	beq.n	800a364 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	4a55      	ldr	r2, [pc, #340]	; (800a4b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d101      	bne.n	800a368 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a364:	4b56      	ldr	r3, [pc, #344]	; (800a4c0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a366:	e000      	b.n	800a36a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a368:	4b56      	ldr	r3, [pc, #344]	; (800a4c4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a36a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d04b      	beq.n	800a40c <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a374:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	6859      	ldr	r1, [r3, #4]
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a386:	035b      	lsls	r3, r3, #13
 800a388:	430b      	orrs	r3, r1
 800a38a:	431a      	orrs	r2, r3
 800a38c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a38e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a398:	d004      	beq.n	800a3a4 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a45      	ldr	r2, [pc, #276]	; (800a4b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d10f      	bne.n	800a3c4 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a3a4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a3a8:	f7ff ff66 	bl	800a278 <LL_ADC_IsEnabled>
 800a3ac:	4604      	mov	r4, r0
 800a3ae:	4841      	ldr	r0, [pc, #260]	; (800a4b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a3b0:	f7ff ff62 	bl	800a278 <LL_ADC_IsEnabled>
 800a3b4:	4603      	mov	r3, r0
 800a3b6:	4323      	orrs	r3, r4
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bf0c      	ite	eq
 800a3bc:	2301      	moveq	r3, #1
 800a3be:	2300      	movne	r3, #0
 800a3c0:	b2db      	uxtb	r3, r3
 800a3c2:	e012      	b.n	800a3ea <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a3c4:	483c      	ldr	r0, [pc, #240]	; (800a4b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a3c6:	f7ff ff57 	bl	800a278 <LL_ADC_IsEnabled>
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	483b      	ldr	r0, [pc, #236]	; (800a4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a3ce:	f7ff ff53 	bl	800a278 <LL_ADC_IsEnabled>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	431c      	orrs	r4, r3
 800a3d6:	483c      	ldr	r0, [pc, #240]	; (800a4c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a3d8:	f7ff ff4e 	bl	800a278 <LL_ADC_IsEnabled>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	4323      	orrs	r3, r4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	bf0c      	ite	eq
 800a3e4:	2301      	moveq	r3, #1
 800a3e6:	2300      	movne	r3, #0
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d056      	beq.n	800a49c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a3ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a3f6:	f023 030f 	bic.w	r3, r3, #15
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	6811      	ldr	r1, [r2, #0]
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	6892      	ldr	r2, [r2, #8]
 800a402:	430a      	orrs	r2, r1
 800a404:	431a      	orrs	r2, r3
 800a406:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a408:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a40a:	e047      	b.n	800a49c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a40c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a414:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a416:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a420:	d004      	beq.n	800a42c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a23      	ldr	r2, [pc, #140]	; (800a4b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d10f      	bne.n	800a44c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a42c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a430:	f7ff ff22 	bl	800a278 <LL_ADC_IsEnabled>
 800a434:	4604      	mov	r4, r0
 800a436:	481f      	ldr	r0, [pc, #124]	; (800a4b4 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a438:	f7ff ff1e 	bl	800a278 <LL_ADC_IsEnabled>
 800a43c:	4603      	mov	r3, r0
 800a43e:	4323      	orrs	r3, r4
 800a440:	2b00      	cmp	r3, #0
 800a442:	bf0c      	ite	eq
 800a444:	2301      	moveq	r3, #1
 800a446:	2300      	movne	r3, #0
 800a448:	b2db      	uxtb	r3, r3
 800a44a:	e012      	b.n	800a472 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a44c:	481a      	ldr	r0, [pc, #104]	; (800a4b8 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a44e:	f7ff ff13 	bl	800a278 <LL_ADC_IsEnabled>
 800a452:	4604      	mov	r4, r0
 800a454:	4819      	ldr	r0, [pc, #100]	; (800a4bc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a456:	f7ff ff0f 	bl	800a278 <LL_ADC_IsEnabled>
 800a45a:	4603      	mov	r3, r0
 800a45c:	431c      	orrs	r4, r3
 800a45e:	481a      	ldr	r0, [pc, #104]	; (800a4c8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a460:	f7ff ff0a 	bl	800a278 <LL_ADC_IsEnabled>
 800a464:	4603      	mov	r3, r0
 800a466:	4323      	orrs	r3, r4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bf0c      	ite	eq
 800a46c:	2301      	moveq	r3, #1
 800a46e:	2300      	movne	r3, #0
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d012      	beq.n	800a49c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a476:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a478:	689b      	ldr	r3, [r3, #8]
 800a47a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a47e:	f023 030f 	bic.w	r3, r3, #15
 800a482:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a484:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a486:	e009      	b.n	800a49c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a48c:	f043 0220 	orr.w	r2, r3, #32
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a494:	2301      	movs	r3, #1
 800a496:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a49a:	e000      	b.n	800a49e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a49c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a4a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3784      	adds	r7, #132	; 0x84
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd90      	pop	{r4, r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	50000100 	.word	0x50000100
 800a4b8:	50000400 	.word	0x50000400
 800a4bc:	50000500 	.word	0x50000500
 800a4c0:	50000300 	.word	0x50000300
 800a4c4:	50000700 	.word	0x50000700
 800a4c8:	50000600 	.word	0x50000600

0800a4cc <LL_EXTI_EnableIT_0_31>:
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b083      	sub	sp, #12
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a4d4:	4b05      	ldr	r3, [pc, #20]	; (800a4ec <LL_EXTI_EnableIT_0_31+0x20>)
 800a4d6:	681a      	ldr	r2, [r3, #0]
 800a4d8:	4904      	ldr	r1, [pc, #16]	; (800a4ec <LL_EXTI_EnableIT_0_31+0x20>)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	600b      	str	r3, [r1, #0]
}
 800a4e0:	bf00      	nop
 800a4e2:	370c      	adds	r7, #12
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr
 800a4ec:	40010400 	.word	0x40010400

0800a4f0 <LL_EXTI_EnableIT_32_63>:
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a4f8:	4b05      	ldr	r3, [pc, #20]	; (800a510 <LL_EXTI_EnableIT_32_63+0x20>)
 800a4fa:	6a1a      	ldr	r2, [r3, #32]
 800a4fc:	4904      	ldr	r1, [pc, #16]	; (800a510 <LL_EXTI_EnableIT_32_63+0x20>)
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	4313      	orrs	r3, r2
 800a502:	620b      	str	r3, [r1, #32]
}
 800a504:	bf00      	nop
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr
 800a510:	40010400 	.word	0x40010400

0800a514 <LL_EXTI_DisableIT_0_31>:
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a51c:	4b06      	ldr	r3, [pc, #24]	; (800a538 <LL_EXTI_DisableIT_0_31+0x24>)
 800a51e:	681a      	ldr	r2, [r3, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	43db      	mvns	r3, r3
 800a524:	4904      	ldr	r1, [pc, #16]	; (800a538 <LL_EXTI_DisableIT_0_31+0x24>)
 800a526:	4013      	ands	r3, r2
 800a528:	600b      	str	r3, [r1, #0]
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	40010400 	.word	0x40010400

0800a53c <LL_EXTI_DisableIT_32_63>:
{
 800a53c:	b480      	push	{r7}
 800a53e:	b083      	sub	sp, #12
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a544:	4b06      	ldr	r3, [pc, #24]	; (800a560 <LL_EXTI_DisableIT_32_63+0x24>)
 800a546:	6a1a      	ldr	r2, [r3, #32]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	43db      	mvns	r3, r3
 800a54c:	4904      	ldr	r1, [pc, #16]	; (800a560 <LL_EXTI_DisableIT_32_63+0x24>)
 800a54e:	4013      	ands	r3, r2
 800a550:	620b      	str	r3, [r1, #32]
}
 800a552:	bf00      	nop
 800a554:	370c      	adds	r7, #12
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40010400 	.word	0x40010400

0800a564 <LL_EXTI_EnableEvent_0_31>:
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	4904      	ldr	r1, [pc, #16]	; (800a584 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4313      	orrs	r3, r2
 800a576:	604b      	str	r3, [r1, #4]
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	40010400 	.word	0x40010400

0800a588 <LL_EXTI_EnableEvent_32_63>:
{
 800a588:	b480      	push	{r7}
 800a58a:	b083      	sub	sp, #12
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a590:	4b05      	ldr	r3, [pc, #20]	; (800a5a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a592:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a594:	4904      	ldr	r1, [pc, #16]	; (800a5a8 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4313      	orrs	r3, r2
 800a59a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr
 800a5a8:	40010400 	.word	0x40010400

0800a5ac <LL_EXTI_DisableEvent_0_31>:
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a5b4:	4b06      	ldr	r3, [pc, #24]	; (800a5d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a5b6:	685a      	ldr	r2, [r3, #4]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	43db      	mvns	r3, r3
 800a5bc:	4904      	ldr	r1, [pc, #16]	; (800a5d0 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a5be:	4013      	ands	r3, r2
 800a5c0:	604b      	str	r3, [r1, #4]
}
 800a5c2:	bf00      	nop
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	40010400 	.word	0x40010400

0800a5d4 <LL_EXTI_DisableEvent_32_63>:
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a5dc:	4b06      	ldr	r3, [pc, #24]	; (800a5f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a5de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	43db      	mvns	r3, r3
 800a5e4:	4904      	ldr	r1, [pc, #16]	; (800a5f8 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	40010400 	.word	0x40010400

0800a5fc <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a5fc:	b480      	push	{r7}
 800a5fe:	b083      	sub	sp, #12
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a604:	4b05      	ldr	r3, [pc, #20]	; (800a61c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a606:	689a      	ldr	r2, [r3, #8]
 800a608:	4904      	ldr	r1, [pc, #16]	; (800a61c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	4313      	orrs	r3, r2
 800a60e:	608b      	str	r3, [r1, #8]
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	40010400 	.word	0x40010400

0800a620 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a628:	4b05      	ldr	r3, [pc, #20]	; (800a640 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a62a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a62c:	4904      	ldr	r1, [pc, #16]	; (800a640 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	4313      	orrs	r3, r2
 800a632:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a634:	bf00      	nop
 800a636:	370c      	adds	r7, #12
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr
 800a640:	40010400 	.word	0x40010400

0800a644 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a64c:	4b06      	ldr	r3, [pc, #24]	; (800a668 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a64e:	689a      	ldr	r2, [r3, #8]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	43db      	mvns	r3, r3
 800a654:	4904      	ldr	r1, [pc, #16]	; (800a668 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a656:	4013      	ands	r3, r2
 800a658:	608b      	str	r3, [r1, #8]
}
 800a65a:	bf00      	nop
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	40010400 	.word	0x40010400

0800a66c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a66c:	b480      	push	{r7}
 800a66e:	b083      	sub	sp, #12
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a674:	4b06      	ldr	r3, [pc, #24]	; (800a690 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	43db      	mvns	r3, r3
 800a67c:	4904      	ldr	r1, [pc, #16]	; (800a690 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a67e:	4013      	ands	r3, r2
 800a680:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a682:	bf00      	nop
 800a684:	370c      	adds	r7, #12
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr
 800a68e:	bf00      	nop
 800a690:	40010400 	.word	0x40010400

0800a694 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a694:	b480      	push	{r7}
 800a696:	b083      	sub	sp, #12
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a69c:	4b05      	ldr	r3, [pc, #20]	; (800a6b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a69e:	68da      	ldr	r2, [r3, #12]
 800a6a0:	4904      	ldr	r1, [pc, #16]	; (800a6b4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4313      	orrs	r3, r2
 800a6a6:	60cb      	str	r3, [r1, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	370c      	adds	r7, #12
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	40010400 	.word	0x40010400

0800a6b8 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a6c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c4:	4904      	ldr	r1, [pc, #16]	; (800a6d8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr
 800a6d8:	40010400 	.word	0x40010400

0800a6dc <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a6e4:	4b06      	ldr	r3, [pc, #24]	; (800a700 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a6e6:	68da      	ldr	r2, [r3, #12]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	43db      	mvns	r3, r3
 800a6ec:	4904      	ldr	r1, [pc, #16]	; (800a700 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	60cb      	str	r3, [r1, #12]
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr
 800a6fe:	bf00      	nop
 800a700:	40010400 	.word	0x40010400

0800a704 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a70c:	4b06      	ldr	r3, [pc, #24]	; (800a728 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a70e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	43db      	mvns	r3, r3
 800a714:	4904      	ldr	r1, [pc, #16]	; (800a728 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a716:	4013      	ands	r3, r2
 800a718:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a71a:	bf00      	nop
 800a71c:	370c      	adds	r7, #12
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	40010400 	.word	0x40010400

0800a72c <LL_EXTI_IsActiveFlag_0_31>:
{
 800a72c:	b480      	push	{r7}
 800a72e:	b083      	sub	sp, #12
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a734:	4b07      	ldr	r3, [pc, #28]	; (800a754 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a736:	695a      	ldr	r2, [r3, #20]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4013      	ands	r3, r2
 800a73c:	687a      	ldr	r2, [r7, #4]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d101      	bne.n	800a746 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a742:	2301      	movs	r3, #1
 800a744:	e000      	b.n	800a748 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a746:	2300      	movs	r3, #0
}
 800a748:	4618      	mov	r0, r3
 800a74a:	370c      	adds	r7, #12
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	40010400 	.word	0x40010400

0800a758 <LL_EXTI_IsActiveFlag_32_63>:
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4013      	ands	r3, r2
 800a768:	687a      	ldr	r2, [r7, #4]
 800a76a:	429a      	cmp	r2, r3
 800a76c:	d101      	bne.n	800a772 <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a76e:	2301      	movs	r3, #1
 800a770:	e000      	b.n	800a774 <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr
 800a780:	40010400 	.word	0x40010400

0800a784 <LL_EXTI_ClearFlag_0_31>:
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a78c:	4a04      	ldr	r2, [pc, #16]	; (800a7a0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6153      	str	r3, [r2, #20]
}
 800a792:	bf00      	nop
 800a794:	370c      	adds	r7, #12
 800a796:	46bd      	mov	sp, r7
 800a798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79c:	4770      	bx	lr
 800a79e:	bf00      	nop
 800a7a0:	40010400 	.word	0x40010400

0800a7a4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a7ac:	4a04      	ldr	r2, [pc, #16]	; (800a7c0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a7b2:	bf00      	nop
 800a7b4:	370c      	adds	r7, #12
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7bc:	4770      	bx	lr
 800a7be:	bf00      	nop
 800a7c0:	40010400 	.word	0x40010400

0800a7c4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b088      	sub	sp, #32
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d102      	bne.n	800a7e0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a7da:	2301      	movs	r3, #1
 800a7dc:	77fb      	strb	r3, [r7, #31]
 800a7de:	e180      	b.n	800aae2 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7ee:	d102      	bne.n	800a7f6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	77fb      	strb	r3, [r7, #31]
 800a7f4:	e175      	b.n	800aae2 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	7f5b      	ldrb	r3, [r3, #29]
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d108      	bne.n	800a812 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2200      	movs	r2, #0
 800a80a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800a80c:	6878      	ldr	r0, [r7, #4]
 800a80e:	f7fc fd7f 	bl	8007310 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a81c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	695b      	ldr	r3, [r3, #20]
 800a82c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	68db      	ldr	r3, [r3, #12]
 800a832:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800a838:	4313      	orrs	r3, r2
 800a83a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	4b98      	ldr	r3, [pc, #608]	; (800aaa4 <HAL_COMP_Init+0x2e0>)
 800a844:	4013      	ands	r3, r2
 800a846:	687a      	ldr	r2, [r7, #4]
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	6979      	ldr	r1, [r7, #20]
 800a84c:	430b      	orrs	r3, r1
 800a84e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d015      	beq.n	800a88a <HAL_COMP_Init+0xc6>
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d112      	bne.n	800a88a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800a864:	4b90      	ldr	r3, [pc, #576]	; (800aaa8 <HAL_COMP_Init+0x2e4>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	099b      	lsrs	r3, r3, #6
 800a86a:	4a90      	ldr	r2, [pc, #576]	; (800aaac <HAL_COMP_Init+0x2e8>)
 800a86c:	fba2 2303 	umull	r2, r3, r2, r3
 800a870:	099a      	lsrs	r2, r3, #6
 800a872:	4613      	mov	r3, r2
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	4413      	add	r3, r2
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a87c:	e002      	b.n	800a884 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	3b01      	subs	r3, #1
 800a882:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1f9      	bne.n	800a87e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	4a88      	ldr	r2, [pc, #544]	; (800aab0 <HAL_COMP_Init+0x2ec>)
 800a890:	4293      	cmp	r3, r2
 800a892:	d028      	beq.n	800a8e6 <HAL_COMP_Init+0x122>
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a86      	ldr	r2, [pc, #536]	; (800aab4 <HAL_COMP_Init+0x2f0>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d020      	beq.n	800a8e0 <HAL_COMP_Init+0x11c>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	4a85      	ldr	r2, [pc, #532]	; (800aab8 <HAL_COMP_Init+0x2f4>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d018      	beq.n	800a8da <HAL_COMP_Init+0x116>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	4a83      	ldr	r2, [pc, #524]	; (800aabc <HAL_COMP_Init+0x2f8>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d010      	beq.n	800a8d4 <HAL_COMP_Init+0x110>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	4a82      	ldr	r2, [pc, #520]	; (800aac0 <HAL_COMP_Init+0x2fc>)
 800a8b8:	4293      	cmp	r3, r2
 800a8ba:	d008      	beq.n	800a8ce <HAL_COMP_Init+0x10a>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a80      	ldr	r2, [pc, #512]	; (800aac4 <HAL_COMP_Init+0x300>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d101      	bne.n	800a8ca <HAL_COMP_Init+0x106>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	e00f      	b.n	800a8ea <HAL_COMP_Init+0x126>
 800a8ca:	2302      	movs	r3, #2
 800a8cc:	e00d      	b.n	800a8ea <HAL_COMP_Init+0x126>
 800a8ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8d2:	e00a      	b.n	800a8ea <HAL_COMP_Init+0x126>
 800a8d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a8d8:	e007      	b.n	800a8ea <HAL_COMP_Init+0x126>
 800a8da:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800a8de:	e004      	b.n	800a8ea <HAL_COMP_Init+0x126>
 800a8e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a8e4:	e001      	b.n	800a8ea <HAL_COMP_Init+0x126>
 800a8e6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8ea:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	f003 0303 	and.w	r3, r3, #3
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 80b6 	beq.w	800aa66 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	699b      	ldr	r3, [r3, #24]
 800a8fe:	f003 0310 	and.w	r3, r3, #16
 800a902:	2b00      	cmp	r3, #0
 800a904:	d011      	beq.n	800a92a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a6e      	ldr	r2, [pc, #440]	; (800aac4 <HAL_COMP_Init+0x300>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d004      	beq.n	800a91a <HAL_COMP_Init+0x156>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a6c      	ldr	r2, [pc, #432]	; (800aac8 <HAL_COMP_Init+0x304>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d103      	bne.n	800a922 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800a91a:	6938      	ldr	r0, [r7, #16]
 800a91c:	f7ff fe80 	bl	800a620 <LL_EXTI_EnableRisingTrig_32_63>
 800a920:	e014      	b.n	800a94c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800a922:	6938      	ldr	r0, [r7, #16]
 800a924:	f7ff fe6a 	bl	800a5fc <LL_EXTI_EnableRisingTrig_0_31>
 800a928:	e010      	b.n	800a94c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a65      	ldr	r2, [pc, #404]	; (800aac4 <HAL_COMP_Init+0x300>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d004      	beq.n	800a93e <HAL_COMP_Init+0x17a>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a63      	ldr	r2, [pc, #396]	; (800aac8 <HAL_COMP_Init+0x304>)
 800a93a:	4293      	cmp	r3, r2
 800a93c:	d103      	bne.n	800a946 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800a93e:	6938      	ldr	r0, [r7, #16]
 800a940:	f7ff fe94 	bl	800a66c <LL_EXTI_DisableRisingTrig_32_63>
 800a944:	e002      	b.n	800a94c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800a946:	6938      	ldr	r0, [r7, #16]
 800a948:	f7ff fe7c 	bl	800a644 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	699b      	ldr	r3, [r3, #24]
 800a950:	f003 0320 	and.w	r3, r3, #32
 800a954:	2b00      	cmp	r3, #0
 800a956:	d011      	beq.n	800a97c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a59      	ldr	r2, [pc, #356]	; (800aac4 <HAL_COMP_Init+0x300>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d004      	beq.n	800a96c <HAL_COMP_Init+0x1a8>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a58      	ldr	r2, [pc, #352]	; (800aac8 <HAL_COMP_Init+0x304>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d103      	bne.n	800a974 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800a96c:	6938      	ldr	r0, [r7, #16]
 800a96e:	f7ff fea3 	bl	800a6b8 <LL_EXTI_EnableFallingTrig_32_63>
 800a972:	e014      	b.n	800a99e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800a974:	6938      	ldr	r0, [r7, #16]
 800a976:	f7ff fe8d 	bl	800a694 <LL_EXTI_EnableFallingTrig_0_31>
 800a97a:	e010      	b.n	800a99e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a50      	ldr	r2, [pc, #320]	; (800aac4 <HAL_COMP_Init+0x300>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d004      	beq.n	800a990 <HAL_COMP_Init+0x1cc>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a4f      	ldr	r2, [pc, #316]	; (800aac8 <HAL_COMP_Init+0x304>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d103      	bne.n	800a998 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800a990:	6938      	ldr	r0, [r7, #16]
 800a992:	f7ff feb7 	bl	800a704 <LL_EXTI_DisableFallingTrig_32_63>
 800a996:	e002      	b.n	800a99e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800a998:	6938      	ldr	r0, [r7, #16]
 800a99a:	f7ff fe9f 	bl	800a6dc <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a48      	ldr	r2, [pc, #288]	; (800aac4 <HAL_COMP_Init+0x300>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d004      	beq.n	800a9b2 <HAL_COMP_Init+0x1ee>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a46      	ldr	r2, [pc, #280]	; (800aac8 <HAL_COMP_Init+0x304>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d103      	bne.n	800a9ba <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800a9b2:	6938      	ldr	r0, [r7, #16]
 800a9b4:	f7ff fef6 	bl	800a7a4 <LL_EXTI_ClearFlag_32_63>
 800a9b8:	e002      	b.n	800a9c0 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800a9ba:	6938      	ldr	r0, [r7, #16]
 800a9bc:	f7ff fee2 	bl	800a784 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	699b      	ldr	r3, [r3, #24]
 800a9c4:	f003 0302 	and.w	r3, r3, #2
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d011      	beq.n	800a9f0 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a3c      	ldr	r2, [pc, #240]	; (800aac4 <HAL_COMP_Init+0x300>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d004      	beq.n	800a9e0 <HAL_COMP_Init+0x21c>
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a3b      	ldr	r2, [pc, #236]	; (800aac8 <HAL_COMP_Init+0x304>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d103      	bne.n	800a9e8 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800a9e0:	6938      	ldr	r0, [r7, #16]
 800a9e2:	f7ff fdd1 	bl	800a588 <LL_EXTI_EnableEvent_32_63>
 800a9e6:	e014      	b.n	800aa12 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800a9e8:	6938      	ldr	r0, [r7, #16]
 800a9ea:	f7ff fdbb 	bl	800a564 <LL_EXTI_EnableEvent_0_31>
 800a9ee:	e010      	b.n	800aa12 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a33      	ldr	r2, [pc, #204]	; (800aac4 <HAL_COMP_Init+0x300>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d004      	beq.n	800aa04 <HAL_COMP_Init+0x240>
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4a32      	ldr	r2, [pc, #200]	; (800aac8 <HAL_COMP_Init+0x304>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d103      	bne.n	800aa0c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800aa04:	6938      	ldr	r0, [r7, #16]
 800aa06:	f7ff fde5 	bl	800a5d4 <LL_EXTI_DisableEvent_32_63>
 800aa0a:	e002      	b.n	800aa12 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800aa0c:	6938      	ldr	r0, [r7, #16]
 800aa0e:	f7ff fdcd 	bl	800a5ac <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d011      	beq.n	800aa42 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	4a28      	ldr	r2, [pc, #160]	; (800aac4 <HAL_COMP_Init+0x300>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d004      	beq.n	800aa32 <HAL_COMP_Init+0x26e>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a26      	ldr	r2, [pc, #152]	; (800aac8 <HAL_COMP_Init+0x304>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d103      	bne.n	800aa3a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800aa32:	6938      	ldr	r0, [r7, #16]
 800aa34:	f7ff fd5c 	bl	800a4f0 <LL_EXTI_EnableIT_32_63>
 800aa38:	e04b      	b.n	800aad2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800aa3a:	6938      	ldr	r0, [r7, #16]
 800aa3c:	f7ff fd46 	bl	800a4cc <LL_EXTI_EnableIT_0_31>
 800aa40:	e047      	b.n	800aad2 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a1f      	ldr	r2, [pc, #124]	; (800aac4 <HAL_COMP_Init+0x300>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d004      	beq.n	800aa56 <HAL_COMP_Init+0x292>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	4a1d      	ldr	r2, [pc, #116]	; (800aac8 <HAL_COMP_Init+0x304>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d103      	bne.n	800aa5e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800aa56:	6938      	ldr	r0, [r7, #16]
 800aa58:	f7ff fd70 	bl	800a53c <LL_EXTI_DisableIT_32_63>
 800aa5c:	e039      	b.n	800aad2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800aa5e:	6938      	ldr	r0, [r7, #16]
 800aa60:	f7ff fd58 	bl	800a514 <LL_EXTI_DisableIT_0_31>
 800aa64:	e035      	b.n	800aad2 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a16      	ldr	r2, [pc, #88]	; (800aac4 <HAL_COMP_Init+0x300>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d004      	beq.n	800aa7a <HAL_COMP_Init+0x2b6>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a14      	ldr	r2, [pc, #80]	; (800aac8 <HAL_COMP_Init+0x304>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d103      	bne.n	800aa82 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800aa7a:	6938      	ldr	r0, [r7, #16]
 800aa7c:	f7ff fdaa 	bl	800a5d4 <LL_EXTI_DisableEvent_32_63>
 800aa80:	e002      	b.n	800aa88 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800aa82:	6938      	ldr	r0, [r7, #16]
 800aa84:	f7ff fd92 	bl	800a5ac <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	4a0d      	ldr	r2, [pc, #52]	; (800aac4 <HAL_COMP_Init+0x300>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d004      	beq.n	800aa9c <HAL_COMP_Init+0x2d8>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a0c      	ldr	r2, [pc, #48]	; (800aac8 <HAL_COMP_Init+0x304>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d117      	bne.n	800aacc <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800aa9c:	6938      	ldr	r0, [r7, #16]
 800aa9e:	f7ff fd4d 	bl	800a53c <LL_EXTI_DisableIT_32_63>
 800aaa2:	e016      	b.n	800aad2 <HAL_COMP_Init+0x30e>
 800aaa4:	ff007e0f 	.word	0xff007e0f
 800aaa8:	20000c34 	.word	0x20000c34
 800aaac:	053e2d63 	.word	0x053e2d63
 800aab0:	40010200 	.word	0x40010200
 800aab4:	40010204 	.word	0x40010204
 800aab8:	40010208 	.word	0x40010208
 800aabc:	4001020c 	.word	0x4001020c
 800aac0:	40010210 	.word	0x40010210
 800aac4:	40010214 	.word	0x40010214
 800aac8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800aacc:	6938      	ldr	r0, [r7, #16]
 800aace:	f7ff fd21 	bl	800a514 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	7f5b      	ldrb	r3, [r3, #29]
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d102      	bne.n	800aae2 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800aae2:	7ffb      	ldrb	r3, [r7, #31]
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d102      	bne.n	800ab04 <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800aafe:	2301      	movs	r3, #1
 800ab00:	73fb      	strb	r3, [r7, #15]
 800ab02:	e01d      	b.n	800ab40 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab12:	d102      	bne.n	800ab1a <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800ab14:	2301      	movs	r3, #1
 800ab16:	73fb      	strb	r3, [r7, #15]
 800ab18:	e012      	b.n	800ab40 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	7f5b      	ldrb	r3, [r3, #29]
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00b      	beq.n	800ab3c <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f022 0201 	bic.w	r2, r2, #1
 800ab32:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2201      	movs	r2, #1
 800ab38:	775a      	strb	r2, [r3, #29]
 800ab3a:	e001      	b.n	800ab40 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3714      	adds	r7, #20
 800ab46:	46bd      	mov	sp, r7
 800ab48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4c:	4770      	bx	lr
	...

0800ab50 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a2f      	ldr	r2, [pc, #188]	; (800ac1c <HAL_COMP_IRQHandler+0xcc>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d028      	beq.n	800abb4 <HAL_COMP_IRQHandler+0x64>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4a2e      	ldr	r2, [pc, #184]	; (800ac20 <HAL_COMP_IRQHandler+0xd0>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d020      	beq.n	800abae <HAL_COMP_IRQHandler+0x5e>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	4a2c      	ldr	r2, [pc, #176]	; (800ac24 <HAL_COMP_IRQHandler+0xd4>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d018      	beq.n	800aba8 <HAL_COMP_IRQHandler+0x58>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4a2b      	ldr	r2, [pc, #172]	; (800ac28 <HAL_COMP_IRQHandler+0xd8>)
 800ab7c:	4293      	cmp	r3, r2
 800ab7e:	d010      	beq.n	800aba2 <HAL_COMP_IRQHandler+0x52>
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a29      	ldr	r2, [pc, #164]	; (800ac2c <HAL_COMP_IRQHandler+0xdc>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d008      	beq.n	800ab9c <HAL_COMP_IRQHandler+0x4c>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	4a28      	ldr	r2, [pc, #160]	; (800ac30 <HAL_COMP_IRQHandler+0xe0>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d101      	bne.n	800ab98 <HAL_COMP_IRQHandler+0x48>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e00f      	b.n	800abb8 <HAL_COMP_IRQHandler+0x68>
 800ab98:	2302      	movs	r3, #2
 800ab9a:	e00d      	b.n	800abb8 <HAL_COMP_IRQHandler+0x68>
 800ab9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aba0:	e00a      	b.n	800abb8 <HAL_COMP_IRQHandler+0x68>
 800aba2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aba6:	e007      	b.n	800abb8 <HAL_COMP_IRQHandler+0x68>
 800aba8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800abac:	e004      	b.n	800abb8 <HAL_COMP_IRQHandler+0x68>
 800abae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800abb2:	e001      	b.n	800abb8 <HAL_COMP_IRQHandler+0x68>
 800abb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800abb8:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800abba:	2300      	movs	r3, #0
 800abbc:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a1b      	ldr	r2, [pc, #108]	; (800ac30 <HAL_COMP_IRQHandler+0xe0>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d004      	beq.n	800abd2 <HAL_COMP_IRQHandler+0x82>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a19      	ldr	r2, [pc, #100]	; (800ac34 <HAL_COMP_IRQHandler+0xe4>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d108      	bne.n	800abe4 <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800abd2:	68b8      	ldr	r0, [r7, #8]
 800abd4:	f7ff fdc0 	bl	800a758 <LL_EXTI_IsActiveFlag_32_63>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d00a      	beq.n	800abf4 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800abde:	2302      	movs	r3, #2
 800abe0:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800abe2:	e007      	b.n	800abf4 <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800abe4:	68b8      	ldr	r0, [r7, #8]
 800abe6:	f7ff fda1 	bl	800a72c <LL_EXTI_IsActiveFlag_0_31>
 800abea:	4603      	mov	r3, r0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d001      	beq.n	800abf4 <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800abf0:	2301      	movs	r3, #1
 800abf2:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d00c      	beq.n	800ac14 <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2b02      	cmp	r3, #2
 800abfe:	d103      	bne.n	800ac08 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800ac00:	68b8      	ldr	r0, [r7, #8]
 800ac02:	f7ff fdcf 	bl	800a7a4 <LL_EXTI_ClearFlag_32_63>
 800ac06:	e002      	b.n	800ac0e <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800ac08:	68b8      	ldr	r0, [r7, #8]
 800ac0a:	f7ff fdbb 	bl	800a784 <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f7fb fc14 	bl	800643c <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800ac14:	bf00      	nop
 800ac16:	3710      	adds	r7, #16
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}
 800ac1c:	40010200 	.word	0x40010200
 800ac20:	40010204 	.word	0x40010204
 800ac24:	40010208 	.word	0x40010208
 800ac28:	4001020c 	.word	0x4001020c
 800ac2c:	40010210 	.word	0x40010210
 800ac30:	40010214 	.word	0x40010214
 800ac34:	40010218 	.word	0x40010218

0800ac38 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800ac38:	b480      	push	{r7}
 800ac3a:	b083      	sub	sp, #12
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	0f9b      	lsrs	r3, r3, #30
 800ac48:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <__NVIC_SetPriorityGrouping>:
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f003 0307 	and.w	r3, r3, #7
 800ac66:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ac68:	4b0c      	ldr	r3, [pc, #48]	; (800ac9c <__NVIC_SetPriorityGrouping+0x44>)
 800ac6a:	68db      	ldr	r3, [r3, #12]
 800ac6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ac74:	4013      	ands	r3, r2
 800ac76:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ac80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ac84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ac8a:	4a04      	ldr	r2, [pc, #16]	; (800ac9c <__NVIC_SetPriorityGrouping+0x44>)
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	60d3      	str	r3, [r2, #12]
}
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	e000ed00 	.word	0xe000ed00

0800aca0 <__NVIC_GetPriorityGrouping>:
{
 800aca0:	b480      	push	{r7}
 800aca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aca4:	4b04      	ldr	r3, [pc, #16]	; (800acb8 <__NVIC_GetPriorityGrouping+0x18>)
 800aca6:	68db      	ldr	r3, [r3, #12]
 800aca8:	0a1b      	lsrs	r3, r3, #8
 800acaa:	f003 0307 	and.w	r3, r3, #7
}
 800acae:	4618      	mov	r0, r3
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	e000ed00 	.word	0xe000ed00

0800acbc <__NVIC_EnableIRQ>:
{
 800acbc:	b480      	push	{r7}
 800acbe:	b083      	sub	sp, #12
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800acc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acca:	2b00      	cmp	r3, #0
 800accc:	db0b      	blt.n	800ace6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800acce:	79fb      	ldrb	r3, [r7, #7]
 800acd0:	f003 021f 	and.w	r2, r3, #31
 800acd4:	4907      	ldr	r1, [pc, #28]	; (800acf4 <__NVIC_EnableIRQ+0x38>)
 800acd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800acda:	095b      	lsrs	r3, r3, #5
 800acdc:	2001      	movs	r0, #1
 800acde:	fa00 f202 	lsl.w	r2, r0, r2
 800ace2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800ace6:	bf00      	nop
 800ace8:	370c      	adds	r7, #12
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	e000e100 	.word	0xe000e100

0800acf8 <__NVIC_DisableIRQ>:
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	db10      	blt.n	800ad2c <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ad0a:	79fb      	ldrb	r3, [r7, #7]
 800ad0c:	f003 021f 	and.w	r2, r3, #31
 800ad10:	4909      	ldr	r1, [pc, #36]	; (800ad38 <__NVIC_DisableIRQ+0x40>)
 800ad12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad16:	095b      	lsrs	r3, r3, #5
 800ad18:	2001      	movs	r0, #1
 800ad1a:	fa00 f202 	lsl.w	r2, r0, r2
 800ad1e:	3320      	adds	r3, #32
 800ad20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800ad24:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800ad28:	f3bf 8f6f 	isb	sy
}
 800ad2c:	bf00      	nop
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad36:	4770      	bx	lr
 800ad38:	e000e100 	.word	0xe000e100

0800ad3c <__NVIC_SetPriority>:
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	6039      	str	r1, [r7, #0]
 800ad46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	db0a      	blt.n	800ad66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	b2da      	uxtb	r2, r3
 800ad54:	490c      	ldr	r1, [pc, #48]	; (800ad88 <__NVIC_SetPriority+0x4c>)
 800ad56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad5a:	0112      	lsls	r2, r2, #4
 800ad5c:	b2d2      	uxtb	r2, r2
 800ad5e:	440b      	add	r3, r1
 800ad60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad64:	e00a      	b.n	800ad7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	4908      	ldr	r1, [pc, #32]	; (800ad8c <__NVIC_SetPriority+0x50>)
 800ad6c:	79fb      	ldrb	r3, [r7, #7]
 800ad6e:	f003 030f 	and.w	r3, r3, #15
 800ad72:	3b04      	subs	r3, #4
 800ad74:	0112      	lsls	r2, r2, #4
 800ad76:	b2d2      	uxtb	r2, r2
 800ad78:	440b      	add	r3, r1
 800ad7a:	761a      	strb	r2, [r3, #24]
}
 800ad7c:	bf00      	nop
 800ad7e:	370c      	adds	r7, #12
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	e000e100 	.word	0xe000e100
 800ad8c:	e000ed00 	.word	0xe000ed00

0800ad90 <NVIC_EncodePriority>:
{
 800ad90:	b480      	push	{r7}
 800ad92:	b089      	sub	sp, #36	; 0x24
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f003 0307 	and.w	r3, r3, #7
 800ada2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	f1c3 0307 	rsb	r3, r3, #7
 800adaa:	2b04      	cmp	r3, #4
 800adac:	bf28      	it	cs
 800adae:	2304      	movcs	r3, #4
 800adb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	3304      	adds	r3, #4
 800adb6:	2b06      	cmp	r3, #6
 800adb8:	d902      	bls.n	800adc0 <NVIC_EncodePriority+0x30>
 800adba:	69fb      	ldr	r3, [r7, #28]
 800adbc:	3b03      	subs	r3, #3
 800adbe:	e000      	b.n	800adc2 <NVIC_EncodePriority+0x32>
 800adc0:	2300      	movs	r3, #0
 800adc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800adc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	fa02 f303 	lsl.w	r3, r2, r3
 800adce:	43da      	mvns	r2, r3
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	401a      	ands	r2, r3
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800add8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	fa01 f303 	lsl.w	r3, r1, r3
 800ade2:	43d9      	mvns	r1, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ade8:	4313      	orrs	r3, r2
}
 800adea:	4618      	mov	r0, r3
 800adec:	3724      	adds	r7, #36	; 0x24
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
	...

0800adf8 <SysTick_Config>:
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	3b01      	subs	r3, #1
 800ae04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae08:	d301      	bcc.n	800ae0e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e00f      	b.n	800ae2e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ae0e:	4a0a      	ldr	r2, [pc, #40]	; (800ae38 <SysTick_Config+0x40>)
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	3b01      	subs	r3, #1
 800ae14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ae16:	210f      	movs	r1, #15
 800ae18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae1c:	f7ff ff8e 	bl	800ad3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ae20:	4b05      	ldr	r3, [pc, #20]	; (800ae38 <SysTick_Config+0x40>)
 800ae22:	2200      	movs	r2, #0
 800ae24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ae26:	4b04      	ldr	r3, [pc, #16]	; (800ae38 <SysTick_Config+0x40>)
 800ae28:	2207      	movs	r2, #7
 800ae2a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800ae2c:	2300      	movs	r3, #0
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3708      	adds	r7, #8
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	e000e010 	.word	0xe000e010

0800ae3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff ff07 	bl	800ac58 <__NVIC_SetPriorityGrouping>
}
 800ae4a:	bf00      	nop
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b086      	sub	sp, #24
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	4603      	mov	r3, r0
 800ae5a:	60b9      	str	r1, [r7, #8]
 800ae5c:	607a      	str	r2, [r7, #4]
 800ae5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ae60:	f7ff ff1e 	bl	800aca0 <__NVIC_GetPriorityGrouping>
 800ae64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ae66:	687a      	ldr	r2, [r7, #4]
 800ae68:	68b9      	ldr	r1, [r7, #8]
 800ae6a:	6978      	ldr	r0, [r7, #20]
 800ae6c:	f7ff ff90 	bl	800ad90 <NVIC_EncodePriority>
 800ae70:	4602      	mov	r2, r0
 800ae72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae76:	4611      	mov	r1, r2
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7ff ff5f 	bl	800ad3c <__NVIC_SetPriority>
}
 800ae7e:	bf00      	nop
 800ae80:	3718      	adds	r7, #24
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ae90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae94:	4618      	mov	r0, r3
 800ae96:	f7ff ff11 	bl	800acbc <__NVIC_EnableIRQ>
}
 800ae9a:	bf00      	nop
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800aea2:	b580      	push	{r7, lr}
 800aea4:	b082      	sub	sp, #8
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	4603      	mov	r3, r0
 800aeaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800aeac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7ff ff21 	bl	800acf8 <__NVIC_DisableIRQ>
}
 800aeb6:	bf00      	nop
 800aeb8:	3708      	adds	r7, #8
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	b082      	sub	sp, #8
 800aec2:	af00      	add	r7, sp, #0
 800aec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800aec6:	6878      	ldr	r0, [r7, #4]
 800aec8:	f7ff ff96 	bl	800adf8 <SysTick_Config>
 800aecc:	4603      	mov	r3, r0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d101      	bne.n	800aee8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e014      	b.n	800af12 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	791b      	ldrb	r3, [r3, #4]
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d105      	bne.n	800aefe <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	2200      	movs	r2, #0
 800aef6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f7fc fac7 	bl	800748c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2202      	movs	r2, #2
 800af02:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2201      	movs	r2, #1
 800af0e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3708      	adds	r7, #8
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}

0800af1a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b082      	sub	sp, #8
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
 800af22:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	795b      	ldrb	r3, [r3, #5]
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d101      	bne.n	800af30 <HAL_DAC_Start+0x16>
 800af2c:	2302      	movs	r3, #2
 800af2e:	e043      	b.n	800afb8 <HAL_DAC_Start+0x9e>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2202      	movs	r2, #2
 800af3a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	6819      	ldr	r1, [r3, #0]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	f003 0310 	and.w	r3, r3, #16
 800af48:	2201      	movs	r2, #1
 800af4a:	409a      	lsls	r2, r3
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	430a      	orrs	r2, r1
 800af52:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800af54:	2001      	movs	r0, #1
 800af56:	f7fd fe65 	bl	8008c24 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10f      	bne.n	800af80 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800af6a:	2b02      	cmp	r3, #2
 800af6c:	d11d      	bne.n	800afaa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	685a      	ldr	r2, [r3, #4]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	f042 0201 	orr.w	r2, r2, #1
 800af7c:	605a      	str	r2, [r3, #4]
 800af7e:	e014      	b.n	800afaa <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	f003 0310 	and.w	r3, r3, #16
 800af90:	2102      	movs	r1, #2
 800af92:	fa01 f303 	lsl.w	r3, r1, r3
 800af96:	429a      	cmp	r2, r3
 800af98:	d107      	bne.n	800afaa <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	685a      	ldr	r2, [r3, #4]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f042 0202 	orr.w	r2, r2, #2
 800afa8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2201      	movs	r2, #1
 800afae:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800afb6:	2300      	movs	r3, #0
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3708      	adds	r7, #8
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
 800afcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800afce:	2300      	movs	r3, #0
 800afd0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	795b      	ldrb	r3, [r3, #5]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d101      	bne.n	800afde <HAL_DAC_Start_DMA+0x1e>
 800afda:	2302      	movs	r3, #2
 800afdc:	e0a1      	b.n	800b122 <HAL_DAC_Start_DMA+0x162>
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2201      	movs	r2, #1
 800afe2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2202      	movs	r2, #2
 800afe8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d12a      	bne.n	800b046 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	689b      	ldr	r3, [r3, #8]
 800aff4:	4a4d      	ldr	r2, [pc, #308]	; (800b12c <HAL_DAC_Start_DMA+0x16c>)
 800aff6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	4a4c      	ldr	r2, [pc, #304]	; (800b130 <HAL_DAC_Start_DMA+0x170>)
 800affe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	4a4b      	ldr	r2, [pc, #300]	; (800b134 <HAL_DAC_Start_DMA+0x174>)
 800b006:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b016:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b018:	6a3b      	ldr	r3, [r7, #32]
 800b01a:	2b04      	cmp	r3, #4
 800b01c:	d009      	beq.n	800b032 <HAL_DAC_Start_DMA+0x72>
 800b01e:	2b08      	cmp	r3, #8
 800b020:	d00c      	beq.n	800b03c <HAL_DAC_Start_DMA+0x7c>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d000      	beq.n	800b028 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b026:	e039      	b.n	800b09c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3308      	adds	r3, #8
 800b02e:	613b      	str	r3, [r7, #16]
        break;
 800b030:	e034      	b.n	800b09c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	330c      	adds	r3, #12
 800b038:	613b      	str	r3, [r7, #16]
        break;
 800b03a:	e02f      	b.n	800b09c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	3310      	adds	r3, #16
 800b042:	613b      	str	r3, [r7, #16]
        break;
 800b044:	e02a      	b.n	800b09c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	4a3b      	ldr	r2, [pc, #236]	; (800b138 <HAL_DAC_Start_DMA+0x178>)
 800b04c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	4a3a      	ldr	r2, [pc, #232]	; (800b13c <HAL_DAC_Start_DMA+0x17c>)
 800b054:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	4a39      	ldr	r2, [pc, #228]	; (800b140 <HAL_DAC_Start_DMA+0x180>)
 800b05c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b06c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	2b04      	cmp	r3, #4
 800b072:	d009      	beq.n	800b088 <HAL_DAC_Start_DMA+0xc8>
 800b074:	2b08      	cmp	r3, #8
 800b076:	d00c      	beq.n	800b092 <HAL_DAC_Start_DMA+0xd2>
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d000      	beq.n	800b07e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b07c:	e00e      	b.n	800b09c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	3314      	adds	r3, #20
 800b084:	613b      	str	r3, [r7, #16]
        break;
 800b086:	e009      	b.n	800b09c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	3318      	adds	r3, #24
 800b08e:	613b      	str	r3, [r7, #16]
        break;
 800b090:	e004      	b.n	800b09c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	331c      	adds	r3, #28
 800b098:	613b      	str	r3, [r7, #16]
        break;
 800b09a:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d111      	bne.n	800b0c6 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0b0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6898      	ldr	r0, [r3, #8]
 800b0b6:	6879      	ldr	r1, [r7, #4]
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	f000 fbd2 	bl	800b864 <HAL_DMA_Start_IT>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	75fb      	strb	r3, [r7, #23]
 800b0c4:	e010      	b.n	800b0e8 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	681a      	ldr	r2, [r3, #0]
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b0d4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	68d8      	ldr	r0, [r3, #12]
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	693a      	ldr	r2, [r7, #16]
 800b0e0:	f000 fbc0 	bl	800b864 <HAL_DMA_Start_IT>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b0ee:	7dfb      	ldrb	r3, [r7, #23]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d10f      	bne.n	800b114 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	6819      	ldr	r1, [r3, #0]
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	f003 0310 	and.w	r3, r3, #16
 800b100:	2201      	movs	r2, #1
 800b102:	409a      	lsls	r2, r3
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b10c:	2001      	movs	r0, #1
 800b10e:	f7fd fd89 	bl	8008c24 <HAL_Delay>
 800b112:	e005      	b.n	800b120 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	691b      	ldr	r3, [r3, #16]
 800b118:	f043 0204 	orr.w	r2, r3, #4
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b120:	7dfb      	ldrb	r3, [r7, #23]
}
 800b122:	4618      	mov	r0, r3
 800b124:	3718      	adds	r7, #24
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
 800b12a:	bf00      	nop
 800b12c:	0800b601 	.word	0x0800b601
 800b130:	0800b623 	.word	0x0800b623
 800b134:	0800b63f 	.word	0x0800b63f
 800b138:	0800b6a9 	.word	0x0800b6a9
 800b13c:	0800b6cb 	.word	0x0800b6cb
 800b140:	0800b6e7 	.word	0x0800b6e7

0800b144 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b084      	sub	sp, #16
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	6819      	ldr	r1, [r3, #0]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	f003 0310 	and.w	r3, r3, #16
 800b15a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b15e:	fa02 f303 	lsl.w	r3, r2, r3
 800b162:	43da      	mvns	r2, r3
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	400a      	ands	r2, r1
 800b16a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	6819      	ldr	r1, [r3, #0]
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	f003 0310 	and.w	r3, r3, #16
 800b178:	2201      	movs	r2, #1
 800b17a:	fa02 f303 	lsl.w	r3, r2, r3
 800b17e:	43da      	mvns	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	400a      	ands	r2, r1
 800b186:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b188:	2001      	movs	r0, #1
 800b18a:	f7fd fd4b 	bl	8008c24 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10f      	bne.n	800b1b4 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	4618      	mov	r0, r3
 800b19a:	f000 fbde 	bl	800b95a <HAL_DMA_Abort>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b1b0:	601a      	str	r2, [r3, #0]
 800b1b2:	e00e      	b.n	800b1d2 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 fbce 	bl	800b95a <HAL_DMA_Abort>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681a      	ldr	r2, [r3, #0]
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b1d0:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d003      	beq.n	800b1e0 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2204      	movs	r2, #4
 800b1dc:	711a      	strb	r2, [r3, #4]
 800b1de:	e002      	b.n	800b1e6 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b1e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3710      	adds	r7, #16
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b087      	sub	sp, #28
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b214:	697a      	ldr	r2, [r7, #20]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4413      	add	r3, r2
 800b21a:	3308      	adds	r3, #8
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e004      	b.n	800b22a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4413      	add	r3, r2
 800b226:	3314      	adds	r3, #20
 800b228:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	461a      	mov	r2, r3
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b232:	2300      	movs	r3, #0
}
 800b234:	4618      	mov	r0, r3
 800b236:	371c      	adds	r7, #28
 800b238:	46bd      	mov	sp, r7
 800b23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b23e:	4770      	bx	lr

0800b240 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d103      	bne.n	800b294 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b292:	e002      	b.n	800b29a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	370c      	adds	r7, #12
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
	...

0800b2a8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b08a      	sub	sp, #40	; 0x28
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	795b      	ldrb	r3, [r3, #5]
 800b2bc:	2b01      	cmp	r3, #1
 800b2be:	d101      	bne.n	800b2c4 <HAL_DAC_ConfigChannel+0x1c>
 800b2c0:	2302      	movs	r3, #2
 800b2c2:	e194      	b.n	800b5ee <HAL_DAC_ConfigChannel+0x346>
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2202      	movs	r2, #2
 800b2ce:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	689b      	ldr	r3, [r3, #8]
 800b2d4:	2b04      	cmp	r3, #4
 800b2d6:	d174      	bne.n	800b3c2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d137      	bne.n	800b34e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b2de:	f7fd fc95 	bl	8008c0c <HAL_GetTick>
 800b2e2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b2e4:	e011      	b.n	800b30a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b2e6:	f7fd fc91 	bl	8008c0c <HAL_GetTick>
 800b2ea:	4602      	mov	r2, r0
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	1ad3      	subs	r3, r2, r3
 800b2f0:	2b01      	cmp	r3, #1
 800b2f2:	d90a      	bls.n	800b30a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	f043 0208 	orr.w	r2, r3, #8
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2203      	movs	r2, #3
 800b304:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b306:	2303      	movs	r3, #3
 800b308:	e171      	b.n	800b5ee <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1e6      	bne.n	800b2e6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b318:	2001      	movs	r0, #1
 800b31a:	f7fd fc83 	bl	8008c24 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b326:	641a      	str	r2, [r3, #64]	; 0x40
 800b328:	e01e      	b.n	800b368 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b32a:	f7fd fc6f 	bl	8008c0c <HAL_GetTick>
 800b32e:	4602      	mov	r2, r0
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	1ad3      	subs	r3, r2, r3
 800b334:	2b01      	cmp	r3, #1
 800b336:	d90a      	bls.n	800b34e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	691b      	ldr	r3, [r3, #16]
 800b33c:	f043 0208 	orr.w	r2, r3, #8
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	2203      	movs	r2, #3
 800b348:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b34a:	2303      	movs	r3, #3
 800b34c:	e14f      	b.n	800b5ee <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b354:	2b00      	cmp	r3, #0
 800b356:	dbe8      	blt.n	800b32a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b358:	2001      	movs	r0, #1
 800b35a:	f7fd fc63 	bl	8008c24 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	68ba      	ldr	r2, [r7, #8]
 800b364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b366:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f003 0310 	and.w	r3, r3, #16
 800b374:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b378:	fa01 f303 	lsl.w	r3, r1, r3
 800b37c:	43db      	mvns	r3, r3
 800b37e:	ea02 0103 	and.w	r1, r2, r3
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f003 0310 	and.w	r3, r3, #16
 800b38c:	409a      	lsls	r2, r3
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	430a      	orrs	r2, r1
 800b394:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f003 0310 	and.w	r3, r3, #16
 800b3a2:	21ff      	movs	r1, #255	; 0xff
 800b3a4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3a8:	43db      	mvns	r3, r3
 800b3aa:	ea02 0103 	and.w	r1, r2, r3
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f003 0310 	and.w	r3, r3, #16
 800b3b8:	409a      	lsls	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	430a      	orrs	r2, r1
 800b3c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d11d      	bne.n	800b406 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f003 0310 	and.w	r3, r3, #16
 800b3d8:	221f      	movs	r2, #31
 800b3da:	fa02 f303 	lsl.w	r3, r2, r3
 800b3de:	43db      	mvns	r3, r3
 800b3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3e2:	4013      	ands	r3, r2
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	6a1b      	ldr	r3, [r3, #32]
 800b3ea:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f003 0310 	and.w	r3, r3, #16
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3fa:	4313      	orrs	r3, r2
 800b3fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b404:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b40c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f003 0310 	and.w	r3, r3, #16
 800b414:	2207      	movs	r2, #7
 800b416:	fa02 f303 	lsl.w	r3, r2, r3
 800b41a:	43db      	mvns	r3, r3
 800b41c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b41e:	4013      	ands	r3, r2
 800b420:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	f003 0301 	and.w	r3, r3, #1
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d002      	beq.n	800b434 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b42e:	2300      	movs	r3, #0
 800b430:	623b      	str	r3, [r7, #32]
 800b432:	e011      	b.n	800b458 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	699b      	ldr	r3, [r3, #24]
 800b438:	f003 0302 	and.w	r3, r3, #2
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d002      	beq.n	800b446 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b440:	2301      	movs	r3, #1
 800b442:	623b      	str	r3, [r7, #32]
 800b444:	e008      	b.n	800b458 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	695b      	ldr	r3, [r3, #20]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b44e:	2301      	movs	r3, #1
 800b450:	623b      	str	r3, [r7, #32]
 800b452:	e001      	b.n	800b458 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b454:	2300      	movs	r3, #0
 800b456:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	689a      	ldr	r2, [r3, #8]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	695b      	ldr	r3, [r3, #20]
 800b460:	4313      	orrs	r3, r2
 800b462:	6a3a      	ldr	r2, [r7, #32]
 800b464:	4313      	orrs	r3, r2
 800b466:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f003 0310 	and.w	r3, r3, #16
 800b46e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b472:	fa02 f303 	lsl.w	r3, r2, r3
 800b476:	43db      	mvns	r3, r3
 800b478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b47a:	4013      	ands	r3, r2
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	791b      	ldrb	r3, [r3, #4]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d102      	bne.n	800b48c <HAL_DAC_ConfigChannel+0x1e4>
 800b486:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b48a:	e000      	b.n	800b48e <HAL_DAC_ConfigChannel+0x1e6>
 800b48c:	2300      	movs	r3, #0
 800b48e:	69ba      	ldr	r2, [r7, #24]
 800b490:	4313      	orrs	r3, r2
 800b492:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f003 0310 	and.w	r3, r3, #16
 800b49a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b49e:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a2:	43db      	mvns	r3, r3
 800b4a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4a6:	4013      	ands	r3, r2
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	795b      	ldrb	r3, [r3, #5]
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d102      	bne.n	800b4b8 <HAL_DAC_ConfigChannel+0x210>
 800b4b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b4b6:	e000      	b.n	800b4ba <HAL_DAC_ConfigChannel+0x212>
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	69ba      	ldr	r2, [r7, #24]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b4c6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d114      	bne.n	800b4fa <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b4d0:	f001 fbc2 	bl	800cc58 <HAL_RCC_GetHCLKFreq>
 800b4d4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	4a47      	ldr	r2, [pc, #284]	; (800b5f8 <HAL_DAC_ConfigChannel+0x350>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d904      	bls.n	800b4e8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4e4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4e6:	e00d      	b.n	800b504 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	4a44      	ldr	r2, [pc, #272]	; (800b5fc <HAL_DAC_ConfigChannel+0x354>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d909      	bls.n	800b504 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b4f6:	627b      	str	r3, [r7, #36]	; 0x24
 800b4f8:	e004      	b.n	800b504 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b500:	4313      	orrs	r3, r2
 800b502:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f003 0310 	and.w	r3, r3, #16
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	fa02 f303 	lsl.w	r3, r2, r3
 800b510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b512:	4313      	orrs	r3, r2
 800b514:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b51c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6819      	ldr	r1, [r3, #0]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	f003 0310 	and.w	r3, r3, #16
 800b52a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b52e:	fa02 f303 	lsl.w	r3, r2, r3
 800b532:	43da      	mvns	r2, r3
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	400a      	ands	r2, r1
 800b53a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f003 0310 	and.w	r3, r3, #16
 800b54a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b54e:	fa02 f303 	lsl.w	r3, r2, r3
 800b552:	43db      	mvns	r3, r3
 800b554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b556:	4013      	ands	r3, r2
 800b558:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f003 0310 	and.w	r3, r3, #16
 800b566:	69ba      	ldr	r2, [r7, #24]
 800b568:	fa02 f303 	lsl.w	r3, r2, r3
 800b56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56e:	4313      	orrs	r3, r2
 800b570:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b578:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	6819      	ldr	r1, [r3, #0]
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f003 0310 	and.w	r3, r3, #16
 800b586:	22c0      	movs	r2, #192	; 0xc0
 800b588:	fa02 f303 	lsl.w	r3, r2, r3
 800b58c:	43da      	mvns	r2, r3
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	400a      	ands	r2, r1
 800b594:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	68db      	ldr	r3, [r3, #12]
 800b59a:	089b      	lsrs	r3, r3, #2
 800b59c:	f003 030f 	and.w	r3, r3, #15
 800b5a0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	089b      	lsrs	r3, r3, #2
 800b5a8:	021b      	lsls	r3, r3, #8
 800b5aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	4313      	orrs	r3, r2
 800b5b2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b5c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c8:	43db      	mvns	r3, r3
 800b5ca:	ea02 0103 	and.w	r1, r2, r3
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f003 0310 	and.w	r3, r3, #16
 800b5d4:	69ba      	ldr	r2, [r7, #24]
 800b5d6:	409a      	lsls	r2, r3
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	430a      	orrs	r2, r1
 800b5de:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b5ec:	2300      	movs	r3, #0
}
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	3728      	adds	r7, #40	; 0x28
 800b5f2:	46bd      	mov	sp, r7
 800b5f4:	bd80      	pop	{r7, pc}
 800b5f6:	bf00      	nop
 800b5f8:	09896800 	.word	0x09896800
 800b5fc:	04c4b400 	.word	0x04c4b400

0800b600 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f7ff fe16 	bl	800b240 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	2201      	movs	r2, #1
 800b618:	711a      	strb	r2, [r3, #4]
}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b084      	sub	sp, #16
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b62e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f7ff fe0f 	bl	800b254 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b636:	bf00      	nop
 800b638:	3710      	adds	r7, #16
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}

0800b63e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b63e:	b580      	push	{r7, lr}
 800b640:	b084      	sub	sp, #16
 800b642:	af00      	add	r7, sp, #0
 800b644:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b64a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	f043 0204 	orr.w	r2, r3, #4
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b658:	68f8      	ldr	r0, [r7, #12]
 800b65a:	f7ff fe05 	bl	800b268 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2201      	movs	r2, #1
 800b662:	711a      	strb	r2, [r3, #4]
}
 800b664:	bf00      	nop
 800b666:	3710      	adds	r7, #16
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b083      	sub	sp, #12
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr

0800b680 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b680:	b480      	push	{r7}
 800b682:	b083      	sub	sp, #12
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b688:	bf00      	nop
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b69c:	bf00      	nop
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b084      	sub	sp, #16
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b6b6:	68f8      	ldr	r0, [r7, #12]
 800b6b8:	f7ff ffd8 	bl	800b66c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	711a      	strb	r2, [r3, #4]
}
 800b6c2:	bf00      	nop
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b084      	sub	sp, #16
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f7ff ffd1 	bl	800b680 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b6de:	bf00      	nop
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	f043 0204 	orr.w	r2, r3, #4
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f7ff ffc7 	bl	800b694 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	2201      	movs	r2, #1
 800b70a:	711a      	strb	r2, [r3, #4]
}
 800b70c:	bf00      	nop
 800b70e:	3710      	adds	r7, #16
 800b710:	46bd      	mov	sp, r7
 800b712:	bd80      	pop	{r7, pc}

0800b714 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b084      	sub	sp, #16
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b722:	2301      	movs	r3, #1
 800b724:	e08d      	b.n	800b842 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	461a      	mov	r2, r3
 800b72c:	4b47      	ldr	r3, [pc, #284]	; (800b84c <HAL_DMA_Init+0x138>)
 800b72e:	429a      	cmp	r2, r3
 800b730:	d80f      	bhi.n	800b752 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	461a      	mov	r2, r3
 800b738:	4b45      	ldr	r3, [pc, #276]	; (800b850 <HAL_DMA_Init+0x13c>)
 800b73a:	4413      	add	r3, r2
 800b73c:	4a45      	ldr	r2, [pc, #276]	; (800b854 <HAL_DMA_Init+0x140>)
 800b73e:	fba2 2303 	umull	r2, r3, r2, r3
 800b742:	091b      	lsrs	r3, r3, #4
 800b744:	009a      	lsls	r2, r3, #2
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a42      	ldr	r2, [pc, #264]	; (800b858 <HAL_DMA_Init+0x144>)
 800b74e:	641a      	str	r2, [r3, #64]	; 0x40
 800b750:	e00e      	b.n	800b770 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	461a      	mov	r2, r3
 800b758:	4b40      	ldr	r3, [pc, #256]	; (800b85c <HAL_DMA_Init+0x148>)
 800b75a:	4413      	add	r3, r2
 800b75c:	4a3d      	ldr	r2, [pc, #244]	; (800b854 <HAL_DMA_Init+0x140>)
 800b75e:	fba2 2303 	umull	r2, r3, r2, r3
 800b762:	091b      	lsrs	r3, r3, #4
 800b764:	009a      	lsls	r2, r3, #2
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4a3c      	ldr	r2, [pc, #240]	; (800b860 <HAL_DMA_Init+0x14c>)
 800b76e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2202      	movs	r2, #2
 800b774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b78a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b794:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	691b      	ldr	r3, [r3, #16]
 800b79a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b7a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	699b      	ldr	r3, [r3, #24]
 800b7a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b7ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6a1b      	ldr	r3, [r3, #32]
 800b7b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fa10 	bl	800bbe8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7d0:	d102      	bne.n	800b7d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b7e0:	b2d2      	uxtb	r2, r2
 800b7e2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e8:	687a      	ldr	r2, [r7, #4]
 800b7ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b7ec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d010      	beq.n	800b818 <HAL_DMA_Init+0x104>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	d80c      	bhi.n	800b818 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 fa30 	bl	800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b808:	2200      	movs	r2, #0
 800b80a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b814:	605a      	str	r2, [r3, #4]
 800b816:	e008      	b.n	800b82a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2200      	movs	r2, #0
 800b81c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2200      	movs	r2, #0
 800b822:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2200      	movs	r2, #0
 800b828:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	2200      	movs	r2, #0
 800b82e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	40020407 	.word	0x40020407
 800b850:	bffdfff8 	.word	0xbffdfff8
 800b854:	cccccccd 	.word	0xcccccccd
 800b858:	40020000 	.word	0x40020000
 800b85c:	bffdfbf8 	.word	0xbffdfbf8
 800b860:	40020400 	.word	0x40020400

0800b864 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b086      	sub	sp, #24
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b872:	2300      	movs	r3, #0
 800b874:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d101      	bne.n	800b884 <HAL_DMA_Start_IT+0x20>
 800b880:	2302      	movs	r3, #2
 800b882:	e066      	b.n	800b952 <HAL_DMA_Start_IT+0xee>
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b01      	cmp	r3, #1
 800b896:	d155      	bne.n	800b944 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2202      	movs	r2, #2
 800b89c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	681a      	ldr	r2, [r3, #0]
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f022 0201 	bic.w	r2, r2, #1
 800b8b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	68b9      	ldr	r1, [r7, #8]
 800b8bc:	68f8      	ldr	r0, [r7, #12]
 800b8be:	f000 f954 	bl	800bb6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d008      	beq.n	800b8dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	681a      	ldr	r2, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f042 020e 	orr.w	r2, r2, #14
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	e00f      	b.n	800b8fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f022 0204 	bic.w	r2, r2, #4
 800b8ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	f042 020a 	orr.w	r2, r2, #10
 800b8fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b906:	2b00      	cmp	r3, #0
 800b908:	d007      	beq.n	800b91a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b90e:	681a      	ldr	r2, [r3, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b918:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d007      	beq.n	800b932 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b930:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	f042 0201 	orr.w	r2, r2, #1
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	e005      	b.n	800b950 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2200      	movs	r2, #0
 800b948:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800b94c:	2302      	movs	r3, #2
 800b94e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800b950:	7dfb      	ldrb	r3, [r7, #23]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3718      	adds	r7, #24
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}

0800b95a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b95a:	b480      	push	{r7}
 800b95c:	b085      	sub	sp, #20
 800b95e:	af00      	add	r7, sp, #0
 800b960:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b962:	2300      	movs	r3, #0
 800b964:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d005      	beq.n	800b97e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2204      	movs	r2, #4
 800b976:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800b978:	2301      	movs	r3, #1
 800b97a:	73fb      	strb	r3, [r7, #15]
 800b97c:	e037      	b.n	800b9ee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	f022 020e 	bic.w	r2, r2, #14
 800b98c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b998:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b99c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f022 0201 	bic.w	r2, r2, #1
 800b9ac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b2:	f003 021f 	and.w	r2, r3, #31
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ba:	2101      	movs	r1, #1
 800b9bc:	fa01 f202 	lsl.w	r2, r1, r2
 800b9c0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9c6:	687a      	ldr	r2, [r7, #4]
 800b9c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b9ca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00c      	beq.n	800b9ee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d8:	681a      	ldr	r2, [r3, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b9e2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800b9ec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2201      	movs	r2, #1
 800b9f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800b9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3714      	adds	r7, #20
 800ba04:	46bd      	mov	sp, r7
 800ba06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0a:	4770      	bx	lr

0800ba0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b084      	sub	sp, #16
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba28:	f003 031f 	and.w	r3, r3, #31
 800ba2c:	2204      	movs	r2, #4
 800ba2e:	409a      	lsls	r2, r3
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	4013      	ands	r3, r2
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d026      	beq.n	800ba86 <HAL_DMA_IRQHandler+0x7a>
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	f003 0304 	and.w	r3, r3, #4
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d021      	beq.n	800ba86 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 0320 	and.w	r3, r3, #32
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d107      	bne.n	800ba60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f022 0204 	bic.w	r2, r2, #4
 800ba5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba64:	f003 021f 	and.w	r2, r3, #31
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba6c:	2104      	movs	r1, #4
 800ba6e:	fa01 f202 	lsl.w	r2, r1, r2
 800ba72:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d071      	beq.n	800bb60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800ba84:	e06c      	b.n	800bb60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba8a:	f003 031f 	and.w	r3, r3, #31
 800ba8e:	2202      	movs	r2, #2
 800ba90:	409a      	lsls	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	4013      	ands	r3, r2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d02e      	beq.n	800baf8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	f003 0302 	and.w	r3, r3, #2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d029      	beq.n	800baf8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	f003 0320 	and.w	r3, r3, #32
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d10b      	bne.n	800baca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	681a      	ldr	r2, [r3, #0]
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f022 020a 	bic.w	r2, r2, #10
 800bac0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2201      	movs	r2, #1
 800bac6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bace:	f003 021f 	and.w	r2, r3, #31
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad6:	2102      	movs	r1, #2
 800bad8:	fa01 f202 	lsl.w	r2, r1, r2
 800badc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baea:	2b00      	cmp	r3, #0
 800baec:	d038      	beq.n	800bb60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800baf6:	e033      	b.n	800bb60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bafc:	f003 031f 	and.w	r3, r3, #31
 800bb00:	2208      	movs	r2, #8
 800bb02:	409a      	lsls	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	4013      	ands	r3, r2
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d02a      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bb0c:	68bb      	ldr	r3, [r7, #8]
 800bb0e:	f003 0308 	and.w	r3, r3, #8
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d025      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f022 020e 	bic.w	r2, r2, #14
 800bb24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb2a:	f003 021f 	and.w	r2, r3, #31
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb32:	2101      	movs	r1, #1
 800bb34:	fa01 f202 	lsl.w	r2, r1, r2
 800bb38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2201      	movs	r2, #1
 800bb44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d004      	beq.n	800bb62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bb60:	bf00      	nop
 800bb62:	bf00      	nop
}
 800bb64:	3710      	adds	r7, #16
 800bb66:	46bd      	mov	sp, r7
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bb6a:	b480      	push	{r7}
 800bb6c:	b085      	sub	sp, #20
 800bb6e:	af00      	add	r7, sp, #0
 800bb70:	60f8      	str	r0, [r7, #12]
 800bb72:	60b9      	str	r1, [r7, #8]
 800bb74:	607a      	str	r2, [r7, #4]
 800bb76:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bb80:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d004      	beq.n	800bb94 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb8e:	68fa      	ldr	r2, [r7, #12]
 800bb90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bb92:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb98:	f003 021f 	and.w	r2, r3, #31
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bba0:	2101      	movs	r1, #1
 800bba2:	fa01 f202 	lsl.w	r2, r1, r2
 800bba6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	683a      	ldr	r2, [r7, #0]
 800bbae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	2b10      	cmp	r3, #16
 800bbb6:	d108      	bne.n	800bbca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	687a      	ldr	r2, [r7, #4]
 800bbbe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800bbc8:	e007      	b.n	800bbda <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	68ba      	ldr	r2, [r7, #8]
 800bbd0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	60da      	str	r2, [r3, #12]
}
 800bbda:	bf00      	nop
 800bbdc:	3714      	adds	r7, #20
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
	...

0800bbe8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b087      	sub	sp, #28
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	4b16      	ldr	r3, [pc, #88]	; (800bc50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d802      	bhi.n	800bc02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800bbfc:	4b15      	ldr	r3, [pc, #84]	; (800bc54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	e001      	b.n	800bc06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800bc02:	4b15      	ldr	r3, [pc, #84]	; (800bc58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bc04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	3b08      	subs	r3, #8
 800bc12:	4a12      	ldr	r2, [pc, #72]	; (800bc5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bc14:	fba2 2303 	umull	r2, r3, r2, r3
 800bc18:	091b      	lsrs	r3, r3, #4
 800bc1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc20:	089b      	lsrs	r3, r3, #2
 800bc22:	009a      	lsls	r2, r3, #2
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	4413      	add	r3, r2
 800bc28:	461a      	mov	r2, r3
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a0b      	ldr	r2, [pc, #44]	; (800bc60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bc32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	f003 031f 	and.w	r3, r3, #31
 800bc3a:	2201      	movs	r2, #1
 800bc3c:	409a      	lsls	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bc42:	bf00      	nop
 800bc44:	371c      	adds	r7, #28
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr
 800bc4e:	bf00      	nop
 800bc50:	40020407 	.word	0x40020407
 800bc54:	40020800 	.word	0x40020800
 800bc58:	40020820 	.word	0x40020820
 800bc5c:	cccccccd 	.word	0xcccccccd
 800bc60:	40020880 	.word	0x40020880

0800bc64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	b2db      	uxtb	r3, r3
 800bc72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	4b0b      	ldr	r3, [pc, #44]	; (800bca4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a08      	ldr	r2, [pc, #32]	; (800bca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bc86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	3b01      	subs	r3, #1
 800bc8c:	f003 031f 	and.w	r3, r3, #31
 800bc90:	2201      	movs	r2, #1
 800bc92:	409a      	lsls	r2, r3
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bc98:	bf00      	nop
 800bc9a:	3714      	adds	r7, #20
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca2:	4770      	bx	lr
 800bca4:	1000823f 	.word	0x1000823f
 800bca8:	40020940 	.word	0x40020940

0800bcac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bcac:	b480      	push	{r7}
 800bcae:	b087      	sub	sp, #28
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
 800bcb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bcba:	e15a      	b.n	800bf72 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	681a      	ldr	r2, [r3, #0]
 800bcc0:	2101      	movs	r1, #1
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	fa01 f303 	lsl.w	r3, r1, r3
 800bcc8:	4013      	ands	r3, r2
 800bcca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 814c 	beq.w	800bf6c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	685b      	ldr	r3, [r3, #4]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d00b      	beq.n	800bcf4 <HAL_GPIO_Init+0x48>
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d007      	beq.n	800bcf4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bce8:	2b11      	cmp	r3, #17
 800bcea:	d003      	beq.n	800bcf4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	685b      	ldr	r3, [r3, #4]
 800bcf0:	2b12      	cmp	r3, #18
 800bcf2:	d130      	bne.n	800bd56 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	689b      	ldr	r3, [r3, #8]
 800bcf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	2203      	movs	r2, #3
 800bd00:	fa02 f303 	lsl.w	r3, r2, r3
 800bd04:	43db      	mvns	r3, r3
 800bd06:	693a      	ldr	r2, [r7, #16]
 800bd08:	4013      	ands	r3, r2
 800bd0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	68da      	ldr	r2, [r3, #12]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	005b      	lsls	r3, r3, #1
 800bd14:	fa02 f303 	lsl.w	r3, r2, r3
 800bd18:	693a      	ldr	r2, [r7, #16]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	693a      	ldr	r2, [r7, #16]
 800bd22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bd32:	43db      	mvns	r3, r3
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	4013      	ands	r3, r2
 800bd38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	091b      	lsrs	r3, r3, #4
 800bd40:	f003 0201 	and.w	r2, r3, #1
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	fa02 f303 	lsl.w	r3, r2, r3
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68db      	ldr	r3, [r3, #12]
 800bd5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	2203      	movs	r2, #3
 800bd62:	fa02 f303 	lsl.w	r3, r2, r3
 800bd66:	43db      	mvns	r3, r3
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	689a      	ldr	r2, [r3, #8]
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	005b      	lsls	r3, r3, #1
 800bd76:	fa02 f303 	lsl.w	r3, r2, r3
 800bd7a:	693a      	ldr	r2, [r7, #16]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	685b      	ldr	r3, [r3, #4]
 800bd8a:	2b02      	cmp	r3, #2
 800bd8c:	d003      	beq.n	800bd96 <HAL_GPIO_Init+0xea>
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	685b      	ldr	r3, [r3, #4]
 800bd92:	2b12      	cmp	r3, #18
 800bd94:	d123      	bne.n	800bdde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	08da      	lsrs	r2, r3, #3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	3208      	adds	r2, #8
 800bd9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f003 0307 	and.w	r3, r3, #7
 800bdaa:	009b      	lsls	r3, r3, #2
 800bdac:	220f      	movs	r2, #15
 800bdae:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb2:	43db      	mvns	r3, r3
 800bdb4:	693a      	ldr	r2, [r7, #16]
 800bdb6:	4013      	ands	r3, r2
 800bdb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	691a      	ldr	r2, [r3, #16]
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f003 0307 	and.w	r3, r3, #7
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	fa02 f303 	lsl.w	r3, r2, r3
 800bdca:	693a      	ldr	r2, [r7, #16]
 800bdcc:	4313      	orrs	r3, r2
 800bdce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	08da      	lsrs	r2, r3, #3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	3208      	adds	r2, #8
 800bdd8:	6939      	ldr	r1, [r7, #16]
 800bdda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	005b      	lsls	r3, r3, #1
 800bde8:	2203      	movs	r2, #3
 800bdea:	fa02 f303 	lsl.w	r3, r2, r3
 800bdee:	43db      	mvns	r3, r3
 800bdf0:	693a      	ldr	r2, [r7, #16]
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	685b      	ldr	r3, [r3, #4]
 800bdfa:	f003 0203 	and.w	r2, r3, #3
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	005b      	lsls	r3, r3, #1
 800be02:	fa02 f303 	lsl.w	r3, r2, r3
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	4313      	orrs	r3, r2
 800be0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	693a      	ldr	r2, [r7, #16]
 800be10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f000 80a6 	beq.w	800bf6c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be20:	4b5b      	ldr	r3, [pc, #364]	; (800bf90 <HAL_GPIO_Init+0x2e4>)
 800be22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be24:	4a5a      	ldr	r2, [pc, #360]	; (800bf90 <HAL_GPIO_Init+0x2e4>)
 800be26:	f043 0301 	orr.w	r3, r3, #1
 800be2a:	6613      	str	r3, [r2, #96]	; 0x60
 800be2c:	4b58      	ldr	r3, [pc, #352]	; (800bf90 <HAL_GPIO_Init+0x2e4>)
 800be2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be30:	f003 0301 	and.w	r3, r3, #1
 800be34:	60bb      	str	r3, [r7, #8]
 800be36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be38:	4a56      	ldr	r2, [pc, #344]	; (800bf94 <HAL_GPIO_Init+0x2e8>)
 800be3a:	697b      	ldr	r3, [r7, #20]
 800be3c:	089b      	lsrs	r3, r3, #2
 800be3e:	3302      	adds	r3, #2
 800be40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	f003 0303 	and.w	r3, r3, #3
 800be4c:	009b      	lsls	r3, r3, #2
 800be4e:	220f      	movs	r2, #15
 800be50:	fa02 f303 	lsl.w	r3, r2, r3
 800be54:	43db      	mvns	r3, r3
 800be56:	693a      	ldr	r2, [r7, #16]
 800be58:	4013      	ands	r3, r2
 800be5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800be62:	d01f      	beq.n	800bea4 <HAL_GPIO_Init+0x1f8>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4a4c      	ldr	r2, [pc, #304]	; (800bf98 <HAL_GPIO_Init+0x2ec>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d019      	beq.n	800bea0 <HAL_GPIO_Init+0x1f4>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4a4b      	ldr	r2, [pc, #300]	; (800bf9c <HAL_GPIO_Init+0x2f0>)
 800be70:	4293      	cmp	r3, r2
 800be72:	d013      	beq.n	800be9c <HAL_GPIO_Init+0x1f0>
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	4a4a      	ldr	r2, [pc, #296]	; (800bfa0 <HAL_GPIO_Init+0x2f4>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d00d      	beq.n	800be98 <HAL_GPIO_Init+0x1ec>
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4a49      	ldr	r2, [pc, #292]	; (800bfa4 <HAL_GPIO_Init+0x2f8>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d007      	beq.n	800be94 <HAL_GPIO_Init+0x1e8>
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a48      	ldr	r2, [pc, #288]	; (800bfa8 <HAL_GPIO_Init+0x2fc>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d101      	bne.n	800be90 <HAL_GPIO_Init+0x1e4>
 800be8c:	2305      	movs	r3, #5
 800be8e:	e00a      	b.n	800bea6 <HAL_GPIO_Init+0x1fa>
 800be90:	2306      	movs	r3, #6
 800be92:	e008      	b.n	800bea6 <HAL_GPIO_Init+0x1fa>
 800be94:	2304      	movs	r3, #4
 800be96:	e006      	b.n	800bea6 <HAL_GPIO_Init+0x1fa>
 800be98:	2303      	movs	r3, #3
 800be9a:	e004      	b.n	800bea6 <HAL_GPIO_Init+0x1fa>
 800be9c:	2302      	movs	r3, #2
 800be9e:	e002      	b.n	800bea6 <HAL_GPIO_Init+0x1fa>
 800bea0:	2301      	movs	r3, #1
 800bea2:	e000      	b.n	800bea6 <HAL_GPIO_Init+0x1fa>
 800bea4:	2300      	movs	r3, #0
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	f002 0203 	and.w	r2, r2, #3
 800beac:	0092      	lsls	r2, r2, #2
 800beae:	4093      	lsls	r3, r2
 800beb0:	693a      	ldr	r2, [r7, #16]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800beb6:	4937      	ldr	r1, [pc, #220]	; (800bf94 <HAL_GPIO_Init+0x2e8>)
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	089b      	lsrs	r3, r3, #2
 800bebc:	3302      	adds	r3, #2
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800bec4:	4b39      	ldr	r3, [pc, #228]	; (800bfac <HAL_GPIO_Init+0x300>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	43db      	mvns	r3, r3
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	4013      	ands	r3, r2
 800bed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d003      	beq.n	800bee8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800bee0:	693a      	ldr	r2, [r7, #16]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800bee8:	4a30      	ldr	r2, [pc, #192]	; (800bfac <HAL_GPIO_Init+0x300>)
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800beee:	4b2f      	ldr	r3, [pc, #188]	; (800bfac <HAL_GPIO_Init+0x300>)
 800bef0:	685b      	ldr	r3, [r3, #4]
 800bef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	43db      	mvns	r3, r3
 800bef8:	693a      	ldr	r2, [r7, #16]
 800befa:	4013      	ands	r3, r2
 800befc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800bf0a:	693a      	ldr	r2, [r7, #16]
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800bf12:	4a26      	ldr	r2, [pc, #152]	; (800bfac <HAL_GPIO_Init+0x300>)
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800bf18:	4b24      	ldr	r3, [pc, #144]	; (800bfac <HAL_GPIO_Init+0x300>)
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	43db      	mvns	r3, r3
 800bf22:	693a      	ldr	r2, [r7, #16]
 800bf24:	4013      	ands	r3, r2
 800bf26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d003      	beq.n	800bf3c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800bf3c:	4a1b      	ldr	r2, [pc, #108]	; (800bfac <HAL_GPIO_Init+0x300>)
 800bf3e:	693b      	ldr	r3, [r7, #16]
 800bf40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800bf42:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <HAL_GPIO_Init+0x300>)
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	43db      	mvns	r3, r3
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	4013      	ands	r3, r2
 800bf50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	685b      	ldr	r3, [r3, #4]
 800bf56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800bf5e:	693a      	ldr	r2, [r7, #16]
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800bf66:	4a11      	ldr	r2, [pc, #68]	; (800bfac <HAL_GPIO_Init+0x300>)
 800bf68:	693b      	ldr	r3, [r7, #16]
 800bf6a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	681a      	ldr	r2, [r3, #0]
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	fa22 f303 	lsr.w	r3, r2, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	f47f ae9d 	bne.w	800bcbc <HAL_GPIO_Init+0x10>
  }
}
 800bf82:	bf00      	nop
 800bf84:	371c      	adds	r7, #28
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	40021000 	.word	0x40021000
 800bf94:	40010000 	.word	0x40010000
 800bf98:	48000400 	.word	0x48000400
 800bf9c:	48000800 	.word	0x48000800
 800bfa0:	48000c00 	.word	0x48000c00
 800bfa4:	48001000 	.word	0x48001000
 800bfa8:	48001400 	.word	0x48001400
 800bfac:	40010400 	.word	0x40010400

0800bfb0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b087      	sub	sp, #28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800bfbe:	e0bd      	b.n	800c13c <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfc8:	683a      	ldr	r2, [r7, #0]
 800bfca:	4013      	ands	r3, r2
 800bfcc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f000 80b0 	beq.w	800c136 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800bfd6:	4a60      	ldr	r2, [pc, #384]	; (800c158 <HAL_GPIO_DeInit+0x1a8>)
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	089b      	lsrs	r3, r3, #2
 800bfdc:	3302      	adds	r3, #2
 800bfde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfe2:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	f003 0303 	and.w	r3, r3, #3
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	220f      	movs	r2, #15
 800bfee:	fa02 f303 	lsl.w	r3, r2, r3
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4013      	ands	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800bffe:	d01f      	beq.n	800c040 <HAL_GPIO_DeInit+0x90>
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	4a56      	ldr	r2, [pc, #344]	; (800c15c <HAL_GPIO_DeInit+0x1ac>)
 800c004:	4293      	cmp	r3, r2
 800c006:	d019      	beq.n	800c03c <HAL_GPIO_DeInit+0x8c>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	4a55      	ldr	r2, [pc, #340]	; (800c160 <HAL_GPIO_DeInit+0x1b0>)
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d013      	beq.n	800c038 <HAL_GPIO_DeInit+0x88>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a54      	ldr	r2, [pc, #336]	; (800c164 <HAL_GPIO_DeInit+0x1b4>)
 800c014:	4293      	cmp	r3, r2
 800c016:	d00d      	beq.n	800c034 <HAL_GPIO_DeInit+0x84>
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	4a53      	ldr	r2, [pc, #332]	; (800c168 <HAL_GPIO_DeInit+0x1b8>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d007      	beq.n	800c030 <HAL_GPIO_DeInit+0x80>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a52      	ldr	r2, [pc, #328]	; (800c16c <HAL_GPIO_DeInit+0x1bc>)
 800c024:	4293      	cmp	r3, r2
 800c026:	d101      	bne.n	800c02c <HAL_GPIO_DeInit+0x7c>
 800c028:	2305      	movs	r3, #5
 800c02a:	e00a      	b.n	800c042 <HAL_GPIO_DeInit+0x92>
 800c02c:	2306      	movs	r3, #6
 800c02e:	e008      	b.n	800c042 <HAL_GPIO_DeInit+0x92>
 800c030:	2304      	movs	r3, #4
 800c032:	e006      	b.n	800c042 <HAL_GPIO_DeInit+0x92>
 800c034:	2303      	movs	r3, #3
 800c036:	e004      	b.n	800c042 <HAL_GPIO_DeInit+0x92>
 800c038:	2302      	movs	r3, #2
 800c03a:	e002      	b.n	800c042 <HAL_GPIO_DeInit+0x92>
 800c03c:	2301      	movs	r3, #1
 800c03e:	e000      	b.n	800c042 <HAL_GPIO_DeInit+0x92>
 800c040:	2300      	movs	r3, #0
 800c042:	697a      	ldr	r2, [r7, #20]
 800c044:	f002 0203 	and.w	r2, r2, #3
 800c048:	0092      	lsls	r2, r2, #2
 800c04a:	4093      	lsls	r3, r2
 800c04c:	68fa      	ldr	r2, [r7, #12]
 800c04e:	429a      	cmp	r2, r3
 800c050:	d132      	bne.n	800c0b8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c052:	4b47      	ldr	r3, [pc, #284]	; (800c170 <HAL_GPIO_DeInit+0x1c0>)
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	43db      	mvns	r3, r3
 800c05a:	4945      	ldr	r1, [pc, #276]	; (800c170 <HAL_GPIO_DeInit+0x1c0>)
 800c05c:	4013      	ands	r3, r2
 800c05e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c060:	4b43      	ldr	r3, [pc, #268]	; (800c170 <HAL_GPIO_DeInit+0x1c0>)
 800c062:	685a      	ldr	r2, [r3, #4]
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	43db      	mvns	r3, r3
 800c068:	4941      	ldr	r1, [pc, #260]	; (800c170 <HAL_GPIO_DeInit+0x1c0>)
 800c06a:	4013      	ands	r3, r2
 800c06c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c06e:	4b40      	ldr	r3, [pc, #256]	; (800c170 <HAL_GPIO_DeInit+0x1c0>)
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	43db      	mvns	r3, r3
 800c076:	493e      	ldr	r1, [pc, #248]	; (800c170 <HAL_GPIO_DeInit+0x1c0>)
 800c078:	4013      	ands	r3, r2
 800c07a:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c07c:	4b3c      	ldr	r3, [pc, #240]	; (800c170 <HAL_GPIO_DeInit+0x1c0>)
 800c07e:	68da      	ldr	r2, [r3, #12]
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	43db      	mvns	r3, r3
 800c084:	493a      	ldr	r1, [pc, #232]	; (800c170 <HAL_GPIO_DeInit+0x1c0>)
 800c086:	4013      	ands	r3, r2
 800c088:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	f003 0303 	and.w	r3, r3, #3
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	220f      	movs	r2, #15
 800c094:	fa02 f303 	lsl.w	r3, r2, r3
 800c098:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c09a:	4a2f      	ldr	r2, [pc, #188]	; (800c158 <HAL_GPIO_DeInit+0x1a8>)
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	089b      	lsrs	r3, r3, #2
 800c0a0:	3302      	adds	r3, #2
 800c0a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	43da      	mvns	r2, r3
 800c0aa:	482b      	ldr	r0, [pc, #172]	; (800c158 <HAL_GPIO_DeInit+0x1a8>)
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	089b      	lsrs	r3, r3, #2
 800c0b0:	400a      	ands	r2, r1
 800c0b2:	3302      	adds	r3, #2
 800c0b4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681a      	ldr	r2, [r3, #0]
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	005b      	lsls	r3, r3, #1
 800c0c0:	2103      	movs	r1, #3
 800c0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800c0c6:	431a      	orrs	r2, r3
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	08da      	lsrs	r2, r3, #3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	3208      	adds	r2, #8
 800c0d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	f003 0307 	and.w	r3, r3, #7
 800c0de:	009b      	lsls	r3, r3, #2
 800c0e0:	220f      	movs	r2, #15
 800c0e2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e6:	43db      	mvns	r3, r3
 800c0e8:	697a      	ldr	r2, [r7, #20]
 800c0ea:	08d2      	lsrs	r2, r2, #3
 800c0ec:	4019      	ands	r1, r3
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	3208      	adds	r2, #8
 800c0f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	68da      	ldr	r2, [r3, #12]
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	005b      	lsls	r3, r3, #1
 800c0fe:	2103      	movs	r1, #3
 800c100:	fa01 f303 	lsl.w	r3, r1, r3
 800c104:	43db      	mvns	r3, r3
 800c106:	401a      	ands	r2, r3
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	685a      	ldr	r2, [r3, #4]
 800c110:	2101      	movs	r1, #1
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	fa01 f303 	lsl.w	r3, r1, r3
 800c118:	43db      	mvns	r3, r3
 800c11a:	401a      	ands	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	689a      	ldr	r2, [r3, #8]
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	005b      	lsls	r3, r3, #1
 800c128:	2103      	movs	r1, #3
 800c12a:	fa01 f303 	lsl.w	r3, r1, r3
 800c12e:	43db      	mvns	r3, r3
 800c130:	401a      	ands	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c136:	697b      	ldr	r3, [r7, #20]
 800c138:	3301      	adds	r3, #1
 800c13a:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c13c:	683a      	ldr	r2, [r7, #0]
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	fa22 f303 	lsr.w	r3, r2, r3
 800c144:	2b00      	cmp	r3, #0
 800c146:	f47f af3b 	bne.w	800bfc0 <HAL_GPIO_DeInit+0x10>
  }
}
 800c14a:	bf00      	nop
 800c14c:	371c      	adds	r7, #28
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr
 800c156:	bf00      	nop
 800c158:	40010000 	.word	0x40010000
 800c15c:	48000400 	.word	0x48000400
 800c160:	48000800 	.word	0x48000800
 800c164:	48000c00 	.word	0x48000c00
 800c168:	48001000 	.word	0x48001000
 800c16c:	48001400 	.word	0x48001400
 800c170:	40010400 	.word	0x40010400

0800c174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	807b      	strh	r3, [r7, #2]
 800c180:	4613      	mov	r3, r2
 800c182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c184:	787b      	ldrb	r3, [r7, #1]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d003      	beq.n	800c192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c18a:	887a      	ldrh	r2, [r7, #2]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c190:	e002      	b.n	800c198 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c192:	887a      	ldrh	r2, [r7, #2]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b085      	sub	sp, #20
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d141      	bne.n	800c236 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c1b2:	4b4b      	ldr	r3, [pc, #300]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c1ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c1be:	d131      	bne.n	800c224 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c1c0:	4b47      	ldr	r3, [pc, #284]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c1c6:	4a46      	ldr	r2, [pc, #280]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c1d0:	4b43      	ldr	r3, [pc, #268]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c1d8:	4a41      	ldr	r2, [pc, #260]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c1da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c1e0:	4b40      	ldr	r3, [pc, #256]	; (800c2e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	2232      	movs	r2, #50	; 0x32
 800c1e6:	fb02 f303 	mul.w	r3, r2, r3
 800c1ea:	4a3f      	ldr	r2, [pc, #252]	; (800c2e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c1ec:	fba2 2303 	umull	r2, r3, r2, r3
 800c1f0:	0c9b      	lsrs	r3, r3, #18
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1f6:	e002      	b.n	800c1fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3b01      	subs	r3, #1
 800c1fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c1fe:	4b38      	ldr	r3, [pc, #224]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c200:	695b      	ldr	r3, [r3, #20]
 800c202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c20a:	d102      	bne.n	800c212 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d1f2      	bne.n	800c1f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c212:	4b33      	ldr	r3, [pc, #204]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c21a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c21e:	d158      	bne.n	800c2d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c220:	2303      	movs	r3, #3
 800c222:	e057      	b.n	800c2d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c224:	4b2e      	ldr	r3, [pc, #184]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c22a:	4a2d      	ldr	r2, [pc, #180]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c22c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c230:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c234:	e04d      	b.n	800c2d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c23c:	d141      	bne.n	800c2c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c23e:	4b28      	ldr	r3, [pc, #160]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c24a:	d131      	bne.n	800c2b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c24c:	4b24      	ldr	r3, [pc, #144]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c24e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c252:	4a23      	ldr	r2, [pc, #140]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c25c:	4b20      	ldr	r3, [pc, #128]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c264:	4a1e      	ldr	r2, [pc, #120]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c26a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c26c:	4b1d      	ldr	r3, [pc, #116]	; (800c2e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2232      	movs	r2, #50	; 0x32
 800c272:	fb02 f303 	mul.w	r3, r2, r3
 800c276:	4a1c      	ldr	r2, [pc, #112]	; (800c2e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c278:	fba2 2303 	umull	r2, r3, r2, r3
 800c27c:	0c9b      	lsrs	r3, r3, #18
 800c27e:	3301      	adds	r3, #1
 800c280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c282:	e002      	b.n	800c28a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	3b01      	subs	r3, #1
 800c288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c28a:	4b15      	ldr	r3, [pc, #84]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c28c:	695b      	ldr	r3, [r3, #20]
 800c28e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c296:	d102      	bne.n	800c29e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1f2      	bne.n	800c284 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c29e:	4b10      	ldr	r3, [pc, #64]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2a0:	695b      	ldr	r3, [r3, #20]
 800c2a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c2aa:	d112      	bne.n	800c2d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c2ac:	2303      	movs	r3, #3
 800c2ae:	e011      	b.n	800c2d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c2b0:	4b0b      	ldr	r3, [pc, #44]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c2b6:	4a0a      	ldr	r2, [pc, #40]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c2c0:	e007      	b.n	800c2d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c2c2:	4b07      	ldr	r3, [pc, #28]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c2ca:	4a05      	ldr	r2, [pc, #20]	; (800c2e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c2cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c2d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	40007000 	.word	0x40007000
 800c2e4:	20000c34 	.word	0x20000c34
 800c2e8:	431bde83 	.word	0x431bde83

0800c2ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b088      	sub	sp, #32
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d101      	bne.n	800c2fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	e308      	b.n	800c910 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 0301 	and.w	r3, r3, #1
 800c306:	2b00      	cmp	r3, #0
 800c308:	d075      	beq.n	800c3f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c30a:	4ba3      	ldr	r3, [pc, #652]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f003 030c 	and.w	r3, r3, #12
 800c312:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c314:	4ba0      	ldr	r3, [pc, #640]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	f003 0303 	and.w	r3, r3, #3
 800c31c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c31e:	69bb      	ldr	r3, [r7, #24]
 800c320:	2b0c      	cmp	r3, #12
 800c322:	d102      	bne.n	800c32a <HAL_RCC_OscConfig+0x3e>
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	2b03      	cmp	r3, #3
 800c328:	d002      	beq.n	800c330 <HAL_RCC_OscConfig+0x44>
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	2b08      	cmp	r3, #8
 800c32e:	d10b      	bne.n	800c348 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c330:	4b99      	ldr	r3, [pc, #612]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d05b      	beq.n	800c3f4 <HAL_RCC_OscConfig+0x108>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d157      	bne.n	800c3f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	e2e3      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c350:	d106      	bne.n	800c360 <HAL_RCC_OscConfig+0x74>
 800c352:	4b91      	ldr	r3, [pc, #580]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	4a90      	ldr	r2, [pc, #576]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c35c:	6013      	str	r3, [r2, #0]
 800c35e:	e01d      	b.n	800c39c <HAL_RCC_OscConfig+0xb0>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685b      	ldr	r3, [r3, #4]
 800c364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c368:	d10c      	bne.n	800c384 <HAL_RCC_OscConfig+0x98>
 800c36a:	4b8b      	ldr	r3, [pc, #556]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a8a      	ldr	r2, [pc, #552]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c374:	6013      	str	r3, [r2, #0]
 800c376:	4b88      	ldr	r3, [pc, #544]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4a87      	ldr	r2, [pc, #540]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c37c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c380:	6013      	str	r3, [r2, #0]
 800c382:	e00b      	b.n	800c39c <HAL_RCC_OscConfig+0xb0>
 800c384:	4b84      	ldr	r3, [pc, #528]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a83      	ldr	r2, [pc, #524]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c38a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c38e:	6013      	str	r3, [r2, #0]
 800c390:	4b81      	ldr	r3, [pc, #516]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	4a80      	ldr	r2, [pc, #512]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c39a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	685b      	ldr	r3, [r3, #4]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d013      	beq.n	800c3cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3a4:	f7fc fc32 	bl	8008c0c <HAL_GetTick>
 800c3a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c3aa:	e008      	b.n	800c3be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3ac:	f7fc fc2e 	bl	8008c0c <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	2b64      	cmp	r3, #100	; 0x64
 800c3b8:	d901      	bls.n	800c3be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c3ba:	2303      	movs	r3, #3
 800c3bc:	e2a8      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c3be:	4b76      	ldr	r3, [pc, #472]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0f0      	beq.n	800c3ac <HAL_RCC_OscConfig+0xc0>
 800c3ca:	e014      	b.n	800c3f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3cc:	f7fc fc1e 	bl	8008c0c <HAL_GetTick>
 800c3d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c3d2:	e008      	b.n	800c3e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c3d4:	f7fc fc1a 	bl	8008c0c <HAL_GetTick>
 800c3d8:	4602      	mov	r2, r0
 800c3da:	693b      	ldr	r3, [r7, #16]
 800c3dc:	1ad3      	subs	r3, r2, r3
 800c3de:	2b64      	cmp	r3, #100	; 0x64
 800c3e0:	d901      	bls.n	800c3e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e294      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c3e6:	4b6c      	ldr	r3, [pc, #432]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1f0      	bne.n	800c3d4 <HAL_RCC_OscConfig+0xe8>
 800c3f2:	e000      	b.n	800c3f6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0302 	and.w	r3, r3, #2
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d075      	beq.n	800c4ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c402:	4b65      	ldr	r3, [pc, #404]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f003 030c 	and.w	r3, r3, #12
 800c40a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c40c:	4b62      	ldr	r3, [pc, #392]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	f003 0303 	and.w	r3, r3, #3
 800c414:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	2b0c      	cmp	r3, #12
 800c41a:	d102      	bne.n	800c422 <HAL_RCC_OscConfig+0x136>
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2b02      	cmp	r3, #2
 800c420:	d002      	beq.n	800c428 <HAL_RCC_OscConfig+0x13c>
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	2b04      	cmp	r3, #4
 800c426:	d11f      	bne.n	800c468 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c428:	4b5b      	ldr	r3, [pc, #364]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c430:	2b00      	cmp	r3, #0
 800c432:	d005      	beq.n	800c440 <HAL_RCC_OscConfig+0x154>
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	68db      	ldr	r3, [r3, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d101      	bne.n	800c440 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c43c:	2301      	movs	r3, #1
 800c43e:	e267      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c440:	4b55      	ldr	r3, [pc, #340]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	691b      	ldr	r3, [r3, #16]
 800c44c:	061b      	lsls	r3, r3, #24
 800c44e:	4952      	ldr	r1, [pc, #328]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c450:	4313      	orrs	r3, r2
 800c452:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c454:	4b51      	ldr	r3, [pc, #324]	; (800c59c <HAL_RCC_OscConfig+0x2b0>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fc fb8b 	bl	8008b74 <HAL_InitTick>
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d043      	beq.n	800c4ec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c464:	2301      	movs	r3, #1
 800c466:	e253      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	68db      	ldr	r3, [r3, #12]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d023      	beq.n	800c4b8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c470:	4b49      	ldr	r3, [pc, #292]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	4a48      	ldr	r2, [pc, #288]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c47a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c47c:	f7fc fbc6 	bl	8008c0c <HAL_GetTick>
 800c480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c482:	e008      	b.n	800c496 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c484:	f7fc fbc2 	bl	8008c0c <HAL_GetTick>
 800c488:	4602      	mov	r2, r0
 800c48a:	693b      	ldr	r3, [r7, #16]
 800c48c:	1ad3      	subs	r3, r2, r3
 800c48e:	2b02      	cmp	r3, #2
 800c490:	d901      	bls.n	800c496 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c492:	2303      	movs	r3, #3
 800c494:	e23c      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c496:	4b40      	ldr	r3, [pc, #256]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d0f0      	beq.n	800c484 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4a2:	4b3d      	ldr	r3, [pc, #244]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c4a4:	685b      	ldr	r3, [r3, #4]
 800c4a6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	691b      	ldr	r3, [r3, #16]
 800c4ae:	061b      	lsls	r3, r3, #24
 800c4b0:	4939      	ldr	r1, [pc, #228]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c4b2:	4313      	orrs	r3, r2
 800c4b4:	604b      	str	r3, [r1, #4]
 800c4b6:	e01a      	b.n	800c4ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c4b8:	4b37      	ldr	r3, [pc, #220]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a36      	ldr	r2, [pc, #216]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c4be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4c4:	f7fc fba2 	bl	8008c0c <HAL_GetTick>
 800c4c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4ca:	e008      	b.n	800c4de <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c4cc:	f7fc fb9e 	bl	8008c0c <HAL_GetTick>
 800c4d0:	4602      	mov	r2, r0
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	1ad3      	subs	r3, r2, r3
 800c4d6:	2b02      	cmp	r3, #2
 800c4d8:	d901      	bls.n	800c4de <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c4da:	2303      	movs	r3, #3
 800c4dc:	e218      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c4de:	4b2e      	ldr	r3, [pc, #184]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d1f0      	bne.n	800c4cc <HAL_RCC_OscConfig+0x1e0>
 800c4ea:	e000      	b.n	800c4ee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c4ec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f003 0308 	and.w	r3, r3, #8
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d03c      	beq.n	800c574 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	695b      	ldr	r3, [r3, #20]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d01c      	beq.n	800c53c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c502:	4b25      	ldr	r3, [pc, #148]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c508:	4a23      	ldr	r2, [pc, #140]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c50a:	f043 0301 	orr.w	r3, r3, #1
 800c50e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c512:	f7fc fb7b 	bl	8008c0c <HAL_GetTick>
 800c516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c518:	e008      	b.n	800c52c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c51a:	f7fc fb77 	bl	8008c0c <HAL_GetTick>
 800c51e:	4602      	mov	r2, r0
 800c520:	693b      	ldr	r3, [r7, #16]
 800c522:	1ad3      	subs	r3, r2, r3
 800c524:	2b02      	cmp	r3, #2
 800c526:	d901      	bls.n	800c52c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c528:	2303      	movs	r3, #3
 800c52a:	e1f1      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c52c:	4b1a      	ldr	r3, [pc, #104]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c52e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c532:	f003 0302 	and.w	r3, r3, #2
 800c536:	2b00      	cmp	r3, #0
 800c538:	d0ef      	beq.n	800c51a <HAL_RCC_OscConfig+0x22e>
 800c53a:	e01b      	b.n	800c574 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c53c:	4b16      	ldr	r3, [pc, #88]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c53e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c542:	4a15      	ldr	r2, [pc, #84]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c544:	f023 0301 	bic.w	r3, r3, #1
 800c548:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c54c:	f7fc fb5e 	bl	8008c0c <HAL_GetTick>
 800c550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c552:	e008      	b.n	800c566 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c554:	f7fc fb5a 	bl	8008c0c <HAL_GetTick>
 800c558:	4602      	mov	r2, r0
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	2b02      	cmp	r3, #2
 800c560:	d901      	bls.n	800c566 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c562:	2303      	movs	r3, #3
 800c564:	e1d4      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c566:	4b0c      	ldr	r3, [pc, #48]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c56c:	f003 0302 	and.w	r3, r3, #2
 800c570:	2b00      	cmp	r3, #0
 800c572:	d1ef      	bne.n	800c554 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f003 0304 	and.w	r3, r3, #4
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f000 80ab 	beq.w	800c6d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c582:	2300      	movs	r3, #0
 800c584:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c586:	4b04      	ldr	r3, [pc, #16]	; (800c598 <HAL_RCC_OscConfig+0x2ac>)
 800c588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c58a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <HAL_RCC_OscConfig+0x2b4>
 800c592:	2301      	movs	r3, #1
 800c594:	e005      	b.n	800c5a2 <HAL_RCC_OscConfig+0x2b6>
 800c596:	bf00      	nop
 800c598:	40021000 	.word	0x40021000
 800c59c:	20000c38 	.word	0x20000c38
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d00d      	beq.n	800c5c2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5a6:	4baf      	ldr	r3, [pc, #700]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c5a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5aa:	4aae      	ldr	r2, [pc, #696]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c5ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5b0:	6593      	str	r3, [r2, #88]	; 0x58
 800c5b2:	4bac      	ldr	r3, [pc, #688]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5ba:	60fb      	str	r3, [r7, #12]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c5be:	2301      	movs	r3, #1
 800c5c0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5c2:	4ba9      	ldr	r3, [pc, #676]	; (800c868 <HAL_RCC_OscConfig+0x57c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d118      	bne.n	800c600 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c5ce:	4ba6      	ldr	r3, [pc, #664]	; (800c868 <HAL_RCC_OscConfig+0x57c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4aa5      	ldr	r2, [pc, #660]	; (800c868 <HAL_RCC_OscConfig+0x57c>)
 800c5d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c5d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c5da:	f7fc fb17 	bl	8008c0c <HAL_GetTick>
 800c5de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5e0:	e008      	b.n	800c5f4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c5e2:	f7fc fb13 	bl	8008c0c <HAL_GetTick>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	2b02      	cmp	r3, #2
 800c5ee:	d901      	bls.n	800c5f4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	e18d      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c5f4:	4b9c      	ldr	r3, [pc, #624]	; (800c868 <HAL_RCC_OscConfig+0x57c>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d0f0      	beq.n	800c5e2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	689b      	ldr	r3, [r3, #8]
 800c604:	2b01      	cmp	r3, #1
 800c606:	d108      	bne.n	800c61a <HAL_RCC_OscConfig+0x32e>
 800c608:	4b96      	ldr	r3, [pc, #600]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c60a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c60e:	4a95      	ldr	r2, [pc, #596]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c610:	f043 0301 	orr.w	r3, r3, #1
 800c614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c618:	e024      	b.n	800c664 <HAL_RCC_OscConfig+0x378>
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	689b      	ldr	r3, [r3, #8]
 800c61e:	2b05      	cmp	r3, #5
 800c620:	d110      	bne.n	800c644 <HAL_RCC_OscConfig+0x358>
 800c622:	4b90      	ldr	r3, [pc, #576]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c624:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c628:	4a8e      	ldr	r2, [pc, #568]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c62a:	f043 0304 	orr.w	r3, r3, #4
 800c62e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c632:	4b8c      	ldr	r3, [pc, #560]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c638:	4a8a      	ldr	r2, [pc, #552]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c63a:	f043 0301 	orr.w	r3, r3, #1
 800c63e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c642:	e00f      	b.n	800c664 <HAL_RCC_OscConfig+0x378>
 800c644:	4b87      	ldr	r3, [pc, #540]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c64a:	4a86      	ldr	r2, [pc, #536]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c64c:	f023 0301 	bic.w	r3, r3, #1
 800c650:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c654:	4b83      	ldr	r3, [pc, #524]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c65a:	4a82      	ldr	r2, [pc, #520]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c65c:	f023 0304 	bic.w	r3, r3, #4
 800c660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	689b      	ldr	r3, [r3, #8]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d016      	beq.n	800c69a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c66c:	f7fc face 	bl	8008c0c <HAL_GetTick>
 800c670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c672:	e00a      	b.n	800c68a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c674:	f7fc faca 	bl	8008c0c <HAL_GetTick>
 800c678:	4602      	mov	r2, r0
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	1ad3      	subs	r3, r2, r3
 800c67e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c682:	4293      	cmp	r3, r2
 800c684:	d901      	bls.n	800c68a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c686:	2303      	movs	r3, #3
 800c688:	e142      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c68a:	4b76      	ldr	r3, [pc, #472]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c68c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c690:	f003 0302 	and.w	r3, r3, #2
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0ed      	beq.n	800c674 <HAL_RCC_OscConfig+0x388>
 800c698:	e015      	b.n	800c6c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c69a:	f7fc fab7 	bl	8008c0c <HAL_GetTick>
 800c69e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6a0:	e00a      	b.n	800c6b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c6a2:	f7fc fab3 	bl	8008c0c <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d901      	bls.n	800c6b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	e12b      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c6b8:	4b6a      	ldr	r3, [pc, #424]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6be:	f003 0302 	and.w	r3, r3, #2
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1ed      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c6c6:	7ffb      	ldrb	r3, [r7, #31]
 800c6c8:	2b01      	cmp	r3, #1
 800c6ca:	d105      	bne.n	800c6d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c6cc:	4b65      	ldr	r3, [pc, #404]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c6ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6d0:	4a64      	ldr	r2, [pc, #400]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c6d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c6d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f003 0320 	and.w	r3, r3, #32
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d03c      	beq.n	800c75e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d01c      	beq.n	800c726 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c6ec:	4b5d      	ldr	r3, [pc, #372]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c6ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c6f2:	4a5c      	ldr	r2, [pc, #368]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c6f4:	f043 0301 	orr.w	r3, r3, #1
 800c6f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6fc:	f7fc fa86 	bl	8008c0c <HAL_GetTick>
 800c700:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c702:	e008      	b.n	800c716 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c704:	f7fc fa82 	bl	8008c0c <HAL_GetTick>
 800c708:	4602      	mov	r2, r0
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	1ad3      	subs	r3, r2, r3
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d901      	bls.n	800c716 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c712:	2303      	movs	r3, #3
 800c714:	e0fc      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c716:	4b53      	ldr	r3, [pc, #332]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c718:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c71c:	f003 0302 	and.w	r3, r3, #2
 800c720:	2b00      	cmp	r3, #0
 800c722:	d0ef      	beq.n	800c704 <HAL_RCC_OscConfig+0x418>
 800c724:	e01b      	b.n	800c75e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c726:	4b4f      	ldr	r3, [pc, #316]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c72c:	4a4d      	ldr	r2, [pc, #308]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c72e:	f023 0301 	bic.w	r3, r3, #1
 800c732:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c736:	f7fc fa69 	bl	8008c0c <HAL_GetTick>
 800c73a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c73c:	e008      	b.n	800c750 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c73e:	f7fc fa65 	bl	8008c0c <HAL_GetTick>
 800c742:	4602      	mov	r2, r0
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	1ad3      	subs	r3, r2, r3
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d901      	bls.n	800c750 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800c74c:	2303      	movs	r3, #3
 800c74e:	e0df      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800c750:	4b44      	ldr	r3, [pc, #272]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c756:	f003 0302 	and.w	r3, r3, #2
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d1ef      	bne.n	800c73e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	69db      	ldr	r3, [r3, #28]
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 80d3 	beq.w	800c90e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c768:	4b3e      	ldr	r3, [pc, #248]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c76a:	689b      	ldr	r3, [r3, #8]
 800c76c:	f003 030c 	and.w	r3, r3, #12
 800c770:	2b0c      	cmp	r3, #12
 800c772:	f000 808d 	beq.w	800c890 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	69db      	ldr	r3, [r3, #28]
 800c77a:	2b02      	cmp	r3, #2
 800c77c:	d15a      	bne.n	800c834 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c77e:	4b39      	ldr	r3, [pc, #228]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a38      	ldr	r2, [pc, #224]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c788:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c78a:	f7fc fa3f 	bl	8008c0c <HAL_GetTick>
 800c78e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c790:	e008      	b.n	800c7a4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c792:	f7fc fa3b 	bl	8008c0c <HAL_GetTick>
 800c796:	4602      	mov	r2, r0
 800c798:	693b      	ldr	r3, [r7, #16]
 800c79a:	1ad3      	subs	r3, r2, r3
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d901      	bls.n	800c7a4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800c7a0:	2303      	movs	r3, #3
 800c7a2:	e0b5      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c7a4:	4b2f      	ldr	r3, [pc, #188]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d1f0      	bne.n	800c792 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7b0:	4b2c      	ldr	r3, [pc, #176]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c7b2:	68da      	ldr	r2, [r3, #12]
 800c7b4:	4b2d      	ldr	r3, [pc, #180]	; (800c86c <HAL_RCC_OscConfig+0x580>)
 800c7b6:	4013      	ands	r3, r2
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	6a11      	ldr	r1, [r2, #32]
 800c7bc:	687a      	ldr	r2, [r7, #4]
 800c7be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c7c0:	3a01      	subs	r2, #1
 800c7c2:	0112      	lsls	r2, r2, #4
 800c7c4:	4311      	orrs	r1, r2
 800c7c6:	687a      	ldr	r2, [r7, #4]
 800c7c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800c7ca:	0212      	lsls	r2, r2, #8
 800c7cc:	4311      	orrs	r1, r2
 800c7ce:	687a      	ldr	r2, [r7, #4]
 800c7d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800c7d2:	0852      	lsrs	r2, r2, #1
 800c7d4:	3a01      	subs	r2, #1
 800c7d6:	0552      	lsls	r2, r2, #21
 800c7d8:	4311      	orrs	r1, r2
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800c7de:	0852      	lsrs	r2, r2, #1
 800c7e0:	3a01      	subs	r2, #1
 800c7e2:	0652      	lsls	r2, r2, #25
 800c7e4:	4311      	orrs	r1, r2
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c7ea:	06d2      	lsls	r2, r2, #27
 800c7ec:	430a      	orrs	r2, r1
 800c7ee:	491d      	ldr	r1, [pc, #116]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c7f0:	4313      	orrs	r3, r2
 800c7f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c7f4:	4b1b      	ldr	r3, [pc, #108]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	4a1a      	ldr	r2, [pc, #104]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c7fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c7fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800c800:	4b18      	ldr	r3, [pc, #96]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c802:	68db      	ldr	r3, [r3, #12]
 800c804:	4a17      	ldr	r2, [pc, #92]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c80a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c80c:	f7fc f9fe 	bl	8008c0c <HAL_GetTick>
 800c810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c812:	e008      	b.n	800c826 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c814:	f7fc f9fa 	bl	8008c0c <HAL_GetTick>
 800c818:	4602      	mov	r2, r0
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	1ad3      	subs	r3, r2, r3
 800c81e:	2b02      	cmp	r3, #2
 800c820:	d901      	bls.n	800c826 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800c822:	2303      	movs	r3, #3
 800c824:	e074      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c826:	4b0f      	ldr	r3, [pc, #60]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d0f0      	beq.n	800c814 <HAL_RCC_OscConfig+0x528>
 800c832:	e06c      	b.n	800c90e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c834:	4b0b      	ldr	r3, [pc, #44]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	4a0a      	ldr	r2, [pc, #40]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c83a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c83e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800c840:	4b08      	ldr	r3, [pc, #32]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	4a07      	ldr	r2, [pc, #28]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c846:	f023 0303 	bic.w	r3, r3, #3
 800c84a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800c84c:	4b05      	ldr	r3, [pc, #20]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c84e:	68db      	ldr	r3, [r3, #12]
 800c850:	4a04      	ldr	r2, [pc, #16]	; (800c864 <HAL_RCC_OscConfig+0x578>)
 800c852:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800c856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c85a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c85c:	f7fc f9d6 	bl	8008c0c <HAL_GetTick>
 800c860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c862:	e00e      	b.n	800c882 <HAL_RCC_OscConfig+0x596>
 800c864:	40021000 	.word	0x40021000
 800c868:	40007000 	.word	0x40007000
 800c86c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c870:	f7fc f9cc 	bl	8008c0c <HAL_GetTick>
 800c874:	4602      	mov	r2, r0
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	2b02      	cmp	r3, #2
 800c87c:	d901      	bls.n	800c882 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800c87e:	2303      	movs	r3, #3
 800c880:	e046      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800c882:	4b25      	ldr	r3, [pc, #148]	; (800c918 <HAL_RCC_OscConfig+0x62c>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1f0      	bne.n	800c870 <HAL_RCC_OscConfig+0x584>
 800c88e:	e03e      	b.n	800c90e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	69db      	ldr	r3, [r3, #28]
 800c894:	2b01      	cmp	r3, #1
 800c896:	d101      	bne.n	800c89c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800c898:	2301      	movs	r3, #1
 800c89a:	e039      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800c89c:	4b1e      	ldr	r3, [pc, #120]	; (800c918 <HAL_RCC_OscConfig+0x62c>)
 800c89e:	68db      	ldr	r3, [r3, #12]
 800c8a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	f003 0203 	and.w	r2, r3, #3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6a1b      	ldr	r3, [r3, #32]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d12c      	bne.n	800c90a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d123      	bne.n	800c90a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d11b      	bne.n	800c90a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800c8de:	429a      	cmp	r2, r3
 800c8e0:	d113      	bne.n	800c90a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ec:	085b      	lsrs	r3, r3, #1
 800c8ee:	3b01      	subs	r3, #1
 800c8f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d109      	bne.n	800c90a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c900:	085b      	lsrs	r3, r3, #1
 800c902:	3b01      	subs	r3, #1
 800c904:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c906:	429a      	cmp	r2, r3
 800c908:	d001      	beq.n	800c90e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800c90a:	2301      	movs	r3, #1
 800c90c:	e000      	b.n	800c910 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800c90e:	2300      	movs	r3, #0
}
 800c910:	4618      	mov	r0, r3
 800c912:	3720      	adds	r7, #32
 800c914:	46bd      	mov	sp, r7
 800c916:	bd80      	pop	{r7, pc}
 800c918:	40021000 	.word	0x40021000

0800c91c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b086      	sub	sp, #24
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
 800c924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800c926:	2300      	movs	r3, #0
 800c928:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d101      	bne.n	800c934 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	e11e      	b.n	800cb72 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c934:	4b91      	ldr	r3, [pc, #580]	; (800cb7c <HAL_RCC_ClockConfig+0x260>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f003 030f 	and.w	r3, r3, #15
 800c93c:	683a      	ldr	r2, [r7, #0]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d910      	bls.n	800c964 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c942:	4b8e      	ldr	r3, [pc, #568]	; (800cb7c <HAL_RCC_ClockConfig+0x260>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f023 020f 	bic.w	r2, r3, #15
 800c94a:	498c      	ldr	r1, [pc, #560]	; (800cb7c <HAL_RCC_ClockConfig+0x260>)
 800c94c:	683b      	ldr	r3, [r7, #0]
 800c94e:	4313      	orrs	r3, r2
 800c950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c952:	4b8a      	ldr	r3, [pc, #552]	; (800cb7c <HAL_RCC_ClockConfig+0x260>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 030f 	and.w	r3, r3, #15
 800c95a:	683a      	ldr	r2, [r7, #0]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d001      	beq.n	800c964 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800c960:	2301      	movs	r3, #1
 800c962:	e106      	b.n	800cb72 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f003 0301 	and.w	r3, r3, #1
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d073      	beq.n	800ca58 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	685b      	ldr	r3, [r3, #4]
 800c974:	2b03      	cmp	r3, #3
 800c976:	d129      	bne.n	800c9cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c978:	4b81      	ldr	r3, [pc, #516]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800c984:	2301      	movs	r3, #1
 800c986:	e0f4      	b.n	800cb72 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800c988:	f000 f972 	bl	800cc70 <RCC_GetSysClockFreqFromPLLSource>
 800c98c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	4a7c      	ldr	r2, [pc, #496]	; (800cb84 <HAL_RCC_ClockConfig+0x268>)
 800c992:	4293      	cmp	r3, r2
 800c994:	d93f      	bls.n	800ca16 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c996:	4b7a      	ldr	r3, [pc, #488]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d009      	beq.n	800c9b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d033      	beq.n	800ca16 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d12f      	bne.n	800ca16 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800c9b6:	4b72      	ldr	r3, [pc, #456]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800c9b8:	689b      	ldr	r3, [r3, #8]
 800c9ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9be:	4a70      	ldr	r2, [pc, #448]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800c9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800c9c6:	2380      	movs	r3, #128	; 0x80
 800c9c8:	617b      	str	r3, [r7, #20]
 800c9ca:	e024      	b.n	800ca16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d107      	bne.n	800c9e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c9d4:	4b6a      	ldr	r3, [pc, #424]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d109      	bne.n	800c9f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c9e0:	2301      	movs	r3, #1
 800c9e2:	e0c6      	b.n	800cb72 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c9e4:	4b66      	ldr	r3, [pc, #408]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d101      	bne.n	800c9f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	e0be      	b.n	800cb72 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800c9f4:	f000 f8ce 	bl	800cb94 <HAL_RCC_GetSysClockFreq>
 800c9f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	4a61      	ldr	r2, [pc, #388]	; (800cb84 <HAL_RCC_ClockConfig+0x268>)
 800c9fe:	4293      	cmp	r3, r2
 800ca00:	d909      	bls.n	800ca16 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ca02:	4b5f      	ldr	r3, [pc, #380]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca04:	689b      	ldr	r3, [r3, #8]
 800ca06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ca0a:	4a5d      	ldr	r2, [pc, #372]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca10:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ca12:	2380      	movs	r3, #128	; 0x80
 800ca14:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ca16:	4b5a      	ldr	r3, [pc, #360]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	f023 0203 	bic.w	r2, r3, #3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	4957      	ldr	r1, [pc, #348]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca24:	4313      	orrs	r3, r2
 800ca26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ca28:	f7fc f8f0 	bl	8008c0c <HAL_GetTick>
 800ca2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca2e:	e00a      	b.n	800ca46 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ca30:	f7fc f8ec 	bl	8008c0c <HAL_GetTick>
 800ca34:	4602      	mov	r2, r0
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	1ad3      	subs	r3, r2, r3
 800ca3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d901      	bls.n	800ca46 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ca42:	2303      	movs	r3, #3
 800ca44:	e095      	b.n	800cb72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ca46:	4b4e      	ldr	r3, [pc, #312]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca48:	689b      	ldr	r3, [r3, #8]
 800ca4a:	f003 020c 	and.w	r2, r3, #12
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d1eb      	bne.n	800ca30 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	f003 0302 	and.w	r3, r3, #2
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d023      	beq.n	800caac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f003 0304 	and.w	r3, r3, #4
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d005      	beq.n	800ca7c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ca70:	4b43      	ldr	r3, [pc, #268]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	4a42      	ldr	r2, [pc, #264]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ca7a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f003 0308 	and.w	r3, r3, #8
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d007      	beq.n	800ca98 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800ca88:	4b3d      	ldr	r3, [pc, #244]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca8a:	689b      	ldr	r3, [r3, #8]
 800ca8c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ca90:	4a3b      	ldr	r2, [pc, #236]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca92:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ca96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ca98:	4b39      	ldr	r3, [pc, #228]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	689b      	ldr	r3, [r3, #8]
 800caa4:	4936      	ldr	r1, [pc, #216]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800caa6:	4313      	orrs	r3, r2
 800caa8:	608b      	str	r3, [r1, #8]
 800caaa:	e008      	b.n	800cabe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800caac:	697b      	ldr	r3, [r7, #20]
 800caae:	2b80      	cmp	r3, #128	; 0x80
 800cab0:	d105      	bne.n	800cabe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cab2:	4b33      	ldr	r3, [pc, #204]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800cab4:	689b      	ldr	r3, [r3, #8]
 800cab6:	4a32      	ldr	r2, [pc, #200]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800cab8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cabc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cabe:	4b2f      	ldr	r3, [pc, #188]	; (800cb7c <HAL_RCC_ClockConfig+0x260>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f003 030f 	and.w	r3, r3, #15
 800cac6:	683a      	ldr	r2, [r7, #0]
 800cac8:	429a      	cmp	r2, r3
 800caca:	d21d      	bcs.n	800cb08 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cacc:	4b2b      	ldr	r3, [pc, #172]	; (800cb7c <HAL_RCC_ClockConfig+0x260>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f023 020f 	bic.w	r2, r3, #15
 800cad4:	4929      	ldr	r1, [pc, #164]	; (800cb7c <HAL_RCC_ClockConfig+0x260>)
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	4313      	orrs	r3, r2
 800cada:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cadc:	f7fc f896 	bl	8008c0c <HAL_GetTick>
 800cae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cae2:	e00a      	b.n	800cafa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cae4:	f7fc f892 	bl	8008c0c <HAL_GetTick>
 800cae8:	4602      	mov	r2, r0
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	1ad3      	subs	r3, r2, r3
 800caee:	f241 3288 	movw	r2, #5000	; 0x1388
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d901      	bls.n	800cafa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800caf6:	2303      	movs	r3, #3
 800caf8:	e03b      	b.n	800cb72 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cafa:	4b20      	ldr	r3, [pc, #128]	; (800cb7c <HAL_RCC_ClockConfig+0x260>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 030f 	and.w	r3, r3, #15
 800cb02:	683a      	ldr	r2, [r7, #0]
 800cb04:	429a      	cmp	r2, r3
 800cb06:	d1ed      	bne.n	800cae4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 0304 	and.w	r3, r3, #4
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d008      	beq.n	800cb26 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cb14:	4b1a      	ldr	r3, [pc, #104]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	68db      	ldr	r3, [r3, #12]
 800cb20:	4917      	ldr	r1, [pc, #92]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800cb22:	4313      	orrs	r3, r2
 800cb24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	f003 0308 	and.w	r3, r3, #8
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d009      	beq.n	800cb46 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cb32:	4b13      	ldr	r3, [pc, #76]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	691b      	ldr	r3, [r3, #16]
 800cb3e:	00db      	lsls	r3, r3, #3
 800cb40:	490f      	ldr	r1, [pc, #60]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800cb42:	4313      	orrs	r3, r2
 800cb44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800cb46:	f000 f825 	bl	800cb94 <HAL_RCC_GetSysClockFreq>
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	4b0c      	ldr	r3, [pc, #48]	; (800cb80 <HAL_RCC_ClockConfig+0x264>)
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	091b      	lsrs	r3, r3, #4
 800cb52:	f003 030f 	and.w	r3, r3, #15
 800cb56:	4a0c      	ldr	r2, [pc, #48]	; (800cb88 <HAL_RCC_ClockConfig+0x26c>)
 800cb58:	5cd3      	ldrb	r3, [r2, r3]
 800cb5a:	f003 031f 	and.w	r3, r3, #31
 800cb5e:	fa21 f303 	lsr.w	r3, r1, r3
 800cb62:	4a0a      	ldr	r2, [pc, #40]	; (800cb8c <HAL_RCC_ClockConfig+0x270>)
 800cb64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800cb66:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <HAL_RCC_ClockConfig+0x274>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7fc f802 	bl	8008b74 <HAL_InitTick>
 800cb70:	4603      	mov	r3, r0
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3718      	adds	r7, #24
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	40022000 	.word	0x40022000
 800cb80:	40021000 	.word	0x40021000
 800cb84:	04c4b400 	.word	0x04c4b400
 800cb88:	08015568 	.word	0x08015568
 800cb8c:	20000c34 	.word	0x20000c34
 800cb90:	20000c38 	.word	0x20000c38

0800cb94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cb94:	b480      	push	{r7}
 800cb96:	b087      	sub	sp, #28
 800cb98:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800cb9a:	4b2c      	ldr	r3, [pc, #176]	; (800cc4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	f003 030c 	and.w	r3, r3, #12
 800cba2:	2b04      	cmp	r3, #4
 800cba4:	d102      	bne.n	800cbac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800cba6:	4b2a      	ldr	r3, [pc, #168]	; (800cc50 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cba8:	613b      	str	r3, [r7, #16]
 800cbaa:	e047      	b.n	800cc3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800cbac:	4b27      	ldr	r3, [pc, #156]	; (800cc4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	f003 030c 	and.w	r3, r3, #12
 800cbb4:	2b08      	cmp	r3, #8
 800cbb6:	d102      	bne.n	800cbbe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800cbb8:	4b26      	ldr	r3, [pc, #152]	; (800cc54 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cbba:	613b      	str	r3, [r7, #16]
 800cbbc:	e03e      	b.n	800cc3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800cbbe:	4b23      	ldr	r3, [pc, #140]	; (800cc4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbc0:	689b      	ldr	r3, [r3, #8]
 800cbc2:	f003 030c 	and.w	r3, r3, #12
 800cbc6:	2b0c      	cmp	r3, #12
 800cbc8:	d136      	bne.n	800cc38 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cbca:	4b20      	ldr	r3, [pc, #128]	; (800cc4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	f003 0303 	and.w	r3, r3, #3
 800cbd2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cbd4:	4b1d      	ldr	r3, [pc, #116]	; (800cc4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbd6:	68db      	ldr	r3, [r3, #12]
 800cbd8:	091b      	lsrs	r3, r3, #4
 800cbda:	f003 030f 	and.w	r3, r3, #15
 800cbde:	3301      	adds	r3, #1
 800cbe0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2b03      	cmp	r3, #3
 800cbe6:	d10c      	bne.n	800cc02 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cbe8:	4a1a      	ldr	r2, [pc, #104]	; (800cc54 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbf0:	4a16      	ldr	r2, [pc, #88]	; (800cc4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cbf2:	68d2      	ldr	r2, [r2, #12]
 800cbf4:	0a12      	lsrs	r2, r2, #8
 800cbf6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cbfa:	fb02 f303 	mul.w	r3, r2, r3
 800cbfe:	617b      	str	r3, [r7, #20]
      break;
 800cc00:	e00c      	b.n	800cc1c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc02:	4a13      	ldr	r2, [pc, #76]	; (800cc50 <HAL_RCC_GetSysClockFreq+0xbc>)
 800cc04:	68bb      	ldr	r3, [r7, #8]
 800cc06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc0a:	4a10      	ldr	r2, [pc, #64]	; (800cc4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc0c:	68d2      	ldr	r2, [r2, #12]
 800cc0e:	0a12      	lsrs	r2, r2, #8
 800cc10:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cc14:	fb02 f303 	mul.w	r3, r2, r3
 800cc18:	617b      	str	r3, [r7, #20]
      break;
 800cc1a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <HAL_RCC_GetSysClockFreq+0xb8>)
 800cc1e:	68db      	ldr	r3, [r3, #12]
 800cc20:	0e5b      	lsrs	r3, r3, #25
 800cc22:	f003 0303 	and.w	r3, r3, #3
 800cc26:	3301      	adds	r3, #1
 800cc28:	005b      	lsls	r3, r3, #1
 800cc2a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cc2c:	697a      	ldr	r2, [r7, #20]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc34:	613b      	str	r3, [r7, #16]
 800cc36:	e001      	b.n	800cc3c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cc3c:	693b      	ldr	r3, [r7, #16]
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	371c      	adds	r7, #28
 800cc42:	46bd      	mov	sp, r7
 800cc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc48:	4770      	bx	lr
 800cc4a:	bf00      	nop
 800cc4c:	40021000 	.word	0x40021000
 800cc50:	00f42400 	.word	0x00f42400
 800cc54:	007a1200 	.word	0x007a1200

0800cc58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cc5c:	4b03      	ldr	r3, [pc, #12]	; (800cc6c <HAL_RCC_GetHCLKFreq+0x14>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr
 800cc6a:	bf00      	nop
 800cc6c:	20000c34 	.word	0x20000c34

0800cc70 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b087      	sub	sp, #28
 800cc74:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cc76:	4b1e      	ldr	r3, [pc, #120]	; (800ccf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc78:	68db      	ldr	r3, [r3, #12]
 800cc7a:	f003 0303 	and.w	r3, r3, #3
 800cc7e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cc80:	4b1b      	ldr	r3, [pc, #108]	; (800ccf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc82:	68db      	ldr	r3, [r3, #12]
 800cc84:	091b      	lsrs	r3, r3, #4
 800cc86:	f003 030f 	and.w	r3, r3, #15
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cc8e:	693b      	ldr	r3, [r7, #16]
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d10c      	bne.n	800ccae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cc94:	4a17      	ldr	r2, [pc, #92]	; (800ccf4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc9c:	4a14      	ldr	r2, [pc, #80]	; (800ccf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cc9e:	68d2      	ldr	r2, [r2, #12]
 800cca0:	0a12      	lsrs	r2, r2, #8
 800cca2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cca6:	fb02 f303 	mul.w	r3, r2, r3
 800ccaa:	617b      	str	r3, [r7, #20]
    break;
 800ccac:	e00c      	b.n	800ccc8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ccae:	4a12      	ldr	r2, [pc, #72]	; (800ccf8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccb6:	4a0e      	ldr	r2, [pc, #56]	; (800ccf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ccb8:	68d2      	ldr	r2, [r2, #12]
 800ccba:	0a12      	lsrs	r2, r2, #8
 800ccbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ccc0:	fb02 f303 	mul.w	r3, r2, r3
 800ccc4:	617b      	str	r3, [r7, #20]
    break;
 800ccc6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ccc8:	4b09      	ldr	r3, [pc, #36]	; (800ccf0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ccca:	68db      	ldr	r3, [r3, #12]
 800cccc:	0e5b      	lsrs	r3, r3, #25
 800ccce:	f003 0303 	and.w	r3, r3, #3
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	005b      	lsls	r3, r3, #1
 800ccd6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ccd8:	697a      	ldr	r2, [r7, #20]
 800ccda:	68bb      	ldr	r3, [r7, #8]
 800ccdc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cce0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cce2:	687b      	ldr	r3, [r7, #4]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	371c      	adds	r7, #28
 800cce8:	46bd      	mov	sp, r7
 800ccea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccee:	4770      	bx	lr
 800ccf0:	40021000 	.word	0x40021000
 800ccf4:	007a1200 	.word	0x007a1200
 800ccf8:	00f42400 	.word	0x00f42400

0800ccfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cd04:	2300      	movs	r3, #0
 800cd06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cd08:	2300      	movs	r3, #0
 800cd0a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f000 8098 	beq.w	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cd1e:	4b43      	ldr	r3, [pc, #268]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d10d      	bne.n	800cd46 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cd2a:	4b40      	ldr	r3, [pc, #256]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd2e:	4a3f      	ldr	r2, [pc, #252]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd34:	6593      	str	r3, [r2, #88]	; 0x58
 800cd36:	4b3d      	ldr	r3, [pc, #244]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cd3e:	60bb      	str	r3, [r7, #8]
 800cd40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cd42:	2301      	movs	r3, #1
 800cd44:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cd46:	4b3a      	ldr	r3, [pc, #232]	; (800ce30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	4a39      	ldr	r2, [pc, #228]	; (800ce30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd50:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800cd52:	f7fb ff5b 	bl	8008c0c <HAL_GetTick>
 800cd56:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd58:	e009      	b.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cd5a:	f7fb ff57 	bl	8008c0c <HAL_GetTick>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	2b02      	cmp	r3, #2
 800cd66:	d902      	bls.n	800cd6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800cd68:	2303      	movs	r3, #3
 800cd6a:	74fb      	strb	r3, [r7, #19]
        break;
 800cd6c:	e005      	b.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cd6e:	4b30      	ldr	r3, [pc, #192]	; (800ce30 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d0ef      	beq.n	800cd5a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800cd7a:	7cfb      	ldrb	r3, [r7, #19]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d159      	bne.n	800ce34 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800cd80:	4b2a      	ldr	r3, [pc, #168]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cd86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd8a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d01e      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd96:	697a      	ldr	r2, [r7, #20]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d019      	beq.n	800cdd0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800cd9c:	4b23      	ldr	r3, [pc, #140]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cd9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cda2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cda6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800cda8:	4b20      	ldr	r3, [pc, #128]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdae:	4a1f      	ldr	r2, [pc, #124]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cdb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800cdb8:	4b1c      	ldr	r3, [pc, #112]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdbe:	4a1b      	ldr	r2, [pc, #108]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cdc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800cdc8:	4a18      	ldr	r2, [pc, #96]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	f003 0301 	and.w	r3, r3, #1
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d016      	beq.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cdda:	f7fb ff17 	bl	8008c0c <HAL_GetTick>
 800cdde:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cde0:	e00b      	b.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cde2:	f7fb ff13 	bl	8008c0c <HAL_GetTick>
 800cde6:	4602      	mov	r2, r0
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	1ad3      	subs	r3, r2, r3
 800cdec:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	d902      	bls.n	800cdfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800cdf4:	2303      	movs	r3, #3
 800cdf6:	74fb      	strb	r3, [r7, #19]
            break;
 800cdf8:	e006      	b.n	800ce08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800cdfa:	4b0c      	ldr	r3, [pc, #48]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cdfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce00:	f003 0302 	and.w	r3, r3, #2
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d0ec      	beq.n	800cde2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ce08:	7cfb      	ldrb	r3, [r7, #19]
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d10b      	bne.n	800ce26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ce0e:	4b07      	ldr	r3, [pc, #28]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ce14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce1c:	4903      	ldr	r1, [pc, #12]	; (800ce2c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ce24:	e008      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ce26:	7cfb      	ldrb	r3, [r7, #19]
 800ce28:	74bb      	strb	r3, [r7, #18]
 800ce2a:	e005      	b.n	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ce2c:	40021000 	.word	0x40021000
 800ce30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce34:	7cfb      	ldrb	r3, [r7, #19]
 800ce36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ce38:	7c7b      	ldrb	r3, [r7, #17]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d105      	bne.n	800ce4a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ce3e:	4baf      	ldr	r3, [pc, #700]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce42:	4aae      	ldr	r2, [pc, #696]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ce48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 0301 	and.w	r3, r3, #1
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d00a      	beq.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ce56:	4ba9      	ldr	r3, [pc, #676]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce5c:	f023 0203 	bic.w	r2, r3, #3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	49a5      	ldr	r1, [pc, #660]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce66:	4313      	orrs	r3, r2
 800ce68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f003 0302 	and.w	r3, r3, #2
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00a      	beq.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ce78:	4ba0      	ldr	r3, [pc, #640]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ce7e:	f023 020c 	bic.w	r2, r3, #12
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	499d      	ldr	r1, [pc, #628]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce88:	4313      	orrs	r3, r2
 800ce8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f003 0304 	and.w	r3, r3, #4
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00a      	beq.n	800ceb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ce9a:	4b98      	ldr	r3, [pc, #608]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ce9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cea0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	4994      	ldr	r1, [pc, #592]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	f003 0308 	and.w	r3, r3, #8
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00a      	beq.n	800ced2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800cebc:	4b8f      	ldr	r3, [pc, #572]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cec2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	691b      	ldr	r3, [r3, #16]
 800ceca:	498c      	ldr	r1, [pc, #560]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cecc:	4313      	orrs	r3, r2
 800cece:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 0310 	and.w	r3, r3, #16
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00a      	beq.n	800cef4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800cede:	4b87      	ldr	r3, [pc, #540]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cee4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	695b      	ldr	r3, [r3, #20]
 800ceec:	4983      	ldr	r1, [pc, #524]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800ceee:	4313      	orrs	r3, r2
 800cef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f003 0320 	and.w	r3, r3, #32
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d00a      	beq.n	800cf16 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cf00:	4b7e      	ldr	r3, [pc, #504]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	699b      	ldr	r3, [r3, #24]
 800cf0e:	497b      	ldr	r1, [pc, #492]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf10:	4313      	orrs	r3, r2
 800cf12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d00a      	beq.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800cf22:	4b76      	ldr	r3, [pc, #472]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf28:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	69db      	ldr	r3, [r3, #28]
 800cf30:	4972      	ldr	r1, [pc, #456]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf32:	4313      	orrs	r3, r2
 800cf34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00a      	beq.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800cf44:	4b6d      	ldr	r3, [pc, #436]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf4a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	6a1b      	ldr	r3, [r3, #32]
 800cf52:	496a      	ldr	r1, [pc, #424]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf54:	4313      	orrs	r3, r2
 800cf56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00a      	beq.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800cf66:	4b65      	ldr	r3, [pc, #404]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cf6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf74:	4961      	ldr	r1, [pc, #388]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf76:	4313      	orrs	r3, r2
 800cf78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d00a      	beq.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cf88:	4b5c      	ldr	r3, [pc, #368]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cf8e:	f023 0203 	bic.w	r2, r3, #3
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf96:	4959      	ldr	r1, [pc, #356]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cfaa:	4b54      	ldr	r3, [pc, #336]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb8:	4950      	ldr	r1, [pc, #320]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfba:	4313      	orrs	r3, r2
 800cfbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d015      	beq.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cfcc:	4b4b      	ldr	r3, [pc, #300]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cfd2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfda:	4948      	ldr	r1, [pc, #288]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfea:	d105      	bne.n	800cff8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800cfec:	4b43      	ldr	r3, [pc, #268]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	4a42      	ldr	r2, [pc, #264]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800cff2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cff6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d000:	2b00      	cmp	r3, #0
 800d002:	d015      	beq.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d004:	4b3d      	ldr	r3, [pc, #244]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d00a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d012:	493a      	ldr	r1, [pc, #232]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d014:	4313      	orrs	r3, r2
 800d016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d01e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d022:	d105      	bne.n	800d030 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d024:	4b35      	ldr	r3, [pc, #212]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	4a34      	ldr	r2, [pc, #208]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d02a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d02e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d015      	beq.n	800d068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d03c:	4b2f      	ldr	r3, [pc, #188]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d042:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d04a:	492c      	ldr	r1, [pc, #176]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d04c:	4313      	orrs	r3, r2
 800d04e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d056:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d05a:	d105      	bne.n	800d068 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d05c:	4b27      	ldr	r3, [pc, #156]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	4a26      	ldr	r2, [pc, #152]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d066:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d070:	2b00      	cmp	r3, #0
 800d072:	d015      	beq.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d074:	4b21      	ldr	r3, [pc, #132]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d07a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d082:	491e      	ldr	r1, [pc, #120]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d084:	4313      	orrs	r3, r2
 800d086:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d08e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d092:	d105      	bne.n	800d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d094:	4b19      	ldr	r3, [pc, #100]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	4a18      	ldr	r2, [pc, #96]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d09a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d09e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d015      	beq.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d0ac:	4b13      	ldr	r3, [pc, #76]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ba:	4910      	ldr	r1, [pc, #64]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0bc:	4313      	orrs	r3, r2
 800d0be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d0ca:	d105      	bne.n	800d0d8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d0cc:	4b0b      	ldr	r3, [pc, #44]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	4a0a      	ldr	r2, [pc, #40]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0d6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d018      	beq.n	800d116 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d0e4:	4b05      	ldr	r3, [pc, #20]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0ea:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f2:	4902      	ldr	r1, [pc, #8]	; (800d0fc <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d0fa:	e001      	b.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d0fc:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d108:	d105      	bne.n	800d116 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d10a:	4b21      	ldr	r3, [pc, #132]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d10c:	68db      	ldr	r3, [r3, #12]
 800d10e:	4a20      	ldr	r2, [pc, #128]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d114:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d015      	beq.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d122:	4b1b      	ldr	r3, [pc, #108]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d128:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d130:	4917      	ldr	r1, [pc, #92]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d132:	4313      	orrs	r3, r2
 800d134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d13c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d140:	d105      	bne.n	800d14e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d142:	4b13      	ldr	r3, [pc, #76]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	4a12      	ldr	r2, [pc, #72]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d14c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d156:	2b00      	cmp	r3, #0
 800d158:	d015      	beq.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d15a:	4b0d      	ldr	r3, [pc, #52]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d15c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d160:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d168:	4909      	ldr	r1, [pc, #36]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d16a:	4313      	orrs	r3, r2
 800d16c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d178:	d105      	bne.n	800d186 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d17a:	4b05      	ldr	r3, [pc, #20]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	4a04      	ldr	r2, [pc, #16]	; (800d190 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d184:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d186:	7cbb      	ldrb	r3, [r7, #18]
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3718      	adds	r7, #24
 800d18c:	46bd      	mov	sp, r7
 800d18e:	bd80      	pop	{r7, pc}
 800d190:	40021000 	.word	0x40021000

0800d194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d101      	bne.n	800d1a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d1a2:	2301      	movs	r3, #1
 800d1a4:	e084      	b.n	800d2b0 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d106      	bne.n	800d1c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7fa fef9 	bl	8007fb8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2202      	movs	r2, #2
 800d1ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1dc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d1e6:	d902      	bls.n	800d1ee <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d1e8:	2300      	movs	r3, #0
 800d1ea:	60fb      	str	r3, [r7, #12]
 800d1ec:	e002      	b.n	800d1f4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d1ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1f2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	68db      	ldr	r3, [r3, #12]
 800d1f8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d1fc:	d007      	beq.n	800d20e <HAL_SPI_Init+0x7a>
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d206:	d002      	beq.n	800d20e <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2200      	movs	r2, #0
 800d20c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d212:	2b00      	cmp	r3, #0
 800d214:	d10b      	bne.n	800d22e <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	68db      	ldr	r3, [r3, #12]
 800d21a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d21e:	d903      	bls.n	800d228 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2202      	movs	r2, #2
 800d224:	631a      	str	r2, [r3, #48]	; 0x30
 800d226:	e002      	b.n	800d22e <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2201      	movs	r2, #1
 800d22c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685a      	ldr	r2, [r3, #4]
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	689b      	ldr	r3, [r3, #8]
 800d236:	431a      	orrs	r2, r3
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	431a      	orrs	r2, r3
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	695b      	ldr	r3, [r3, #20]
 800d242:	431a      	orrs	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	699b      	ldr	r3, [r3, #24]
 800d248:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d24c:	431a      	orrs	r2, r3
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	69db      	ldr	r3, [r3, #28]
 800d252:	431a      	orrs	r2, r3
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a1b      	ldr	r3, [r3, #32]
 800d258:	ea42 0103 	orr.w	r1, r2, r3
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	430a      	orrs	r2, r1
 800d266:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	0c1b      	lsrs	r3, r3, #16
 800d26e:	f003 0204 	and.w	r2, r3, #4
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d276:	431a      	orrs	r2, r3
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d27c:	431a      	orrs	r2, r3
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	ea42 0103 	orr.w	r1, r2, r3
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	68fa      	ldr	r2, [r7, #12]
 800d28c:	430a      	orrs	r2, r1
 800d28e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	69da      	ldr	r2, [r3, #28]
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d29e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d2ae:	2300      	movs	r3, #0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b082      	sub	sp, #8
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d101      	bne.n	800d2ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d2c6:	2301      	movs	r3, #1
 800d2c8:	e049      	b.n	800d35e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d106      	bne.n	800d2e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f7fb fb4a 	bl	8008978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681a      	ldr	r2, [r3, #0]
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	4610      	mov	r0, r2
 800d2f8:	f000 ff20 	bl	800e13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	2201      	movs	r2, #1
 800d300:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	2201      	movs	r2, #1
 800d310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	2201      	movs	r2, #1
 800d318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2201      	movs	r2, #1
 800d320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	2201      	movs	r2, #1
 800d330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2201      	movs	r2, #1
 800d338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2201      	movs	r2, #1
 800d340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	2201      	movs	r2, #1
 800d348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2201      	movs	r2, #1
 800d350:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d35c:	2300      	movs	r3, #0
}
 800d35e:	4618      	mov	r0, r3
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
	...

0800d368 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d001      	beq.n	800d380 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d37c:	2301      	movs	r3, #1
 800d37e:	e019      	b.n	800d3b4 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2202      	movs	r2, #2
 800d384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	689a      	ldr	r2, [r3, #8]
 800d38e:	4b0c      	ldr	r3, [pc, #48]	; (800d3c0 <HAL_TIM_Base_Start+0x58>)
 800d390:	4013      	ands	r3, r2
 800d392:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	2b06      	cmp	r3, #6
 800d398:	d00b      	beq.n	800d3b2 <HAL_TIM_Base_Start+0x4a>
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3a0:	d007      	beq.n	800d3b2 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f042 0201 	orr.w	r2, r2, #1
 800d3b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	3714      	adds	r7, #20
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr
 800d3c0:	00010007 	.word	0x00010007

0800d3c4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d3c4:	b480      	push	{r7}
 800d3c6:	b083      	sub	sp, #12
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	6a1a      	ldr	r2, [r3, #32]
 800d3d2:	f241 1311 	movw	r3, #4369	; 0x1111
 800d3d6:	4013      	ands	r3, r2
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d10f      	bne.n	800d3fc <HAL_TIM_Base_Stop+0x38>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	6a1a      	ldr	r2, [r3, #32]
 800d3e2:	f244 4344 	movw	r3, #17476	; 0x4444
 800d3e6:	4013      	ands	r3, r2
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d107      	bne.n	800d3fc <HAL_TIM_Base_Stop+0x38>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	f022 0201 	bic.w	r2, r2, #1
 800d3fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2201      	movs	r2, #1
 800d400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d404:	2300      	movs	r3, #0
}
 800d406:	4618      	mov	r0, r3
 800d408:	370c      	adds	r7, #12
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
	...

0800d414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d414:	b480      	push	{r7}
 800d416:	b085      	sub	sp, #20
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b01      	cmp	r3, #1
 800d426:	d001      	beq.n	800d42c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	e021      	b.n	800d470 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2202      	movs	r2, #2
 800d430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	68da      	ldr	r2, [r3, #12]
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f042 0201 	orr.w	r2, r2, #1
 800d442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	689a      	ldr	r2, [r3, #8]
 800d44a:	4b0c      	ldr	r3, [pc, #48]	; (800d47c <HAL_TIM_Base_Start_IT+0x68>)
 800d44c:	4013      	ands	r3, r2
 800d44e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2b06      	cmp	r3, #6
 800d454:	d00b      	beq.n	800d46e <HAL_TIM_Base_Start_IT+0x5a>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d45c:	d007      	beq.n	800d46e <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f042 0201 	orr.w	r2, r2, #1
 800d46c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3714      	adds	r7, #20
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr
 800d47c:	00010007 	.word	0x00010007

0800d480 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	68da      	ldr	r2, [r3, #12]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f022 0201 	bic.w	r2, r2, #1
 800d496:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	6a1a      	ldr	r2, [r3, #32]
 800d49e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d10f      	bne.n	800d4c8 <HAL_TIM_Base_Stop_IT+0x48>
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	6a1a      	ldr	r2, [r3, #32]
 800d4ae:	f244 4344 	movw	r3, #17476	; 0x4444
 800d4b2:	4013      	ands	r3, r2
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d107      	bne.n	800d4c8 <HAL_TIM_Base_Stop_IT+0x48>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	681a      	ldr	r2, [r3, #0]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f022 0201 	bic.w	r2, r2, #1
 800d4c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	370c      	adds	r7, #12
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4dc:	4770      	bx	lr

0800d4de <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d4de:	b580      	push	{r7, lr}
 800d4e0:	b082      	sub	sp, #8
 800d4e2:	af00      	add	r7, sp, #0
 800d4e4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d101      	bne.n	800d4f0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d4ec:	2301      	movs	r3, #1
 800d4ee:	e049      	b.n	800d584 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d106      	bne.n	800d50a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2200      	movs	r2, #0
 800d500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 f841 	bl	800d58c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2202      	movs	r2, #2
 800d50e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	3304      	adds	r3, #4
 800d51a:	4619      	mov	r1, r3
 800d51c:	4610      	mov	r0, r2
 800d51e:	f000 fe0d 	bl	800e13c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2201      	movs	r2, #1
 800d526:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2201      	movs	r2, #1
 800d52e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2201      	movs	r2, #1
 800d536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2201      	movs	r2, #1
 800d53e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2201      	movs	r2, #1
 800d546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2201      	movs	r2, #1
 800d54e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2201      	movs	r2, #1
 800d556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2201      	movs	r2, #1
 800d55e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2201      	movs	r2, #1
 800d566:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3708      	adds	r7, #8
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
 800d5a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d5aa:	683b      	ldr	r3, [r7, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d109      	bne.n	800d5c4 <HAL_TIM_PWM_Start+0x24>
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d5b6:	b2db      	uxtb	r3, r3
 800d5b8:	2b01      	cmp	r3, #1
 800d5ba:	bf14      	ite	ne
 800d5bc:	2301      	movne	r3, #1
 800d5be:	2300      	moveq	r3, #0
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	e03c      	b.n	800d63e <HAL_TIM_PWM_Start+0x9e>
 800d5c4:	683b      	ldr	r3, [r7, #0]
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	d109      	bne.n	800d5de <HAL_TIM_PWM_Start+0x3e>
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d5d0:	b2db      	uxtb	r3, r3
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	bf14      	ite	ne
 800d5d6:	2301      	movne	r3, #1
 800d5d8:	2300      	moveq	r3, #0
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	e02f      	b.n	800d63e <HAL_TIM_PWM_Start+0x9e>
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	2b08      	cmp	r3, #8
 800d5e2:	d109      	bne.n	800d5f8 <HAL_TIM_PWM_Start+0x58>
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	bf14      	ite	ne
 800d5f0:	2301      	movne	r3, #1
 800d5f2:	2300      	moveq	r3, #0
 800d5f4:	b2db      	uxtb	r3, r3
 800d5f6:	e022      	b.n	800d63e <HAL_TIM_PWM_Start+0x9e>
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	2b0c      	cmp	r3, #12
 800d5fc:	d109      	bne.n	800d612 <HAL_TIM_PWM_Start+0x72>
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d604:	b2db      	uxtb	r3, r3
 800d606:	2b01      	cmp	r3, #1
 800d608:	bf14      	ite	ne
 800d60a:	2301      	movne	r3, #1
 800d60c:	2300      	moveq	r3, #0
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	e015      	b.n	800d63e <HAL_TIM_PWM_Start+0x9e>
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	2b10      	cmp	r3, #16
 800d616:	d109      	bne.n	800d62c <HAL_TIM_PWM_Start+0x8c>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d61e:	b2db      	uxtb	r3, r3
 800d620:	2b01      	cmp	r3, #1
 800d622:	bf14      	ite	ne
 800d624:	2301      	movne	r3, #1
 800d626:	2300      	moveq	r3, #0
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	e008      	b.n	800d63e <HAL_TIM_PWM_Start+0x9e>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d632:	b2db      	uxtb	r3, r3
 800d634:	2b01      	cmp	r3, #1
 800d636:	bf14      	ite	ne
 800d638:	2301      	movne	r3, #1
 800d63a:	2300      	moveq	r3, #0
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d001      	beq.n	800d646 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d642:	2301      	movs	r3, #1
 800d644:	e073      	b.n	800d72e <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d104      	bne.n	800d656 <HAL_TIM_PWM_Start+0xb6>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2202      	movs	r2, #2
 800d650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d654:	e023      	b.n	800d69e <HAL_TIM_PWM_Start+0xfe>
 800d656:	683b      	ldr	r3, [r7, #0]
 800d658:	2b04      	cmp	r3, #4
 800d65a:	d104      	bne.n	800d666 <HAL_TIM_PWM_Start+0xc6>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	2202      	movs	r2, #2
 800d660:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d664:	e01b      	b.n	800d69e <HAL_TIM_PWM_Start+0xfe>
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	2b08      	cmp	r3, #8
 800d66a:	d104      	bne.n	800d676 <HAL_TIM_PWM_Start+0xd6>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2202      	movs	r2, #2
 800d670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d674:	e013      	b.n	800d69e <HAL_TIM_PWM_Start+0xfe>
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	2b0c      	cmp	r3, #12
 800d67a:	d104      	bne.n	800d686 <HAL_TIM_PWM_Start+0xe6>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2202      	movs	r2, #2
 800d680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d684:	e00b      	b.n	800d69e <HAL_TIM_PWM_Start+0xfe>
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2b10      	cmp	r3, #16
 800d68a:	d104      	bne.n	800d696 <HAL_TIM_PWM_Start+0xf6>
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	2202      	movs	r2, #2
 800d690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d694:	e003      	b.n	800d69e <HAL_TIM_PWM_Start+0xfe>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2202      	movs	r2, #2
 800d69a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	6839      	ldr	r1, [r7, #0]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f001 f9b6 	bl	800ea18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	4a21      	ldr	r2, [pc, #132]	; (800d738 <HAL_TIM_PWM_Start+0x198>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d018      	beq.n	800d6e8 <HAL_TIM_PWM_Start+0x148>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	4a20      	ldr	r2, [pc, #128]	; (800d73c <HAL_TIM_PWM_Start+0x19c>)
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d013      	beq.n	800d6e8 <HAL_TIM_PWM_Start+0x148>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4a1e      	ldr	r2, [pc, #120]	; (800d740 <HAL_TIM_PWM_Start+0x1a0>)
 800d6c6:	4293      	cmp	r3, r2
 800d6c8:	d00e      	beq.n	800d6e8 <HAL_TIM_PWM_Start+0x148>
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a1d      	ldr	r2, [pc, #116]	; (800d744 <HAL_TIM_PWM_Start+0x1a4>)
 800d6d0:	4293      	cmp	r3, r2
 800d6d2:	d009      	beq.n	800d6e8 <HAL_TIM_PWM_Start+0x148>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	4a1b      	ldr	r2, [pc, #108]	; (800d748 <HAL_TIM_PWM_Start+0x1a8>)
 800d6da:	4293      	cmp	r3, r2
 800d6dc:	d004      	beq.n	800d6e8 <HAL_TIM_PWM_Start+0x148>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a1a      	ldr	r2, [pc, #104]	; (800d74c <HAL_TIM_PWM_Start+0x1ac>)
 800d6e4:	4293      	cmp	r3, r2
 800d6e6:	d101      	bne.n	800d6ec <HAL_TIM_PWM_Start+0x14c>
 800d6e8:	2301      	movs	r3, #1
 800d6ea:	e000      	b.n	800d6ee <HAL_TIM_PWM_Start+0x14e>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d007      	beq.n	800d702 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d700:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	689a      	ldr	r2, [r3, #8]
 800d708:	4b11      	ldr	r3, [pc, #68]	; (800d750 <HAL_TIM_PWM_Start+0x1b0>)
 800d70a:	4013      	ands	r3, r2
 800d70c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d70e:	68fb      	ldr	r3, [r7, #12]
 800d710:	2b06      	cmp	r3, #6
 800d712:	d00b      	beq.n	800d72c <HAL_TIM_PWM_Start+0x18c>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d71a:	d007      	beq.n	800d72c <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	681a      	ldr	r2, [r3, #0]
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	f042 0201 	orr.w	r2, r2, #1
 800d72a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d72c:	2300      	movs	r3, #0
}
 800d72e:	4618      	mov	r0, r3
 800d730:	3710      	adds	r7, #16
 800d732:	46bd      	mov	sp, r7
 800d734:	bd80      	pop	{r7, pc}
 800d736:	bf00      	nop
 800d738:	40012c00 	.word	0x40012c00
 800d73c:	40013400 	.word	0x40013400
 800d740:	40014000 	.word	0x40014000
 800d744:	40014400 	.word	0x40014400
 800d748:	40014800 	.word	0x40014800
 800d74c:	40015000 	.word	0x40015000
 800d750:	00010007 	.word	0x00010007

0800d754 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	2200      	movs	r2, #0
 800d764:	6839      	ldr	r1, [r7, #0]
 800d766:	4618      	mov	r0, r3
 800d768:	f001 f956 	bl	800ea18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	4a40      	ldr	r2, [pc, #256]	; (800d874 <HAL_TIM_PWM_Stop+0x120>)
 800d772:	4293      	cmp	r3, r2
 800d774:	d018      	beq.n	800d7a8 <HAL_TIM_PWM_Stop+0x54>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a3f      	ldr	r2, [pc, #252]	; (800d878 <HAL_TIM_PWM_Stop+0x124>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d013      	beq.n	800d7a8 <HAL_TIM_PWM_Stop+0x54>
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	4a3d      	ldr	r2, [pc, #244]	; (800d87c <HAL_TIM_PWM_Stop+0x128>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d00e      	beq.n	800d7a8 <HAL_TIM_PWM_Stop+0x54>
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a3c      	ldr	r2, [pc, #240]	; (800d880 <HAL_TIM_PWM_Stop+0x12c>)
 800d790:	4293      	cmp	r3, r2
 800d792:	d009      	beq.n	800d7a8 <HAL_TIM_PWM_Stop+0x54>
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a3a      	ldr	r2, [pc, #232]	; (800d884 <HAL_TIM_PWM_Stop+0x130>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d004      	beq.n	800d7a8 <HAL_TIM_PWM_Stop+0x54>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4a39      	ldr	r2, [pc, #228]	; (800d888 <HAL_TIM_PWM_Stop+0x134>)
 800d7a4:	4293      	cmp	r3, r2
 800d7a6:	d101      	bne.n	800d7ac <HAL_TIM_PWM_Stop+0x58>
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	e000      	b.n	800d7ae <HAL_TIM_PWM_Stop+0x5a>
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d017      	beq.n	800d7e2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6a1a      	ldr	r2, [r3, #32]
 800d7b8:	f241 1311 	movw	r3, #4369	; 0x1111
 800d7bc:	4013      	ands	r3, r2
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d10f      	bne.n	800d7e2 <HAL_TIM_PWM_Stop+0x8e>
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	6a1a      	ldr	r2, [r3, #32]
 800d7c8:	f244 4344 	movw	r3, #17476	; 0x4444
 800d7cc:	4013      	ands	r3, r2
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d107      	bne.n	800d7e2 <HAL_TIM_PWM_Stop+0x8e>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d7e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	6a1a      	ldr	r2, [r3, #32]
 800d7e8:	f241 1311 	movw	r3, #4369	; 0x1111
 800d7ec:	4013      	ands	r3, r2
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d10f      	bne.n	800d812 <HAL_TIM_PWM_Stop+0xbe>
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6a1a      	ldr	r2, [r3, #32]
 800d7f8:	f244 4344 	movw	r3, #17476	; 0x4444
 800d7fc:	4013      	ands	r3, r2
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d107      	bne.n	800d812 <HAL_TIM_PWM_Stop+0xbe>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f022 0201 	bic.w	r2, r2, #1
 800d810:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d104      	bne.n	800d822 <HAL_TIM_PWM_Stop+0xce>
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d820:	e023      	b.n	800d86a <HAL_TIM_PWM_Stop+0x116>
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	2b04      	cmp	r3, #4
 800d826:	d104      	bne.n	800d832 <HAL_TIM_PWM_Stop+0xde>
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	2201      	movs	r2, #1
 800d82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d830:	e01b      	b.n	800d86a <HAL_TIM_PWM_Stop+0x116>
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	2b08      	cmp	r3, #8
 800d836:	d104      	bne.n	800d842 <HAL_TIM_PWM_Stop+0xee>
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	2201      	movs	r2, #1
 800d83c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d840:	e013      	b.n	800d86a <HAL_TIM_PWM_Stop+0x116>
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	2b0c      	cmp	r3, #12
 800d846:	d104      	bne.n	800d852 <HAL_TIM_PWM_Stop+0xfe>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d850:	e00b      	b.n	800d86a <HAL_TIM_PWM_Stop+0x116>
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	2b10      	cmp	r3, #16
 800d856:	d104      	bne.n	800d862 <HAL_TIM_PWM_Stop+0x10e>
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2201      	movs	r2, #1
 800d85c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d860:	e003      	b.n	800d86a <HAL_TIM_PWM_Stop+0x116>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2201      	movs	r2, #1
 800d866:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800d86a:	2300      	movs	r3, #0
}
 800d86c:	4618      	mov	r0, r3
 800d86e:	3708      	adds	r7, #8
 800d870:	46bd      	mov	sp, r7
 800d872:	bd80      	pop	{r7, pc}
 800d874:	40012c00 	.word	0x40012c00
 800d878:	40013400 	.word	0x40013400
 800d87c:	40014000 	.word	0x40014000
 800d880:	40014400 	.word	0x40014400
 800d884:	40014800 	.word	0x40014800
 800d888:	40015000 	.word	0x40015000

0800d88c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b086      	sub	sp, #24
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d101      	bne.n	800d8a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d89c:	2301      	movs	r3, #1
 800d89e:	e097      	b.n	800d9d0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d106      	bne.n	800d8ba <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7fb f80b 	bl	80088d0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	2202      	movs	r2, #2
 800d8be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	689b      	ldr	r3, [r3, #8]
 800d8c8:	687a      	ldr	r2, [r7, #4]
 800d8ca:	6812      	ldr	r2, [r2, #0]
 800d8cc:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d8d0:	f023 0307 	bic.w	r3, r3, #7
 800d8d4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681a      	ldr	r2, [r3, #0]
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	3304      	adds	r3, #4
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f000 fc2b 	bl	800e13c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6a1b      	ldr	r3, [r3, #32]
 800d8fc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	697a      	ldr	r2, [r7, #20]
 800d904:	4313      	orrs	r3, r2
 800d906:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d90e:	f023 0303 	bic.w	r3, r3, #3
 800d912:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	689a      	ldr	r2, [r3, #8]
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	699b      	ldr	r3, [r3, #24]
 800d91c:	021b      	lsls	r3, r3, #8
 800d91e:	4313      	orrs	r3, r2
 800d920:	693a      	ldr	r2, [r7, #16]
 800d922:	4313      	orrs	r3, r2
 800d924:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d926:	693b      	ldr	r3, [r7, #16]
 800d928:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d92c:	f023 030c 	bic.w	r3, r3, #12
 800d930:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d932:	693b      	ldr	r3, [r7, #16]
 800d934:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d938:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d93c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	68da      	ldr	r2, [r3, #12]
 800d942:	683b      	ldr	r3, [r7, #0]
 800d944:	69db      	ldr	r3, [r3, #28]
 800d946:	021b      	lsls	r3, r3, #8
 800d948:	4313      	orrs	r3, r2
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	691b      	ldr	r3, [r3, #16]
 800d954:	011a      	lsls	r2, r3, #4
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	6a1b      	ldr	r3, [r3, #32]
 800d95a:	031b      	lsls	r3, r3, #12
 800d95c:	4313      	orrs	r3, r2
 800d95e:	693a      	ldr	r2, [r7, #16]
 800d960:	4313      	orrs	r3, r2
 800d962:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d96a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d972:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	685a      	ldr	r2, [r3, #4]
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	695b      	ldr	r3, [r3, #20]
 800d97c:	011b      	lsls	r3, r3, #4
 800d97e:	4313      	orrs	r3, r2
 800d980:	68fa      	ldr	r2, [r7, #12]
 800d982:	4313      	orrs	r3, r2
 800d984:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	68fa      	ldr	r2, [r7, #12]
 800d99c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2201      	movs	r2, #1
 800d9b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2201      	movs	r2, #1
 800d9c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d9ce:	2300      	movs	r3, #0
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}

0800d9d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b082      	sub	sp, #8
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	691b      	ldr	r3, [r3, #16]
 800d9e6:	f003 0302 	and.w	r3, r3, #2
 800d9ea:	2b02      	cmp	r3, #2
 800d9ec:	d122      	bne.n	800da34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	68db      	ldr	r3, [r3, #12]
 800d9f4:	f003 0302 	and.w	r3, r3, #2
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d11b      	bne.n	800da34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f06f 0202 	mvn.w	r2, #2
 800da04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	f003 0303 	and.w	r3, r3, #3
 800da16:	2b00      	cmp	r3, #0
 800da18:	d003      	beq.n	800da22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 fb70 	bl	800e100 <HAL_TIM_IC_CaptureCallback>
 800da20:	e005      	b.n	800da2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 fb62 	bl	800e0ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da28:	6878      	ldr	r0, [r7, #4]
 800da2a:	f000 fb73 	bl	800e114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2200      	movs	r2, #0
 800da32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	691b      	ldr	r3, [r3, #16]
 800da3a:	f003 0304 	and.w	r3, r3, #4
 800da3e:	2b04      	cmp	r3, #4
 800da40:	d122      	bne.n	800da88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	f003 0304 	and.w	r3, r3, #4
 800da4c:	2b04      	cmp	r3, #4
 800da4e:	d11b      	bne.n	800da88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	f06f 0204 	mvn.w	r2, #4
 800da58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2202      	movs	r2, #2
 800da5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	699b      	ldr	r3, [r3, #24]
 800da66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d003      	beq.n	800da76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f000 fb46 	bl	800e100 <HAL_TIM_IC_CaptureCallback>
 800da74:	e005      	b.n	800da82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 fb38 	bl	800e0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da7c:	6878      	ldr	r0, [r7, #4]
 800da7e:	f000 fb49 	bl	800e114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	2200      	movs	r2, #0
 800da86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	691b      	ldr	r3, [r3, #16]
 800da8e:	f003 0308 	and.w	r3, r3, #8
 800da92:	2b08      	cmp	r3, #8
 800da94:	d122      	bne.n	800dadc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	68db      	ldr	r3, [r3, #12]
 800da9c:	f003 0308 	and.w	r3, r3, #8
 800daa0:	2b08      	cmp	r3, #8
 800daa2:	d11b      	bne.n	800dadc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f06f 0208 	mvn.w	r2, #8
 800daac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	2204      	movs	r2, #4
 800dab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	69db      	ldr	r3, [r3, #28]
 800daba:	f003 0303 	and.w	r3, r3, #3
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d003      	beq.n	800daca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f000 fb1c 	bl	800e100 <HAL_TIM_IC_CaptureCallback>
 800dac8:	e005      	b.n	800dad6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fb0e 	bl	800e0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 fb1f 	bl	800e114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	f003 0310 	and.w	r3, r3, #16
 800dae6:	2b10      	cmp	r3, #16
 800dae8:	d122      	bne.n	800db30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	68db      	ldr	r3, [r3, #12]
 800daf0:	f003 0310 	and.w	r3, r3, #16
 800daf4:	2b10      	cmp	r3, #16
 800daf6:	d11b      	bne.n	800db30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	f06f 0210 	mvn.w	r2, #16
 800db00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2208      	movs	r2, #8
 800db06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	69db      	ldr	r3, [r3, #28]
 800db0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 faf2 	bl	800e100 <HAL_TIM_IC_CaptureCallback>
 800db1c:	e005      	b.n	800db2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fae4 	bl	800e0ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 faf5 	bl	800e114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	691b      	ldr	r3, [r3, #16]
 800db36:	f003 0301 	and.w	r3, r3, #1
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d10e      	bne.n	800db5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	f003 0301 	and.w	r3, r3, #1
 800db48:	2b01      	cmp	r3, #1
 800db4a:	d107      	bne.n	800db5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f06f 0201 	mvn.w	r2, #1
 800db54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f000 fabe 	bl	800e0d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	691b      	ldr	r3, [r3, #16]
 800db62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db66:	2b80      	cmp	r3, #128	; 0x80
 800db68:	d10e      	bne.n	800db88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db74:	2b80      	cmp	r3, #128	; 0x80
 800db76:	d107      	bne.n	800db88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800db80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f001 f8c0 	bl	800ed08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	691b      	ldr	r3, [r3, #16]
 800db8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db96:	d10e      	bne.n	800dbb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dba2:	2b80      	cmp	r3, #128	; 0x80
 800dba4:	d107      	bne.n	800dbb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dbae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f001 f8b3 	bl	800ed1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	691b      	ldr	r3, [r3, #16]
 800dbbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbc0:	2b40      	cmp	r3, #64	; 0x40
 800dbc2:	d10e      	bne.n	800dbe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	68db      	ldr	r3, [r3, #12]
 800dbca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dbce:	2b40      	cmp	r3, #64	; 0x40
 800dbd0:	d107      	bne.n	800dbe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dbda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f000 faa3 	bl	800e128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	691b      	ldr	r3, [r3, #16]
 800dbe8:	f003 0320 	and.w	r3, r3, #32
 800dbec:	2b20      	cmp	r3, #32
 800dbee:	d10e      	bne.n	800dc0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	68db      	ldr	r3, [r3, #12]
 800dbf6:	f003 0320 	and.w	r3, r3, #32
 800dbfa:	2b20      	cmp	r3, #32
 800dbfc:	d107      	bne.n	800dc0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f06f 0220 	mvn.w	r2, #32
 800dc06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f001 f873 	bl	800ecf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc1c:	d10f      	bne.n	800dc3e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dc28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc2c:	d107      	bne.n	800dc3e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800dc36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f001 f879 	bl	800ed30 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	691b      	ldr	r3, [r3, #16]
 800dc44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dc4c:	d10f      	bne.n	800dc6e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dc58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800dc5c:	d107      	bne.n	800dc6e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800dc66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f001 f86b 	bl	800ed44 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	691b      	ldr	r3, [r3, #16]
 800dc74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc7c:	d10f      	bne.n	800dc9e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc8c:	d107      	bne.n	800dc9e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800dc96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f001 f85d 	bl	800ed58 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	691b      	ldr	r3, [r3, #16]
 800dca4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dca8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dcac:	d10f      	bne.n	800dcce <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dcbc:	d107      	bne.n	800dcce <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800dcc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f001 f84f 	bl	800ed6c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
	...

0800dcd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d101      	bne.n	800dcf2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800dcee:	2302      	movs	r3, #2
 800dcf0:	e0fd      	b.n	800deee <HAL_TIM_PWM_ConfigChannel+0x216>
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2201      	movs	r2, #1
 800dcf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	2b14      	cmp	r3, #20
 800dcfe:	f200 80f0 	bhi.w	800dee2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800dd02:	a201      	add	r2, pc, #4	; (adr r2, 800dd08 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800dd04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd08:	0800dd5d 	.word	0x0800dd5d
 800dd0c:	0800dee3 	.word	0x0800dee3
 800dd10:	0800dee3 	.word	0x0800dee3
 800dd14:	0800dee3 	.word	0x0800dee3
 800dd18:	0800dd9d 	.word	0x0800dd9d
 800dd1c:	0800dee3 	.word	0x0800dee3
 800dd20:	0800dee3 	.word	0x0800dee3
 800dd24:	0800dee3 	.word	0x0800dee3
 800dd28:	0800dddf 	.word	0x0800dddf
 800dd2c:	0800dee3 	.word	0x0800dee3
 800dd30:	0800dee3 	.word	0x0800dee3
 800dd34:	0800dee3 	.word	0x0800dee3
 800dd38:	0800de1f 	.word	0x0800de1f
 800dd3c:	0800dee3 	.word	0x0800dee3
 800dd40:	0800dee3 	.word	0x0800dee3
 800dd44:	0800dee3 	.word	0x0800dee3
 800dd48:	0800de61 	.word	0x0800de61
 800dd4c:	0800dee3 	.word	0x0800dee3
 800dd50:	0800dee3 	.word	0x0800dee3
 800dd54:	0800dee3 	.word	0x0800dee3
 800dd58:	0800dea1 	.word	0x0800dea1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	68b9      	ldr	r1, [r7, #8]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f000 fa92 	bl	800e28c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	699a      	ldr	r2, [r3, #24]
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	f042 0208 	orr.w	r2, r2, #8
 800dd76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	699a      	ldr	r2, [r3, #24]
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f022 0204 	bic.w	r2, r2, #4
 800dd86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	6999      	ldr	r1, [r3, #24]
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	691a      	ldr	r2, [r3, #16]
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	430a      	orrs	r2, r1
 800dd98:	619a      	str	r2, [r3, #24]
      break;
 800dd9a:	e0a3      	b.n	800dee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	68b9      	ldr	r1, [r7, #8]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f000 fb0c 	bl	800e3c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	699a      	ldr	r2, [r3, #24]
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ddb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	699a      	ldr	r2, [r3, #24]
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ddc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	6999      	ldr	r1, [r3, #24]
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	691b      	ldr	r3, [r3, #16]
 800ddd2:	021a      	lsls	r2, r3, #8
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	430a      	orrs	r2, r1
 800ddda:	619a      	str	r2, [r3, #24]
      break;
 800dddc:	e082      	b.n	800dee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	68b9      	ldr	r1, [r7, #8]
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 fb7f 	bl	800e4e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	69da      	ldr	r2, [r3, #28]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f042 0208 	orr.w	r2, r2, #8
 800ddf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	69da      	ldr	r2, [r3, #28]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	f022 0204 	bic.w	r2, r2, #4
 800de08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	69d9      	ldr	r1, [r3, #28]
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	691a      	ldr	r2, [r3, #16]
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	430a      	orrs	r2, r1
 800de1a:	61da      	str	r2, [r3, #28]
      break;
 800de1c:	e062      	b.n	800dee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	68b9      	ldr	r1, [r7, #8]
 800de24:	4618      	mov	r0, r3
 800de26:	f000 fbf1 	bl	800e60c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	69da      	ldr	r2, [r3, #28]
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	69da      	ldr	r2, [r3, #28]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	69d9      	ldr	r1, [r3, #28]
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	691b      	ldr	r3, [r3, #16]
 800de54:	021a      	lsls	r2, r3, #8
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	430a      	orrs	r2, r1
 800de5c:	61da      	str	r2, [r3, #28]
      break;
 800de5e:	e041      	b.n	800dee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	68b9      	ldr	r1, [r7, #8]
 800de66:	4618      	mov	r0, r3
 800de68:	f000 fc64 	bl	800e734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f042 0208 	orr.w	r2, r2, #8
 800de7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f022 0204 	bic.w	r2, r2, #4
 800de8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	691a      	ldr	r2, [r3, #16]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	430a      	orrs	r2, r1
 800de9c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800de9e:	e021      	b.n	800dee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	68b9      	ldr	r1, [r7, #8]
 800dea6:	4618      	mov	r0, r3
 800dea8:	f000 fcae 	bl	800e808 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800deba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ded2:	68bb      	ldr	r3, [r7, #8]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	021a      	lsls	r2, r3, #8
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	430a      	orrs	r2, r1
 800dede:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800dee0:	e000      	b.n	800dee4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800dee2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	2200      	movs	r2, #0
 800dee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800deec:	2300      	movs	r3, #0
}
 800deee:	4618      	mov	r0, r3
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}
 800def6:	bf00      	nop

0800def8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b084      	sub	sp, #16
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
 800df00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df08:	2b01      	cmp	r3, #1
 800df0a:	d101      	bne.n	800df10 <HAL_TIM_ConfigClockSource+0x18>
 800df0c:	2302      	movs	r3, #2
 800df0e:	e0d2      	b.n	800e0b6 <HAL_TIM_ConfigClockSource+0x1be>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2201      	movs	r2, #1
 800df14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2202      	movs	r2, #2
 800df1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	689b      	ldr	r3, [r3, #8]
 800df26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800df2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800df32:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df3a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df4c:	f000 80a9 	beq.w	800e0a2 <HAL_TIM_ConfigClockSource+0x1aa>
 800df50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df54:	d81a      	bhi.n	800df8c <HAL_TIM_ConfigClockSource+0x94>
 800df56:	2b30      	cmp	r3, #48	; 0x30
 800df58:	f000 809a 	beq.w	800e090 <HAL_TIM_ConfigClockSource+0x198>
 800df5c:	2b30      	cmp	r3, #48	; 0x30
 800df5e:	d809      	bhi.n	800df74 <HAL_TIM_ConfigClockSource+0x7c>
 800df60:	2b10      	cmp	r3, #16
 800df62:	f000 8095 	beq.w	800e090 <HAL_TIM_ConfigClockSource+0x198>
 800df66:	2b20      	cmp	r3, #32
 800df68:	f000 8092 	beq.w	800e090 <HAL_TIM_ConfigClockSource+0x198>
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	f000 808f 	beq.w	800e090 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800df72:	e097      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800df74:	2b50      	cmp	r3, #80	; 0x50
 800df76:	d05b      	beq.n	800e030 <HAL_TIM_ConfigClockSource+0x138>
 800df78:	2b50      	cmp	r3, #80	; 0x50
 800df7a:	d802      	bhi.n	800df82 <HAL_TIM_ConfigClockSource+0x8a>
 800df7c:	2b40      	cmp	r3, #64	; 0x40
 800df7e:	d077      	beq.n	800e070 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800df80:	e090      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800df82:	2b60      	cmp	r3, #96	; 0x60
 800df84:	d064      	beq.n	800e050 <HAL_TIM_ConfigClockSource+0x158>
 800df86:	2b70      	cmp	r3, #112	; 0x70
 800df88:	d028      	beq.n	800dfdc <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800df8a:	e08b      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800df8c:	4a4c      	ldr	r2, [pc, #304]	; (800e0c0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800df8e:	4293      	cmp	r3, r2
 800df90:	d07e      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x198>
 800df92:	4a4b      	ldr	r2, [pc, #300]	; (800e0c0 <HAL_TIM_ConfigClockSource+0x1c8>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d810      	bhi.n	800dfba <HAL_TIM_ConfigClockSource+0xc2>
 800df98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df9c:	d078      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x198>
 800df9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dfa2:	d803      	bhi.n	800dfac <HAL_TIM_ConfigClockSource+0xb4>
 800dfa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dfa8:	d02f      	beq.n	800e00a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800dfaa:	e07b      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800dfac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800dfb0:	d06e      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x198>
 800dfb2:	4a44      	ldr	r2, [pc, #272]	; (800e0c4 <HAL_TIM_ConfigClockSource+0x1cc>)
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d06b      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800dfb8:	e074      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800dfba:	4a43      	ldr	r2, [pc, #268]	; (800e0c8 <HAL_TIM_ConfigClockSource+0x1d0>)
 800dfbc:	4293      	cmp	r3, r2
 800dfbe:	d067      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x198>
 800dfc0:	4a41      	ldr	r2, [pc, #260]	; (800e0c8 <HAL_TIM_ConfigClockSource+0x1d0>)
 800dfc2:	4293      	cmp	r3, r2
 800dfc4:	d803      	bhi.n	800dfce <HAL_TIM_ConfigClockSource+0xd6>
 800dfc6:	4a41      	ldr	r2, [pc, #260]	; (800e0cc <HAL_TIM_ConfigClockSource+0x1d4>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d061      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800dfcc:	e06a      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800dfce:	4a40      	ldr	r2, [pc, #256]	; (800e0d0 <HAL_TIM_ConfigClockSource+0x1d8>)
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d05d      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x198>
 800dfd4:	4a3f      	ldr	r2, [pc, #252]	; (800e0d4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d05a      	beq.n	800e090 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800dfda:	e063      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6818      	ldr	r0, [r3, #0]
 800dfe0:	683b      	ldr	r3, [r7, #0]
 800dfe2:	6899      	ldr	r1, [r3, #8]
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	685a      	ldr	r2, [r3, #4]
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	68db      	ldr	r3, [r3, #12]
 800dfec:	f000 fcf4 	bl	800e9d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	689b      	ldr	r3, [r3, #8]
 800dff6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dffe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68fa      	ldr	r2, [r7, #12]
 800e006:	609a      	str	r2, [r3, #8]
      break;
 800e008:	e04c      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6818      	ldr	r0, [r3, #0]
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	6899      	ldr	r1, [r3, #8]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	685a      	ldr	r2, [r3, #4]
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	68db      	ldr	r3, [r3, #12]
 800e01a:	f000 fcdd 	bl	800e9d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	681b      	ldr	r3, [r3, #0]
 800e022:	689a      	ldr	r2, [r3, #8]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e02c:	609a      	str	r2, [r3, #8]
      break;
 800e02e:	e039      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6818      	ldr	r0, [r3, #0]
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	6859      	ldr	r1, [r3, #4]
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	461a      	mov	r2, r3
 800e03e:	f000 fc4f 	bl	800e8e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	2150      	movs	r1, #80	; 0x50
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 fca8 	bl	800e99e <TIM_ITRx_SetConfig>
      break;
 800e04e:	e029      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6818      	ldr	r0, [r3, #0]
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	6859      	ldr	r1, [r3, #4]
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	68db      	ldr	r3, [r3, #12]
 800e05c:	461a      	mov	r2, r3
 800e05e:	f000 fc6e 	bl	800e93e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	2160      	movs	r1, #96	; 0x60
 800e068:	4618      	mov	r0, r3
 800e06a:	f000 fc98 	bl	800e99e <TIM_ITRx_SetConfig>
      break;
 800e06e:	e019      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6818      	ldr	r0, [r3, #0]
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	6859      	ldr	r1, [r3, #4]
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	461a      	mov	r2, r3
 800e07e:	f000 fc2f 	bl	800e8e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	2140      	movs	r1, #64	; 0x40
 800e088:	4618      	mov	r0, r3
 800e08a:	f000 fc88 	bl	800e99e <TIM_ITRx_SetConfig>
      break;
 800e08e:	e009      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681a      	ldr	r2, [r3, #0]
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	4619      	mov	r1, r3
 800e09a:	4610      	mov	r0, r2
 800e09c:	f000 fc7f 	bl	800e99e <TIM_ITRx_SetConfig>
      break;
 800e0a0:	e000      	b.n	800e0a4 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800e0a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2201      	movs	r2, #1
 800e0a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e0b4:	2300      	movs	r3, #0
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3710      	adds	r7, #16
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}
 800e0be:	bf00      	nop
 800e0c0:	00100030 	.word	0x00100030
 800e0c4:	00100020 	.word	0x00100020
 800e0c8:	00100050 	.word	0x00100050
 800e0cc:	00100040 	.word	0x00100040
 800e0d0:	00100060 	.word	0x00100060
 800e0d4:	00100070 	.word	0x00100070

0800e0d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800e0e0:	bf00      	nop
 800e0e2:	370c      	adds	r7, #12
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ea:	4770      	bx	lr

0800e0ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e100:	b480      	push	{r7}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e108:	bf00      	nop
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr

0800e114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e114:	b480      	push	{r7}
 800e116:	b083      	sub	sp, #12
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e11c:	bf00      	nop
 800e11e:	370c      	adds	r7, #12
 800e120:	46bd      	mov	sp, r7
 800e122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e126:	4770      	bx	lr

0800e128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e128:	b480      	push	{r7}
 800e12a:	b083      	sub	sp, #12
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e130:	bf00      	nop
 800e132:	370c      	adds	r7, #12
 800e134:	46bd      	mov	sp, r7
 800e136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13a:	4770      	bx	lr

0800e13c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b085      	sub	sp, #20
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a46      	ldr	r2, [pc, #280]	; (800e268 <TIM_Base_SetConfig+0x12c>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d017      	beq.n	800e184 <TIM_Base_SetConfig+0x48>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e15a:	d013      	beq.n	800e184 <TIM_Base_SetConfig+0x48>
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	4a43      	ldr	r2, [pc, #268]	; (800e26c <TIM_Base_SetConfig+0x130>)
 800e160:	4293      	cmp	r3, r2
 800e162:	d00f      	beq.n	800e184 <TIM_Base_SetConfig+0x48>
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	4a42      	ldr	r2, [pc, #264]	; (800e270 <TIM_Base_SetConfig+0x134>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d00b      	beq.n	800e184 <TIM_Base_SetConfig+0x48>
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	4a41      	ldr	r2, [pc, #260]	; (800e274 <TIM_Base_SetConfig+0x138>)
 800e170:	4293      	cmp	r3, r2
 800e172:	d007      	beq.n	800e184 <TIM_Base_SetConfig+0x48>
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	4a40      	ldr	r2, [pc, #256]	; (800e278 <TIM_Base_SetConfig+0x13c>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d003      	beq.n	800e184 <TIM_Base_SetConfig+0x48>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	4a3f      	ldr	r2, [pc, #252]	; (800e27c <TIM_Base_SetConfig+0x140>)
 800e180:	4293      	cmp	r3, r2
 800e182:	d108      	bne.n	800e196 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e18c:	683b      	ldr	r3, [r7, #0]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	68fa      	ldr	r2, [r7, #12]
 800e192:	4313      	orrs	r3, r2
 800e194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4a33      	ldr	r2, [pc, #204]	; (800e268 <TIM_Base_SetConfig+0x12c>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d023      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1a4:	d01f      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	4a30      	ldr	r2, [pc, #192]	; (800e26c <TIM_Base_SetConfig+0x130>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d01b      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a2f      	ldr	r2, [pc, #188]	; (800e270 <TIM_Base_SetConfig+0x134>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d017      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	4a2e      	ldr	r2, [pc, #184]	; (800e274 <TIM_Base_SetConfig+0x138>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d013      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4a2d      	ldr	r2, [pc, #180]	; (800e278 <TIM_Base_SetConfig+0x13c>)
 800e1c2:	4293      	cmp	r3, r2
 800e1c4:	d00f      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	4a2d      	ldr	r2, [pc, #180]	; (800e280 <TIM_Base_SetConfig+0x144>)
 800e1ca:	4293      	cmp	r3, r2
 800e1cc:	d00b      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	4a2c      	ldr	r2, [pc, #176]	; (800e284 <TIM_Base_SetConfig+0x148>)
 800e1d2:	4293      	cmp	r3, r2
 800e1d4:	d007      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	4a2b      	ldr	r2, [pc, #172]	; (800e288 <TIM_Base_SetConfig+0x14c>)
 800e1da:	4293      	cmp	r3, r2
 800e1dc:	d003      	beq.n	800e1e6 <TIM_Base_SetConfig+0xaa>
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	4a26      	ldr	r2, [pc, #152]	; (800e27c <TIM_Base_SetConfig+0x140>)
 800e1e2:	4293      	cmp	r3, r2
 800e1e4:	d108      	bne.n	800e1f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e1ee:	683b      	ldr	r3, [r7, #0]
 800e1f0:	68db      	ldr	r3, [r3, #12]
 800e1f2:	68fa      	ldr	r2, [r7, #12]
 800e1f4:	4313      	orrs	r3, r2
 800e1f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	695b      	ldr	r3, [r3, #20]
 800e202:	4313      	orrs	r3, r2
 800e204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e20c:	683b      	ldr	r3, [r7, #0]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	4a12      	ldr	r2, [pc, #72]	; (800e268 <TIM_Base_SetConfig+0x12c>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d013      	beq.n	800e24c <TIM_Base_SetConfig+0x110>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	4a14      	ldr	r2, [pc, #80]	; (800e278 <TIM_Base_SetConfig+0x13c>)
 800e228:	4293      	cmp	r3, r2
 800e22a:	d00f      	beq.n	800e24c <TIM_Base_SetConfig+0x110>
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	4a14      	ldr	r2, [pc, #80]	; (800e280 <TIM_Base_SetConfig+0x144>)
 800e230:	4293      	cmp	r3, r2
 800e232:	d00b      	beq.n	800e24c <TIM_Base_SetConfig+0x110>
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	4a13      	ldr	r2, [pc, #76]	; (800e284 <TIM_Base_SetConfig+0x148>)
 800e238:	4293      	cmp	r3, r2
 800e23a:	d007      	beq.n	800e24c <TIM_Base_SetConfig+0x110>
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	4a12      	ldr	r2, [pc, #72]	; (800e288 <TIM_Base_SetConfig+0x14c>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d003      	beq.n	800e24c <TIM_Base_SetConfig+0x110>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	4a0d      	ldr	r2, [pc, #52]	; (800e27c <TIM_Base_SetConfig+0x140>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d103      	bne.n	800e254 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e24c:	683b      	ldr	r3, [r7, #0]
 800e24e:	691a      	ldr	r2, [r3, #16]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2201      	movs	r2, #1
 800e258:	615a      	str	r2, [r3, #20]
}
 800e25a:	bf00      	nop
 800e25c:	3714      	adds	r7, #20
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr
 800e266:	bf00      	nop
 800e268:	40012c00 	.word	0x40012c00
 800e26c:	40000400 	.word	0x40000400
 800e270:	40000800 	.word	0x40000800
 800e274:	40000c00 	.word	0x40000c00
 800e278:	40013400 	.word	0x40013400
 800e27c:	40015000 	.word	0x40015000
 800e280:	40014000 	.word	0x40014000
 800e284:	40014400 	.word	0x40014400
 800e288:	40014800 	.word	0x40014800

0800e28c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b087      	sub	sp, #28
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	f023 0201 	bic.w	r2, r3, #1
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6a1b      	ldr	r3, [r3, #32]
 800e2a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	685b      	ldr	r3, [r3, #4]
 800e2ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e2ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f023 0303 	bic.w	r3, r3, #3
 800e2c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	4313      	orrs	r3, r2
 800e2d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f023 0302 	bic.w	r3, r3, #2
 800e2d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	689b      	ldr	r3, [r3, #8]
 800e2de:	697a      	ldr	r2, [r7, #20]
 800e2e0:	4313      	orrs	r3, r2
 800e2e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	4a30      	ldr	r2, [pc, #192]	; (800e3a8 <TIM_OC1_SetConfig+0x11c>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d013      	beq.n	800e314 <TIM_OC1_SetConfig+0x88>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	4a2f      	ldr	r2, [pc, #188]	; (800e3ac <TIM_OC1_SetConfig+0x120>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d00f      	beq.n	800e314 <TIM_OC1_SetConfig+0x88>
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	4a2e      	ldr	r2, [pc, #184]	; (800e3b0 <TIM_OC1_SetConfig+0x124>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d00b      	beq.n	800e314 <TIM_OC1_SetConfig+0x88>
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	4a2d      	ldr	r2, [pc, #180]	; (800e3b4 <TIM_OC1_SetConfig+0x128>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d007      	beq.n	800e314 <TIM_OC1_SetConfig+0x88>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	4a2c      	ldr	r2, [pc, #176]	; (800e3b8 <TIM_OC1_SetConfig+0x12c>)
 800e308:	4293      	cmp	r3, r2
 800e30a:	d003      	beq.n	800e314 <TIM_OC1_SetConfig+0x88>
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	4a2b      	ldr	r2, [pc, #172]	; (800e3bc <TIM_OC1_SetConfig+0x130>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d10c      	bne.n	800e32e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	f023 0308 	bic.w	r3, r3, #8
 800e31a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e31c:	683b      	ldr	r3, [r7, #0]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	697a      	ldr	r2, [r7, #20]
 800e322:	4313      	orrs	r3, r2
 800e324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	f023 0304 	bic.w	r3, r3, #4
 800e32c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	4a1d      	ldr	r2, [pc, #116]	; (800e3a8 <TIM_OC1_SetConfig+0x11c>)
 800e332:	4293      	cmp	r3, r2
 800e334:	d013      	beq.n	800e35e <TIM_OC1_SetConfig+0xd2>
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	4a1c      	ldr	r2, [pc, #112]	; (800e3ac <TIM_OC1_SetConfig+0x120>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d00f      	beq.n	800e35e <TIM_OC1_SetConfig+0xd2>
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	4a1b      	ldr	r2, [pc, #108]	; (800e3b0 <TIM_OC1_SetConfig+0x124>)
 800e342:	4293      	cmp	r3, r2
 800e344:	d00b      	beq.n	800e35e <TIM_OC1_SetConfig+0xd2>
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	4a1a      	ldr	r2, [pc, #104]	; (800e3b4 <TIM_OC1_SetConfig+0x128>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d007      	beq.n	800e35e <TIM_OC1_SetConfig+0xd2>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4a19      	ldr	r2, [pc, #100]	; (800e3b8 <TIM_OC1_SetConfig+0x12c>)
 800e352:	4293      	cmp	r3, r2
 800e354:	d003      	beq.n	800e35e <TIM_OC1_SetConfig+0xd2>
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a18      	ldr	r2, [pc, #96]	; (800e3bc <TIM_OC1_SetConfig+0x130>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d111      	bne.n	800e382 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e366:	693b      	ldr	r3, [r7, #16]
 800e368:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e36c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	695b      	ldr	r3, [r3, #20]
 800e372:	693a      	ldr	r2, [r7, #16]
 800e374:	4313      	orrs	r3, r2
 800e376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e378:	683b      	ldr	r3, [r7, #0]
 800e37a:	699b      	ldr	r3, [r3, #24]
 800e37c:	693a      	ldr	r2, [r7, #16]
 800e37e:	4313      	orrs	r3, r2
 800e380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	693a      	ldr	r2, [r7, #16]
 800e386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	68fa      	ldr	r2, [r7, #12]
 800e38c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	685a      	ldr	r2, [r3, #4]
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	697a      	ldr	r2, [r7, #20]
 800e39a:	621a      	str	r2, [r3, #32]
}
 800e39c:	bf00      	nop
 800e39e:	371c      	adds	r7, #28
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr
 800e3a8:	40012c00 	.word	0x40012c00
 800e3ac:	40013400 	.word	0x40013400
 800e3b0:	40014000 	.word	0x40014000
 800e3b4:	40014400 	.word	0x40014400
 800e3b8:	40014800 	.word	0x40014800
 800e3bc:	40015000 	.word	0x40015000

0800e3c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b087      	sub	sp, #28
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	6a1b      	ldr	r3, [r3, #32]
 800e3ce:	f023 0210 	bic.w	r2, r3, #16
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6a1b      	ldr	r3, [r3, #32]
 800e3da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	685b      	ldr	r3, [r3, #4]
 800e3e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	699b      	ldr	r3, [r3, #24]
 800e3e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e3ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e3f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	021b      	lsls	r3, r3, #8
 800e402:	68fa      	ldr	r2, [r7, #12]
 800e404:	4313      	orrs	r3, r2
 800e406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	f023 0320 	bic.w	r3, r3, #32
 800e40e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e410:	683b      	ldr	r3, [r7, #0]
 800e412:	689b      	ldr	r3, [r3, #8]
 800e414:	011b      	lsls	r3, r3, #4
 800e416:	697a      	ldr	r2, [r7, #20]
 800e418:	4313      	orrs	r3, r2
 800e41a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	4a2c      	ldr	r2, [pc, #176]	; (800e4d0 <TIM_OC2_SetConfig+0x110>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d007      	beq.n	800e434 <TIM_OC2_SetConfig+0x74>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	4a2b      	ldr	r2, [pc, #172]	; (800e4d4 <TIM_OC2_SetConfig+0x114>)
 800e428:	4293      	cmp	r3, r2
 800e42a:	d003      	beq.n	800e434 <TIM_OC2_SetConfig+0x74>
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	4a2a      	ldr	r2, [pc, #168]	; (800e4d8 <TIM_OC2_SetConfig+0x118>)
 800e430:	4293      	cmp	r3, r2
 800e432:	d10d      	bne.n	800e450 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e43a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	011b      	lsls	r3, r3, #4
 800e442:	697a      	ldr	r2, [r7, #20]
 800e444:	4313      	orrs	r3, r2
 800e446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e44e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	4a1f      	ldr	r2, [pc, #124]	; (800e4d0 <TIM_OC2_SetConfig+0x110>)
 800e454:	4293      	cmp	r3, r2
 800e456:	d013      	beq.n	800e480 <TIM_OC2_SetConfig+0xc0>
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	4a1e      	ldr	r2, [pc, #120]	; (800e4d4 <TIM_OC2_SetConfig+0x114>)
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d00f      	beq.n	800e480 <TIM_OC2_SetConfig+0xc0>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	4a1e      	ldr	r2, [pc, #120]	; (800e4dc <TIM_OC2_SetConfig+0x11c>)
 800e464:	4293      	cmp	r3, r2
 800e466:	d00b      	beq.n	800e480 <TIM_OC2_SetConfig+0xc0>
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4a1d      	ldr	r2, [pc, #116]	; (800e4e0 <TIM_OC2_SetConfig+0x120>)
 800e46c:	4293      	cmp	r3, r2
 800e46e:	d007      	beq.n	800e480 <TIM_OC2_SetConfig+0xc0>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	4a1c      	ldr	r2, [pc, #112]	; (800e4e4 <TIM_OC2_SetConfig+0x124>)
 800e474:	4293      	cmp	r3, r2
 800e476:	d003      	beq.n	800e480 <TIM_OC2_SetConfig+0xc0>
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	4a17      	ldr	r2, [pc, #92]	; (800e4d8 <TIM_OC2_SetConfig+0x118>)
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d113      	bne.n	800e4a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e480:	693b      	ldr	r3, [r7, #16]
 800e482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e488:	693b      	ldr	r3, [r7, #16]
 800e48a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e48e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	695b      	ldr	r3, [r3, #20]
 800e494:	009b      	lsls	r3, r3, #2
 800e496:	693a      	ldr	r2, [r7, #16]
 800e498:	4313      	orrs	r3, r2
 800e49a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	699b      	ldr	r3, [r3, #24]
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	693a      	ldr	r2, [r7, #16]
 800e4a4:	4313      	orrs	r3, r2
 800e4a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	693a      	ldr	r2, [r7, #16]
 800e4ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	68fa      	ldr	r2, [r7, #12]
 800e4b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	685a      	ldr	r2, [r3, #4]
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	697a      	ldr	r2, [r7, #20]
 800e4c0:	621a      	str	r2, [r3, #32]
}
 800e4c2:	bf00      	nop
 800e4c4:	371c      	adds	r7, #28
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	40012c00 	.word	0x40012c00
 800e4d4:	40013400 	.word	0x40013400
 800e4d8:	40015000 	.word	0x40015000
 800e4dc:	40014000 	.word	0x40014000
 800e4e0:	40014400 	.word	0x40014400
 800e4e4:	40014800 	.word	0x40014800

0800e4e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a1b      	ldr	r3, [r3, #32]
 800e4f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	685b      	ldr	r3, [r3, #4]
 800e508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	69db      	ldr	r3, [r3, #28]
 800e50e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	f023 0303 	bic.w	r3, r3, #3
 800e522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	4313      	orrs	r3, r2
 800e52c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	689b      	ldr	r3, [r3, #8]
 800e53a:	021b      	lsls	r3, r3, #8
 800e53c:	697a      	ldr	r2, [r7, #20]
 800e53e:	4313      	orrs	r3, r2
 800e540:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	4a2b      	ldr	r2, [pc, #172]	; (800e5f4 <TIM_OC3_SetConfig+0x10c>)
 800e546:	4293      	cmp	r3, r2
 800e548:	d007      	beq.n	800e55a <TIM_OC3_SetConfig+0x72>
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	4a2a      	ldr	r2, [pc, #168]	; (800e5f8 <TIM_OC3_SetConfig+0x110>)
 800e54e:	4293      	cmp	r3, r2
 800e550:	d003      	beq.n	800e55a <TIM_OC3_SetConfig+0x72>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	4a29      	ldr	r2, [pc, #164]	; (800e5fc <TIM_OC3_SetConfig+0x114>)
 800e556:	4293      	cmp	r3, r2
 800e558:	d10d      	bne.n	800e576 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	68db      	ldr	r3, [r3, #12]
 800e566:	021b      	lsls	r3, r3, #8
 800e568:	697a      	ldr	r2, [r7, #20]
 800e56a:	4313      	orrs	r3, r2
 800e56c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e56e:	697b      	ldr	r3, [r7, #20]
 800e570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a1e      	ldr	r2, [pc, #120]	; (800e5f4 <TIM_OC3_SetConfig+0x10c>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d013      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xbe>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a1d      	ldr	r2, [pc, #116]	; (800e5f8 <TIM_OC3_SetConfig+0x110>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d00f      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xbe>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a1d      	ldr	r2, [pc, #116]	; (800e600 <TIM_OC3_SetConfig+0x118>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d00b      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xbe>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a1c      	ldr	r2, [pc, #112]	; (800e604 <TIM_OC3_SetConfig+0x11c>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d007      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xbe>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a1b      	ldr	r2, [pc, #108]	; (800e608 <TIM_OC3_SetConfig+0x120>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d003      	beq.n	800e5a6 <TIM_OC3_SetConfig+0xbe>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a16      	ldr	r2, [pc, #88]	; (800e5fc <TIM_OC3_SetConfig+0x114>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d113      	bne.n	800e5ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e5a6:	693b      	ldr	r3, [r7, #16]
 800e5a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e5ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e5ae:	693b      	ldr	r3, [r7, #16]
 800e5b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e5b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	695b      	ldr	r3, [r3, #20]
 800e5ba:	011b      	lsls	r3, r3, #4
 800e5bc:	693a      	ldr	r2, [r7, #16]
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	699b      	ldr	r3, [r3, #24]
 800e5c6:	011b      	lsls	r3, r3, #4
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	4313      	orrs	r3, r2
 800e5cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	68fa      	ldr	r2, [r7, #12]
 800e5d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	685a      	ldr	r2, [r3, #4]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	697a      	ldr	r2, [r7, #20]
 800e5e6:	621a      	str	r2, [r3, #32]
}
 800e5e8:	bf00      	nop
 800e5ea:	371c      	adds	r7, #28
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	40012c00 	.word	0x40012c00
 800e5f8:	40013400 	.word	0x40013400
 800e5fc:	40015000 	.word	0x40015000
 800e600:	40014000 	.word	0x40014000
 800e604:	40014400 	.word	0x40014400
 800e608:	40014800 	.word	0x40014800

0800e60c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e60c:	b480      	push	{r7}
 800e60e:	b087      	sub	sp, #28
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6a1b      	ldr	r3, [r3, #32]
 800e61a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	69db      	ldr	r3, [r3, #28]
 800e632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e63a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	021b      	lsls	r3, r3, #8
 800e64e:	68fa      	ldr	r2, [r7, #12]
 800e650:	4313      	orrs	r3, r2
 800e652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e654:	697b      	ldr	r3, [r7, #20]
 800e656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e65a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	689b      	ldr	r3, [r3, #8]
 800e660:	031b      	lsls	r3, r3, #12
 800e662:	697a      	ldr	r2, [r7, #20]
 800e664:	4313      	orrs	r3, r2
 800e666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	4a2c      	ldr	r2, [pc, #176]	; (800e71c <TIM_OC4_SetConfig+0x110>)
 800e66c:	4293      	cmp	r3, r2
 800e66e:	d007      	beq.n	800e680 <TIM_OC4_SetConfig+0x74>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	4a2b      	ldr	r2, [pc, #172]	; (800e720 <TIM_OC4_SetConfig+0x114>)
 800e674:	4293      	cmp	r3, r2
 800e676:	d003      	beq.n	800e680 <TIM_OC4_SetConfig+0x74>
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	4a2a      	ldr	r2, [pc, #168]	; (800e724 <TIM_OC4_SetConfig+0x118>)
 800e67c:	4293      	cmp	r3, r2
 800e67e:	d10d      	bne.n	800e69c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	68db      	ldr	r3, [r3, #12]
 800e68c:	031b      	lsls	r3, r3, #12
 800e68e:	697a      	ldr	r2, [r7, #20]
 800e690:	4313      	orrs	r3, r2
 800e692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e69a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	4a1f      	ldr	r2, [pc, #124]	; (800e71c <TIM_OC4_SetConfig+0x110>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d013      	beq.n	800e6cc <TIM_OC4_SetConfig+0xc0>
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	4a1e      	ldr	r2, [pc, #120]	; (800e720 <TIM_OC4_SetConfig+0x114>)
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	d00f      	beq.n	800e6cc <TIM_OC4_SetConfig+0xc0>
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	4a1e      	ldr	r2, [pc, #120]	; (800e728 <TIM_OC4_SetConfig+0x11c>)
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d00b      	beq.n	800e6cc <TIM_OC4_SetConfig+0xc0>
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	4a1d      	ldr	r2, [pc, #116]	; (800e72c <TIM_OC4_SetConfig+0x120>)
 800e6b8:	4293      	cmp	r3, r2
 800e6ba:	d007      	beq.n	800e6cc <TIM_OC4_SetConfig+0xc0>
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	4a1c      	ldr	r2, [pc, #112]	; (800e730 <TIM_OC4_SetConfig+0x124>)
 800e6c0:	4293      	cmp	r3, r2
 800e6c2:	d003      	beq.n	800e6cc <TIM_OC4_SetConfig+0xc0>
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a17      	ldr	r2, [pc, #92]	; (800e724 <TIM_OC4_SetConfig+0x118>)
 800e6c8:	4293      	cmp	r3, r2
 800e6ca:	d113      	bne.n	800e6f4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e6cc:	693b      	ldr	r3, [r7, #16]
 800e6ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e6d2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e6da:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	695b      	ldr	r3, [r3, #20]
 800e6e0:	019b      	lsls	r3, r3, #6
 800e6e2:	693a      	ldr	r2, [r7, #16]
 800e6e4:	4313      	orrs	r3, r2
 800e6e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	699b      	ldr	r3, [r3, #24]
 800e6ec:	019b      	lsls	r3, r3, #6
 800e6ee:	693a      	ldr	r2, [r7, #16]
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	693a      	ldr	r2, [r7, #16]
 800e6f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	68fa      	ldr	r2, [r7, #12]
 800e6fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e700:	683b      	ldr	r3, [r7, #0]
 800e702:	685a      	ldr	r2, [r3, #4]
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	697a      	ldr	r2, [r7, #20]
 800e70c:	621a      	str	r2, [r3, #32]
}
 800e70e:	bf00      	nop
 800e710:	371c      	adds	r7, #28
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr
 800e71a:	bf00      	nop
 800e71c:	40012c00 	.word	0x40012c00
 800e720:	40013400 	.word	0x40013400
 800e724:	40015000 	.word	0x40015000
 800e728:	40014000 	.word	0x40014000
 800e72c:	40014400 	.word	0x40014400
 800e730:	40014800 	.word	0x40014800

0800e734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e734:	b480      	push	{r7}
 800e736:	b087      	sub	sp, #28
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	6a1b      	ldr	r3, [r3, #32]
 800e742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	6a1b      	ldr	r3, [r3, #32]
 800e74e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e75a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e768:	683b      	ldr	r3, [r7, #0]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	4313      	orrs	r3, r2
 800e770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e778:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	689b      	ldr	r3, [r3, #8]
 800e77e:	041b      	lsls	r3, r3, #16
 800e780:	693a      	ldr	r2, [r7, #16]
 800e782:	4313      	orrs	r3, r2
 800e784:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	4a19      	ldr	r2, [pc, #100]	; (800e7f0 <TIM_OC5_SetConfig+0xbc>)
 800e78a:	4293      	cmp	r3, r2
 800e78c:	d013      	beq.n	800e7b6 <TIM_OC5_SetConfig+0x82>
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	4a18      	ldr	r2, [pc, #96]	; (800e7f4 <TIM_OC5_SetConfig+0xc0>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d00f      	beq.n	800e7b6 <TIM_OC5_SetConfig+0x82>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	4a17      	ldr	r2, [pc, #92]	; (800e7f8 <TIM_OC5_SetConfig+0xc4>)
 800e79a:	4293      	cmp	r3, r2
 800e79c:	d00b      	beq.n	800e7b6 <TIM_OC5_SetConfig+0x82>
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	4a16      	ldr	r2, [pc, #88]	; (800e7fc <TIM_OC5_SetConfig+0xc8>)
 800e7a2:	4293      	cmp	r3, r2
 800e7a4:	d007      	beq.n	800e7b6 <TIM_OC5_SetConfig+0x82>
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	4a15      	ldr	r2, [pc, #84]	; (800e800 <TIM_OC5_SetConfig+0xcc>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d003      	beq.n	800e7b6 <TIM_OC5_SetConfig+0x82>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	4a14      	ldr	r2, [pc, #80]	; (800e804 <TIM_OC5_SetConfig+0xd0>)
 800e7b2:	4293      	cmp	r3, r2
 800e7b4:	d109      	bne.n	800e7ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e7b6:	697b      	ldr	r3, [r7, #20]
 800e7b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e7bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e7be:	683b      	ldr	r3, [r7, #0]
 800e7c0:	695b      	ldr	r3, [r3, #20]
 800e7c2:	021b      	lsls	r3, r3, #8
 800e7c4:	697a      	ldr	r2, [r7, #20]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	697a      	ldr	r2, [r7, #20]
 800e7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	68fa      	ldr	r2, [r7, #12]
 800e7d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	685a      	ldr	r2, [r3, #4]
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	693a      	ldr	r2, [r7, #16]
 800e7e2:	621a      	str	r2, [r3, #32]
}
 800e7e4:	bf00      	nop
 800e7e6:	371c      	adds	r7, #28
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr
 800e7f0:	40012c00 	.word	0x40012c00
 800e7f4:	40013400 	.word	0x40013400
 800e7f8:	40014000 	.word	0x40014000
 800e7fc:	40014400 	.word	0x40014400
 800e800:	40014800 	.word	0x40014800
 800e804:	40015000 	.word	0x40015000

0800e808 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800e808:	b480      	push	{r7}
 800e80a:	b087      	sub	sp, #28
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	6a1b      	ldr	r3, [r3, #32]
 800e816:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6a1b      	ldr	r3, [r3, #32]
 800e822:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e83a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	021b      	lsls	r3, r3, #8
 800e842:	68fa      	ldr	r2, [r7, #12]
 800e844:	4313      	orrs	r3, r2
 800e846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e848:	693b      	ldr	r3, [r7, #16]
 800e84a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e84e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	689b      	ldr	r3, [r3, #8]
 800e854:	051b      	lsls	r3, r3, #20
 800e856:	693a      	ldr	r2, [r7, #16]
 800e858:	4313      	orrs	r3, r2
 800e85a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	4a1a      	ldr	r2, [pc, #104]	; (800e8c8 <TIM_OC6_SetConfig+0xc0>)
 800e860:	4293      	cmp	r3, r2
 800e862:	d013      	beq.n	800e88c <TIM_OC6_SetConfig+0x84>
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	4a19      	ldr	r2, [pc, #100]	; (800e8cc <TIM_OC6_SetConfig+0xc4>)
 800e868:	4293      	cmp	r3, r2
 800e86a:	d00f      	beq.n	800e88c <TIM_OC6_SetConfig+0x84>
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	4a18      	ldr	r2, [pc, #96]	; (800e8d0 <TIM_OC6_SetConfig+0xc8>)
 800e870:	4293      	cmp	r3, r2
 800e872:	d00b      	beq.n	800e88c <TIM_OC6_SetConfig+0x84>
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	4a17      	ldr	r2, [pc, #92]	; (800e8d4 <TIM_OC6_SetConfig+0xcc>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d007      	beq.n	800e88c <TIM_OC6_SetConfig+0x84>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	4a16      	ldr	r2, [pc, #88]	; (800e8d8 <TIM_OC6_SetConfig+0xd0>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d003      	beq.n	800e88c <TIM_OC6_SetConfig+0x84>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4a15      	ldr	r2, [pc, #84]	; (800e8dc <TIM_OC6_SetConfig+0xd4>)
 800e888:	4293      	cmp	r3, r2
 800e88a:	d109      	bne.n	800e8a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e88c:	697b      	ldr	r3, [r7, #20]
 800e88e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e892:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e894:	683b      	ldr	r3, [r7, #0]
 800e896:	695b      	ldr	r3, [r3, #20]
 800e898:	029b      	lsls	r3, r3, #10
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	4313      	orrs	r3, r2
 800e89e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	697a      	ldr	r2, [r7, #20]
 800e8a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	68fa      	ldr	r2, [r7, #12]
 800e8aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e8ac:	683b      	ldr	r3, [r7, #0]
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	693a      	ldr	r2, [r7, #16]
 800e8b8:	621a      	str	r2, [r3, #32]
}
 800e8ba:	bf00      	nop
 800e8bc:	371c      	adds	r7, #28
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr
 800e8c6:	bf00      	nop
 800e8c8:	40012c00 	.word	0x40012c00
 800e8cc:	40013400 	.word	0x40013400
 800e8d0:	40014000 	.word	0x40014000
 800e8d4:	40014400 	.word	0x40014400
 800e8d8:	40014800 	.word	0x40014800
 800e8dc:	40015000 	.word	0x40015000

0800e8e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b087      	sub	sp, #28
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	60f8      	str	r0, [r7, #12]
 800e8e8:	60b9      	str	r1, [r7, #8]
 800e8ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	6a1b      	ldr	r3, [r3, #32]
 800e8f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6a1b      	ldr	r3, [r3, #32]
 800e8f6:	f023 0201 	bic.w	r2, r3, #1
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e90a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	011b      	lsls	r3, r3, #4
 800e910:	693a      	ldr	r2, [r7, #16]
 800e912:	4313      	orrs	r3, r2
 800e914:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	f023 030a 	bic.w	r3, r3, #10
 800e91c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	68bb      	ldr	r3, [r7, #8]
 800e922:	4313      	orrs	r3, r2
 800e924:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	697a      	ldr	r2, [r7, #20]
 800e930:	621a      	str	r2, [r3, #32]
}
 800e932:	bf00      	nop
 800e934:	371c      	adds	r7, #28
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr

0800e93e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e93e:	b480      	push	{r7}
 800e940:	b087      	sub	sp, #28
 800e942:	af00      	add	r7, sp, #0
 800e944:	60f8      	str	r0, [r7, #12]
 800e946:	60b9      	str	r1, [r7, #8]
 800e948:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6a1b      	ldr	r3, [r3, #32]
 800e94e:	f023 0210 	bic.w	r2, r3, #16
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	699b      	ldr	r3, [r3, #24]
 800e95a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	6a1b      	ldr	r3, [r3, #32]
 800e960:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e962:	697b      	ldr	r3, [r7, #20]
 800e964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	031b      	lsls	r3, r3, #12
 800e96e:	697a      	ldr	r2, [r7, #20]
 800e970:	4313      	orrs	r3, r2
 800e972:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e97a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	011b      	lsls	r3, r3, #4
 800e980:	693a      	ldr	r2, [r7, #16]
 800e982:	4313      	orrs	r3, r2
 800e984:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	693a      	ldr	r2, [r7, #16]
 800e990:	621a      	str	r2, [r3, #32]
}
 800e992:	bf00      	nop
 800e994:	371c      	adds	r7, #28
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr

0800e99e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e99e:	b480      	push	{r7}
 800e9a0:	b085      	sub	sp, #20
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800e9b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e9ba:	683a      	ldr	r2, [r7, #0]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	4313      	orrs	r3, r2
 800e9c0:	f043 0307 	orr.w	r3, r3, #7
 800e9c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	609a      	str	r2, [r3, #8]
}
 800e9cc:	bf00      	nop
 800e9ce:	3714      	adds	r7, #20
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d6:	4770      	bx	lr

0800e9d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b087      	sub	sp, #28
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
 800e9e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	689b      	ldr	r3, [r3, #8]
 800e9ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e9f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	021a      	lsls	r2, r3, #8
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	431a      	orrs	r2, r3
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	697a      	ldr	r2, [r7, #20]
 800ea02:	4313      	orrs	r3, r2
 800ea04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	697a      	ldr	r2, [r7, #20]
 800ea0a:	609a      	str	r2, [r3, #8]
}
 800ea0c:	bf00      	nop
 800ea0e:	371c      	adds	r7, #28
 800ea10:	46bd      	mov	sp, r7
 800ea12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea16:	4770      	bx	lr

0800ea18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b087      	sub	sp, #28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	60b9      	str	r1, [r7, #8]
 800ea22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ea24:	68bb      	ldr	r3, [r7, #8]
 800ea26:	f003 031f 	and.w	r3, r3, #31
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ea30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6a1a      	ldr	r2, [r3, #32]
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	43db      	mvns	r3, r3
 800ea3a:	401a      	ands	r2, r3
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	6a1a      	ldr	r2, [r3, #32]
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	f003 031f 	and.w	r3, r3, #31
 800ea4a:	6879      	ldr	r1, [r7, #4]
 800ea4c:	fa01 f303 	lsl.w	r3, r1, r3
 800ea50:	431a      	orrs	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	621a      	str	r2, [r3, #32]
}
 800ea56:	bf00      	nop
 800ea58:	371c      	adds	r7, #28
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea60:	4770      	bx	lr
	...

0800ea64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ea64:	b480      	push	{r7}
 800ea66:	b085      	sub	sp, #20
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	6078      	str	r0, [r7, #4]
 800ea6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea74:	2b01      	cmp	r3, #1
 800ea76:	d101      	bne.n	800ea7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ea78:	2302      	movs	r3, #2
 800ea7a:	e074      	b.n	800eb66 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2201      	movs	r2, #1
 800ea80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	2202      	movs	r2, #2
 800ea88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	689b      	ldr	r3, [r3, #8]
 800ea9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	4a34      	ldr	r2, [pc, #208]	; (800eb74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d009      	beq.n	800eaba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	4a33      	ldr	r2, [pc, #204]	; (800eb78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eaac:	4293      	cmp	r3, r2
 800eaae:	d004      	beq.n	800eaba <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	4a31      	ldr	r2, [pc, #196]	; (800eb7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eab6:	4293      	cmp	r3, r2
 800eab8:	d108      	bne.n	800eacc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800eac0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	68fa      	ldr	r2, [r7, #12]
 800eac8:	4313      	orrs	r3, r2
 800eaca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800eacc:	68fb      	ldr	r3, [r7, #12]
 800eace:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800ead2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ead6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	4313      	orrs	r3, r2
 800eae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	68fa      	ldr	r2, [r7, #12]
 800eae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a21      	ldr	r2, [pc, #132]	; (800eb74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800eaf0:	4293      	cmp	r3, r2
 800eaf2:	d022      	beq.n	800eb3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eafc:	d01d      	beq.n	800eb3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	4a1f      	ldr	r2, [pc, #124]	; (800eb80 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d018      	beq.n	800eb3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	4a1d      	ldr	r2, [pc, #116]	; (800eb84 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800eb0e:	4293      	cmp	r3, r2
 800eb10:	d013      	beq.n	800eb3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	4a1c      	ldr	r2, [pc, #112]	; (800eb88 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800eb18:	4293      	cmp	r3, r2
 800eb1a:	d00e      	beq.n	800eb3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	4a15      	ldr	r2, [pc, #84]	; (800eb78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800eb22:	4293      	cmp	r3, r2
 800eb24:	d009      	beq.n	800eb3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	4a18      	ldr	r2, [pc, #96]	; (800eb8c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	d004      	beq.n	800eb3a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	4a11      	ldr	r2, [pc, #68]	; (800eb7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800eb36:	4293      	cmp	r3, r2
 800eb38:	d10c      	bne.n	800eb54 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eb40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	689b      	ldr	r3, [r3, #8]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68ba      	ldr	r2, [r7, #8]
 800eb52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3714      	adds	r7, #20
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr
 800eb72:	bf00      	nop
 800eb74:	40012c00 	.word	0x40012c00
 800eb78:	40013400 	.word	0x40013400
 800eb7c:	40015000 	.word	0x40015000
 800eb80:	40000400 	.word	0x40000400
 800eb84:	40000800 	.word	0x40000800
 800eb88:	40000c00 	.word	0x40000c00
 800eb8c:	40014000 	.word	0x40014000

0800eb90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b085      	sub	sp, #20
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eba4:	2b01      	cmp	r3, #1
 800eba6:	d101      	bne.n	800ebac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800eba8:	2302      	movs	r3, #2
 800ebaa:	e096      	b.n	800ecda <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	2201      	movs	r2, #1
 800ebb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	4313      	orrs	r3, r2
 800ebc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	4313      	orrs	r3, r2
 800ebdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ebf2:	683b      	ldr	r3, [r7, #0]
 800ebf4:	691b      	ldr	r3, [r3, #16]
 800ebf6:	4313      	orrs	r3, r2
 800ebf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ec00:	683b      	ldr	r3, [r7, #0]
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	4313      	orrs	r3, r2
 800ec06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec12:	4313      	orrs	r3, r2
 800ec14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	699b      	ldr	r3, [r3, #24]
 800ec20:	041b      	lsls	r3, r3, #16
 800ec22:	4313      	orrs	r3, r2
 800ec24:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	4a2f      	ldr	r2, [pc, #188]	; (800ece8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d009      	beq.n	800ec44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	4a2d      	ldr	r2, [pc, #180]	; (800ecec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec36:	4293      	cmp	r3, r2
 800ec38:	d004      	beq.n	800ec44 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4a2c      	ldr	r2, [pc, #176]	; (800ecf0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec40:	4293      	cmp	r3, r2
 800ec42:	d106      	bne.n	800ec52 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	69db      	ldr	r3, [r3, #28]
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	4a24      	ldr	r2, [pc, #144]	; (800ece8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d009      	beq.n	800ec70 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a22      	ldr	r2, [pc, #136]	; (800ecec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d004      	beq.n	800ec70 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	4a21      	ldr	r2, [pc, #132]	; (800ecf0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ec6c:	4293      	cmp	r3, r2
 800ec6e:	d12b      	bne.n	800ecc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7a:	051b      	lsls	r3, r3, #20
 800ec7c:	4313      	orrs	r3, r2
 800ec7e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ec86:	683b      	ldr	r3, [r7, #0]
 800ec88:	6a1b      	ldr	r3, [r3, #32]
 800ec8a:	4313      	orrs	r3, r2
 800ec8c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	4a11      	ldr	r2, [pc, #68]	; (800ece8 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800eca2:	4293      	cmp	r3, r2
 800eca4:	d009      	beq.n	800ecba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	4a10      	ldr	r2, [pc, #64]	; (800ecec <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ecac:	4293      	cmp	r3, r2
 800ecae:	d004      	beq.n	800ecba <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	4a0e      	ldr	r2, [pc, #56]	; (800ecf0 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	d106      	bne.n	800ecc8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc4:	4313      	orrs	r3, r2
 800ecc6:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	68fa      	ldr	r2, [r7, #12]
 800ecce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ecd8:	2300      	movs	r3, #0
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3714      	adds	r7, #20
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr
 800ece6:	bf00      	nop
 800ece8:	40012c00 	.word	0x40012c00
 800ecec:	40013400 	.word	0x40013400
 800ecf0:	40015000 	.word	0x40015000

0800ecf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ecfc:	bf00      	nop
 800ecfe:	370c      	adds	r7, #12
 800ed00:	46bd      	mov	sp, r7
 800ed02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed06:	4770      	bx	lr

0800ed08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ed10:	bf00      	nop
 800ed12:	370c      	adds	r7, #12
 800ed14:	46bd      	mov	sp, r7
 800ed16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed1a:	4770      	bx	lr

0800ed1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ed1c:	b480      	push	{r7}
 800ed1e:	b083      	sub	sp, #12
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ed24:	bf00      	nop
 800ed26:	370c      	adds	r7, #12
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed2e:	4770      	bx	lr

0800ed30 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b083      	sub	sp, #12
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ed38:	bf00      	nop
 800ed3a:	370c      	adds	r7, #12
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b083      	sub	sp, #12
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ed4c:	bf00      	nop
 800ed4e:	370c      	adds	r7, #12
 800ed50:	46bd      	mov	sp, r7
 800ed52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed56:	4770      	bx	lr

0800ed58 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	b083      	sub	sp, #12
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ed60:	bf00      	nop
 800ed62:	370c      	adds	r7, #12
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ed6c:	b480      	push	{r7}
 800ed6e:	b083      	sub	sp, #12
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr

0800ed80 <LL_EXTI_EnableIT_0_31>:
{
 800ed80:	b480      	push	{r7}
 800ed82:	b083      	sub	sp, #12
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ed88:	4b05      	ldr	r3, [pc, #20]	; (800eda0 <LL_EXTI_EnableIT_0_31+0x20>)
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	4904      	ldr	r1, [pc, #16]	; (800eda0 <LL_EXTI_EnableIT_0_31+0x20>)
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	4313      	orrs	r3, r2
 800ed92:	600b      	str	r3, [r1, #0]
}
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr
 800eda0:	40010400 	.word	0x40010400

0800eda4 <LL_EXTI_EnableIT_32_63>:
{
 800eda4:	b480      	push	{r7}
 800eda6:	b083      	sub	sp, #12
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800edac:	4b05      	ldr	r3, [pc, #20]	; (800edc4 <LL_EXTI_EnableIT_32_63+0x20>)
 800edae:	6a1a      	ldr	r2, [r3, #32]
 800edb0:	4904      	ldr	r1, [pc, #16]	; (800edc4 <LL_EXTI_EnableIT_32_63+0x20>)
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4313      	orrs	r3, r2
 800edb6:	620b      	str	r3, [r1, #32]
}
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr
 800edc4:	40010400 	.word	0x40010400

0800edc8 <LL_EXTI_DisableIT_0_31>:
{
 800edc8:	b480      	push	{r7}
 800edca:	b083      	sub	sp, #12
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800edd0:	4b06      	ldr	r3, [pc, #24]	; (800edec <LL_EXTI_DisableIT_0_31+0x24>)
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	43db      	mvns	r3, r3
 800edd8:	4904      	ldr	r1, [pc, #16]	; (800edec <LL_EXTI_DisableIT_0_31+0x24>)
 800edda:	4013      	ands	r3, r2
 800eddc:	600b      	str	r3, [r1, #0]
}
 800edde:	bf00      	nop
 800ede0:	370c      	adds	r7, #12
 800ede2:	46bd      	mov	sp, r7
 800ede4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede8:	4770      	bx	lr
 800edea:	bf00      	nop
 800edec:	40010400 	.word	0x40010400

0800edf0 <LL_EXTI_DisableIT_32_63>:
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800edf8:	4b06      	ldr	r3, [pc, #24]	; (800ee14 <LL_EXTI_DisableIT_32_63+0x24>)
 800edfa:	6a1a      	ldr	r2, [r3, #32]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	43db      	mvns	r3, r3
 800ee00:	4904      	ldr	r1, [pc, #16]	; (800ee14 <LL_EXTI_DisableIT_32_63+0x24>)
 800ee02:	4013      	ands	r3, r2
 800ee04:	620b      	str	r3, [r1, #32]
}
 800ee06:	bf00      	nop
 800ee08:	370c      	adds	r7, #12
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee10:	4770      	bx	lr
 800ee12:	bf00      	nop
 800ee14:	40010400 	.word	0x40010400

0800ee18 <LL_EXTI_EnableEvent_0_31>:
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800ee20:	4b05      	ldr	r3, [pc, #20]	; (800ee38 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ee22:	685a      	ldr	r2, [r3, #4]
 800ee24:	4904      	ldr	r1, [pc, #16]	; (800ee38 <LL_EXTI_EnableEvent_0_31+0x20>)
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	604b      	str	r3, [r1, #4]
}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr
 800ee38:	40010400 	.word	0x40010400

0800ee3c <LL_EXTI_EnableEvent_32_63>:
{
 800ee3c:	b480      	push	{r7}
 800ee3e:	b083      	sub	sp, #12
 800ee40:	af00      	add	r7, sp, #0
 800ee42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800ee44:	4b05      	ldr	r3, [pc, #20]	; (800ee5c <LL_EXTI_EnableEvent_32_63+0x20>)
 800ee46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee48:	4904      	ldr	r1, [pc, #16]	; (800ee5c <LL_EXTI_EnableEvent_32_63+0x20>)
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ee50:	bf00      	nop
 800ee52:	370c      	adds	r7, #12
 800ee54:	46bd      	mov	sp, r7
 800ee56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5a:	4770      	bx	lr
 800ee5c:	40010400 	.word	0x40010400

0800ee60 <LL_EXTI_DisableEvent_0_31>:
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ee68:	4b06      	ldr	r3, [pc, #24]	; (800ee84 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ee6a:	685a      	ldr	r2, [r3, #4]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	43db      	mvns	r3, r3
 800ee70:	4904      	ldr	r1, [pc, #16]	; (800ee84 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ee72:	4013      	ands	r3, r2
 800ee74:	604b      	str	r3, [r1, #4]
}
 800ee76:	bf00      	nop
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr
 800ee82:	bf00      	nop
 800ee84:	40010400 	.word	0x40010400

0800ee88 <LL_EXTI_DisableEvent_32_63>:
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800ee90:	4b06      	ldr	r3, [pc, #24]	; (800eeac <LL_EXTI_DisableEvent_32_63+0x24>)
 800ee92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	43db      	mvns	r3, r3
 800ee98:	4904      	ldr	r1, [pc, #16]	; (800eeac <LL_EXTI_DisableEvent_32_63+0x24>)
 800ee9a:	4013      	ands	r3, r2
 800ee9c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ee9e:	bf00      	nop
 800eea0:	370c      	adds	r7, #12
 800eea2:	46bd      	mov	sp, r7
 800eea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea8:	4770      	bx	lr
 800eeaa:	bf00      	nop
 800eeac:	40010400 	.word	0x40010400

0800eeb0 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800eeb8:	4b05      	ldr	r3, [pc, #20]	; (800eed0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800eeba:	689a      	ldr	r2, [r3, #8]
 800eebc:	4904      	ldr	r1, [pc, #16]	; (800eed0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4313      	orrs	r3, r2
 800eec2:	608b      	str	r3, [r1, #8]
}
 800eec4:	bf00      	nop
 800eec6:	370c      	adds	r7, #12
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr
 800eed0:	40010400 	.word	0x40010400

0800eed4 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800eedc:	4b05      	ldr	r3, [pc, #20]	; (800eef4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800eede:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eee0:	4904      	ldr	r1, [pc, #16]	; (800eef4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4313      	orrs	r3, r2
 800eee6:	628b      	str	r3, [r1, #40]	; 0x28
}
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr
 800eef4:	40010400 	.word	0x40010400

0800eef8 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800eef8:	b480      	push	{r7}
 800eefa:	b083      	sub	sp, #12
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800ef00:	4b06      	ldr	r3, [pc, #24]	; (800ef1c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ef02:	689a      	ldr	r2, [r3, #8]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	43db      	mvns	r3, r3
 800ef08:	4904      	ldr	r1, [pc, #16]	; (800ef1c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	608b      	str	r3, [r1, #8]
}
 800ef0e:	bf00      	nop
 800ef10:	370c      	adds	r7, #12
 800ef12:	46bd      	mov	sp, r7
 800ef14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef18:	4770      	bx	lr
 800ef1a:	bf00      	nop
 800ef1c:	40010400 	.word	0x40010400

0800ef20 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800ef20:	b480      	push	{r7}
 800ef22:	b083      	sub	sp, #12
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800ef28:	4b06      	ldr	r3, [pc, #24]	; (800ef44 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ef2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	43db      	mvns	r3, r3
 800ef30:	4904      	ldr	r1, [pc, #16]	; (800ef44 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800ef32:	4013      	ands	r3, r2
 800ef34:	628b      	str	r3, [r1, #40]	; 0x28
}
 800ef36:	bf00      	nop
 800ef38:	370c      	adds	r7, #12
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	40010400 	.word	0x40010400

0800ef48 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800ef50:	4b05      	ldr	r3, [pc, #20]	; (800ef68 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ef52:	68da      	ldr	r2, [r3, #12]
 800ef54:	4904      	ldr	r1, [pc, #16]	; (800ef68 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4313      	orrs	r3, r2
 800ef5a:	60cb      	str	r3, [r1, #12]
}
 800ef5c:	bf00      	nop
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr
 800ef68:	40010400 	.word	0x40010400

0800ef6c <LL_EXTI_EnableFallingTrig_32_63>:
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800ef74:	4b05      	ldr	r3, [pc, #20]	; (800ef8c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ef76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef78:	4904      	ldr	r1, [pc, #16]	; (800ef8c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ef80:	bf00      	nop
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr
 800ef8c:	40010400 	.word	0x40010400

0800ef90 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ef98:	4b06      	ldr	r3, [pc, #24]	; (800efb4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ef9a:	68da      	ldr	r2, [r3, #12]
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	43db      	mvns	r3, r3
 800efa0:	4904      	ldr	r1, [pc, #16]	; (800efb4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800efa2:	4013      	ands	r3, r2
 800efa4:	60cb      	str	r3, [r1, #12]
}
 800efa6:	bf00      	nop
 800efa8:	370c      	adds	r7, #12
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
 800efb2:	bf00      	nop
 800efb4:	40010400 	.word	0x40010400

0800efb8 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800efc0:	4b06      	ldr	r3, [pc, #24]	; (800efdc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800efc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	43db      	mvns	r3, r3
 800efc8:	4904      	ldr	r1, [pc, #16]	; (800efdc <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800efca:	4013      	ands	r3, r2
 800efcc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800efce:	bf00      	nop
 800efd0:	370c      	adds	r7, #12
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr
 800efda:	bf00      	nop
 800efdc:	40010400 	.word	0x40010400

0800efe0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800efe0:	b580      	push	{r7, lr}
 800efe2:	b084      	sub	sp, #16
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800efe8:	2300      	movs	r3, #0
 800efea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	7a1b      	ldrb	r3, [r3, #8]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f000 80c8 	beq.w	800f186 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d05d      	beq.n	800f0ba <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	7a5b      	ldrb	r3, [r3, #9]
 800f002:	2b01      	cmp	r3, #1
 800f004:	d00e      	beq.n	800f024 <LL_EXTI_Init+0x44>
 800f006:	2b02      	cmp	r3, #2
 800f008:	d017      	beq.n	800f03a <LL_EXTI_Init+0x5a>
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d120      	bne.n	800f050 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	4618      	mov	r0, r3
 800f014:	f7ff ff24 	bl	800ee60 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7ff feaf 	bl	800ed80 <LL_EXTI_EnableIT_0_31>
          break;
 800f022:	e018      	b.n	800f056 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4618      	mov	r0, r3
 800f02a:	f7ff fecd 	bl	800edc8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff fef0 	bl	800ee18 <LL_EXTI_EnableEvent_0_31>
          break;
 800f038:	e00d      	b.n	800f056 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	4618      	mov	r0, r3
 800f040:	f7ff fe9e 	bl	800ed80 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff fee5 	bl	800ee18 <LL_EXTI_EnableEvent_0_31>
          break;
 800f04e:	e002      	b.n	800f056 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800f050:	2301      	movs	r3, #1
 800f052:	60fb      	str	r3, [r7, #12]
          break;
 800f054:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	7a9b      	ldrb	r3, [r3, #10]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d02d      	beq.n	800f0ba <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	7a9b      	ldrb	r3, [r3, #10]
 800f062:	2b02      	cmp	r3, #2
 800f064:	d00e      	beq.n	800f084 <LL_EXTI_Init+0xa4>
 800f066:	2b03      	cmp	r3, #3
 800f068:	d017      	beq.n	800f09a <LL_EXTI_Init+0xba>
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d120      	bne.n	800f0b0 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	4618      	mov	r0, r3
 800f074:	f7ff ff8c 	bl	800ef90 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7ff ff17 	bl	800eeb0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800f082:	e01b      	b.n	800f0bc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4618      	mov	r0, r3
 800f08a:	f7ff ff35 	bl	800eef8 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4618      	mov	r0, r3
 800f094:	f7ff ff58 	bl	800ef48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800f098:	e010      	b.n	800f0bc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	4618      	mov	r0, r3
 800f0a0:	f7ff ff06 	bl	800eeb0 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff ff4d 	bl	800ef48 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800f0ae:	e005      	b.n	800f0bc <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f043 0302 	orr.w	r3, r3, #2
 800f0b6:	60fb      	str	r3, [r7, #12]
            break;
 800f0b8:	e000      	b.n	800f0bc <LL_EXTI_Init+0xdc>
        }
      }
 800f0ba:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d075      	beq.n	800f1b0 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	7a5b      	ldrb	r3, [r3, #9]
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d00e      	beq.n	800f0ea <LL_EXTI_Init+0x10a>
 800f0cc:	2b02      	cmp	r3, #2
 800f0ce:	d017      	beq.n	800f100 <LL_EXTI_Init+0x120>
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d120      	bne.n	800f116 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	685b      	ldr	r3, [r3, #4]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7ff fed5 	bl	800ee88 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	685b      	ldr	r3, [r3, #4]
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f7ff fe5e 	bl	800eda4 <LL_EXTI_EnableIT_32_63>
          break;
 800f0e8:	e01a      	b.n	800f120 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	685b      	ldr	r3, [r3, #4]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7ff fe7e 	bl	800edf0 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff fe9f 	bl	800ee3c <LL_EXTI_EnableEvent_32_63>
          break;
 800f0fe:	e00f      	b.n	800f120 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	4618      	mov	r0, r3
 800f106:	f7ff fe4d 	bl	800eda4 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	4618      	mov	r0, r3
 800f110:	f7ff fe94 	bl	800ee3c <LL_EXTI_EnableEvent_32_63>
          break;
 800f114:	e004      	b.n	800f120 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f043 0304 	orr.w	r3, r3, #4
 800f11c:	60fb      	str	r3, [r7, #12]
          break;
 800f11e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	7a9b      	ldrb	r3, [r3, #10]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d043      	beq.n	800f1b0 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	7a9b      	ldrb	r3, [r3, #10]
 800f12c:	2b02      	cmp	r3, #2
 800f12e:	d00e      	beq.n	800f14e <LL_EXTI_Init+0x16e>
 800f130:	2b03      	cmp	r3, #3
 800f132:	d017      	beq.n	800f164 <LL_EXTI_Init+0x184>
 800f134:	2b01      	cmp	r3, #1
 800f136:	d120      	bne.n	800f17a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	685b      	ldr	r3, [r3, #4]
 800f13c:	4618      	mov	r0, r3
 800f13e:	f7ff ff3b 	bl	800efb8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	685b      	ldr	r3, [r3, #4]
 800f146:	4618      	mov	r0, r3
 800f148:	f7ff fec4 	bl	800eed4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800f14c:	e031      	b.n	800f1b2 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	685b      	ldr	r3, [r3, #4]
 800f152:	4618      	mov	r0, r3
 800f154:	f7ff fee4 	bl	800ef20 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	685b      	ldr	r3, [r3, #4]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff ff05 	bl	800ef6c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800f162:	e026      	b.n	800f1b2 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	4618      	mov	r0, r3
 800f16a:	f7ff feb3 	bl	800eed4 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	4618      	mov	r0, r3
 800f174:	f7ff fefa 	bl	800ef6c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800f178:	e01b      	b.n	800f1b2 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f043 0305 	orr.w	r3, r3, #5
 800f180:	60fb      	str	r3, [r7, #12]
            break;
 800f182:	bf00      	nop
 800f184:	e015      	b.n	800f1b2 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff fe1c 	bl	800edc8 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681b      	ldr	r3, [r3, #0]
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff fe63 	bl	800ee60 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7ff fe26 	bl	800edf0 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	685b      	ldr	r3, [r3, #4]
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f7ff fe6d 	bl	800ee88 <LL_EXTI_DisableEvent_32_63>
 800f1ae:	e000      	b.n	800f1b2 <LL_EXTI_Init+0x1d2>
      }
 800f1b0:	bf00      	nop
  }

  return status;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <LL_GPIO_SetPinMode>:
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b089      	sub	sp, #36	; 0x24
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	60f8      	str	r0, [r7, #12]
 800f1c4:	60b9      	str	r1, [r7, #8]
 800f1c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	68bb      	ldr	r3, [r7, #8]
 800f1ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	fa93 f3a3 	rbit	r3, r3
 800f1d6:	613b      	str	r3, [r7, #16]
  return result;
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	fab3 f383 	clz	r3, r3
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	005b      	lsls	r3, r3, #1
 800f1e2:	2103      	movs	r1, #3
 800f1e4:	fa01 f303 	lsl.w	r3, r1, r3
 800f1e8:	43db      	mvns	r3, r3
 800f1ea:	401a      	ands	r2, r3
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	fa93 f3a3 	rbit	r3, r3
 800f1f6:	61bb      	str	r3, [r7, #24]
  return result;
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	fab3 f383 	clz	r3, r3
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	005b      	lsls	r3, r3, #1
 800f202:	6879      	ldr	r1, [r7, #4]
 800f204:	fa01 f303 	lsl.w	r3, r1, r3
 800f208:	431a      	orrs	r2, r3
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	601a      	str	r2, [r3, #0]
}
 800f20e:	bf00      	nop
 800f210:	3724      	adds	r7, #36	; 0x24
 800f212:	46bd      	mov	sp, r7
 800f214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f218:	4770      	bx	lr

0800f21a <LL_GPIO_SetPinOutputType>:
{
 800f21a:	b480      	push	{r7}
 800f21c:	b085      	sub	sp, #20
 800f21e:	af00      	add	r7, sp, #0
 800f220:	60f8      	str	r0, [r7, #12]
 800f222:	60b9      	str	r1, [r7, #8]
 800f224:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	685a      	ldr	r2, [r3, #4]
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	43db      	mvns	r3, r3
 800f22e:	401a      	ands	r2, r3
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	6879      	ldr	r1, [r7, #4]
 800f234:	fb01 f303 	mul.w	r3, r1, r3
 800f238:	431a      	orrs	r2, r3
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	605a      	str	r2, [r3, #4]
}
 800f23e:	bf00      	nop
 800f240:	3714      	adds	r7, #20
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr

0800f24a <LL_GPIO_SetPinSpeed>:
{
 800f24a:	b480      	push	{r7}
 800f24c:	b089      	sub	sp, #36	; 0x24
 800f24e:	af00      	add	r7, sp, #0
 800f250:	60f8      	str	r0, [r7, #12]
 800f252:	60b9      	str	r1, [r7, #8]
 800f254:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	689a      	ldr	r2, [r3, #8]
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f25e:	697b      	ldr	r3, [r7, #20]
 800f260:	fa93 f3a3 	rbit	r3, r3
 800f264:	613b      	str	r3, [r7, #16]
  return result;
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	fab3 f383 	clz	r3, r3
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	005b      	lsls	r3, r3, #1
 800f270:	2103      	movs	r1, #3
 800f272:	fa01 f303 	lsl.w	r3, r1, r3
 800f276:	43db      	mvns	r3, r3
 800f278:	401a      	ands	r2, r3
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f27e:	69fb      	ldr	r3, [r7, #28]
 800f280:	fa93 f3a3 	rbit	r3, r3
 800f284:	61bb      	str	r3, [r7, #24]
  return result;
 800f286:	69bb      	ldr	r3, [r7, #24]
 800f288:	fab3 f383 	clz	r3, r3
 800f28c:	b2db      	uxtb	r3, r3
 800f28e:	005b      	lsls	r3, r3, #1
 800f290:	6879      	ldr	r1, [r7, #4]
 800f292:	fa01 f303 	lsl.w	r3, r1, r3
 800f296:	431a      	orrs	r2, r3
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	609a      	str	r2, [r3, #8]
}
 800f29c:	bf00      	nop
 800f29e:	3724      	adds	r7, #36	; 0x24
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a6:	4770      	bx	lr

0800f2a8 <LL_GPIO_SetPinPull>:
{
 800f2a8:	b480      	push	{r7}
 800f2aa:	b089      	sub	sp, #36	; 0x24
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	60f8      	str	r0, [r7, #12]
 800f2b0:	60b9      	str	r1, [r7, #8]
 800f2b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	68da      	ldr	r2, [r3, #12]
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2bc:	697b      	ldr	r3, [r7, #20]
 800f2be:	fa93 f3a3 	rbit	r3, r3
 800f2c2:	613b      	str	r3, [r7, #16]
  return result;
 800f2c4:	693b      	ldr	r3, [r7, #16]
 800f2c6:	fab3 f383 	clz	r3, r3
 800f2ca:	b2db      	uxtb	r3, r3
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	2103      	movs	r1, #3
 800f2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800f2d4:	43db      	mvns	r3, r3
 800f2d6:	401a      	ands	r2, r3
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f2dc:	69fb      	ldr	r3, [r7, #28]
 800f2de:	fa93 f3a3 	rbit	r3, r3
 800f2e2:	61bb      	str	r3, [r7, #24]
  return result;
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	fab3 f383 	clz	r3, r3
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	005b      	lsls	r3, r3, #1
 800f2ee:	6879      	ldr	r1, [r7, #4]
 800f2f0:	fa01 f303 	lsl.w	r3, r1, r3
 800f2f4:	431a      	orrs	r2, r3
 800f2f6:	68fb      	ldr	r3, [r7, #12]
 800f2f8:	60da      	str	r2, [r3, #12]
}
 800f2fa:	bf00      	nop
 800f2fc:	3724      	adds	r7, #36	; 0x24
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <LL_GPIO_SetAFPin_0_7>:
{
 800f306:	b480      	push	{r7}
 800f308:	b089      	sub	sp, #36	; 0x24
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	60f8      	str	r0, [r7, #12]
 800f30e:	60b9      	str	r1, [r7, #8]
 800f310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6a1a      	ldr	r2, [r3, #32]
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f31a:	697b      	ldr	r3, [r7, #20]
 800f31c:	fa93 f3a3 	rbit	r3, r3
 800f320:	613b      	str	r3, [r7, #16]
  return result;
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	fab3 f383 	clz	r3, r3
 800f328:	b2db      	uxtb	r3, r3
 800f32a:	009b      	lsls	r3, r3, #2
 800f32c:	210f      	movs	r1, #15
 800f32e:	fa01 f303 	lsl.w	r3, r1, r3
 800f332:	43db      	mvns	r3, r3
 800f334:	401a      	ands	r2, r3
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f33a:	69fb      	ldr	r3, [r7, #28]
 800f33c:	fa93 f3a3 	rbit	r3, r3
 800f340:	61bb      	str	r3, [r7, #24]
  return result;
 800f342:	69bb      	ldr	r3, [r7, #24]
 800f344:	fab3 f383 	clz	r3, r3
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	6879      	ldr	r1, [r7, #4]
 800f34e:	fa01 f303 	lsl.w	r3, r1, r3
 800f352:	431a      	orrs	r2, r3
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	621a      	str	r2, [r3, #32]
}
 800f358:	bf00      	nop
 800f35a:	3724      	adds	r7, #36	; 0x24
 800f35c:	46bd      	mov	sp, r7
 800f35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f362:	4770      	bx	lr

0800f364 <LL_GPIO_SetAFPin_8_15>:
{
 800f364:	b480      	push	{r7}
 800f366:	b089      	sub	sp, #36	; 0x24
 800f368:	af00      	add	r7, sp, #0
 800f36a:	60f8      	str	r0, [r7, #12]
 800f36c:	60b9      	str	r1, [r7, #8]
 800f36e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	0a1b      	lsrs	r3, r3, #8
 800f378:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f37a:	697b      	ldr	r3, [r7, #20]
 800f37c:	fa93 f3a3 	rbit	r3, r3
 800f380:	613b      	str	r3, [r7, #16]
  return result;
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	fab3 f383 	clz	r3, r3
 800f388:	b2db      	uxtb	r3, r3
 800f38a:	009b      	lsls	r3, r3, #2
 800f38c:	210f      	movs	r1, #15
 800f38e:	fa01 f303 	lsl.w	r3, r1, r3
 800f392:	43db      	mvns	r3, r3
 800f394:	401a      	ands	r2, r3
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	0a1b      	lsrs	r3, r3, #8
 800f39a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f39c:	69fb      	ldr	r3, [r7, #28]
 800f39e:	fa93 f3a3 	rbit	r3, r3
 800f3a2:	61bb      	str	r3, [r7, #24]
  return result;
 800f3a4:	69bb      	ldr	r3, [r7, #24]
 800f3a6:	fab3 f383 	clz	r3, r3
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	009b      	lsls	r3, r3, #2
 800f3ae:	6879      	ldr	r1, [r7, #4]
 800f3b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f3b4:	431a      	orrs	r2, r3
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f3ba:	bf00      	nop
 800f3bc:	3724      	adds	r7, #36	; 0x24
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c4:	4770      	bx	lr

0800f3c6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b086      	sub	sp, #24
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	fa93 f3a3 	rbit	r3, r3
 800f3dc:	60bb      	str	r3, [r7, #8]
  return result;
 800f3de:	68bb      	ldr	r3, [r7, #8]
 800f3e0:	fab3 f383 	clz	r3, r3
 800f3e4:	b2db      	uxtb	r3, r3
 800f3e6:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f3e8:	e040      	b.n	800f46c <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	681a      	ldr	r2, [r3, #0]
 800f3ee:	2101      	movs	r1, #1
 800f3f0:	697b      	ldr	r3, [r7, #20]
 800f3f2:	fa01 f303 	lsl.w	r3, r1, r3
 800f3f6:	4013      	ands	r3, r2
 800f3f8:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d032      	beq.n	800f466 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	685b      	ldr	r3, [r3, #4]
 800f404:	461a      	mov	r2, r3
 800f406:	6939      	ldr	r1, [r7, #16]
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f7ff fed7 	bl	800f1bc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	685b      	ldr	r3, [r3, #4]
 800f412:	2b01      	cmp	r3, #1
 800f414:	d003      	beq.n	800f41e <LL_GPIO_Init+0x58>
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	685b      	ldr	r3, [r3, #4]
 800f41a:	2b02      	cmp	r3, #2
 800f41c:	d106      	bne.n	800f42c <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	689b      	ldr	r3, [r3, #8]
 800f422:	461a      	mov	r2, r3
 800f424:	6939      	ldr	r1, [r7, #16]
 800f426:	6878      	ldr	r0, [r7, #4]
 800f428:	f7ff ff0f 	bl	800f24a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800f42c:	683b      	ldr	r3, [r7, #0]
 800f42e:	691b      	ldr	r3, [r3, #16]
 800f430:	461a      	mov	r2, r3
 800f432:	6939      	ldr	r1, [r7, #16]
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f7ff ff37 	bl	800f2a8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d111      	bne.n	800f466 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800f442:	693b      	ldr	r3, [r7, #16]
 800f444:	2bff      	cmp	r3, #255	; 0xff
 800f446:	d807      	bhi.n	800f458 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f448:	683b      	ldr	r3, [r7, #0]
 800f44a:	695b      	ldr	r3, [r3, #20]
 800f44c:	461a      	mov	r2, r3
 800f44e:	6939      	ldr	r1, [r7, #16]
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f7ff ff58 	bl	800f306 <LL_GPIO_SetAFPin_0_7>
 800f456:	e006      	b.n	800f466 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800f458:	683b      	ldr	r3, [r7, #0]
 800f45a:	695b      	ldr	r3, [r3, #20]
 800f45c:	461a      	mov	r2, r3
 800f45e:	6939      	ldr	r1, [r7, #16]
 800f460:	6878      	ldr	r0, [r7, #4]
 800f462:	f7ff ff7f 	bl	800f364 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800f466:	697b      	ldr	r3, [r7, #20]
 800f468:	3301      	adds	r3, #1
 800f46a:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	fa22 f303 	lsr.w	r3, r2, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d1b7      	bne.n	800f3ea <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	685b      	ldr	r3, [r3, #4]
 800f47e:	2b01      	cmp	r3, #1
 800f480:	d003      	beq.n	800f48a <LL_GPIO_Init+0xc4>
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	685b      	ldr	r3, [r3, #4]
 800f486:	2b02      	cmp	r3, #2
 800f488:	d107      	bne.n	800f49a <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	6819      	ldr	r1, [r3, #0]
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	461a      	mov	r2, r3
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f7ff fec0 	bl	800f21a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800f49a:	2300      	movs	r3, #0
}
 800f49c:	4618      	mov	r0, r3
 800f49e:	3718      	adds	r7, #24
 800f4a0:	46bd      	mov	sp, r7
 800f4a2:	bd80      	pop	{r7, pc}

0800f4a4 <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 800f4a4:	b590      	push	{r4, r7, lr}
 800f4a6:	b085      	sub	sp, #20
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	4604      	mov	r4, r0
 800f4ac:	4608      	mov	r0, r1
 800f4ae:	4611      	mov	r1, r2
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	4623      	mov	r3, r4
 800f4b4:	80fb      	strh	r3, [r7, #6]
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	80bb      	strh	r3, [r7, #4]
 800f4ba:	460b      	mov	r3, r1
 800f4bc:	70fb      	strb	r3, [r7, #3]
 800f4be:	4613      	mov	r3, r2
 800f4c0:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	60fb      	str	r3, [r7, #12]
 800f4c6:	e026      	b.n	800f516 <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	60bb      	str	r3, [r7, #8]
 800f4cc:	e01c      	b.n	800f508 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	b29a      	uxth	r2, r3
 800f4d2:	88fb      	ldrh	r3, [r7, #6]
 800f4d4:	4413      	add	r3, r2
 800f4d6:	b298      	uxth	r0, r3
 800f4d8:	68bb      	ldr	r3, [r7, #8]
 800f4da:	009b      	lsls	r3, r3, #2
 800f4dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4de:	4413      	add	r3, r2
 800f4e0:	681a      	ldr	r2, [r3, #0]
 800f4e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	88bb      	ldrh	r3, [r7, #4]
 800f4ee:	4413      	add	r3, r2
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	b29b      	uxth	r3, r3
 800f4f6:	4413      	add	r3, r2
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	883a      	ldrh	r2, [r7, #0]
 800f4fc:	4619      	mov	r1, r3
 800f4fe:	f000 fc1f 	bl	800fd40 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	3301      	adds	r3, #1
 800f506:	60bb      	str	r3, [r7, #8]
 800f508:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f50a:	68ba      	ldr	r2, [r7, #8]
 800f50c:	429a      	cmp	r2, r3
 800f50e:	dbde      	blt.n	800f4ce <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	3301      	adds	r3, #1
 800f514:	60fb      	str	r3, [r7, #12]
 800f516:	78fb      	ldrb	r3, [r7, #3]
 800f518:	68fa      	ldr	r2, [r7, #12]
 800f51a:	429a      	cmp	r2, r3
 800f51c:	dbd4      	blt.n	800f4c8 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 800f51e:	bf00      	nop
 800f520:	3714      	adds	r7, #20
 800f522:	46bd      	mov	sp, r7
 800f524:	bd90      	pop	{r4, r7, pc}

0800f526 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800f526:	b590      	push	{r4, r7, lr}
 800f528:	b087      	sub	sp, #28
 800f52a:	af02      	add	r7, sp, #8
 800f52c:	4604      	mov	r4, r0
 800f52e:	4608      	mov	r0, r1
 800f530:	4611      	mov	r1, r2
 800f532:	461a      	mov	r2, r3
 800f534:	4623      	mov	r3, r4
 800f536:	80fb      	strh	r3, [r7, #6]
 800f538:	4603      	mov	r3, r0
 800f53a:	80bb      	strh	r3, [r7, #4]
 800f53c:	460b      	mov	r3, r1
 800f53e:	807b      	strh	r3, [r7, #2]
 800f540:	4613      	mov	r3, r2
 800f542:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800f544:	2300      	movs	r3, #0
 800f546:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800f548:	7bfa      	ldrb	r2, [r7, #15]
 800f54a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800f54e:	429a      	cmp	r2, r3
 800f550:	d939      	bls.n	800f5c6 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800f552:	88ba      	ldrh	r2, [r7, #4]
 800f554:	7bfb      	ldrb	r3, [r7, #15]
 800f556:	441a      	add	r2, r3
 800f558:	88b9      	ldrh	r1, [r7, #4]
 800f55a:	883b      	ldrh	r3, [r7, #0]
 800f55c:	4419      	add	r1, r3
 800f55e:	7bfb      	ldrb	r3, [r7, #15]
 800f560:	1acb      	subs	r3, r1, r3
 800f562:	429a      	cmp	r2, r3
 800f564:	f000 8089 	beq.w	800f67a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800f568:	88fa      	ldrh	r2, [r7, #6]
 800f56a:	7bfb      	ldrb	r3, [r7, #15]
 800f56c:	441a      	add	r2, r3
 800f56e:	88f9      	ldrh	r1, [r7, #6]
 800f570:	887b      	ldrh	r3, [r7, #2]
 800f572:	4419      	add	r1, r3
 800f574:	7bfb      	ldrb	r3, [r7, #15]
 800f576:	1acb      	subs	r3, r1, r3
 800f578:	429a      	cmp	r2, r3
 800f57a:	d07e      	beq.n	800f67a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800f57c:	7bfb      	ldrb	r3, [r7, #15]
 800f57e:	b29a      	uxth	r2, r3
 800f580:	88fb      	ldrh	r3, [r7, #6]
 800f582:	4413      	add	r3, r2
 800f584:	b298      	uxth	r0, r3
 800f586:	7bfb      	ldrb	r3, [r7, #15]
 800f588:	b29a      	uxth	r2, r3
 800f58a:	88bb      	ldrh	r3, [r7, #4]
 800f58c:	4413      	add	r3, r2
 800f58e:	b299      	uxth	r1, r3
 800f590:	7bfb      	ldrb	r3, [r7, #15]
 800f592:	b29b      	uxth	r3, r3
 800f594:	005b      	lsls	r3, r3, #1
 800f596:	b29b      	uxth	r3, r3
 800f598:	887a      	ldrh	r2, [r7, #2]
 800f59a:	1ad3      	subs	r3, r2, r3
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	3301      	adds	r3, #1
 800f5a0:	b29c      	uxth	r4, r3
 800f5a2:	7bfb      	ldrb	r3, [r7, #15]
 800f5a4:	b29b      	uxth	r3, r3
 800f5a6:	005b      	lsls	r3, r3, #1
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	883a      	ldrh	r2, [r7, #0]
 800f5ac:	1ad3      	subs	r3, r2, r3
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	3301      	adds	r3, #1
 800f5b2:	b29a      	uxth	r2, r3
 800f5b4:	2304      	movs	r3, #4
 800f5b6:	9301      	str	r3, [sp, #4]
 800f5b8:	8c3b      	ldrh	r3, [r7, #32]
 800f5ba:	9300      	str	r3, [sp, #0]
 800f5bc:	4613      	mov	r3, r2
 800f5be:	4622      	mov	r2, r4
 800f5c0:	f000 fd18 	bl	800fff4 <ILI9341_Draw_Rectangle>
				goto finish;
 800f5c4:	e05a      	b.n	800f67c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f5c6:	7bfb      	ldrb	r3, [r7, #15]
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	88fb      	ldrh	r3, [r7, #6]
 800f5cc:	4413      	add	r3, r2
 800f5ce:	b298      	uxth	r0, r3
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	88bb      	ldrh	r3, [r7, #4]
 800f5d6:	4413      	add	r3, r2
 800f5d8:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800f5da:	7bfb      	ldrb	r3, [r7, #15]
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	887a      	ldrh	r2, [r7, #2]
 800f5e0:	1ad3      	subs	r3, r2, r3
 800f5e2:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	b29a      	uxth	r2, r3
 800f5e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f5ea:	f000 fa6b 	bl	800fac4 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f5ee:	7bfb      	ldrb	r3, [r7, #15]
 800f5f0:	b29a      	uxth	r2, r3
 800f5f2:	88fb      	ldrh	r3, [r7, #6]
 800f5f4:	4413      	add	r3, r2
 800f5f6:	b298      	uxth	r0, r3
										(y + h) - b,
 800f5f8:	88ba      	ldrh	r2, [r7, #4]
 800f5fa:	883b      	ldrh	r3, [r7, #0]
 800f5fc:	4413      	add	r3, r2
 800f5fe:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f600:	7bfb      	ldrb	r3, [r7, #15]
 800f602:	b29b      	uxth	r3, r3
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	b299      	uxth	r1, r3
										(w - b)+1,
 800f608:	7bfb      	ldrb	r3, [r7, #15]
 800f60a:	b29b      	uxth	r3, r3
 800f60c:	887a      	ldrh	r2, [r7, #2]
 800f60e:	1ad3      	subs	r3, r2, r3
 800f610:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800f612:	3301      	adds	r3, #1
 800f614:	b29a      	uxth	r2, r3
 800f616:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f618:	f000 fa54 	bl	800fac4 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800f61c:	7bfb      	ldrb	r3, [r7, #15]
 800f61e:	b29a      	uxth	r2, r3
 800f620:	88fb      	ldrh	r3, [r7, #6]
 800f622:	4413      	add	r3, r2
 800f624:	b298      	uxth	r0, r3
 800f626:	7bfb      	ldrb	r3, [r7, #15]
 800f628:	b29a      	uxth	r2, r3
 800f62a:	88bb      	ldrh	r3, [r7, #4]
 800f62c:	4413      	add	r3, r2
 800f62e:	b299      	uxth	r1, r3
 800f630:	7bfb      	ldrb	r3, [r7, #15]
 800f632:	b29b      	uxth	r3, r3
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	b29b      	uxth	r3, r3
 800f638:	883a      	ldrh	r2, [r7, #0]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	b29a      	uxth	r2, r3
 800f63e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f640:	f000 faa4 	bl	800fb8c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800f644:	88fa      	ldrh	r2, [r7, #6]
 800f646:	887b      	ldrh	r3, [r7, #2]
 800f648:	4413      	add	r3, r2
 800f64a:	b29a      	uxth	r2, r3
 800f64c:	7bfb      	ldrb	r3, [r7, #15]
 800f64e:	b29b      	uxth	r3, r3
 800f650:	1ad3      	subs	r3, r2, r3
 800f652:	b298      	uxth	r0, r3
 800f654:	7bfb      	ldrb	r3, [r7, #15]
 800f656:	b29a      	uxth	r2, r3
 800f658:	88bb      	ldrh	r3, [r7, #4]
 800f65a:	4413      	add	r3, r2
 800f65c:	b299      	uxth	r1, r3
 800f65e:	7bfb      	ldrb	r3, [r7, #15]
 800f660:	b29b      	uxth	r3, r3
 800f662:	005b      	lsls	r3, r3, #1
 800f664:	b29b      	uxth	r3, r3
 800f666:	883a      	ldrh	r2, [r7, #0]
 800f668:	1ad3      	subs	r3, r2, r3
 800f66a:	b29a      	uxth	r2, r3
 800f66c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f66e:	f000 fa8d 	bl	800fb8c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800f672:	7bfb      	ldrb	r3, [r7, #15]
 800f674:	3301      	adds	r3, #1
 800f676:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800f678:	e766      	b.n	800f548 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800f67a:	bf00      	nop
	// done
	return;
 800f67c:	bf00      	nop
}
 800f67e:	3714      	adds	r7, #20
 800f680:	46bd      	mov	sp, r7
 800f682:	bd90      	pop	{r4, r7, pc}

0800f684 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f684:	b590      	push	{r4, r7, lr}
 800f686:	b089      	sub	sp, #36	; 0x24
 800f688:	af02      	add	r7, sp, #8
 800f68a:	4604      	mov	r4, r0
 800f68c:	4608      	mov	r0, r1
 800f68e:	4611      	mov	r1, r2
 800f690:	461a      	mov	r2, r3
 800f692:	4623      	mov	r3, r4
 800f694:	71fb      	strb	r3, [r7, #7]
 800f696:	4603      	mov	r3, r0
 800f698:	80bb      	strh	r3, [r7, #4]
 800f69a:	460b      	mov	r3, r1
 800f69c:	807b      	strh	r3, [r7, #2]
 800f69e:	4613      	mov	r3, r2
 800f6a0:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800f6a2:	79fb      	ldrb	r3, [r7, #7]
 800f6a4:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800f6a6:	7dfb      	ldrb	r3, [r7, #23]
 800f6a8:	2b1f      	cmp	r3, #31
 800f6aa:	d802      	bhi.n	800f6b2 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	71fb      	strb	r3, [r7, #7]
 800f6b0:	e002      	b.n	800f6b8 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800f6b2:	7dfb      	ldrb	r3, [r7, #23]
 800f6b4:	3b20      	subs	r3, #32
 800f6b6:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f6b8:	2300      	movs	r3, #0
 800f6ba:	753b      	strb	r3, [r7, #20]
 800f6bc:	e012      	b.n	800f6e4 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800f6be:	7dfa      	ldrb	r2, [r7, #23]
 800f6c0:	7d38      	ldrb	r0, [r7, #20]
 800f6c2:	7d39      	ldrb	r1, [r7, #20]
 800f6c4:	4c48      	ldr	r4, [pc, #288]	; (800f7e8 <ILI9341_Draw_Char+0x164>)
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	005b      	lsls	r3, r3, #1
 800f6ca:	4413      	add	r3, r2
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	4423      	add	r3, r4
 800f6d0:	4403      	add	r3, r0
 800f6d2:	781a      	ldrb	r2, [r3, #0]
 800f6d4:	f107 0318 	add.w	r3, r7, #24
 800f6d8:	440b      	add	r3, r1
 800f6da:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800f6de:	7d3b      	ldrb	r3, [r7, #20]
 800f6e0:	3301      	adds	r3, #1
 800f6e2:	753b      	strb	r3, [r7, #20]
 800f6e4:	7d3b      	ldrb	r3, [r7, #20]
 800f6e6:	2b05      	cmp	r3, #5
 800f6e8:	d9e9      	bls.n	800f6be <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	757b      	strb	r3, [r7, #21]
 800f6ee:	e074      	b.n	800f7da <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	75bb      	strb	r3, [r7, #22]
 800f6f4:	e06b      	b.n	800f7ce <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800f6f6:	7d7b      	ldrb	r3, [r7, #21]
 800f6f8:	f107 0218 	add.w	r2, r7, #24
 800f6fc:	4413      	add	r3, r2
 800f6fe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800f702:	461a      	mov	r2, r3
 800f704:	7dbb      	ldrb	r3, [r7, #22]
 800f706:	fa42 f303 	asr.w	r3, r2, r3
 800f70a:	f003 0301 	and.w	r3, r3, #1
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d02d      	beq.n	800f76e <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800f712:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f714:	2b01      	cmp	r3, #1
 800f716:	d10e      	bne.n	800f736 <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800f718:	7d7b      	ldrb	r3, [r7, #21]
 800f71a:	b29a      	uxth	r2, r3
 800f71c:	88bb      	ldrh	r3, [r7, #4]
 800f71e:	4413      	add	r3, r2
 800f720:	b298      	uxth	r0, r3
 800f722:	7dbb      	ldrb	r3, [r7, #22]
 800f724:	b29a      	uxth	r2, r3
 800f726:	887b      	ldrh	r3, [r7, #2]
 800f728:	4413      	add	r3, r2
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	883a      	ldrh	r2, [r7, #0]
 800f72e:	4619      	mov	r1, r3
 800f730:	f000 fb06 	bl	800fd40 <ILI9341_Draw_Pixel>
 800f734:	e048      	b.n	800f7c8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800f736:	7d7b      	ldrb	r3, [r7, #21]
 800f738:	b29b      	uxth	r3, r3
 800f73a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f73c:	fb12 f303 	smulbb	r3, r2, r3
 800f740:	b29a      	uxth	r2, r3
 800f742:	88bb      	ldrh	r3, [r7, #4]
 800f744:	4413      	add	r3, r2
 800f746:	b298      	uxth	r0, r3
 800f748:	7dbb      	ldrb	r3, [r7, #22]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f74e:	fb12 f303 	smulbb	r3, r2, r3
 800f752:	b29a      	uxth	r2, r3
 800f754:	887b      	ldrh	r3, [r7, #2]
 800f756:	4413      	add	r3, r2
 800f758:	b299      	uxth	r1, r3
 800f75a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f75c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f75e:	2301      	movs	r3, #1
 800f760:	9301      	str	r3, [sp, #4]
 800f762:	883b      	ldrh	r3, [r7, #0]
 800f764:	9300      	str	r3, [sp, #0]
 800f766:	4623      	mov	r3, r4
 800f768:	f000 fc44 	bl	800fff4 <ILI9341_Draw_Rectangle>
 800f76c:	e02c      	b.n	800f7c8 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800f76e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800f770:	2b01      	cmp	r3, #1
 800f772:	d10e      	bne.n	800f792 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800f774:	7d7b      	ldrb	r3, [r7, #21]
 800f776:	b29a      	uxth	r2, r3
 800f778:	88bb      	ldrh	r3, [r7, #4]
 800f77a:	4413      	add	r3, r2
 800f77c:	b298      	uxth	r0, r3
 800f77e:	7dbb      	ldrb	r3, [r7, #22]
 800f780:	b29a      	uxth	r2, r3
 800f782:	887b      	ldrh	r3, [r7, #2]
 800f784:	4413      	add	r3, r2
 800f786:	b29b      	uxth	r3, r3
 800f788:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800f78a:	4619      	mov	r1, r3
 800f78c:	f000 fad8 	bl	800fd40 <ILI9341_Draw_Pixel>
 800f790:	e01a      	b.n	800f7c8 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800f792:	7d7b      	ldrb	r3, [r7, #21]
 800f794:	b29b      	uxth	r3, r3
 800f796:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f798:	fb12 f303 	smulbb	r3, r2, r3
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	88bb      	ldrh	r3, [r7, #4]
 800f7a0:	4413      	add	r3, r2
 800f7a2:	b298      	uxth	r0, r3
 800f7a4:	7dbb      	ldrb	r3, [r7, #22]
 800f7a6:	b29b      	uxth	r3, r3
 800f7a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f7aa:	fb12 f303 	smulbb	r3, r2, r3
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	887b      	ldrh	r3, [r7, #2]
 800f7b2:	4413      	add	r3, r2
 800f7b4:	b299      	uxth	r1, r3
 800f7b6:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800f7b8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	9301      	str	r3, [sp, #4]
 800f7be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	4623      	mov	r3, r4
 800f7c4:	f000 fc16 	bl	800fff4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800f7c8:	7dbb      	ldrb	r3, [r7, #22]
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	75bb      	strb	r3, [r7, #22]
 800f7ce:	7dbb      	ldrb	r3, [r7, #22]
 800f7d0:	2b07      	cmp	r3, #7
 800f7d2:	d990      	bls.n	800f6f6 <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800f7d4:	7d7b      	ldrb	r3, [r7, #21]
 800f7d6:	3301      	adds	r3, #1
 800f7d8:	757b      	strb	r3, [r7, #21]
 800f7da:	7d7b      	ldrb	r3, [r7, #21]
 800f7dc:	2b05      	cmp	r3, #5
 800f7de:	d987      	bls.n	800f6f0 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800f7e0:	bf00      	nop
 800f7e2:	371c      	adds	r7, #28
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	bd90      	pop	{r4, r7, pc}
 800f7e8:	08015578 	.word	0x08015578

0800f7ec <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800f7ec:	b590      	push	{r4, r7, lr}
 800f7ee:	b087      	sub	sp, #28
 800f7f0:	af02      	add	r7, sp, #8
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	4608      	mov	r0, r1
 800f7f6:	4611      	mov	r1, r2
 800f7f8:	461a      	mov	r2, r3
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	817b      	strh	r3, [r7, #10]
 800f7fe:	460b      	mov	r3, r1
 800f800:	813b      	strh	r3, [r7, #8]
 800f802:	4613      	mov	r3, r2
 800f804:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800f806:	897b      	ldrh	r3, [r7, #10]
 800f808:	3b01      	subs	r3, #1
 800f80a:	b298      	uxth	r0, r3
 800f80c:	8c3b      	ldrh	r3, [r7, #32]
 800f80e:	00db      	lsls	r3, r3, #3
 800f810:	b29a      	uxth	r2, r3
 800f812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f814:	8939      	ldrh	r1, [r7, #8]
 800f816:	f000 f9b9 	bl	800fb8c <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800f81a:	897b      	ldrh	r3, [r7, #10]
 800f81c:	3b02      	subs	r3, #2
 800f81e:	b298      	uxth	r0, r3
 800f820:	8c3b      	ldrh	r3, [r7, #32]
 800f822:	00db      	lsls	r3, r3, #3
 800f824:	b29a      	uxth	r2, r3
 800f826:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f828:	8939      	ldrh	r1, [r7, #8]
 800f82a:	f000 f9af 	bl	800fb8c <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800f82e:	e016      	b.n	800f85e <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	1c5a      	adds	r2, r3, #1
 800f834:	60fa      	str	r2, [r7, #12]
 800f836:	7818      	ldrb	r0, [r3, #0]
 800f838:	88fc      	ldrh	r4, [r7, #6]
 800f83a:	893a      	ldrh	r2, [r7, #8]
 800f83c:	8979      	ldrh	r1, [r7, #10]
 800f83e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f840:	9301      	str	r3, [sp, #4]
 800f842:	8c3b      	ldrh	r3, [r7, #32]
 800f844:	9300      	str	r3, [sp, #0]
 800f846:	4623      	mov	r3, r4
 800f848:	f7ff ff1c 	bl	800f684 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800f84c:	8c3b      	ldrh	r3, [r7, #32]
 800f84e:	461a      	mov	r2, r3
 800f850:	0052      	lsls	r2, r2, #1
 800f852:	4413      	add	r3, r2
 800f854:	005b      	lsls	r3, r3, #1
 800f856:	b29a      	uxth	r2, r3
 800f858:	897b      	ldrh	r3, [r7, #10]
 800f85a:	4413      	add	r3, r2
 800f85c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	2b00      	cmp	r3, #0
 800f864:	d1e4      	bne.n	800f830 <ILI9341_Draw_Text+0x44>
    }


}
 800f866:	bf00      	nop
 800f868:	3714      	adds	r7, #20
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd90      	pop	{r4, r7, pc}

0800f86e <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800f872:	f000 fca3 	bl	80101bc <_LCD_Enable>
	ILI9341_SPI_Init();
 800f876:	f000 f907 	bl	800fa88 <ILI9341_SPI_Init>
	_LCD_Reset();
 800f87a:	f000 fcaf 	bl	80101dc <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800f87e:	2001      	movs	r0, #1
 800f880:	f000 fd7a 	bl	8010378 <_LCD_SendCommand>
	HAL_Delay(2000);
 800f884:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800f888:	f7f9 f9cc 	bl	8008c24 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800f88c:	20cb      	movs	r0, #203	; 0xcb
 800f88e:	f000 fd73 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800f892:	2039      	movs	r0, #57	; 0x39
 800f894:	f000 fda2 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x2C);
 800f898:	202c      	movs	r0, #44	; 0x2c
 800f89a:	f000 fd9f 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x00);
 800f89e:	2000      	movs	r0, #0
 800f8a0:	f000 fd9c 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x34);
 800f8a4:	2034      	movs	r0, #52	; 0x34
 800f8a6:	f000 fd99 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x02);
 800f8aa:	2002      	movs	r0, #2
 800f8ac:	f000 fd96 	bl	80103dc <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800f8b0:	20cf      	movs	r0, #207	; 0xcf
 800f8b2:	f000 fd61 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	f000 fd90 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0xC1);
 800f8bc:	20c1      	movs	r0, #193	; 0xc1
 800f8be:	f000 fd8d 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x30);
 800f8c2:	2030      	movs	r0, #48	; 0x30
 800f8c4:	f000 fd8a 	bl	80103dc <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800f8c8:	20e8      	movs	r0, #232	; 0xe8
 800f8ca:	f000 fd55 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800f8ce:	2085      	movs	r0, #133	; 0x85
 800f8d0:	f000 fd84 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x00);
 800f8d4:	2000      	movs	r0, #0
 800f8d6:	f000 fd81 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x78);
 800f8da:	2078      	movs	r0, #120	; 0x78
 800f8dc:	f000 fd7e 	bl	80103dc <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800f8e0:	20ea      	movs	r0, #234	; 0xea
 800f8e2:	f000 fd49 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f8e6:	2000      	movs	r0, #0
 800f8e8:	f000 fd78 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x00);
 800f8ec:	2000      	movs	r0, #0
 800f8ee:	f000 fd75 	bl	80103dc <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800f8f2:	20ed      	movs	r0, #237	; 0xed
 800f8f4:	f000 fd40 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800f8f8:	2064      	movs	r0, #100	; 0x64
 800f8fa:	f000 fd6f 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x03);
 800f8fe:	2003      	movs	r0, #3
 800f900:	f000 fd6c 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x12);
 800f904:	2012      	movs	r0, #18
 800f906:	f000 fd69 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x81);
 800f90a:	2081      	movs	r0, #129	; 0x81
 800f90c:	f000 fd66 	bl	80103dc <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800f910:	20f7      	movs	r0, #247	; 0xf7
 800f912:	f000 fd31 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800f916:	2020      	movs	r0, #32
 800f918:	f000 fd60 	bl	80103dc <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800f91c:	20c0      	movs	r0, #192	; 0xc0
 800f91e:	f000 fd2b 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800f922:	2023      	movs	r0, #35	; 0x23
 800f924:	f000 fd5a 	bl	80103dc <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800f928:	20c1      	movs	r0, #193	; 0xc1
 800f92a:	f000 fd25 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800f92e:	2010      	movs	r0, #16
 800f930:	f000 fd54 	bl	80103dc <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800f934:	20c5      	movs	r0, #197	; 0xc5
 800f936:	f000 fd1f 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800f93a:	203e      	movs	r0, #62	; 0x3e
 800f93c:	f000 fd4e 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x28);
 800f940:	2028      	movs	r0, #40	; 0x28
 800f942:	f000 fd4b 	bl	80103dc <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800f946:	20c7      	movs	r0, #199	; 0xc7
 800f948:	f000 fd16 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800f94c:	2086      	movs	r0, #134	; 0x86
 800f94e:	f000 fd45 	bl	80103dc <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800f952:	2036      	movs	r0, #54	; 0x36
 800f954:	f000 fd10 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800f958:	2048      	movs	r0, #72	; 0x48
 800f95a:	f000 fd3f 	bl	80103dc <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800f95e:	203a      	movs	r0, #58	; 0x3a
 800f960:	f000 fd0a 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800f964:	2055      	movs	r0, #85	; 0x55
 800f966:	f000 fd39 	bl	80103dc <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800f96a:	20b1      	movs	r0, #177	; 0xb1
 800f96c:	f000 fd04 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f970:	2000      	movs	r0, #0
 800f972:	f000 fd33 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x18);
 800f976:	2018      	movs	r0, #24
 800f978:	f000 fd30 	bl	80103dc <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800f97c:	20b6      	movs	r0, #182	; 0xb6
 800f97e:	f000 fcfb 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800f982:	2008      	movs	r0, #8
 800f984:	f000 fd2a 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x82);
 800f988:	2082      	movs	r0, #130	; 0x82
 800f98a:	f000 fd27 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x27);
 800f98e:	2027      	movs	r0, #39	; 0x27
 800f990:	f000 fd24 	bl	80103dc <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800f994:	20f2      	movs	r0, #242	; 0xf2
 800f996:	f000 fcef 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800f99a:	2000      	movs	r0, #0
 800f99c:	f000 fd1e 	bl	80103dc <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800f9a0:	2026      	movs	r0, #38	; 0x26
 800f9a2:	f000 fce9 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800f9a6:	2001      	movs	r0, #1
 800f9a8:	f000 fd18 	bl	80103dc <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800f9ac:	20e0      	movs	r0, #224	; 0xe0
 800f9ae:	f000 fce3 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800f9b2:	200f      	movs	r0, #15
 800f9b4:	f000 fd12 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x31);
 800f9b8:	2031      	movs	r0, #49	; 0x31
 800f9ba:	f000 fd0f 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x2B);
 800f9be:	202b      	movs	r0, #43	; 0x2b
 800f9c0:	f000 fd0c 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x0C);
 800f9c4:	200c      	movs	r0, #12
 800f9c6:	f000 fd09 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f9ca:	200e      	movs	r0, #14
 800f9cc:	f000 fd06 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x08);
 800f9d0:	2008      	movs	r0, #8
 800f9d2:	f000 fd03 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x4E);
 800f9d6:	204e      	movs	r0, #78	; 0x4e
 800f9d8:	f000 fd00 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0xF1);
 800f9dc:	20f1      	movs	r0, #241	; 0xf1
 800f9de:	f000 fcfd 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x37);
 800f9e2:	2037      	movs	r0, #55	; 0x37
 800f9e4:	f000 fcfa 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x07);
 800f9e8:	2007      	movs	r0, #7
 800f9ea:	f000 fcf7 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x10);
 800f9ee:	2010      	movs	r0, #16
 800f9f0:	f000 fcf4 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x03);
 800f9f4:	2003      	movs	r0, #3
 800f9f6:	f000 fcf1 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800f9fa:	200e      	movs	r0, #14
 800f9fc:	f000 fcee 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x09);
 800fa00:	2009      	movs	r0, #9
 800fa02:	f000 fceb 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x00);
 800fa06:	2000      	movs	r0, #0
 800fa08:	f000 fce8 	bl	80103dc <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800fa0c:	20e1      	movs	r0, #225	; 0xe1
 800fa0e:	f000 fcb3 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800fa12:	2000      	movs	r0, #0
 800fa14:	f000 fce2 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x0E);
 800fa18:	200e      	movs	r0, #14
 800fa1a:	f000 fcdf 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x14);
 800fa1e:	2014      	movs	r0, #20
 800fa20:	f000 fcdc 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x03);
 800fa24:	2003      	movs	r0, #3
 800fa26:	f000 fcd9 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x11);
 800fa2a:	2011      	movs	r0, #17
 800fa2c:	f000 fcd6 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x07);
 800fa30:	2007      	movs	r0, #7
 800fa32:	f000 fcd3 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x31);
 800fa36:	2031      	movs	r0, #49	; 0x31
 800fa38:	f000 fcd0 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0xC1);
 800fa3c:	20c1      	movs	r0, #193	; 0xc1
 800fa3e:	f000 fccd 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x48);
 800fa42:	2048      	movs	r0, #72	; 0x48
 800fa44:	f000 fcca 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x08);
 800fa48:	2008      	movs	r0, #8
 800fa4a:	f000 fcc7 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x0F);
 800fa4e:	200f      	movs	r0, #15
 800fa50:	f000 fcc4 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x0C);
 800fa54:	200c      	movs	r0, #12
 800fa56:	f000 fcc1 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x31);
 800fa5a:	2031      	movs	r0, #49	; 0x31
 800fa5c:	f000 fcbe 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x36);
 800fa60:	2036      	movs	r0, #54	; 0x36
 800fa62:	f000 fcbb 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(0x0F);
 800fa66:	200f      	movs	r0, #15
 800fa68:	f000 fcb8 	bl	80103dc <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800fa6c:	2011      	movs	r0, #17
 800fa6e:	f000 fc83 	bl	8010378 <_LCD_SendCommand>
	HAL_Delay(240);
 800fa72:	20f0      	movs	r0, #240	; 0xf0
 800fa74:	f7f9 f8d6 	bl	8008c24 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800fa78:	2029      	movs	r0, #41	; 0x29
 800fa7a:	f000 fc7d 	bl	8010378 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800fa7e:	2000      	movs	r0, #0
 800fa80:	f000 fb4e 	bl	8010120 <ILI9341_Set_Rotation>
}
 800fa84:	bf00      	nop
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800fa8c:	4b0b      	ldr	r3, [pc, #44]	; (800fabc <ILI9341_SPI_Init+0x34>)
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa94:	2b40      	cmp	r3, #64	; 0x40
 800fa96:	d005      	beq.n	800faa4 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800fa98:	4b08      	ldr	r3, [pc, #32]	; (800fabc <ILI9341_SPI_Init+0x34>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	4a07      	ldr	r2, [pc, #28]	; (800fabc <ILI9341_SPI_Init+0x34>)
 800fa9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faa2:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800faa4:	4b06      	ldr	r3, [pc, #24]	; (800fac0 <ILI9341_SPI_Init+0x38>)
 800faa6:	695b      	ldr	r3, [r3, #20]
 800faa8:	4a05      	ldr	r2, [pc, #20]	; (800fac0 <ILI9341_SPI_Init+0x38>)
 800faaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800faae:	6153      	str	r3, [r2, #20]
}
 800fab0:	bf00      	nop
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr
 800faba:	bf00      	nop
 800fabc:	40003c00 	.word	0x40003c00
 800fac0:	48000400 	.word	0x48000400

0800fac4 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800fac4:	b590      	push	{r4, r7, lr}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af02      	add	r7, sp, #8
 800faca:	4604      	mov	r4, r0
 800facc:	4608      	mov	r0, r1
 800face:	4611      	mov	r1, r2
 800fad0:	461a      	mov	r2, r3
 800fad2:	4623      	mov	r3, r4
 800fad4:	80fb      	strh	r3, [r7, #6]
 800fad6:	4603      	mov	r3, r0
 800fad8:	80bb      	strh	r3, [r7, #4]
 800fada:	460b      	mov	r3, r1
 800fadc:	807b      	strh	r3, [r7, #2]
 800fade:	4613      	mov	r3, r2
 800fae0:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fae2:	4b28      	ldr	r3, [pc, #160]	; (800fb84 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	88fa      	ldrh	r2, [r7, #6]
 800faea:	429a      	cmp	r2, r3
 800faec:	d246      	bcs.n	800fb7c <ILI9341_Draw_Horizontal_Line+0xb8>
 800faee:	4b26      	ldr	r3, [pc, #152]	; (800fb88 <ILI9341_Draw_Horizontal_Line+0xc4>)
 800faf0:	881b      	ldrh	r3, [r3, #0]
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	88ba      	ldrh	r2, [r7, #4]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d240      	bcs.n	800fb7c <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800fafa:	88fa      	ldrh	r2, [r7, #6]
 800fafc:	887b      	ldrh	r3, [r7, #2]
 800fafe:	4413      	add	r3, r2
 800fb00:	3b01      	subs	r3, #1
 800fb02:	4a20      	ldr	r2, [pc, #128]	; (800fb84 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fb04:	8812      	ldrh	r2, [r2, #0]
 800fb06:	b292      	uxth	r2, r2
 800fb08:	4293      	cmp	r3, r2
 800fb0a:	db05      	blt.n	800fb18 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800fb0c:	4b1d      	ldr	r3, [pc, #116]	; (800fb84 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800fb0e:	881b      	ldrh	r3, [r3, #0]
 800fb10:	b29a      	uxth	r2, r3
 800fb12:	88fb      	ldrh	r3, [r7, #6]
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800fb18:	88fa      	ldrh	r2, [r7, #6]
 800fb1a:	887b      	ldrh	r3, [r7, #2]
 800fb1c:	4413      	add	r3, r2
 800fb1e:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800fb20:	3b01      	subs	r3, #1
 800fb22:	b29a      	uxth	r2, r3
 800fb24:	88bb      	ldrh	r3, [r7, #4]
 800fb26:	88b9      	ldrh	r1, [r7, #4]
 800fb28:	88f8      	ldrh	r0, [r7, #6]
 800fb2a:	f000 f893 	bl	800fc54 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800fb32:	887b      	ldrh	r3, [r7, #2]
 800fb34:	f003 0301 	and.w	r3, r3, #1
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d009      	beq.n	800fb50 <ILI9341_Draw_Horizontal_Line+0x8c>
 800fb3c:	887b      	ldrh	r3, [r7, #2]
 800fb3e:	2b01      	cmp	r3, #1
 800fb40:	d906      	bls.n	800fb50 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800fb42:	2301      	movs	r3, #1
 800fb44:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800fb46:	887b      	ldrh	r3, [r7, #2]
 800fb48:	085b      	lsrs	r3, r3, #1
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	005b      	lsls	r3, r3, #1
 800fb4e:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800fb50:	887c      	ldrh	r4, [r7, #2]
 800fb52:	883a      	ldrh	r2, [r7, #0]
 800fb54:	88b9      	ldrh	r1, [r7, #4]
 800fb56:	88f8      	ldrh	r0, [r7, #6]
 800fb58:	2303      	movs	r3, #3
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	4623      	mov	r3, r4
 800fb5e:	f000 fb5b 	bl	8010218 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800fb62:	7bfb      	ldrb	r3, [r7, #15]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d00a      	beq.n	800fb7e <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800fb68:	88fa      	ldrh	r2, [r7, #6]
 800fb6a:	887b      	ldrh	r3, [r7, #2]
 800fb6c:	4413      	add	r3, r2
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	883a      	ldrh	r2, [r7, #0]
 800fb72:	88b9      	ldrh	r1, [r7, #4]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f000 f8e3 	bl	800fd40 <ILI9341_Draw_Pixel>
 800fb7a:	e000      	b.n	800fb7e <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800fb7c:	bf00      	nop
							(ypos),
							colour);
	}


}
 800fb7e:	3714      	adds	r7, #20
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd90      	pop	{r4, r7, pc}
 800fb84:	20000c42 	.word	0x20000c42
 800fb88:	20000c40 	.word	0x20000c40

0800fb8c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800fb8c:	b590      	push	{r4, r7, lr}
 800fb8e:	b087      	sub	sp, #28
 800fb90:	af02      	add	r7, sp, #8
 800fb92:	4604      	mov	r4, r0
 800fb94:	4608      	mov	r0, r1
 800fb96:	4611      	mov	r1, r2
 800fb98:	461a      	mov	r2, r3
 800fb9a:	4623      	mov	r3, r4
 800fb9c:	80fb      	strh	r3, [r7, #6]
 800fb9e:	4603      	mov	r3, r0
 800fba0:	80bb      	strh	r3, [r7, #4]
 800fba2:	460b      	mov	r3, r1
 800fba4:	807b      	strh	r3, [r7, #2]
 800fba6:	4613      	mov	r3, r2
 800fba8:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800fbaa:	4b28      	ldr	r3, [pc, #160]	; (800fc4c <ILI9341_Draw_Vertical_Line+0xc0>)
 800fbac:	881b      	ldrh	r3, [r3, #0]
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	88fa      	ldrh	r2, [r7, #6]
 800fbb2:	429a      	cmp	r2, r3
 800fbb4:	d246      	bcs.n	800fc44 <ILI9341_Draw_Vertical_Line+0xb8>
 800fbb6:	4b26      	ldr	r3, [pc, #152]	; (800fc50 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fbb8:	881b      	ldrh	r3, [r3, #0]
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	88ba      	ldrh	r2, [r7, #4]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d240      	bcs.n	800fc44 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800fbc2:	88ba      	ldrh	r2, [r7, #4]
 800fbc4:	887b      	ldrh	r3, [r7, #2]
 800fbc6:	4413      	add	r3, r2
 800fbc8:	3b01      	subs	r3, #1
 800fbca:	4a21      	ldr	r2, [pc, #132]	; (800fc50 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fbcc:	8812      	ldrh	r2, [r2, #0]
 800fbce:	b292      	uxth	r2, r2
 800fbd0:	4293      	cmp	r3, r2
 800fbd2:	db05      	blt.n	800fbe0 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800fbd4:	4b1e      	ldr	r3, [pc, #120]	; (800fc50 <ILI9341_Draw_Vertical_Line+0xc4>)
 800fbd6:	881b      	ldrh	r3, [r3, #0]
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	88bb      	ldrh	r3, [r7, #4]
 800fbdc:	1ad3      	subs	r3, r2, r3
 800fbde:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800fbe0:	88ba      	ldrh	r2, [r7, #4]
 800fbe2:	887b      	ldrh	r3, [r7, #2]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	88fa      	ldrh	r2, [r7, #6]
 800fbee:	88b9      	ldrh	r1, [r7, #4]
 800fbf0:	88f8      	ldrh	r0, [r7, #6]
 800fbf2:	f000 f82f 	bl	800fc54 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800fbfa:	887b      	ldrh	r3, [r7, #2]
 800fbfc:	f003 0301 	and.w	r3, r3, #1
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d009      	beq.n	800fc18 <ILI9341_Draw_Vertical_Line+0x8c>
 800fc04:	887b      	ldrh	r3, [r7, #2]
 800fc06:	2b01      	cmp	r3, #1
 800fc08:	d906      	bls.n	800fc18 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800fc0e:	887b      	ldrh	r3, [r7, #2]
 800fc10:	085b      	lsrs	r3, r3, #1
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	005b      	lsls	r3, r3, #1
 800fc16:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800fc18:	7bfb      	ldrb	r3, [r7, #15]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d008      	beq.n	800fc30 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800fc1e:	88ba      	ldrh	r2, [r7, #4]
 800fc20:	887b      	ldrh	r3, [r7, #2]
 800fc22:	4413      	add	r3, r2
 800fc24:	b299      	uxth	r1, r3
 800fc26:	883a      	ldrh	r2, [r7, #0]
 800fc28:	88fb      	ldrh	r3, [r7, #6]
 800fc2a:	4618      	mov	r0, r3
 800fc2c:	f000 f888 	bl	800fd40 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800fc30:	887c      	ldrh	r4, [r7, #2]
 800fc32:	883a      	ldrh	r2, [r7, #0]
 800fc34:	88b9      	ldrh	r1, [r7, #4]
 800fc36:	88f8      	ldrh	r0, [r7, #6]
 800fc38:	2303      	movs	r3, #3
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	4623      	mov	r3, r4
 800fc3e:	f000 faeb 	bl	8010218 <_LCD_Write_Frame>
 800fc42:	e000      	b.n	800fc46 <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800fc44:	bf00      	nop
}
 800fc46:	3714      	adds	r7, #20
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	bd90      	pop	{r4, r7, pc}
 800fc4c:	20000c42 	.word	0x20000c42
 800fc50:	20000c40 	.word	0x20000c40

0800fc54 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800fc54:	b590      	push	{r4, r7, lr}
 800fc56:	b083      	sub	sp, #12
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	4604      	mov	r4, r0
 800fc5c:	4608      	mov	r0, r1
 800fc5e:	4611      	mov	r1, r2
 800fc60:	461a      	mov	r2, r3
 800fc62:	4623      	mov	r3, r4
 800fc64:	80fb      	strh	r3, [r7, #6]
 800fc66:	4603      	mov	r3, r0
 800fc68:	80bb      	strh	r3, [r7, #4]
 800fc6a:	460b      	mov	r3, r1
 800fc6c:	807b      	strh	r3, [r7, #2]
 800fc6e:	4613      	mov	r3, r2
 800fc70:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800fc72:	202a      	movs	r0, #42	; 0x2a
 800fc74:	f000 fb80 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800fc78:	88fb      	ldrh	r3, [r7, #6]
 800fc7a:	0a1b      	lsrs	r3, r3, #8
 800fc7c:	b29b      	uxth	r3, r3
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	4618      	mov	r0, r3
 800fc82:	f000 fbab 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(sc);
 800fc86:	88fb      	ldrh	r3, [r7, #6]
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f000 fba6 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800fc90:	887b      	ldrh	r3, [r7, #2]
 800fc92:	0a1b      	lsrs	r3, r3, #8
 800fc94:	b29b      	uxth	r3, r3
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f000 fb9f 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(ec);
 800fc9e:	887b      	ldrh	r3, [r7, #2]
 800fca0:	b2db      	uxtb	r3, r3
 800fca2:	4618      	mov	r0, r3
 800fca4:	f000 fb9a 	bl	80103dc <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800fca8:	202b      	movs	r0, #43	; 0x2b
 800fcaa:	f000 fb65 	bl	8010378 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800fcae:	88bb      	ldrh	r3, [r7, #4]
 800fcb0:	0a1b      	lsrs	r3, r3, #8
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	b2db      	uxtb	r3, r3
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f000 fb90 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(sp);
 800fcbc:	88bb      	ldrh	r3, [r7, #4]
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f000 fb8b 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800fcc6:	883b      	ldrh	r3, [r7, #0]
 800fcc8:	0a1b      	lsrs	r3, r3, #8
 800fcca:	b29b      	uxth	r3, r3
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f000 fb84 	bl	80103dc <_LCD_SendData>
	_LCD_SendData(ep);
 800fcd4:	883b      	ldrh	r3, [r7, #0]
 800fcd6:	b2db      	uxtb	r3, r3
 800fcd8:	4618      	mov	r0, r3
 800fcda:	f000 fb7f 	bl	80103dc <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800fcde:	202c      	movs	r0, #44	; 0x2c
 800fce0:	f000 fb4a 	bl	8010378 <_LCD_SendCommand>
}
 800fce4:	bf00      	nop
 800fce6:	370c      	adds	r7, #12
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd90      	pop	{r4, r7, pc}

0800fcec <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b084      	sub	sp, #16
 800fcf0:	af02      	add	r7, sp, #8
 800fcf2:	4603      	mov	r3, r0
 800fcf4:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800fcf6:	4b10      	ldr	r3, [pc, #64]	; (800fd38 <ILI9341_Fill_Screen+0x4c>)
 800fcf8:	881b      	ldrh	r3, [r3, #0]
 800fcfa:	b29a      	uxth	r2, r3
 800fcfc:	4b0f      	ldr	r3, [pc, #60]	; (800fd3c <ILI9341_Fill_Screen+0x50>)
 800fcfe:	881b      	ldrh	r3, [r3, #0]
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	2100      	movs	r1, #0
 800fd04:	2000      	movs	r0, #0
 800fd06:	f7ff ffa5 	bl	800fc54 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800fd0a:	4b0b      	ldr	r3, [pc, #44]	; (800fd38 <ILI9341_Fill_Screen+0x4c>)
 800fd0c:	881b      	ldrh	r3, [r3, #0]
 800fd0e:	b29b      	uxth	r3, r3
 800fd10:	461a      	mov	r2, r3
 800fd12:	4b0a      	ldr	r3, [pc, #40]	; (800fd3c <ILI9341_Fill_Screen+0x50>)
 800fd14:	881b      	ldrh	r3, [r3, #0]
 800fd16:	b29b      	uxth	r3, r3
 800fd18:	fb03 f302 	mul.w	r3, r3, r2
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	88fa      	ldrh	r2, [r7, #6]
 800fd20:	2304      	movs	r3, #4
 800fd22:	9300      	str	r3, [sp, #0]
 800fd24:	460b      	mov	r3, r1
 800fd26:	2100      	movs	r1, #0
 800fd28:	2000      	movs	r0, #0
 800fd2a:	f000 fa75 	bl	8010218 <_LCD_Write_Frame>
}
 800fd2e:	bf00      	nop
 800fd30:	3708      	adds	r7, #8
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	20000c42 	.word	0x20000c42
 800fd3c:	20000c40 	.word	0x20000c40

0800fd40 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08e      	sub	sp, #56	; 0x38
 800fd44:	af00      	add	r7, sp, #0
 800fd46:	4603      	mov	r3, r0
 800fd48:	80fb      	strh	r3, [r7, #6]
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	80bb      	strh	r3, [r7, #4]
 800fd4e:	4613      	mov	r3, r2
 800fd50:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800fd52:	4b98      	ldr	r3, [pc, #608]	; (800ffb4 <ILI9341_Draw_Pixel+0x274>)
 800fd54:	881b      	ldrh	r3, [r3, #0]
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	88fa      	ldrh	r2, [r7, #6]
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	f080 8143 	bcs.w	800ffe6 <ILI9341_Draw_Pixel+0x2a6>
 800fd60:	4b95      	ldr	r3, [pc, #596]	; (800ffb8 <ILI9341_Draw_Pixel+0x278>)
 800fd62:	881b      	ldrh	r3, [r3, #0]
 800fd64:	b29b      	uxth	r3, r3
 800fd66:	88ba      	ldrh	r2, [r7, #4]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	f080 813c 	bcs.w	800ffe6 <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fd6e:	4b93      	ldr	r3, [pc, #588]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fd70:	695b      	ldr	r3, [r3, #20]
 800fd72:	4a92      	ldr	r2, [pc, #584]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fd74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd78:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd7a:	4b90      	ldr	r3, [pc, #576]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fd7c:	695b      	ldr	r3, [r3, #20]
 800fd7e:	4a8f      	ldr	r2, [pc, #572]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fd80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd84:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 800fd86:	220a      	movs	r2, #10
 800fd88:	2100      	movs	r1, #0
 800fd8a:	202a      	movs	r0, #42	; 0x2a
 800fd8c:	f000 fb58 	bl	8010440 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fd90:	2300      	movs	r3, #0
 800fd92:	637b      	str	r3, [r7, #52]	; 0x34
 800fd94:	e008      	b.n	800fda8 <ILI9341_Draw_Pixel+0x68>
 800fd96:	4b89      	ldr	r3, [pc, #548]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fd98:	695b      	ldr	r3, [r3, #20]
 800fd9a:	4a88      	ldr	r2, [pc, #544]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fd9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fda0:	6153      	str	r3, [r2, #20]
 800fda2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda4:	3301      	adds	r3, #1
 800fda6:	637b      	str	r3, [r7, #52]	; 0x34
 800fda8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdaa:	2b02      	cmp	r3, #2
 800fdac:	ddf3      	ble.n	800fd96 <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fdae:	4b83      	ldr	r3, [pc, #524]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fdb0:	695b      	ldr	r3, [r3, #20]
 800fdb2:	4a82      	ldr	r2, [pc, #520]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fdb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdb8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fdba:	4b80      	ldr	r3, [pc, #512]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fdbc:	695b      	ldr	r3, [r3, #20]
 800fdbe:	4a7f      	ldr	r2, [pc, #508]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fdc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdc4:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fdc6:	4b7d      	ldr	r3, [pc, #500]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fdc8:	695b      	ldr	r3, [r3, #20]
 800fdca:	4a7c      	ldr	r2, [pc, #496]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fdcc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fdd0:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 800fdd2:	88fb      	ldrh	r3, [r7, #6]
 800fdd4:	0a1b      	lsrs	r3, r3, #8
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	753b      	strb	r3, [r7, #20]
 800fddc:	88fb      	ldrh	r3, [r7, #6]
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	757b      	strb	r3, [r7, #21]
 800fde2:	88fb      	ldrh	r3, [r7, #6]
 800fde4:	3301      	adds	r3, #1
 800fde6:	121b      	asrs	r3, r3, #8
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	75bb      	strb	r3, [r7, #22]
 800fdec:	88fb      	ldrh	r3, [r7, #6]
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	3301      	adds	r3, #1
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800fdf6:	f107 0014 	add.w	r0, r7, #20
 800fdfa:	230a      	movs	r3, #10
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	2104      	movs	r1, #4
 800fe00:	f000 fb50 	bl	80104a4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe04:	2300      	movs	r3, #0
 800fe06:	633b      	str	r3, [r7, #48]	; 0x30
 800fe08:	e008      	b.n	800fe1c <ILI9341_Draw_Pixel+0xdc>
 800fe0a:	4b6c      	ldr	r3, [pc, #432]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe0c:	695b      	ldr	r3, [r3, #20]
 800fe0e:	4a6b      	ldr	r2, [pc, #428]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe14:	6153      	str	r3, [r2, #20]
 800fe16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe18:	3301      	adds	r3, #1
 800fe1a:	633b      	str	r3, [r7, #48]	; 0x30
 800fe1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	ddf3      	ble.n	800fe0a <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fe22:	4b66      	ldr	r3, [pc, #408]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe24:	695b      	ldr	r3, [r3, #20]
 800fe26:	4a65      	ldr	r2, [pc, #404]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe2c:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800fe2e:	4b63      	ldr	r3, [pc, #396]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe30:	695b      	ldr	r3, [r3, #20]
 800fe32:	4a62      	ldr	r2, [pc, #392]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fe38:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe3a:	4b60      	ldr	r3, [pc, #384]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe3c:	695b      	ldr	r3, [r3, #20]
 800fe3e:	4a5f      	ldr	r2, [pc, #380]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe44:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 800fe46:	220a      	movs	r2, #10
 800fe48:	2100      	movs	r1, #0
 800fe4a:	202b      	movs	r0, #43	; 0x2b
 800fe4c:	f000 faf8 	bl	8010440 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe50:	2300      	movs	r3, #0
 800fe52:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe54:	e008      	b.n	800fe68 <ILI9341_Draw_Pixel+0x128>
 800fe56:	4b59      	ldr	r3, [pc, #356]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe58:	695b      	ldr	r3, [r3, #20]
 800fe5a:	4a58      	ldr	r2, [pc, #352]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe60:	6153      	str	r3, [r2, #20]
 800fe62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe64:	3301      	adds	r3, #1
 800fe66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6a:	2b02      	cmp	r3, #2
 800fe6c:	ddf3      	ble.n	800fe56 <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800fe6e:	4b53      	ldr	r3, [pc, #332]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe70:	695b      	ldr	r3, [r3, #20]
 800fe72:	4a52      	ldr	r2, [pc, #328]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe78:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fe7a:	4b50      	ldr	r3, [pc, #320]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe7c:	695b      	ldr	r3, [r3, #20]
 800fe7e:	4a4f      	ldr	r2, [pc, #316]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe84:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fe86:	4b4d      	ldr	r3, [pc, #308]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe88:	695b      	ldr	r3, [r3, #20]
 800fe8a:	4a4c      	ldr	r2, [pc, #304]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fe8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fe90:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 800fe92:	88bb      	ldrh	r3, [r7, #4]
 800fe94:	0a1b      	lsrs	r3, r3, #8
 800fe96:	b29b      	uxth	r3, r3
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	743b      	strb	r3, [r7, #16]
 800fe9c:	88bb      	ldrh	r3, [r7, #4]
 800fe9e:	b2db      	uxtb	r3, r3
 800fea0:	747b      	strb	r3, [r7, #17]
 800fea2:	88bb      	ldrh	r3, [r7, #4]
 800fea4:	3301      	adds	r3, #1
 800fea6:	121b      	asrs	r3, r3, #8
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	74bb      	strb	r3, [r7, #18]
 800feac:	88bb      	ldrh	r3, [r7, #4]
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	3301      	adds	r3, #1
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800feb6:	f107 0010 	add.w	r0, r7, #16
 800feba:	230a      	movs	r3, #10
 800febc:	2200      	movs	r2, #0
 800febe:	2104      	movs	r1, #4
 800fec0:	f000 faf0 	bl	80104a4 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fec4:	2300      	movs	r3, #0
 800fec6:	62bb      	str	r3, [r7, #40]	; 0x28
 800fec8:	e008      	b.n	800fedc <ILI9341_Draw_Pixel+0x19c>
 800feca:	4b3c      	ldr	r3, [pc, #240]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fecc:	695b      	ldr	r3, [r3, #20]
 800fece:	4a3b      	ldr	r2, [pc, #236]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fed0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fed4:	6153      	str	r3, [r2, #20]
 800fed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fed8:	3301      	adds	r3, #1
 800feda:	62bb      	str	r3, [r7, #40]	; 0x28
 800fedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fede:	2b02      	cmp	r3, #2
 800fee0:	ddf3      	ble.n	800feca <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800fee2:	4b36      	ldr	r3, [pc, #216]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fee4:	695b      	ldr	r3, [r3, #20]
 800fee6:	4a35      	ldr	r2, [pc, #212]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800feec:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800feee:	4b33      	ldr	r3, [pc, #204]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fef0:	695b      	ldr	r3, [r3, #20]
 800fef2:	4a32      	ldr	r2, [pc, #200]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fef4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fef8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800fefa:	4b30      	ldr	r3, [pc, #192]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800fefc:	695b      	ldr	r3, [r3, #20]
 800fefe:	4a2f      	ldr	r2, [pc, #188]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff04:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 800ff06:	220a      	movs	r2, #10
 800ff08:	2100      	movs	r1, #0
 800ff0a:	202c      	movs	r0, #44	; 0x2c
 800ff0c:	f000 fa98 	bl	8010440 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff10:	2300      	movs	r3, #0
 800ff12:	627b      	str	r3, [r7, #36]	; 0x24
 800ff14:	e008      	b.n	800ff28 <ILI9341_Draw_Pixel+0x1e8>
 800ff16:	4b29      	ldr	r3, [pc, #164]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff18:	695b      	ldr	r3, [r3, #20]
 800ff1a:	4a28      	ldr	r2, [pc, #160]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff20:	6153      	str	r3, [r2, #20]
 800ff22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff24:	3301      	adds	r3, #1
 800ff26:	627b      	str	r3, [r7, #36]	; 0x24
 800ff28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff2a:	2b02      	cmp	r3, #2
 800ff2c:	ddf3      	ble.n	800ff16 <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ff2e:	4b23      	ldr	r3, [pc, #140]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff30:	695b      	ldr	r3, [r3, #20]
 800ff32:	4a22      	ldr	r2, [pc, #136]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff38:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ff3a:	4b20      	ldr	r3, [pc, #128]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff3c:	695b      	ldr	r3, [r3, #20]
 800ff3e:	4a1f      	ldr	r2, [pc, #124]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff44:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff46:	4b1d      	ldr	r3, [pc, #116]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff48:	695b      	ldr	r3, [r3, #20]
 800ff4a:	4a1c      	ldr	r2, [pc, #112]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff50:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800ff52:	887b      	ldrh	r3, [r7, #2]
 800ff54:	0a1b      	lsrs	r3, r3, #8
 800ff56:	b29b      	uxth	r3, r3
 800ff58:	b2db      	uxtb	r3, r3
 800ff5a:	733b      	strb	r3, [r7, #12]
 800ff5c:	887b      	ldrh	r3, [r7, #2]
 800ff5e:	b2db      	uxtb	r3, r3
 800ff60:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 800ff62:	f107 000c 	add.w	r0, r7, #12
 800ff66:	2301      	movs	r3, #1
 800ff68:	2200      	movs	r2, #0
 800ff6a:	2102      	movs	r1, #2
 800ff6c:	f000 fa9a 	bl	80104a4 <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff70:	2300      	movs	r3, #0
 800ff72:	623b      	str	r3, [r7, #32]
 800ff74:	e008      	b.n	800ff88 <ILI9341_Draw_Pixel+0x248>
 800ff76:	4b11      	ldr	r3, [pc, #68]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff78:	695b      	ldr	r3, [r3, #20]
 800ff7a:	4a10      	ldr	r2, [pc, #64]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff80:	6153      	str	r3, [r2, #20]
 800ff82:	6a3b      	ldr	r3, [r7, #32]
 800ff84:	3301      	adds	r3, #1
 800ff86:	623b      	str	r3, [r7, #32]
 800ff88:	6a3b      	ldr	r3, [r7, #32]
 800ff8a:	2b02      	cmp	r3, #2
 800ff8c:	ddf3      	ble.n	800ff76 <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ff8e:	2300      	movs	r3, #0
 800ff90:	61fb      	str	r3, [r7, #28]
 800ff92:	e008      	b.n	800ffa6 <ILI9341_Draw_Pixel+0x266>
 800ff94:	4b09      	ldr	r3, [pc, #36]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff96:	695b      	ldr	r3, [r3, #20]
 800ff98:	4a08      	ldr	r2, [pc, #32]	; (800ffbc <ILI9341_Draw_Pixel+0x27c>)
 800ff9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff9e:	6153      	str	r3, [r2, #20]
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	61fb      	str	r3, [r7, #28]
 800ffa6:	69fb      	ldr	r3, [r7, #28]
 800ffa8:	2b02      	cmp	r3, #2
 800ffaa:	ddf3      	ble.n	800ff94 <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ffac:	2300      	movs	r3, #0
 800ffae:	61bb      	str	r3, [r7, #24]
 800ffb0:	e00f      	b.n	800ffd2 <ILI9341_Draw_Pixel+0x292>
 800ffb2:	bf00      	nop
 800ffb4:	20000c42 	.word	0x20000c42
 800ffb8:	20000c40 	.word	0x20000c40
 800ffbc:	48000400 	.word	0x48000400
 800ffc0:	4b0b      	ldr	r3, [pc, #44]	; (800fff0 <ILI9341_Draw_Pixel+0x2b0>)
 800ffc2:	695b      	ldr	r3, [r3, #20]
 800ffc4:	4a0a      	ldr	r2, [pc, #40]	; (800fff0 <ILI9341_Draw_Pixel+0x2b0>)
 800ffc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffca:	6153      	str	r3, [r2, #20]
 800ffcc:	69bb      	ldr	r3, [r7, #24]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	61bb      	str	r3, [r7, #24]
 800ffd2:	69bb      	ldr	r3, [r7, #24]
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	ddf3      	ble.n	800ffc0 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ffd8:	4b05      	ldr	r3, [pc, #20]	; (800fff0 <ILI9341_Draw_Pixel+0x2b0>)
 800ffda:	695b      	ldr	r3, [r3, #20]
 800ffdc:	4a04      	ldr	r2, [pc, #16]	; (800fff0 <ILI9341_Draw_Pixel+0x2b0>)
 800ffde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffe2:	6153      	str	r3, [r2, #20]
 800ffe4:	e000      	b.n	800ffe8 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800ffe6:	bf00      	nop


}
 800ffe8:	3738      	adds	r7, #56	; 0x38
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	48000400 	.word	0x48000400

0800fff4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800fff4:	b590      	push	{r4, r7, lr}
 800fff6:	b087      	sub	sp, #28
 800fff8:	af02      	add	r7, sp, #8
 800fffa:	4604      	mov	r4, r0
 800fffc:	4608      	mov	r0, r1
 800fffe:	4611      	mov	r1, r2
 8010000:	461a      	mov	r2, r3
 8010002:	4623      	mov	r3, r4
 8010004:	80fb      	strh	r3, [r7, #6]
 8010006:	4603      	mov	r3, r0
 8010008:	80bb      	strh	r3, [r7, #4]
 801000a:	460b      	mov	r3, r1
 801000c:	807b      	strh	r3, [r7, #2]
 801000e:	4613      	mov	r3, r2
 8010010:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010012:	4b41      	ldr	r3, [pc, #260]	; (8010118 <ILI9341_Draw_Rectangle+0x124>)
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	b29b      	uxth	r3, r3
 8010018:	88fa      	ldrh	r2, [r7, #6]
 801001a:	429a      	cmp	r2, r3
 801001c:	d278      	bcs.n	8010110 <ILI9341_Draw_Rectangle+0x11c>
 801001e:	4b3f      	ldr	r3, [pc, #252]	; (801011c <ILI9341_Draw_Rectangle+0x128>)
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	b29b      	uxth	r3, r3
 8010024:	88ba      	ldrh	r2, [r7, #4]
 8010026:	429a      	cmp	r2, r3
 8010028:	d272      	bcs.n	8010110 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 801002a:	88fa      	ldrh	r2, [r7, #6]
 801002c:	887b      	ldrh	r3, [r7, #2]
 801002e:	4413      	add	r3, r2
 8010030:	3b01      	subs	r3, #1
 8010032:	4a39      	ldr	r2, [pc, #228]	; (8010118 <ILI9341_Draw_Rectangle+0x124>)
 8010034:	8812      	ldrh	r2, [r2, #0]
 8010036:	b292      	uxth	r2, r2
 8010038:	4293      	cmp	r3, r2
 801003a:	db05      	blt.n	8010048 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 801003c:	4b36      	ldr	r3, [pc, #216]	; (8010118 <ILI9341_Draw_Rectangle+0x124>)
 801003e:	881b      	ldrh	r3, [r3, #0]
 8010040:	b29a      	uxth	r2, r3
 8010042:	88fb      	ldrh	r3, [r7, #6]
 8010044:	1ad3      	subs	r3, r2, r3
 8010046:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8010048:	88ba      	ldrh	r2, [r7, #4]
 801004a:	883b      	ldrh	r3, [r7, #0]
 801004c:	4413      	add	r3, r2
 801004e:	3b01      	subs	r3, #1
 8010050:	4a32      	ldr	r2, [pc, #200]	; (801011c <ILI9341_Draw_Rectangle+0x128>)
 8010052:	8812      	ldrh	r2, [r2, #0]
 8010054:	b292      	uxth	r2, r2
 8010056:	4293      	cmp	r3, r2
 8010058:	db05      	blt.n	8010066 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 801005a:	4b30      	ldr	r3, [pc, #192]	; (801011c <ILI9341_Draw_Rectangle+0x128>)
 801005c:	881b      	ldrh	r3, [r3, #0]
 801005e:	b29a      	uxth	r2, r3
 8010060:	88bb      	ldrh	r3, [r7, #4]
 8010062:	1ad3      	subs	r3, r2, r3
 8010064:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8010066:	88fa      	ldrh	r2, [r7, #6]
 8010068:	887b      	ldrh	r3, [r7, #2]
 801006a:	4413      	add	r3, r2
 801006c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 801006e:	3b01      	subs	r3, #1
 8010070:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8010072:	88ba      	ldrh	r2, [r7, #4]
 8010074:	883b      	ldrh	r3, [r7, #0]
 8010076:	4413      	add	r3, r2
 8010078:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 801007a:	3b01      	subs	r3, #1
 801007c:	b29b      	uxth	r3, r3
 801007e:	88b9      	ldrh	r1, [r7, #4]
 8010080:	88f8      	ldrh	r0, [r7, #6]
 8010082:	4622      	mov	r2, r4
 8010084:	f7ff fde6 	bl	800fc54 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8010088:	883a      	ldrh	r2, [r7, #0]
 801008a:	887b      	ldrh	r3, [r7, #2]
 801008c:	fb12 f303 	smulbb	r3, r2, r3
 8010090:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8010092:	2300      	movs	r3, #0
 8010094:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8010096:	89fb      	ldrh	r3, [r7, #14]
 8010098:	f003 0301 	and.w	r3, r3, #1
 801009c:	2b00      	cmp	r3, #0
 801009e:	d009      	beq.n	80100b4 <ILI9341_Draw_Rectangle+0xc0>
 80100a0:	89fb      	ldrh	r3, [r7, #14]
 80100a2:	2b01      	cmp	r3, #1
 80100a4:	d906      	bls.n	80100b4 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 80100a6:	2301      	movs	r3, #1
 80100a8:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 80100aa:	89fb      	ldrh	r3, [r7, #14]
 80100ac:	085b      	lsrs	r3, r3, #1
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 80100b4:	89fc      	ldrh	r4, [r7, #14]
 80100b6:	8c3a      	ldrh	r2, [r7, #32]
 80100b8:	88b9      	ldrh	r1, [r7, #4]
 80100ba:	88f8      	ldrh	r0, [r7, #6]
 80100bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80100c0:	9300      	str	r3, [sp, #0]
 80100c2:	4623      	mov	r3, r4
 80100c4:	f000 f8a8 	bl	8010218 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 80100c8:	7b7b      	ldrb	r3, [r7, #13]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d021      	beq.n	8010112 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80100ce:	88fa      	ldrh	r2, [r7, #6]
 80100d0:	887b      	ldrh	r3, [r7, #2]
 80100d2:	4413      	add	r3, r2
 80100d4:	b29b      	uxth	r3, r3
 80100d6:	3b02      	subs	r3, #2
 80100d8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80100da:	88ba      	ldrh	r2, [r7, #4]
 80100dc:	883b      	ldrh	r3, [r7, #0]
 80100de:	4413      	add	r3, r2
 80100e0:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 80100e2:	3b01      	subs	r3, #1
 80100e4:	b29b      	uxth	r3, r3
 80100e6:	8c3a      	ldrh	r2, [r7, #32]
 80100e8:	4619      	mov	r1, r3
 80100ea:	f7ff fe29 	bl	800fd40 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 80100ee:	88fa      	ldrh	r2, [r7, #6]
 80100f0:	887b      	ldrh	r3, [r7, #2]
 80100f2:	4413      	add	r3, r2
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	3b01      	subs	r3, #1
 80100f8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 80100fa:	88ba      	ldrh	r2, [r7, #4]
 80100fc:	883b      	ldrh	r3, [r7, #0]
 80100fe:	4413      	add	r3, r2
 8010100:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8010102:	3b01      	subs	r3, #1
 8010104:	b29b      	uxth	r3, r3
 8010106:	8c3a      	ldrh	r2, [r7, #32]
 8010108:	4619      	mov	r1, r3
 801010a:	f7ff fe19 	bl	800fd40 <ILI9341_Draw_Pixel>
 801010e:	e000      	b.n	8010112 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010110:	bf00      	nop
							colour);
	}
}
 8010112:	3714      	adds	r7, #20
 8010114:	46bd      	mov	sp, r7
 8010116:	bd90      	pop	{r4, r7, pc}
 8010118:	20000c42 	.word	0x20000c42
 801011c:	20000c40 	.word	0x20000c40

08010120 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b084      	sub	sp, #16
 8010124:	af00      	add	r7, sp, #0
 8010126:	4603      	mov	r3, r0
 8010128:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 801012a:	79fb      	ldrb	r3, [r7, #7]
 801012c:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 801012e:	2036      	movs	r0, #54	; 0x36
 8010130:	f000 f922 	bl	8010378 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 8010134:	7bfb      	ldrb	r3, [r7, #15]
 8010136:	2b03      	cmp	r3, #3
 8010138:	d836      	bhi.n	80101a8 <ILI9341_Set_Rotation+0x88>
 801013a:	a201      	add	r2, pc, #4	; (adr r2, 8010140 <ILI9341_Set_Rotation+0x20>)
 801013c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010140:	08010151 	.word	0x08010151
 8010144:	08010167 	.word	0x08010167
 8010148:	0801017d 	.word	0x0801017d
 801014c:	08010193 	.word	0x08010193
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 8010150:	2048      	movs	r0, #72	; 0x48
 8010152:	f000 f943 	bl	80103dc <_LCD_SendData>
			LCD_WIDTH = 240;
 8010156:	4b17      	ldr	r3, [pc, #92]	; (80101b4 <ILI9341_Set_Rotation+0x94>)
 8010158:	22f0      	movs	r2, #240	; 0xf0
 801015a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 801015c:	4b16      	ldr	r3, [pc, #88]	; (80101b8 <ILI9341_Set_Rotation+0x98>)
 801015e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010162:	801a      	strh	r2, [r3, #0]
			break;
 8010164:	e021      	b.n	80101aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 8010166:	2028      	movs	r0, #40	; 0x28
 8010168:	f000 f938 	bl	80103dc <_LCD_SendData>
			LCD_WIDTH  = 320;
 801016c:	4b11      	ldr	r3, [pc, #68]	; (80101b4 <ILI9341_Set_Rotation+0x94>)
 801016e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8010172:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8010174:	4b10      	ldr	r3, [pc, #64]	; (80101b8 <ILI9341_Set_Rotation+0x98>)
 8010176:	22f0      	movs	r2, #240	; 0xf0
 8010178:	801a      	strh	r2, [r3, #0]
			break;
 801017a:	e016      	b.n	80101aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 801017c:	2088      	movs	r0, #136	; 0x88
 801017e:	f000 f92d 	bl	80103dc <_LCD_SendData>
			LCD_WIDTH  = 240;
 8010182:	4b0c      	ldr	r3, [pc, #48]	; (80101b4 <ILI9341_Set_Rotation+0x94>)
 8010184:	22f0      	movs	r2, #240	; 0xf0
 8010186:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8010188:	4b0b      	ldr	r3, [pc, #44]	; (80101b8 <ILI9341_Set_Rotation+0x98>)
 801018a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801018e:	801a      	strh	r2, [r3, #0]
			break;
 8010190:	e00b      	b.n	80101aa <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 8010192:	20e8      	movs	r0, #232	; 0xe8
 8010194:	f000 f922 	bl	80103dc <_LCD_SendData>
			LCD_WIDTH  = 320;
 8010198:	4b06      	ldr	r3, [pc, #24]	; (80101b4 <ILI9341_Set_Rotation+0x94>)
 801019a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 801019e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80101a0:	4b05      	ldr	r3, [pc, #20]	; (80101b8 <ILI9341_Set_Rotation+0x98>)
 80101a2:	22f0      	movs	r2, #240	; 0xf0
 80101a4:	801a      	strh	r2, [r3, #0]
			break;
 80101a6:	e000      	b.n	80101aa <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80101a8:	bf00      	nop
	}
}
 80101aa:	bf00      	nop
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	20000c42 	.word	0x20000c42
 80101b8:	20000c40 	.word	0x20000c40

080101bc <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 80101bc:	b480      	push	{r7}
 80101be:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 80101c0:	4b05      	ldr	r3, [pc, #20]	; (80101d8 <_LCD_Enable+0x1c>)
 80101c2:	695b      	ldr	r3, [r3, #20]
 80101c4:	4a04      	ldr	r2, [pc, #16]	; (80101d8 <_LCD_Enable+0x1c>)
 80101c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80101ca:	6153      	str	r3, [r2, #20]
}
 80101cc:	bf00      	nop
 80101ce:	46bd      	mov	sp, r7
 80101d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d4:	4770      	bx	lr
 80101d6:	bf00      	nop
 80101d8:	48000400 	.word	0x48000400

080101dc <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 80101e0:	4b0c      	ldr	r3, [pc, #48]	; (8010214 <_LCD_Reset+0x38>)
 80101e2:	695b      	ldr	r3, [r3, #20]
 80101e4:	4a0b      	ldr	r2, [pc, #44]	; (8010214 <_LCD_Reset+0x38>)
 80101e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80101ea:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80101ec:	20c8      	movs	r0, #200	; 0xc8
 80101ee:	f7f8 fd19 	bl	8008c24 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80101f2:	4b08      	ldr	r3, [pc, #32]	; (8010214 <_LCD_Reset+0x38>)
 80101f4:	695b      	ldr	r3, [r3, #20]
 80101f6:	4a07      	ldr	r2, [pc, #28]	; (8010214 <_LCD_Reset+0x38>)
 80101f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101fc:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 80101fe:	20c8      	movs	r0, #200	; 0xc8
 8010200:	f7f8 fd10 	bl	8008c24 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8010204:	4b03      	ldr	r3, [pc, #12]	; (8010214 <_LCD_Reset+0x38>)
 8010206:	695b      	ldr	r3, [r3, #20]
 8010208:	4a02      	ldr	r2, [pc, #8]	; (8010214 <_LCD_Reset+0x38>)
 801020a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801020e:	6153      	str	r3, [r2, #20]
}
 8010210:	bf00      	nop
 8010212:	bd80      	pop	{r7, pc}
 8010214:	48000400 	.word	0x48000400

08010218 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8010218:	b5b0      	push	{r4, r5, r7, lr}
 801021a:	b08e      	sub	sp, #56	; 0x38
 801021c:	af00      	add	r7, sp, #0
 801021e:	607b      	str	r3, [r7, #4]
 8010220:	4603      	mov	r3, r0
 8010222:	81fb      	strh	r3, [r7, #14]
 8010224:	460b      	mov	r3, r1
 8010226:	81bb      	strh	r3, [r7, #12]
 8010228:	4613      	mov	r3, r2
 801022a:	817b      	strh	r3, [r7, #10]
 801022c:	466b      	mov	r3, sp
 801022e:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 8010230:	2300      	movs	r3, #0
 8010232:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	005b      	lsls	r3, r3, #1
 8010238:	4a4d      	ldr	r2, [pc, #308]	; (8010370 <_LCD_Write_Frame+0x158>)
 801023a:	8812      	ldrh	r2, [r2, #0]
 801023c:	4293      	cmp	r3, r2
 801023e:	d202      	bcs.n	8010246 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010244:	e002      	b.n	801024c <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8010246:	4b4a      	ldr	r3, [pc, #296]	; (8010370 <_LCD_Write_Frame+0x158>)
 8010248:	881b      	ldrh	r3, [r3, #0]
 801024a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 801024c:	897b      	ldrh	r3, [r7, #10]
 801024e:	0a1b      	lsrs	r3, r3, #8
 8010250:	b29b      	uxth	r3, r3
 8010252:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 8010254:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010256:	4603      	mov	r3, r0
 8010258:	3b01      	subs	r3, #1
 801025a:	61bb      	str	r3, [r7, #24]
 801025c:	4601      	mov	r1, r0
 801025e:	f04f 0200 	mov.w	r2, #0
 8010262:	f04f 0300 	mov.w	r3, #0
 8010266:	f04f 0400 	mov.w	r4, #0
 801026a:	00d4      	lsls	r4, r2, #3
 801026c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8010270:	00cb      	lsls	r3, r1, #3
 8010272:	4601      	mov	r1, r0
 8010274:	f04f 0200 	mov.w	r2, #0
 8010278:	f04f 0300 	mov.w	r3, #0
 801027c:	f04f 0400 	mov.w	r4, #0
 8010280:	00d4      	lsls	r4, r2, #3
 8010282:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8010286:	00cb      	lsls	r3, r1, #3
 8010288:	1dc3      	adds	r3, r0, #7
 801028a:	08db      	lsrs	r3, r3, #3
 801028c:	00db      	lsls	r3, r3, #3
 801028e:	ebad 0d03 	sub.w	sp, sp, r3
 8010292:	466b      	mov	r3, sp
 8010294:	3300      	adds	r3, #0
 8010296:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8010298:	2300      	movs	r3, #0
 801029a:	633b      	str	r3, [r7, #48]	; 0x30
 801029c:	e00d      	b.n	80102ba <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 801029e:	697a      	ldr	r2, [r7, #20]
 80102a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a2:	4413      	add	r3, r2
 80102a4:	7ffa      	ldrb	r2, [r7, #31]
 80102a6:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 80102a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102aa:	3301      	adds	r3, #1
 80102ac:	897a      	ldrh	r2, [r7, #10]
 80102ae:	b2d1      	uxtb	r1, r2
 80102b0:	697a      	ldr	r2, [r7, #20]
 80102b2:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80102b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b6:	3302      	adds	r3, #2
 80102b8:	633b      	str	r3, [r7, #48]	; 0x30
 80102ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102be:	429a      	cmp	r2, r3
 80102c0:	d3ed      	bcc.n	801029e <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	005b      	lsls	r3, r3, #1
 80102c6:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80102c8:	2301      	movs	r3, #1
 80102ca:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 80102cc:	2300      	movs	r3, #0
 80102ce:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d00d      	beq.n	80102f2 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80102d6:	693a      	ldr	r2, [r7, #16]
 80102d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102da:	fbb2 f3f3 	udiv	r3, r2, r3
 80102de:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 80102e0:	693b      	ldr	r3, [r7, #16]
 80102e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80102e4:	fbb3 f2f2 	udiv	r2, r3, r2
 80102e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80102ea:	fb01 f202 	mul.w	r2, r1, r2
 80102ee:	1a9b      	subs	r3, r3, r2
 80102f0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80102f2:	4b20      	ldr	r3, [pc, #128]	; (8010374 <_LCD_Write_Frame+0x15c>)
 80102f4:	695b      	ldr	r3, [r3, #20]
 80102f6:	4a1f      	ldr	r2, [pc, #124]	; (8010374 <_LCD_Write_Frame+0x15c>)
 80102f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80102fc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80102fe:	4b1d      	ldr	r3, [pc, #116]	; (8010374 <_LCD_Write_Frame+0x15c>)
 8010300:	695b      	ldr	r3, [r3, #20]
 8010302:	4a1c      	ldr	r2, [pc, #112]	; (8010374 <_LCD_Write_Frame+0x15c>)
 8010304:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010308:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 801030a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00f      	beq.n	8010330 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8010310:	2300      	movs	r3, #0
 8010312:	627b      	str	r3, [r7, #36]	; 0x24
 8010314:	e008      	b.n	8010328 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 8010316:	6978      	ldr	r0, [r7, #20]
 8010318:	230a      	movs	r3, #10
 801031a:	2200      	movs	r2, #0
 801031c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801031e:	f000 f8c1 	bl	80104a4 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8010322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010324:	3301      	adds	r3, #1
 8010326:	627b      	str	r3, [r7, #36]	; 0x24
 8010328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801032a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801032c:	429a      	cmp	r2, r3
 801032e:	d3f2      	bcc.n	8010316 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 8010330:	6978      	ldr	r0, [r7, #20]
 8010332:	230a      	movs	r3, #10
 8010334:	2200      	movs	r2, #0
 8010336:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010338:	f000 f8b4 	bl	80104a4 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801033c:	2300      	movs	r3, #0
 801033e:	623b      	str	r3, [r7, #32]
 8010340:	e008      	b.n	8010354 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010342:	4b0c      	ldr	r3, [pc, #48]	; (8010374 <_LCD_Write_Frame+0x15c>)
 8010344:	695b      	ldr	r3, [r3, #20]
 8010346:	4a0b      	ldr	r2, [pc, #44]	; (8010374 <_LCD_Write_Frame+0x15c>)
 8010348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801034c:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801034e:	6a3b      	ldr	r3, [r7, #32]
 8010350:	3301      	adds	r3, #1
 8010352:	623b      	str	r3, [r7, #32]
 8010354:	6a3b      	ldr	r3, [r7, #32]
 8010356:	2b02      	cmp	r3, #2
 8010358:	ddf3      	ble.n	8010342 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801035a:	4b06      	ldr	r3, [pc, #24]	; (8010374 <_LCD_Write_Frame+0x15c>)
 801035c:	695b      	ldr	r3, [r3, #20]
 801035e:	4a05      	ldr	r2, [pc, #20]	; (8010374 <_LCD_Write_Frame+0x15c>)
 8010360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010364:	6153      	str	r3, [r2, #20]
 8010366:	46ad      	mov	sp, r5

}
 8010368:	bf00      	nop
 801036a:	3738      	adds	r7, #56	; 0x38
 801036c:	46bd      	mov	sp, r7
 801036e:	bdb0      	pop	{r4, r5, r7, pc}
 8010370:	20000c44 	.word	0x20000c44
 8010374:	48000400 	.word	0x48000400

08010378 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	4603      	mov	r3, r0
 8010380:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010382:	4b15      	ldr	r3, [pc, #84]	; (80103d8 <_LCD_SendCommand+0x60>)
 8010384:	695b      	ldr	r3, [r3, #20]
 8010386:	4a14      	ldr	r2, [pc, #80]	; (80103d8 <_LCD_SendCommand+0x60>)
 8010388:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801038c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 801038e:	4b12      	ldr	r3, [pc, #72]	; (80103d8 <_LCD_SendCommand+0x60>)
 8010390:	695b      	ldr	r3, [r3, #20]
 8010392:	4a11      	ldr	r2, [pc, #68]	; (80103d8 <_LCD_SendCommand+0x60>)
 8010394:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010398:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 801039a:	79fb      	ldrb	r3, [r7, #7]
 801039c:	2200      	movs	r2, #0
 801039e:	2100      	movs	r1, #0
 80103a0:	4618      	mov	r0, r3
 80103a2:	f000 f84d 	bl	8010440 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80103a6:	2300      	movs	r3, #0
 80103a8:	60fb      	str	r3, [r7, #12]
 80103aa:	e008      	b.n	80103be <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80103ac:	4b0a      	ldr	r3, [pc, #40]	; (80103d8 <_LCD_SendCommand+0x60>)
 80103ae:	695b      	ldr	r3, [r3, #20]
 80103b0:	4a09      	ldr	r2, [pc, #36]	; (80103d8 <_LCD_SendCommand+0x60>)
 80103b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103b6:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	3301      	adds	r3, #1
 80103bc:	60fb      	str	r3, [r7, #12]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	2b02      	cmp	r3, #2
 80103c2:	ddf3      	ble.n	80103ac <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80103c4:	4b04      	ldr	r3, [pc, #16]	; (80103d8 <_LCD_SendCommand+0x60>)
 80103c6:	695b      	ldr	r3, [r3, #20]
 80103c8:	4a03      	ldr	r2, [pc, #12]	; (80103d8 <_LCD_SendCommand+0x60>)
 80103ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80103ce:	6153      	str	r3, [r2, #20]
}
 80103d0:	bf00      	nop
 80103d2:	3710      	adds	r7, #16
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	48000400 	.word	0x48000400

080103dc <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	4603      	mov	r3, r0
 80103e4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 80103e6:	4b15      	ldr	r3, [pc, #84]	; (801043c <_LCD_SendData+0x60>)
 80103e8:	695b      	ldr	r3, [r3, #20]
 80103ea:	4a14      	ldr	r2, [pc, #80]	; (801043c <_LCD_SendData+0x60>)
 80103ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103f0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80103f2:	4b12      	ldr	r3, [pc, #72]	; (801043c <_LCD_SendData+0x60>)
 80103f4:	695b      	ldr	r3, [r3, #20]
 80103f6:	4a11      	ldr	r2, [pc, #68]	; (801043c <_LCD_SendData+0x60>)
 80103f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103fc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 80103fe:	79fb      	ldrb	r3, [r7, #7]
 8010400:	2200      	movs	r2, #0
 8010402:	2100      	movs	r1, #0
 8010404:	4618      	mov	r0, r3
 8010406:	f000 f81b 	bl	8010440 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801040a:	2300      	movs	r3, #0
 801040c:	60fb      	str	r3, [r7, #12]
 801040e:	e008      	b.n	8010422 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010410:	4b0a      	ldr	r3, [pc, #40]	; (801043c <_LCD_SendData+0x60>)
 8010412:	695b      	ldr	r3, [r3, #20]
 8010414:	4a09      	ldr	r2, [pc, #36]	; (801043c <_LCD_SendData+0x60>)
 8010416:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801041a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801041c:	68fb      	ldr	r3, [r7, #12]
 801041e:	3301      	adds	r3, #1
 8010420:	60fb      	str	r3, [r7, #12]
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	2b02      	cmp	r3, #2
 8010426:	ddf3      	ble.n	8010410 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010428:	4b04      	ldr	r3, [pc, #16]	; (801043c <_LCD_SendData+0x60>)
 801042a:	695b      	ldr	r3, [r3, #20]
 801042c:	4a03      	ldr	r2, [pc, #12]	; (801043c <_LCD_SendData+0x60>)
 801042e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010432:	6153      	str	r3, [r2, #20]
}
 8010434:	bf00      	nop
 8010436:	3710      	adds	r7, #16
 8010438:	46bd      	mov	sp, r7
 801043a:	bd80      	pop	{r7, pc}
 801043c:	48000400 	.word	0x48000400

08010440 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 8010440:	b480      	push	{r7}
 8010442:	b085      	sub	sp, #20
 8010444:	af00      	add	r7, sp, #0
 8010446:	4603      	mov	r3, r0
 8010448:	71fb      	strb	r3, [r7, #7]
 801044a:	460b      	mov	r3, r1
 801044c:	71bb      	strb	r3, [r7, #6]
 801044e:	4613      	mov	r3, r2
 8010450:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8010452:	2300      	movs	r3, #0
 8010454:	60fb      	str	r3, [r7, #12]
 8010456:	e003      	b.n	8010460 <_SPI_SendByte+0x20>
   		asm("nop");
 8010458:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	3301      	adds	r3, #1
 801045e:	60fb      	str	r3, [r7, #12]
 8010460:	79bb      	ldrb	r3, [r7, #6]
 8010462:	68fa      	ldr	r2, [r7, #12]
 8010464:	429a      	cmp	r2, r3
 8010466:	dbf7      	blt.n	8010458 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 8010468:	4b0c      	ldr	r3, [pc, #48]	; (801049c <_SPI_SendByte+0x5c>)
 801046a:	689b      	ldr	r3, [r3, #8]
 801046c:	f003 0302 	and.w	r3, r3, #2
 8010470:	2b02      	cmp	r3, #2
 8010472:	d102      	bne.n	801047a <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 8010474:	4a0a      	ldr	r2, [pc, #40]	; (80104a0 <_SPI_SendByte+0x60>)
 8010476:	79fb      	ldrb	r3, [r7, #7]
 8010478:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 801047a:	2300      	movs	r3, #0
 801047c:	60bb      	str	r3, [r7, #8]
 801047e:	e003      	b.n	8010488 <_SPI_SendByte+0x48>
   		asm("nop");
 8010480:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 8010482:	68bb      	ldr	r3, [r7, #8]
 8010484:	3301      	adds	r3, #1
 8010486:	60bb      	str	r3, [r7, #8]
 8010488:	797b      	ldrb	r3, [r7, #5]
 801048a:	68ba      	ldr	r2, [r7, #8]
 801048c:	429a      	cmp	r2, r3
 801048e:	dbf7      	blt.n	8010480 <_SPI_SendByte+0x40>

#endif

}
 8010490:	bf00      	nop
 8010492:	3714      	adds	r7, #20
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr
 801049c:	40003c00 	.word	0x40003c00
 80104a0:	40003c0c 	.word	0x40003c0c

080104a4 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80104a4:	b480      	push	{r7}
 80104a6:	b089      	sub	sp, #36	; 0x24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	4611      	mov	r1, r2
 80104b0:	461a      	mov	r2, r3
 80104b2:	460b      	mov	r3, r1
 80104b4:	71fb      	strb	r3, [r7, #7]
 80104b6:	4613      	mov	r3, r2
 80104b8:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80104ba:	2300      	movs	r3, #0
 80104bc:	61fb      	str	r3, [r7, #28]
 80104be:	e003      	b.n	80104c8 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 80104c0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80104c2:	69fb      	ldr	r3, [r7, #28]
 80104c4:	3301      	adds	r3, #1
 80104c6:	61fb      	str	r3, [r7, #28]
 80104c8:	79fb      	ldrb	r3, [r7, #7]
 80104ca:	69fa      	ldr	r2, [r7, #28]
 80104cc:	429a      	cmp	r2, r3
 80104ce:	dbf7      	blt.n	80104c0 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 80104d4:	e01d      	b.n	8010512 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80104d6:	4b1c      	ldr	r3, [pc, #112]	; (8010548 <_SPI_SendByteMultiByte+0xa4>)
 80104d8:	689b      	ldr	r3, [r3, #8]
 80104da:	f003 0302 	and.w	r3, r3, #2
 80104de:	2b02      	cmp	r3, #2
 80104e0:	d117      	bne.n	8010512 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	2b01      	cmp	r3, #1
 80104e6:	d90a      	bls.n	80104fe <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	881a      	ldrh	r2, [r3, #0]
 80104ec:	4b16      	ldr	r3, [pc, #88]	; (8010548 <_SPI_SendByteMultiByte+0xa4>)
 80104ee:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 80104f0:	69bb      	ldr	r3, [r7, #24]
 80104f2:	3302      	adds	r3, #2
 80104f4:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 80104f6:	68bb      	ldr	r3, [r7, #8]
 80104f8:	3b02      	subs	r3, #2
 80104fa:	60bb      	str	r3, [r7, #8]
 80104fc:	e009      	b.n	8010512 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 80104fe:	4a13      	ldr	r2, [pc, #76]	; (801054c <_SPI_SendByteMultiByte+0xa8>)
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	781b      	ldrb	r3, [r3, #0]
 8010504:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 8010506:	69bb      	ldr	r3, [r7, #24]
 8010508:	3301      	adds	r3, #1
 801050a:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	3b01      	subs	r3, #1
 8010510:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d1de      	bne.n	80104d6 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 8010518:	4b0b      	ldr	r3, [pc, #44]	; (8010548 <_SPI_SendByteMultiByte+0xa4>)
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	4a0a      	ldr	r2, [pc, #40]	; (8010548 <_SPI_SendByteMultiByte+0xa4>)
 801051e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010522:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8010524:	2300      	movs	r3, #0
 8010526:	617b      	str	r3, [r7, #20]
 8010528:	e003      	b.n	8010532 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 801052a:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	3301      	adds	r3, #1
 8010530:	617b      	str	r3, [r7, #20]
 8010532:	79bb      	ldrb	r3, [r7, #6]
 8010534:	697a      	ldr	r2, [r7, #20]
 8010536:	429a      	cmp	r2, r3
 8010538:	dbf7      	blt.n	801052a <_SPI_SendByteMultiByte+0x86>

#endif

}
 801053a:	bf00      	nop
 801053c:	3724      	adds	r7, #36	; 0x24
 801053e:	46bd      	mov	sp, r7
 8010540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop
 8010548:	40003c00 	.word	0x40003c00
 801054c:	40003c0c 	.word	0x40003c0c

08010550 <__errno>:
 8010550:	4b01      	ldr	r3, [pc, #4]	; (8010558 <__errno+0x8>)
 8010552:	6818      	ldr	r0, [r3, #0]
 8010554:	4770      	bx	lr
 8010556:	bf00      	nop
 8010558:	20001c38 	.word	0x20001c38

0801055c <__libc_init_array>:
 801055c:	b570      	push	{r4, r5, r6, lr}
 801055e:	4e0d      	ldr	r6, [pc, #52]	; (8010594 <__libc_init_array+0x38>)
 8010560:	4c0d      	ldr	r4, [pc, #52]	; (8010598 <__libc_init_array+0x3c>)
 8010562:	1ba4      	subs	r4, r4, r6
 8010564:	10a4      	asrs	r4, r4, #2
 8010566:	2500      	movs	r5, #0
 8010568:	42a5      	cmp	r5, r4
 801056a:	d109      	bne.n	8010580 <__libc_init_array+0x24>
 801056c:	4e0b      	ldr	r6, [pc, #44]	; (801059c <__libc_init_array+0x40>)
 801056e:	4c0c      	ldr	r4, [pc, #48]	; (80105a0 <__libc_init_array+0x44>)
 8010570:	f004 f8a0 	bl	80146b4 <_init>
 8010574:	1ba4      	subs	r4, r4, r6
 8010576:	10a4      	asrs	r4, r4, #2
 8010578:	2500      	movs	r5, #0
 801057a:	42a5      	cmp	r5, r4
 801057c:	d105      	bne.n	801058a <__libc_init_array+0x2e>
 801057e:	bd70      	pop	{r4, r5, r6, pc}
 8010580:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010584:	4798      	blx	r3
 8010586:	3501      	adds	r5, #1
 8010588:	e7ee      	b.n	8010568 <__libc_init_array+0xc>
 801058a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801058e:	4798      	blx	r3
 8010590:	3501      	adds	r5, #1
 8010592:	e7f2      	b.n	801057a <__libc_init_array+0x1e>
 8010594:	08015ac8 	.word	0x08015ac8
 8010598:	08015ac8 	.word	0x08015ac8
 801059c:	08015ac8 	.word	0x08015ac8
 80105a0:	08015acc 	.word	0x08015acc

080105a4 <memset>:
 80105a4:	4402      	add	r2, r0
 80105a6:	4603      	mov	r3, r0
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d100      	bne.n	80105ae <memset+0xa>
 80105ac:	4770      	bx	lr
 80105ae:	f803 1b01 	strb.w	r1, [r3], #1
 80105b2:	e7f9      	b.n	80105a8 <memset+0x4>

080105b4 <__cvt>:
 80105b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80105b8:	ec55 4b10 	vmov	r4, r5, d0
 80105bc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80105be:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80105c2:	2d00      	cmp	r5, #0
 80105c4:	460e      	mov	r6, r1
 80105c6:	4691      	mov	r9, r2
 80105c8:	4619      	mov	r1, r3
 80105ca:	bfb8      	it	lt
 80105cc:	4622      	movlt	r2, r4
 80105ce:	462b      	mov	r3, r5
 80105d0:	f027 0720 	bic.w	r7, r7, #32
 80105d4:	bfbb      	ittet	lt
 80105d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80105da:	461d      	movlt	r5, r3
 80105dc:	2300      	movge	r3, #0
 80105de:	232d      	movlt	r3, #45	; 0x2d
 80105e0:	bfb8      	it	lt
 80105e2:	4614      	movlt	r4, r2
 80105e4:	2f46      	cmp	r7, #70	; 0x46
 80105e6:	700b      	strb	r3, [r1, #0]
 80105e8:	d004      	beq.n	80105f4 <__cvt+0x40>
 80105ea:	2f45      	cmp	r7, #69	; 0x45
 80105ec:	d100      	bne.n	80105f0 <__cvt+0x3c>
 80105ee:	3601      	adds	r6, #1
 80105f0:	2102      	movs	r1, #2
 80105f2:	e000      	b.n	80105f6 <__cvt+0x42>
 80105f4:	2103      	movs	r1, #3
 80105f6:	ab03      	add	r3, sp, #12
 80105f8:	9301      	str	r3, [sp, #4]
 80105fa:	ab02      	add	r3, sp, #8
 80105fc:	9300      	str	r3, [sp, #0]
 80105fe:	4632      	mov	r2, r6
 8010600:	4653      	mov	r3, sl
 8010602:	ec45 4b10 	vmov	d0, r4, r5
 8010606:	f000 fe3f 	bl	8011288 <_dtoa_r>
 801060a:	2f47      	cmp	r7, #71	; 0x47
 801060c:	4680      	mov	r8, r0
 801060e:	d102      	bne.n	8010616 <__cvt+0x62>
 8010610:	f019 0f01 	tst.w	r9, #1
 8010614:	d026      	beq.n	8010664 <__cvt+0xb0>
 8010616:	2f46      	cmp	r7, #70	; 0x46
 8010618:	eb08 0906 	add.w	r9, r8, r6
 801061c:	d111      	bne.n	8010642 <__cvt+0x8e>
 801061e:	f898 3000 	ldrb.w	r3, [r8]
 8010622:	2b30      	cmp	r3, #48	; 0x30
 8010624:	d10a      	bne.n	801063c <__cvt+0x88>
 8010626:	2200      	movs	r2, #0
 8010628:	2300      	movs	r3, #0
 801062a:	4620      	mov	r0, r4
 801062c:	4629      	mov	r1, r5
 801062e:	f7f0 fa73 	bl	8000b18 <__aeabi_dcmpeq>
 8010632:	b918      	cbnz	r0, 801063c <__cvt+0x88>
 8010634:	f1c6 0601 	rsb	r6, r6, #1
 8010638:	f8ca 6000 	str.w	r6, [sl]
 801063c:	f8da 3000 	ldr.w	r3, [sl]
 8010640:	4499      	add	r9, r3
 8010642:	2200      	movs	r2, #0
 8010644:	2300      	movs	r3, #0
 8010646:	4620      	mov	r0, r4
 8010648:	4629      	mov	r1, r5
 801064a:	f7f0 fa65 	bl	8000b18 <__aeabi_dcmpeq>
 801064e:	b938      	cbnz	r0, 8010660 <__cvt+0xac>
 8010650:	2230      	movs	r2, #48	; 0x30
 8010652:	9b03      	ldr	r3, [sp, #12]
 8010654:	454b      	cmp	r3, r9
 8010656:	d205      	bcs.n	8010664 <__cvt+0xb0>
 8010658:	1c59      	adds	r1, r3, #1
 801065a:	9103      	str	r1, [sp, #12]
 801065c:	701a      	strb	r2, [r3, #0]
 801065e:	e7f8      	b.n	8010652 <__cvt+0x9e>
 8010660:	f8cd 900c 	str.w	r9, [sp, #12]
 8010664:	9b03      	ldr	r3, [sp, #12]
 8010666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010668:	eba3 0308 	sub.w	r3, r3, r8
 801066c:	4640      	mov	r0, r8
 801066e:	6013      	str	r3, [r2, #0]
 8010670:	b004      	add	sp, #16
 8010672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010676 <__exponent>:
 8010676:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010678:	2900      	cmp	r1, #0
 801067a:	4604      	mov	r4, r0
 801067c:	bfba      	itte	lt
 801067e:	4249      	neglt	r1, r1
 8010680:	232d      	movlt	r3, #45	; 0x2d
 8010682:	232b      	movge	r3, #43	; 0x2b
 8010684:	2909      	cmp	r1, #9
 8010686:	f804 2b02 	strb.w	r2, [r4], #2
 801068a:	7043      	strb	r3, [r0, #1]
 801068c:	dd20      	ble.n	80106d0 <__exponent+0x5a>
 801068e:	f10d 0307 	add.w	r3, sp, #7
 8010692:	461f      	mov	r7, r3
 8010694:	260a      	movs	r6, #10
 8010696:	fb91 f5f6 	sdiv	r5, r1, r6
 801069a:	fb06 1115 	mls	r1, r6, r5, r1
 801069e:	3130      	adds	r1, #48	; 0x30
 80106a0:	2d09      	cmp	r5, #9
 80106a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80106a6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 80106aa:	4629      	mov	r1, r5
 80106ac:	dc09      	bgt.n	80106c2 <__exponent+0x4c>
 80106ae:	3130      	adds	r1, #48	; 0x30
 80106b0:	3b02      	subs	r3, #2
 80106b2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80106b6:	42bb      	cmp	r3, r7
 80106b8:	4622      	mov	r2, r4
 80106ba:	d304      	bcc.n	80106c6 <__exponent+0x50>
 80106bc:	1a10      	subs	r0, r2, r0
 80106be:	b003      	add	sp, #12
 80106c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80106c2:	4613      	mov	r3, r2
 80106c4:	e7e7      	b.n	8010696 <__exponent+0x20>
 80106c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106ca:	f804 2b01 	strb.w	r2, [r4], #1
 80106ce:	e7f2      	b.n	80106b6 <__exponent+0x40>
 80106d0:	2330      	movs	r3, #48	; 0x30
 80106d2:	4419      	add	r1, r3
 80106d4:	7083      	strb	r3, [r0, #2]
 80106d6:	1d02      	adds	r2, r0, #4
 80106d8:	70c1      	strb	r1, [r0, #3]
 80106da:	e7ef      	b.n	80106bc <__exponent+0x46>

080106dc <_printf_float>:
 80106dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e0:	b08d      	sub	sp, #52	; 0x34
 80106e2:	460c      	mov	r4, r1
 80106e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80106e8:	4616      	mov	r6, r2
 80106ea:	461f      	mov	r7, r3
 80106ec:	4605      	mov	r5, r0
 80106ee:	f001 fcfd 	bl	80120ec <_localeconv_r>
 80106f2:	6803      	ldr	r3, [r0, #0]
 80106f4:	9304      	str	r3, [sp, #16]
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7ef fd92 	bl	8000220 <strlen>
 80106fc:	2300      	movs	r3, #0
 80106fe:	930a      	str	r3, [sp, #40]	; 0x28
 8010700:	f8d8 3000 	ldr.w	r3, [r8]
 8010704:	9005      	str	r0, [sp, #20]
 8010706:	3307      	adds	r3, #7
 8010708:	f023 0307 	bic.w	r3, r3, #7
 801070c:	f103 0208 	add.w	r2, r3, #8
 8010710:	f894 a018 	ldrb.w	sl, [r4, #24]
 8010714:	f8d4 b000 	ldr.w	fp, [r4]
 8010718:	f8c8 2000 	str.w	r2, [r8]
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8010724:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8010728:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801072c:	9307      	str	r3, [sp, #28]
 801072e:	f8cd 8018 	str.w	r8, [sp, #24]
 8010732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010736:	4ba7      	ldr	r3, [pc, #668]	; (80109d4 <_printf_float+0x2f8>)
 8010738:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801073c:	f7f0 fa1e 	bl	8000b7c <__aeabi_dcmpun>
 8010740:	bb70      	cbnz	r0, 80107a0 <_printf_float+0xc4>
 8010742:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010746:	4ba3      	ldr	r3, [pc, #652]	; (80109d4 <_printf_float+0x2f8>)
 8010748:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801074c:	f7f0 f9f8 	bl	8000b40 <__aeabi_dcmple>
 8010750:	bb30      	cbnz	r0, 80107a0 <_printf_float+0xc4>
 8010752:	2200      	movs	r2, #0
 8010754:	2300      	movs	r3, #0
 8010756:	4640      	mov	r0, r8
 8010758:	4649      	mov	r1, r9
 801075a:	f7f0 f9e7 	bl	8000b2c <__aeabi_dcmplt>
 801075e:	b110      	cbz	r0, 8010766 <_printf_float+0x8a>
 8010760:	232d      	movs	r3, #45	; 0x2d
 8010762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010766:	4a9c      	ldr	r2, [pc, #624]	; (80109d8 <_printf_float+0x2fc>)
 8010768:	4b9c      	ldr	r3, [pc, #624]	; (80109dc <_printf_float+0x300>)
 801076a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801076e:	bf8c      	ite	hi
 8010770:	4690      	movhi	r8, r2
 8010772:	4698      	movls	r8, r3
 8010774:	2303      	movs	r3, #3
 8010776:	f02b 0204 	bic.w	r2, fp, #4
 801077a:	6123      	str	r3, [r4, #16]
 801077c:	6022      	str	r2, [r4, #0]
 801077e:	f04f 0900 	mov.w	r9, #0
 8010782:	9700      	str	r7, [sp, #0]
 8010784:	4633      	mov	r3, r6
 8010786:	aa0b      	add	r2, sp, #44	; 0x2c
 8010788:	4621      	mov	r1, r4
 801078a:	4628      	mov	r0, r5
 801078c:	f000 f9e6 	bl	8010b5c <_printf_common>
 8010790:	3001      	adds	r0, #1
 8010792:	f040 808d 	bne.w	80108b0 <_printf_float+0x1d4>
 8010796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801079a:	b00d      	add	sp, #52	; 0x34
 801079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a0:	4642      	mov	r2, r8
 80107a2:	464b      	mov	r3, r9
 80107a4:	4640      	mov	r0, r8
 80107a6:	4649      	mov	r1, r9
 80107a8:	f7f0 f9e8 	bl	8000b7c <__aeabi_dcmpun>
 80107ac:	b110      	cbz	r0, 80107b4 <_printf_float+0xd8>
 80107ae:	4a8c      	ldr	r2, [pc, #560]	; (80109e0 <_printf_float+0x304>)
 80107b0:	4b8c      	ldr	r3, [pc, #560]	; (80109e4 <_printf_float+0x308>)
 80107b2:	e7da      	b.n	801076a <_printf_float+0x8e>
 80107b4:	6861      	ldr	r1, [r4, #4]
 80107b6:	1c4b      	adds	r3, r1, #1
 80107b8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80107bc:	a80a      	add	r0, sp, #40	; 0x28
 80107be:	d13e      	bne.n	801083e <_printf_float+0x162>
 80107c0:	2306      	movs	r3, #6
 80107c2:	6063      	str	r3, [r4, #4]
 80107c4:	2300      	movs	r3, #0
 80107c6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80107ca:	ab09      	add	r3, sp, #36	; 0x24
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	ec49 8b10 	vmov	d0, r8, r9
 80107d2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80107d6:	6022      	str	r2, [r4, #0]
 80107d8:	f8cd a004 	str.w	sl, [sp, #4]
 80107dc:	6861      	ldr	r1, [r4, #4]
 80107de:	4628      	mov	r0, r5
 80107e0:	f7ff fee8 	bl	80105b4 <__cvt>
 80107e4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80107e8:	2b47      	cmp	r3, #71	; 0x47
 80107ea:	4680      	mov	r8, r0
 80107ec:	d109      	bne.n	8010802 <_printf_float+0x126>
 80107ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107f0:	1cd8      	adds	r0, r3, #3
 80107f2:	db02      	blt.n	80107fa <_printf_float+0x11e>
 80107f4:	6862      	ldr	r2, [r4, #4]
 80107f6:	4293      	cmp	r3, r2
 80107f8:	dd47      	ble.n	801088a <_printf_float+0x1ae>
 80107fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80107fe:	fa5f fa8a 	uxtb.w	sl, sl
 8010802:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8010806:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010808:	d824      	bhi.n	8010854 <_printf_float+0x178>
 801080a:	3901      	subs	r1, #1
 801080c:	4652      	mov	r2, sl
 801080e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010812:	9109      	str	r1, [sp, #36]	; 0x24
 8010814:	f7ff ff2f 	bl	8010676 <__exponent>
 8010818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801081a:	1813      	adds	r3, r2, r0
 801081c:	2a01      	cmp	r2, #1
 801081e:	4681      	mov	r9, r0
 8010820:	6123      	str	r3, [r4, #16]
 8010822:	dc02      	bgt.n	801082a <_printf_float+0x14e>
 8010824:	6822      	ldr	r2, [r4, #0]
 8010826:	07d1      	lsls	r1, r2, #31
 8010828:	d501      	bpl.n	801082e <_printf_float+0x152>
 801082a:	3301      	adds	r3, #1
 801082c:	6123      	str	r3, [r4, #16]
 801082e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010832:	2b00      	cmp	r3, #0
 8010834:	d0a5      	beq.n	8010782 <_printf_float+0xa6>
 8010836:	232d      	movs	r3, #45	; 0x2d
 8010838:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801083c:	e7a1      	b.n	8010782 <_printf_float+0xa6>
 801083e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8010842:	f000 8177 	beq.w	8010b34 <_printf_float+0x458>
 8010846:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801084a:	d1bb      	bne.n	80107c4 <_printf_float+0xe8>
 801084c:	2900      	cmp	r1, #0
 801084e:	d1b9      	bne.n	80107c4 <_printf_float+0xe8>
 8010850:	2301      	movs	r3, #1
 8010852:	e7b6      	b.n	80107c2 <_printf_float+0xe6>
 8010854:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8010858:	d119      	bne.n	801088e <_printf_float+0x1b2>
 801085a:	2900      	cmp	r1, #0
 801085c:	6863      	ldr	r3, [r4, #4]
 801085e:	dd0c      	ble.n	801087a <_printf_float+0x19e>
 8010860:	6121      	str	r1, [r4, #16]
 8010862:	b913      	cbnz	r3, 801086a <_printf_float+0x18e>
 8010864:	6822      	ldr	r2, [r4, #0]
 8010866:	07d2      	lsls	r2, r2, #31
 8010868:	d502      	bpl.n	8010870 <_printf_float+0x194>
 801086a:	3301      	adds	r3, #1
 801086c:	440b      	add	r3, r1
 801086e:	6123      	str	r3, [r4, #16]
 8010870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010872:	65a3      	str	r3, [r4, #88]	; 0x58
 8010874:	f04f 0900 	mov.w	r9, #0
 8010878:	e7d9      	b.n	801082e <_printf_float+0x152>
 801087a:	b913      	cbnz	r3, 8010882 <_printf_float+0x1a6>
 801087c:	6822      	ldr	r2, [r4, #0]
 801087e:	07d0      	lsls	r0, r2, #31
 8010880:	d501      	bpl.n	8010886 <_printf_float+0x1aa>
 8010882:	3302      	adds	r3, #2
 8010884:	e7f3      	b.n	801086e <_printf_float+0x192>
 8010886:	2301      	movs	r3, #1
 8010888:	e7f1      	b.n	801086e <_printf_float+0x192>
 801088a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801088e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8010892:	4293      	cmp	r3, r2
 8010894:	db05      	blt.n	80108a2 <_printf_float+0x1c6>
 8010896:	6822      	ldr	r2, [r4, #0]
 8010898:	6123      	str	r3, [r4, #16]
 801089a:	07d1      	lsls	r1, r2, #31
 801089c:	d5e8      	bpl.n	8010870 <_printf_float+0x194>
 801089e:	3301      	adds	r3, #1
 80108a0:	e7e5      	b.n	801086e <_printf_float+0x192>
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	bfd4      	ite	le
 80108a6:	f1c3 0302 	rsble	r3, r3, #2
 80108aa:	2301      	movgt	r3, #1
 80108ac:	4413      	add	r3, r2
 80108ae:	e7de      	b.n	801086e <_printf_float+0x192>
 80108b0:	6823      	ldr	r3, [r4, #0]
 80108b2:	055a      	lsls	r2, r3, #21
 80108b4:	d407      	bmi.n	80108c6 <_printf_float+0x1ea>
 80108b6:	6923      	ldr	r3, [r4, #16]
 80108b8:	4642      	mov	r2, r8
 80108ba:	4631      	mov	r1, r6
 80108bc:	4628      	mov	r0, r5
 80108be:	47b8      	blx	r7
 80108c0:	3001      	adds	r0, #1
 80108c2:	d12b      	bne.n	801091c <_printf_float+0x240>
 80108c4:	e767      	b.n	8010796 <_printf_float+0xba>
 80108c6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80108ca:	f240 80dc 	bls.w	8010a86 <_printf_float+0x3aa>
 80108ce:	2200      	movs	r2, #0
 80108d0:	2300      	movs	r3, #0
 80108d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80108d6:	f7f0 f91f 	bl	8000b18 <__aeabi_dcmpeq>
 80108da:	2800      	cmp	r0, #0
 80108dc:	d033      	beq.n	8010946 <_printf_float+0x26a>
 80108de:	2301      	movs	r3, #1
 80108e0:	4a41      	ldr	r2, [pc, #260]	; (80109e8 <_printf_float+0x30c>)
 80108e2:	4631      	mov	r1, r6
 80108e4:	4628      	mov	r0, r5
 80108e6:	47b8      	blx	r7
 80108e8:	3001      	adds	r0, #1
 80108ea:	f43f af54 	beq.w	8010796 <_printf_float+0xba>
 80108ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80108f2:	429a      	cmp	r2, r3
 80108f4:	db02      	blt.n	80108fc <_printf_float+0x220>
 80108f6:	6823      	ldr	r3, [r4, #0]
 80108f8:	07d8      	lsls	r0, r3, #31
 80108fa:	d50f      	bpl.n	801091c <_printf_float+0x240>
 80108fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010900:	4631      	mov	r1, r6
 8010902:	4628      	mov	r0, r5
 8010904:	47b8      	blx	r7
 8010906:	3001      	adds	r0, #1
 8010908:	f43f af45 	beq.w	8010796 <_printf_float+0xba>
 801090c:	f04f 0800 	mov.w	r8, #0
 8010910:	f104 091a 	add.w	r9, r4, #26
 8010914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010916:	3b01      	subs	r3, #1
 8010918:	4543      	cmp	r3, r8
 801091a:	dc09      	bgt.n	8010930 <_printf_float+0x254>
 801091c:	6823      	ldr	r3, [r4, #0]
 801091e:	079b      	lsls	r3, r3, #30
 8010920:	f100 8103 	bmi.w	8010b2a <_printf_float+0x44e>
 8010924:	68e0      	ldr	r0, [r4, #12]
 8010926:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010928:	4298      	cmp	r0, r3
 801092a:	bfb8      	it	lt
 801092c:	4618      	movlt	r0, r3
 801092e:	e734      	b.n	801079a <_printf_float+0xbe>
 8010930:	2301      	movs	r3, #1
 8010932:	464a      	mov	r2, r9
 8010934:	4631      	mov	r1, r6
 8010936:	4628      	mov	r0, r5
 8010938:	47b8      	blx	r7
 801093a:	3001      	adds	r0, #1
 801093c:	f43f af2b 	beq.w	8010796 <_printf_float+0xba>
 8010940:	f108 0801 	add.w	r8, r8, #1
 8010944:	e7e6      	b.n	8010914 <_printf_float+0x238>
 8010946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010948:	2b00      	cmp	r3, #0
 801094a:	dc2b      	bgt.n	80109a4 <_printf_float+0x2c8>
 801094c:	2301      	movs	r3, #1
 801094e:	4a26      	ldr	r2, [pc, #152]	; (80109e8 <_printf_float+0x30c>)
 8010950:	4631      	mov	r1, r6
 8010952:	4628      	mov	r0, r5
 8010954:	47b8      	blx	r7
 8010956:	3001      	adds	r0, #1
 8010958:	f43f af1d 	beq.w	8010796 <_printf_float+0xba>
 801095c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801095e:	b923      	cbnz	r3, 801096a <_printf_float+0x28e>
 8010960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010962:	b913      	cbnz	r3, 801096a <_printf_float+0x28e>
 8010964:	6823      	ldr	r3, [r4, #0]
 8010966:	07d9      	lsls	r1, r3, #31
 8010968:	d5d8      	bpl.n	801091c <_printf_float+0x240>
 801096a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801096e:	4631      	mov	r1, r6
 8010970:	4628      	mov	r0, r5
 8010972:	47b8      	blx	r7
 8010974:	3001      	adds	r0, #1
 8010976:	f43f af0e 	beq.w	8010796 <_printf_float+0xba>
 801097a:	f04f 0900 	mov.w	r9, #0
 801097e:	f104 0a1a 	add.w	sl, r4, #26
 8010982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010984:	425b      	negs	r3, r3
 8010986:	454b      	cmp	r3, r9
 8010988:	dc01      	bgt.n	801098e <_printf_float+0x2b2>
 801098a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801098c:	e794      	b.n	80108b8 <_printf_float+0x1dc>
 801098e:	2301      	movs	r3, #1
 8010990:	4652      	mov	r2, sl
 8010992:	4631      	mov	r1, r6
 8010994:	4628      	mov	r0, r5
 8010996:	47b8      	blx	r7
 8010998:	3001      	adds	r0, #1
 801099a:	f43f aefc 	beq.w	8010796 <_printf_float+0xba>
 801099e:	f109 0901 	add.w	r9, r9, #1
 80109a2:	e7ee      	b.n	8010982 <_printf_float+0x2a6>
 80109a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80109a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80109a8:	429a      	cmp	r2, r3
 80109aa:	bfa8      	it	ge
 80109ac:	461a      	movge	r2, r3
 80109ae:	2a00      	cmp	r2, #0
 80109b0:	4691      	mov	r9, r2
 80109b2:	dd07      	ble.n	80109c4 <_printf_float+0x2e8>
 80109b4:	4613      	mov	r3, r2
 80109b6:	4631      	mov	r1, r6
 80109b8:	4642      	mov	r2, r8
 80109ba:	4628      	mov	r0, r5
 80109bc:	47b8      	blx	r7
 80109be:	3001      	adds	r0, #1
 80109c0:	f43f aee9 	beq.w	8010796 <_printf_float+0xba>
 80109c4:	f104 031a 	add.w	r3, r4, #26
 80109c8:	f04f 0b00 	mov.w	fp, #0
 80109cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80109d0:	9306      	str	r3, [sp, #24]
 80109d2:	e015      	b.n	8010a00 <_printf_float+0x324>
 80109d4:	7fefffff 	.word	0x7fefffff
 80109d8:	080157c0 	.word	0x080157c0
 80109dc:	080157bc 	.word	0x080157bc
 80109e0:	080157c8 	.word	0x080157c8
 80109e4:	080157c4 	.word	0x080157c4
 80109e8:	08015a7c 	.word	0x08015a7c
 80109ec:	2301      	movs	r3, #1
 80109ee:	9a06      	ldr	r2, [sp, #24]
 80109f0:	4631      	mov	r1, r6
 80109f2:	4628      	mov	r0, r5
 80109f4:	47b8      	blx	r7
 80109f6:	3001      	adds	r0, #1
 80109f8:	f43f aecd 	beq.w	8010796 <_printf_float+0xba>
 80109fc:	f10b 0b01 	add.w	fp, fp, #1
 8010a00:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8010a04:	ebaa 0309 	sub.w	r3, sl, r9
 8010a08:	455b      	cmp	r3, fp
 8010a0a:	dcef      	bgt.n	80109ec <_printf_float+0x310>
 8010a0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a10:	429a      	cmp	r2, r3
 8010a12:	44d0      	add	r8, sl
 8010a14:	db15      	blt.n	8010a42 <_printf_float+0x366>
 8010a16:	6823      	ldr	r3, [r4, #0]
 8010a18:	07da      	lsls	r2, r3, #31
 8010a1a:	d412      	bmi.n	8010a42 <_printf_float+0x366>
 8010a1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010a20:	eba3 020a 	sub.w	r2, r3, sl
 8010a24:	eba3 0a01 	sub.w	sl, r3, r1
 8010a28:	4592      	cmp	sl, r2
 8010a2a:	bfa8      	it	ge
 8010a2c:	4692      	movge	sl, r2
 8010a2e:	f1ba 0f00 	cmp.w	sl, #0
 8010a32:	dc0e      	bgt.n	8010a52 <_printf_float+0x376>
 8010a34:	f04f 0800 	mov.w	r8, #0
 8010a38:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010a3c:	f104 091a 	add.w	r9, r4, #26
 8010a40:	e019      	b.n	8010a76 <_printf_float+0x39a>
 8010a42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010a46:	4631      	mov	r1, r6
 8010a48:	4628      	mov	r0, r5
 8010a4a:	47b8      	blx	r7
 8010a4c:	3001      	adds	r0, #1
 8010a4e:	d1e5      	bne.n	8010a1c <_printf_float+0x340>
 8010a50:	e6a1      	b.n	8010796 <_printf_float+0xba>
 8010a52:	4653      	mov	r3, sl
 8010a54:	4642      	mov	r2, r8
 8010a56:	4631      	mov	r1, r6
 8010a58:	4628      	mov	r0, r5
 8010a5a:	47b8      	blx	r7
 8010a5c:	3001      	adds	r0, #1
 8010a5e:	d1e9      	bne.n	8010a34 <_printf_float+0x358>
 8010a60:	e699      	b.n	8010796 <_printf_float+0xba>
 8010a62:	2301      	movs	r3, #1
 8010a64:	464a      	mov	r2, r9
 8010a66:	4631      	mov	r1, r6
 8010a68:	4628      	mov	r0, r5
 8010a6a:	47b8      	blx	r7
 8010a6c:	3001      	adds	r0, #1
 8010a6e:	f43f ae92 	beq.w	8010796 <_printf_float+0xba>
 8010a72:	f108 0801 	add.w	r8, r8, #1
 8010a76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010a7a:	1a9b      	subs	r3, r3, r2
 8010a7c:	eba3 030a 	sub.w	r3, r3, sl
 8010a80:	4543      	cmp	r3, r8
 8010a82:	dcee      	bgt.n	8010a62 <_printf_float+0x386>
 8010a84:	e74a      	b.n	801091c <_printf_float+0x240>
 8010a86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010a88:	2a01      	cmp	r2, #1
 8010a8a:	dc01      	bgt.n	8010a90 <_printf_float+0x3b4>
 8010a8c:	07db      	lsls	r3, r3, #31
 8010a8e:	d53a      	bpl.n	8010b06 <_printf_float+0x42a>
 8010a90:	2301      	movs	r3, #1
 8010a92:	4642      	mov	r2, r8
 8010a94:	4631      	mov	r1, r6
 8010a96:	4628      	mov	r0, r5
 8010a98:	47b8      	blx	r7
 8010a9a:	3001      	adds	r0, #1
 8010a9c:	f43f ae7b 	beq.w	8010796 <_printf_float+0xba>
 8010aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010aa4:	4631      	mov	r1, r6
 8010aa6:	4628      	mov	r0, r5
 8010aa8:	47b8      	blx	r7
 8010aaa:	3001      	adds	r0, #1
 8010aac:	f108 0801 	add.w	r8, r8, #1
 8010ab0:	f43f ae71 	beq.w	8010796 <_printf_float+0xba>
 8010ab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8010abc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	f7f0 f829 	bl	8000b18 <__aeabi_dcmpeq>
 8010ac6:	b9c8      	cbnz	r0, 8010afc <_printf_float+0x420>
 8010ac8:	4653      	mov	r3, sl
 8010aca:	4642      	mov	r2, r8
 8010acc:	4631      	mov	r1, r6
 8010ace:	4628      	mov	r0, r5
 8010ad0:	47b8      	blx	r7
 8010ad2:	3001      	adds	r0, #1
 8010ad4:	d10e      	bne.n	8010af4 <_printf_float+0x418>
 8010ad6:	e65e      	b.n	8010796 <_printf_float+0xba>
 8010ad8:	2301      	movs	r3, #1
 8010ada:	4652      	mov	r2, sl
 8010adc:	4631      	mov	r1, r6
 8010ade:	4628      	mov	r0, r5
 8010ae0:	47b8      	blx	r7
 8010ae2:	3001      	adds	r0, #1
 8010ae4:	f43f ae57 	beq.w	8010796 <_printf_float+0xba>
 8010ae8:	f108 0801 	add.w	r8, r8, #1
 8010aec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010aee:	3b01      	subs	r3, #1
 8010af0:	4543      	cmp	r3, r8
 8010af2:	dcf1      	bgt.n	8010ad8 <_printf_float+0x3fc>
 8010af4:	464b      	mov	r3, r9
 8010af6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8010afa:	e6de      	b.n	80108ba <_printf_float+0x1de>
 8010afc:	f04f 0800 	mov.w	r8, #0
 8010b00:	f104 0a1a 	add.w	sl, r4, #26
 8010b04:	e7f2      	b.n	8010aec <_printf_float+0x410>
 8010b06:	2301      	movs	r3, #1
 8010b08:	e7df      	b.n	8010aca <_printf_float+0x3ee>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	464a      	mov	r2, r9
 8010b0e:	4631      	mov	r1, r6
 8010b10:	4628      	mov	r0, r5
 8010b12:	47b8      	blx	r7
 8010b14:	3001      	adds	r0, #1
 8010b16:	f43f ae3e 	beq.w	8010796 <_printf_float+0xba>
 8010b1a:	f108 0801 	add.w	r8, r8, #1
 8010b1e:	68e3      	ldr	r3, [r4, #12]
 8010b20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8010b22:	1a9b      	subs	r3, r3, r2
 8010b24:	4543      	cmp	r3, r8
 8010b26:	dcf0      	bgt.n	8010b0a <_printf_float+0x42e>
 8010b28:	e6fc      	b.n	8010924 <_printf_float+0x248>
 8010b2a:	f04f 0800 	mov.w	r8, #0
 8010b2e:	f104 0919 	add.w	r9, r4, #25
 8010b32:	e7f4      	b.n	8010b1e <_printf_float+0x442>
 8010b34:	2900      	cmp	r1, #0
 8010b36:	f43f ae8b 	beq.w	8010850 <_printf_float+0x174>
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8010b40:	ab09      	add	r3, sp, #36	; 0x24
 8010b42:	9300      	str	r3, [sp, #0]
 8010b44:	ec49 8b10 	vmov	d0, r8, r9
 8010b48:	6022      	str	r2, [r4, #0]
 8010b4a:	f8cd a004 	str.w	sl, [sp, #4]
 8010b4e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8010b52:	4628      	mov	r0, r5
 8010b54:	f7ff fd2e 	bl	80105b4 <__cvt>
 8010b58:	4680      	mov	r8, r0
 8010b5a:	e648      	b.n	80107ee <_printf_float+0x112>

08010b5c <_printf_common>:
 8010b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b60:	4691      	mov	r9, r2
 8010b62:	461f      	mov	r7, r3
 8010b64:	688a      	ldr	r2, [r1, #8]
 8010b66:	690b      	ldr	r3, [r1, #16]
 8010b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010b6c:	4293      	cmp	r3, r2
 8010b6e:	bfb8      	it	lt
 8010b70:	4613      	movlt	r3, r2
 8010b72:	f8c9 3000 	str.w	r3, [r9]
 8010b76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010b7a:	4606      	mov	r6, r0
 8010b7c:	460c      	mov	r4, r1
 8010b7e:	b112      	cbz	r2, 8010b86 <_printf_common+0x2a>
 8010b80:	3301      	adds	r3, #1
 8010b82:	f8c9 3000 	str.w	r3, [r9]
 8010b86:	6823      	ldr	r3, [r4, #0]
 8010b88:	0699      	lsls	r1, r3, #26
 8010b8a:	bf42      	ittt	mi
 8010b8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8010b90:	3302      	addmi	r3, #2
 8010b92:	f8c9 3000 	strmi.w	r3, [r9]
 8010b96:	6825      	ldr	r5, [r4, #0]
 8010b98:	f015 0506 	ands.w	r5, r5, #6
 8010b9c:	d107      	bne.n	8010bae <_printf_common+0x52>
 8010b9e:	f104 0a19 	add.w	sl, r4, #25
 8010ba2:	68e3      	ldr	r3, [r4, #12]
 8010ba4:	f8d9 2000 	ldr.w	r2, [r9]
 8010ba8:	1a9b      	subs	r3, r3, r2
 8010baa:	42ab      	cmp	r3, r5
 8010bac:	dc28      	bgt.n	8010c00 <_printf_common+0xa4>
 8010bae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8010bb2:	6822      	ldr	r2, [r4, #0]
 8010bb4:	3300      	adds	r3, #0
 8010bb6:	bf18      	it	ne
 8010bb8:	2301      	movne	r3, #1
 8010bba:	0692      	lsls	r2, r2, #26
 8010bbc:	d42d      	bmi.n	8010c1a <_printf_common+0xbe>
 8010bbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010bc2:	4639      	mov	r1, r7
 8010bc4:	4630      	mov	r0, r6
 8010bc6:	47c0      	blx	r8
 8010bc8:	3001      	adds	r0, #1
 8010bca:	d020      	beq.n	8010c0e <_printf_common+0xb2>
 8010bcc:	6823      	ldr	r3, [r4, #0]
 8010bce:	68e5      	ldr	r5, [r4, #12]
 8010bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8010bd4:	f003 0306 	and.w	r3, r3, #6
 8010bd8:	2b04      	cmp	r3, #4
 8010bda:	bf08      	it	eq
 8010bdc:	1aad      	subeq	r5, r5, r2
 8010bde:	68a3      	ldr	r3, [r4, #8]
 8010be0:	6922      	ldr	r2, [r4, #16]
 8010be2:	bf0c      	ite	eq
 8010be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010be8:	2500      	movne	r5, #0
 8010bea:	4293      	cmp	r3, r2
 8010bec:	bfc4      	itt	gt
 8010bee:	1a9b      	subgt	r3, r3, r2
 8010bf0:	18ed      	addgt	r5, r5, r3
 8010bf2:	f04f 0900 	mov.w	r9, #0
 8010bf6:	341a      	adds	r4, #26
 8010bf8:	454d      	cmp	r5, r9
 8010bfa:	d11a      	bne.n	8010c32 <_printf_common+0xd6>
 8010bfc:	2000      	movs	r0, #0
 8010bfe:	e008      	b.n	8010c12 <_printf_common+0xb6>
 8010c00:	2301      	movs	r3, #1
 8010c02:	4652      	mov	r2, sl
 8010c04:	4639      	mov	r1, r7
 8010c06:	4630      	mov	r0, r6
 8010c08:	47c0      	blx	r8
 8010c0a:	3001      	adds	r0, #1
 8010c0c:	d103      	bne.n	8010c16 <_printf_common+0xba>
 8010c0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c16:	3501      	adds	r5, #1
 8010c18:	e7c3      	b.n	8010ba2 <_printf_common+0x46>
 8010c1a:	18e1      	adds	r1, r4, r3
 8010c1c:	1c5a      	adds	r2, r3, #1
 8010c1e:	2030      	movs	r0, #48	; 0x30
 8010c20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010c24:	4422      	add	r2, r4
 8010c26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010c2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010c2e:	3302      	adds	r3, #2
 8010c30:	e7c5      	b.n	8010bbe <_printf_common+0x62>
 8010c32:	2301      	movs	r3, #1
 8010c34:	4622      	mov	r2, r4
 8010c36:	4639      	mov	r1, r7
 8010c38:	4630      	mov	r0, r6
 8010c3a:	47c0      	blx	r8
 8010c3c:	3001      	adds	r0, #1
 8010c3e:	d0e6      	beq.n	8010c0e <_printf_common+0xb2>
 8010c40:	f109 0901 	add.w	r9, r9, #1
 8010c44:	e7d8      	b.n	8010bf8 <_printf_common+0x9c>
	...

08010c48 <_printf_i>:
 8010c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010c50:	460c      	mov	r4, r1
 8010c52:	7e09      	ldrb	r1, [r1, #24]
 8010c54:	b085      	sub	sp, #20
 8010c56:	296e      	cmp	r1, #110	; 0x6e
 8010c58:	4617      	mov	r7, r2
 8010c5a:	4606      	mov	r6, r0
 8010c5c:	4698      	mov	r8, r3
 8010c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8010c60:	f000 80b3 	beq.w	8010dca <_printf_i+0x182>
 8010c64:	d822      	bhi.n	8010cac <_printf_i+0x64>
 8010c66:	2963      	cmp	r1, #99	; 0x63
 8010c68:	d036      	beq.n	8010cd8 <_printf_i+0x90>
 8010c6a:	d80a      	bhi.n	8010c82 <_printf_i+0x3a>
 8010c6c:	2900      	cmp	r1, #0
 8010c6e:	f000 80b9 	beq.w	8010de4 <_printf_i+0x19c>
 8010c72:	2958      	cmp	r1, #88	; 0x58
 8010c74:	f000 8083 	beq.w	8010d7e <_printf_i+0x136>
 8010c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010c7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8010c80:	e032      	b.n	8010ce8 <_printf_i+0xa0>
 8010c82:	2964      	cmp	r1, #100	; 0x64
 8010c84:	d001      	beq.n	8010c8a <_printf_i+0x42>
 8010c86:	2969      	cmp	r1, #105	; 0x69
 8010c88:	d1f6      	bne.n	8010c78 <_printf_i+0x30>
 8010c8a:	6820      	ldr	r0, [r4, #0]
 8010c8c:	6813      	ldr	r3, [r2, #0]
 8010c8e:	0605      	lsls	r5, r0, #24
 8010c90:	f103 0104 	add.w	r1, r3, #4
 8010c94:	d52a      	bpl.n	8010cec <_printf_i+0xa4>
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	6011      	str	r1, [r2, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	da03      	bge.n	8010ca6 <_printf_i+0x5e>
 8010c9e:	222d      	movs	r2, #45	; 0x2d
 8010ca0:	425b      	negs	r3, r3
 8010ca2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8010ca6:	486f      	ldr	r0, [pc, #444]	; (8010e64 <_printf_i+0x21c>)
 8010ca8:	220a      	movs	r2, #10
 8010caa:	e039      	b.n	8010d20 <_printf_i+0xd8>
 8010cac:	2973      	cmp	r1, #115	; 0x73
 8010cae:	f000 809d 	beq.w	8010dec <_printf_i+0x1a4>
 8010cb2:	d808      	bhi.n	8010cc6 <_printf_i+0x7e>
 8010cb4:	296f      	cmp	r1, #111	; 0x6f
 8010cb6:	d020      	beq.n	8010cfa <_printf_i+0xb2>
 8010cb8:	2970      	cmp	r1, #112	; 0x70
 8010cba:	d1dd      	bne.n	8010c78 <_printf_i+0x30>
 8010cbc:	6823      	ldr	r3, [r4, #0]
 8010cbe:	f043 0320 	orr.w	r3, r3, #32
 8010cc2:	6023      	str	r3, [r4, #0]
 8010cc4:	e003      	b.n	8010cce <_printf_i+0x86>
 8010cc6:	2975      	cmp	r1, #117	; 0x75
 8010cc8:	d017      	beq.n	8010cfa <_printf_i+0xb2>
 8010cca:	2978      	cmp	r1, #120	; 0x78
 8010ccc:	d1d4      	bne.n	8010c78 <_printf_i+0x30>
 8010cce:	2378      	movs	r3, #120	; 0x78
 8010cd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010cd4:	4864      	ldr	r0, [pc, #400]	; (8010e68 <_printf_i+0x220>)
 8010cd6:	e055      	b.n	8010d84 <_printf_i+0x13c>
 8010cd8:	6813      	ldr	r3, [r2, #0]
 8010cda:	1d19      	adds	r1, r3, #4
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	6011      	str	r1, [r2, #0]
 8010ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010ce8:	2301      	movs	r3, #1
 8010cea:	e08c      	b.n	8010e06 <_printf_i+0x1be>
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	6011      	str	r1, [r2, #0]
 8010cf0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010cf4:	bf18      	it	ne
 8010cf6:	b21b      	sxthne	r3, r3
 8010cf8:	e7cf      	b.n	8010c9a <_printf_i+0x52>
 8010cfa:	6813      	ldr	r3, [r2, #0]
 8010cfc:	6825      	ldr	r5, [r4, #0]
 8010cfe:	1d18      	adds	r0, r3, #4
 8010d00:	6010      	str	r0, [r2, #0]
 8010d02:	0628      	lsls	r0, r5, #24
 8010d04:	d501      	bpl.n	8010d0a <_printf_i+0xc2>
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	e002      	b.n	8010d10 <_printf_i+0xc8>
 8010d0a:	0668      	lsls	r0, r5, #25
 8010d0c:	d5fb      	bpl.n	8010d06 <_printf_i+0xbe>
 8010d0e:	881b      	ldrh	r3, [r3, #0]
 8010d10:	4854      	ldr	r0, [pc, #336]	; (8010e64 <_printf_i+0x21c>)
 8010d12:	296f      	cmp	r1, #111	; 0x6f
 8010d14:	bf14      	ite	ne
 8010d16:	220a      	movne	r2, #10
 8010d18:	2208      	moveq	r2, #8
 8010d1a:	2100      	movs	r1, #0
 8010d1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010d20:	6865      	ldr	r5, [r4, #4]
 8010d22:	60a5      	str	r5, [r4, #8]
 8010d24:	2d00      	cmp	r5, #0
 8010d26:	f2c0 8095 	blt.w	8010e54 <_printf_i+0x20c>
 8010d2a:	6821      	ldr	r1, [r4, #0]
 8010d2c:	f021 0104 	bic.w	r1, r1, #4
 8010d30:	6021      	str	r1, [r4, #0]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d13d      	bne.n	8010db2 <_printf_i+0x16a>
 8010d36:	2d00      	cmp	r5, #0
 8010d38:	f040 808e 	bne.w	8010e58 <_printf_i+0x210>
 8010d3c:	4665      	mov	r5, ip
 8010d3e:	2a08      	cmp	r2, #8
 8010d40:	d10b      	bne.n	8010d5a <_printf_i+0x112>
 8010d42:	6823      	ldr	r3, [r4, #0]
 8010d44:	07db      	lsls	r3, r3, #31
 8010d46:	d508      	bpl.n	8010d5a <_printf_i+0x112>
 8010d48:	6923      	ldr	r3, [r4, #16]
 8010d4a:	6862      	ldr	r2, [r4, #4]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	bfde      	ittt	le
 8010d50:	2330      	movle	r3, #48	; 0x30
 8010d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010d56:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8010d5a:	ebac 0305 	sub.w	r3, ip, r5
 8010d5e:	6123      	str	r3, [r4, #16]
 8010d60:	f8cd 8000 	str.w	r8, [sp]
 8010d64:	463b      	mov	r3, r7
 8010d66:	aa03      	add	r2, sp, #12
 8010d68:	4621      	mov	r1, r4
 8010d6a:	4630      	mov	r0, r6
 8010d6c:	f7ff fef6 	bl	8010b5c <_printf_common>
 8010d70:	3001      	adds	r0, #1
 8010d72:	d14d      	bne.n	8010e10 <_printf_i+0x1c8>
 8010d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d78:	b005      	add	sp, #20
 8010d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d7e:	4839      	ldr	r0, [pc, #228]	; (8010e64 <_printf_i+0x21c>)
 8010d80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8010d84:	6813      	ldr	r3, [r2, #0]
 8010d86:	6821      	ldr	r1, [r4, #0]
 8010d88:	1d1d      	adds	r5, r3, #4
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	6015      	str	r5, [r2, #0]
 8010d8e:	060a      	lsls	r2, r1, #24
 8010d90:	d50b      	bpl.n	8010daa <_printf_i+0x162>
 8010d92:	07ca      	lsls	r2, r1, #31
 8010d94:	bf44      	itt	mi
 8010d96:	f041 0120 	orrmi.w	r1, r1, #32
 8010d9a:	6021      	strmi	r1, [r4, #0]
 8010d9c:	b91b      	cbnz	r3, 8010da6 <_printf_i+0x15e>
 8010d9e:	6822      	ldr	r2, [r4, #0]
 8010da0:	f022 0220 	bic.w	r2, r2, #32
 8010da4:	6022      	str	r2, [r4, #0]
 8010da6:	2210      	movs	r2, #16
 8010da8:	e7b7      	b.n	8010d1a <_printf_i+0xd2>
 8010daa:	064d      	lsls	r5, r1, #25
 8010dac:	bf48      	it	mi
 8010dae:	b29b      	uxthmi	r3, r3
 8010db0:	e7ef      	b.n	8010d92 <_printf_i+0x14a>
 8010db2:	4665      	mov	r5, ip
 8010db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8010db8:	fb02 3311 	mls	r3, r2, r1, r3
 8010dbc:	5cc3      	ldrb	r3, [r0, r3]
 8010dbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010dc2:	460b      	mov	r3, r1
 8010dc4:	2900      	cmp	r1, #0
 8010dc6:	d1f5      	bne.n	8010db4 <_printf_i+0x16c>
 8010dc8:	e7b9      	b.n	8010d3e <_printf_i+0xf6>
 8010dca:	6813      	ldr	r3, [r2, #0]
 8010dcc:	6825      	ldr	r5, [r4, #0]
 8010dce:	6961      	ldr	r1, [r4, #20]
 8010dd0:	1d18      	adds	r0, r3, #4
 8010dd2:	6010      	str	r0, [r2, #0]
 8010dd4:	0628      	lsls	r0, r5, #24
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	d501      	bpl.n	8010dde <_printf_i+0x196>
 8010dda:	6019      	str	r1, [r3, #0]
 8010ddc:	e002      	b.n	8010de4 <_printf_i+0x19c>
 8010dde:	066a      	lsls	r2, r5, #25
 8010de0:	d5fb      	bpl.n	8010dda <_printf_i+0x192>
 8010de2:	8019      	strh	r1, [r3, #0]
 8010de4:	2300      	movs	r3, #0
 8010de6:	6123      	str	r3, [r4, #16]
 8010de8:	4665      	mov	r5, ip
 8010dea:	e7b9      	b.n	8010d60 <_printf_i+0x118>
 8010dec:	6813      	ldr	r3, [r2, #0]
 8010dee:	1d19      	adds	r1, r3, #4
 8010df0:	6011      	str	r1, [r2, #0]
 8010df2:	681d      	ldr	r5, [r3, #0]
 8010df4:	6862      	ldr	r2, [r4, #4]
 8010df6:	2100      	movs	r1, #0
 8010df8:	4628      	mov	r0, r5
 8010dfa:	f7ef fa19 	bl	8000230 <memchr>
 8010dfe:	b108      	cbz	r0, 8010e04 <_printf_i+0x1bc>
 8010e00:	1b40      	subs	r0, r0, r5
 8010e02:	6060      	str	r0, [r4, #4]
 8010e04:	6863      	ldr	r3, [r4, #4]
 8010e06:	6123      	str	r3, [r4, #16]
 8010e08:	2300      	movs	r3, #0
 8010e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010e0e:	e7a7      	b.n	8010d60 <_printf_i+0x118>
 8010e10:	6923      	ldr	r3, [r4, #16]
 8010e12:	462a      	mov	r2, r5
 8010e14:	4639      	mov	r1, r7
 8010e16:	4630      	mov	r0, r6
 8010e18:	47c0      	blx	r8
 8010e1a:	3001      	adds	r0, #1
 8010e1c:	d0aa      	beq.n	8010d74 <_printf_i+0x12c>
 8010e1e:	6823      	ldr	r3, [r4, #0]
 8010e20:	079b      	lsls	r3, r3, #30
 8010e22:	d413      	bmi.n	8010e4c <_printf_i+0x204>
 8010e24:	68e0      	ldr	r0, [r4, #12]
 8010e26:	9b03      	ldr	r3, [sp, #12]
 8010e28:	4298      	cmp	r0, r3
 8010e2a:	bfb8      	it	lt
 8010e2c:	4618      	movlt	r0, r3
 8010e2e:	e7a3      	b.n	8010d78 <_printf_i+0x130>
 8010e30:	2301      	movs	r3, #1
 8010e32:	464a      	mov	r2, r9
 8010e34:	4639      	mov	r1, r7
 8010e36:	4630      	mov	r0, r6
 8010e38:	47c0      	blx	r8
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	d09a      	beq.n	8010d74 <_printf_i+0x12c>
 8010e3e:	3501      	adds	r5, #1
 8010e40:	68e3      	ldr	r3, [r4, #12]
 8010e42:	9a03      	ldr	r2, [sp, #12]
 8010e44:	1a9b      	subs	r3, r3, r2
 8010e46:	42ab      	cmp	r3, r5
 8010e48:	dcf2      	bgt.n	8010e30 <_printf_i+0x1e8>
 8010e4a:	e7eb      	b.n	8010e24 <_printf_i+0x1dc>
 8010e4c:	2500      	movs	r5, #0
 8010e4e:	f104 0919 	add.w	r9, r4, #25
 8010e52:	e7f5      	b.n	8010e40 <_printf_i+0x1f8>
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d1ac      	bne.n	8010db2 <_printf_i+0x16a>
 8010e58:	7803      	ldrb	r3, [r0, #0]
 8010e5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e62:	e76c      	b.n	8010d3e <_printf_i+0xf6>
 8010e64:	080157cc 	.word	0x080157cc
 8010e68:	080157dd 	.word	0x080157dd

08010e6c <iprintf>:
 8010e6c:	b40f      	push	{r0, r1, r2, r3}
 8010e6e:	4b0a      	ldr	r3, [pc, #40]	; (8010e98 <iprintf+0x2c>)
 8010e70:	b513      	push	{r0, r1, r4, lr}
 8010e72:	681c      	ldr	r4, [r3, #0]
 8010e74:	b124      	cbz	r4, 8010e80 <iprintf+0x14>
 8010e76:	69a3      	ldr	r3, [r4, #24]
 8010e78:	b913      	cbnz	r3, 8010e80 <iprintf+0x14>
 8010e7a:	4620      	mov	r0, r4
 8010e7c:	f001 f8ac 	bl	8011fd8 <__sinit>
 8010e80:	ab05      	add	r3, sp, #20
 8010e82:	9a04      	ldr	r2, [sp, #16]
 8010e84:	68a1      	ldr	r1, [r4, #8]
 8010e86:	9301      	str	r3, [sp, #4]
 8010e88:	4620      	mov	r0, r4
 8010e8a:	f001 fec1 	bl	8012c10 <_vfiprintf_r>
 8010e8e:	b002      	add	sp, #8
 8010e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010e94:	b004      	add	sp, #16
 8010e96:	4770      	bx	lr
 8010e98:	20001c38 	.word	0x20001c38

08010e9c <_puts_r>:
 8010e9c:	b570      	push	{r4, r5, r6, lr}
 8010e9e:	460e      	mov	r6, r1
 8010ea0:	4605      	mov	r5, r0
 8010ea2:	b118      	cbz	r0, 8010eac <_puts_r+0x10>
 8010ea4:	6983      	ldr	r3, [r0, #24]
 8010ea6:	b90b      	cbnz	r3, 8010eac <_puts_r+0x10>
 8010ea8:	f001 f896 	bl	8011fd8 <__sinit>
 8010eac:	69ab      	ldr	r3, [r5, #24]
 8010eae:	68ac      	ldr	r4, [r5, #8]
 8010eb0:	b913      	cbnz	r3, 8010eb8 <_puts_r+0x1c>
 8010eb2:	4628      	mov	r0, r5
 8010eb4:	f001 f890 	bl	8011fd8 <__sinit>
 8010eb8:	4b23      	ldr	r3, [pc, #140]	; (8010f48 <_puts_r+0xac>)
 8010eba:	429c      	cmp	r4, r3
 8010ebc:	d117      	bne.n	8010eee <_puts_r+0x52>
 8010ebe:	686c      	ldr	r4, [r5, #4]
 8010ec0:	89a3      	ldrh	r3, [r4, #12]
 8010ec2:	071b      	lsls	r3, r3, #28
 8010ec4:	d51d      	bpl.n	8010f02 <_puts_r+0x66>
 8010ec6:	6923      	ldr	r3, [r4, #16]
 8010ec8:	b1db      	cbz	r3, 8010f02 <_puts_r+0x66>
 8010eca:	3e01      	subs	r6, #1
 8010ecc:	68a3      	ldr	r3, [r4, #8]
 8010ece:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010ed2:	3b01      	subs	r3, #1
 8010ed4:	60a3      	str	r3, [r4, #8]
 8010ed6:	b9e9      	cbnz	r1, 8010f14 <_puts_r+0x78>
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	da2e      	bge.n	8010f3a <_puts_r+0x9e>
 8010edc:	4622      	mov	r2, r4
 8010ede:	210a      	movs	r1, #10
 8010ee0:	4628      	mov	r0, r5
 8010ee2:	f000 f883 	bl	8010fec <__swbuf_r>
 8010ee6:	3001      	adds	r0, #1
 8010ee8:	d011      	beq.n	8010f0e <_puts_r+0x72>
 8010eea:	200a      	movs	r0, #10
 8010eec:	e011      	b.n	8010f12 <_puts_r+0x76>
 8010eee:	4b17      	ldr	r3, [pc, #92]	; (8010f4c <_puts_r+0xb0>)
 8010ef0:	429c      	cmp	r4, r3
 8010ef2:	d101      	bne.n	8010ef8 <_puts_r+0x5c>
 8010ef4:	68ac      	ldr	r4, [r5, #8]
 8010ef6:	e7e3      	b.n	8010ec0 <_puts_r+0x24>
 8010ef8:	4b15      	ldr	r3, [pc, #84]	; (8010f50 <_puts_r+0xb4>)
 8010efa:	429c      	cmp	r4, r3
 8010efc:	bf08      	it	eq
 8010efe:	68ec      	ldreq	r4, [r5, #12]
 8010f00:	e7de      	b.n	8010ec0 <_puts_r+0x24>
 8010f02:	4621      	mov	r1, r4
 8010f04:	4628      	mov	r0, r5
 8010f06:	f000 f8c3 	bl	8011090 <__swsetup_r>
 8010f0a:	2800      	cmp	r0, #0
 8010f0c:	d0dd      	beq.n	8010eca <_puts_r+0x2e>
 8010f0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f12:	bd70      	pop	{r4, r5, r6, pc}
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	da04      	bge.n	8010f22 <_puts_r+0x86>
 8010f18:	69a2      	ldr	r2, [r4, #24]
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	dc06      	bgt.n	8010f2c <_puts_r+0x90>
 8010f1e:	290a      	cmp	r1, #10
 8010f20:	d004      	beq.n	8010f2c <_puts_r+0x90>
 8010f22:	6823      	ldr	r3, [r4, #0]
 8010f24:	1c5a      	adds	r2, r3, #1
 8010f26:	6022      	str	r2, [r4, #0]
 8010f28:	7019      	strb	r1, [r3, #0]
 8010f2a:	e7cf      	b.n	8010ecc <_puts_r+0x30>
 8010f2c:	4622      	mov	r2, r4
 8010f2e:	4628      	mov	r0, r5
 8010f30:	f000 f85c 	bl	8010fec <__swbuf_r>
 8010f34:	3001      	adds	r0, #1
 8010f36:	d1c9      	bne.n	8010ecc <_puts_r+0x30>
 8010f38:	e7e9      	b.n	8010f0e <_puts_r+0x72>
 8010f3a:	6823      	ldr	r3, [r4, #0]
 8010f3c:	200a      	movs	r0, #10
 8010f3e:	1c5a      	adds	r2, r3, #1
 8010f40:	6022      	str	r2, [r4, #0]
 8010f42:	7018      	strb	r0, [r3, #0]
 8010f44:	e7e5      	b.n	8010f12 <_puts_r+0x76>
 8010f46:	bf00      	nop
 8010f48:	0801581c 	.word	0x0801581c
 8010f4c:	0801583c 	.word	0x0801583c
 8010f50:	080157fc 	.word	0x080157fc

08010f54 <puts>:
 8010f54:	4b02      	ldr	r3, [pc, #8]	; (8010f60 <puts+0xc>)
 8010f56:	4601      	mov	r1, r0
 8010f58:	6818      	ldr	r0, [r3, #0]
 8010f5a:	f7ff bf9f 	b.w	8010e9c <_puts_r>
 8010f5e:	bf00      	nop
 8010f60:	20001c38 	.word	0x20001c38

08010f64 <sniprintf>:
 8010f64:	b40c      	push	{r2, r3}
 8010f66:	b530      	push	{r4, r5, lr}
 8010f68:	4b17      	ldr	r3, [pc, #92]	; (8010fc8 <sniprintf+0x64>)
 8010f6a:	1e0c      	subs	r4, r1, #0
 8010f6c:	b09d      	sub	sp, #116	; 0x74
 8010f6e:	681d      	ldr	r5, [r3, #0]
 8010f70:	da08      	bge.n	8010f84 <sniprintf+0x20>
 8010f72:	238b      	movs	r3, #139	; 0x8b
 8010f74:	602b      	str	r3, [r5, #0]
 8010f76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f7a:	b01d      	add	sp, #116	; 0x74
 8010f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f80:	b002      	add	sp, #8
 8010f82:	4770      	bx	lr
 8010f84:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010f88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8010f8c:	bf14      	ite	ne
 8010f8e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8010f92:	4623      	moveq	r3, r4
 8010f94:	9304      	str	r3, [sp, #16]
 8010f96:	9307      	str	r3, [sp, #28]
 8010f98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010f9c:	9002      	str	r0, [sp, #8]
 8010f9e:	9006      	str	r0, [sp, #24]
 8010fa0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8010fa4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010fa6:	ab21      	add	r3, sp, #132	; 0x84
 8010fa8:	a902      	add	r1, sp, #8
 8010faa:	4628      	mov	r0, r5
 8010fac:	9301      	str	r3, [sp, #4]
 8010fae:	f001 fd0d 	bl	80129cc <_svfiprintf_r>
 8010fb2:	1c43      	adds	r3, r0, #1
 8010fb4:	bfbc      	itt	lt
 8010fb6:	238b      	movlt	r3, #139	; 0x8b
 8010fb8:	602b      	strlt	r3, [r5, #0]
 8010fba:	2c00      	cmp	r4, #0
 8010fbc:	d0dd      	beq.n	8010f7a <sniprintf+0x16>
 8010fbe:	9b02      	ldr	r3, [sp, #8]
 8010fc0:	2200      	movs	r2, #0
 8010fc2:	701a      	strb	r2, [r3, #0]
 8010fc4:	e7d9      	b.n	8010f7a <sniprintf+0x16>
 8010fc6:	bf00      	nop
 8010fc8:	20001c38 	.word	0x20001c38

08010fcc <strcat>:
 8010fcc:	b510      	push	{r4, lr}
 8010fce:	4603      	mov	r3, r0
 8010fd0:	781a      	ldrb	r2, [r3, #0]
 8010fd2:	1c5c      	adds	r4, r3, #1
 8010fd4:	b93a      	cbnz	r2, 8010fe6 <strcat+0x1a>
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010fdc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010fe0:	2a00      	cmp	r2, #0
 8010fe2:	d1f9      	bne.n	8010fd8 <strcat+0xc>
 8010fe4:	bd10      	pop	{r4, pc}
 8010fe6:	4623      	mov	r3, r4
 8010fe8:	e7f2      	b.n	8010fd0 <strcat+0x4>
	...

08010fec <__swbuf_r>:
 8010fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fee:	460e      	mov	r6, r1
 8010ff0:	4614      	mov	r4, r2
 8010ff2:	4605      	mov	r5, r0
 8010ff4:	b118      	cbz	r0, 8010ffe <__swbuf_r+0x12>
 8010ff6:	6983      	ldr	r3, [r0, #24]
 8010ff8:	b90b      	cbnz	r3, 8010ffe <__swbuf_r+0x12>
 8010ffa:	f000 ffed 	bl	8011fd8 <__sinit>
 8010ffe:	4b21      	ldr	r3, [pc, #132]	; (8011084 <__swbuf_r+0x98>)
 8011000:	429c      	cmp	r4, r3
 8011002:	d12a      	bne.n	801105a <__swbuf_r+0x6e>
 8011004:	686c      	ldr	r4, [r5, #4]
 8011006:	69a3      	ldr	r3, [r4, #24]
 8011008:	60a3      	str	r3, [r4, #8]
 801100a:	89a3      	ldrh	r3, [r4, #12]
 801100c:	071a      	lsls	r2, r3, #28
 801100e:	d52e      	bpl.n	801106e <__swbuf_r+0x82>
 8011010:	6923      	ldr	r3, [r4, #16]
 8011012:	b363      	cbz	r3, 801106e <__swbuf_r+0x82>
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	6820      	ldr	r0, [r4, #0]
 8011018:	1ac0      	subs	r0, r0, r3
 801101a:	6963      	ldr	r3, [r4, #20]
 801101c:	b2f6      	uxtb	r6, r6
 801101e:	4283      	cmp	r3, r0
 8011020:	4637      	mov	r7, r6
 8011022:	dc04      	bgt.n	801102e <__swbuf_r+0x42>
 8011024:	4621      	mov	r1, r4
 8011026:	4628      	mov	r0, r5
 8011028:	f000 ff6c 	bl	8011f04 <_fflush_r>
 801102c:	bb28      	cbnz	r0, 801107a <__swbuf_r+0x8e>
 801102e:	68a3      	ldr	r3, [r4, #8]
 8011030:	3b01      	subs	r3, #1
 8011032:	60a3      	str	r3, [r4, #8]
 8011034:	6823      	ldr	r3, [r4, #0]
 8011036:	1c5a      	adds	r2, r3, #1
 8011038:	6022      	str	r2, [r4, #0]
 801103a:	701e      	strb	r6, [r3, #0]
 801103c:	6963      	ldr	r3, [r4, #20]
 801103e:	3001      	adds	r0, #1
 8011040:	4283      	cmp	r3, r0
 8011042:	d004      	beq.n	801104e <__swbuf_r+0x62>
 8011044:	89a3      	ldrh	r3, [r4, #12]
 8011046:	07db      	lsls	r3, r3, #31
 8011048:	d519      	bpl.n	801107e <__swbuf_r+0x92>
 801104a:	2e0a      	cmp	r6, #10
 801104c:	d117      	bne.n	801107e <__swbuf_r+0x92>
 801104e:	4621      	mov	r1, r4
 8011050:	4628      	mov	r0, r5
 8011052:	f000 ff57 	bl	8011f04 <_fflush_r>
 8011056:	b190      	cbz	r0, 801107e <__swbuf_r+0x92>
 8011058:	e00f      	b.n	801107a <__swbuf_r+0x8e>
 801105a:	4b0b      	ldr	r3, [pc, #44]	; (8011088 <__swbuf_r+0x9c>)
 801105c:	429c      	cmp	r4, r3
 801105e:	d101      	bne.n	8011064 <__swbuf_r+0x78>
 8011060:	68ac      	ldr	r4, [r5, #8]
 8011062:	e7d0      	b.n	8011006 <__swbuf_r+0x1a>
 8011064:	4b09      	ldr	r3, [pc, #36]	; (801108c <__swbuf_r+0xa0>)
 8011066:	429c      	cmp	r4, r3
 8011068:	bf08      	it	eq
 801106a:	68ec      	ldreq	r4, [r5, #12]
 801106c:	e7cb      	b.n	8011006 <__swbuf_r+0x1a>
 801106e:	4621      	mov	r1, r4
 8011070:	4628      	mov	r0, r5
 8011072:	f000 f80d 	bl	8011090 <__swsetup_r>
 8011076:	2800      	cmp	r0, #0
 8011078:	d0cc      	beq.n	8011014 <__swbuf_r+0x28>
 801107a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801107e:	4638      	mov	r0, r7
 8011080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011082:	bf00      	nop
 8011084:	0801581c 	.word	0x0801581c
 8011088:	0801583c 	.word	0x0801583c
 801108c:	080157fc 	.word	0x080157fc

08011090 <__swsetup_r>:
 8011090:	4b32      	ldr	r3, [pc, #200]	; (801115c <__swsetup_r+0xcc>)
 8011092:	b570      	push	{r4, r5, r6, lr}
 8011094:	681d      	ldr	r5, [r3, #0]
 8011096:	4606      	mov	r6, r0
 8011098:	460c      	mov	r4, r1
 801109a:	b125      	cbz	r5, 80110a6 <__swsetup_r+0x16>
 801109c:	69ab      	ldr	r3, [r5, #24]
 801109e:	b913      	cbnz	r3, 80110a6 <__swsetup_r+0x16>
 80110a0:	4628      	mov	r0, r5
 80110a2:	f000 ff99 	bl	8011fd8 <__sinit>
 80110a6:	4b2e      	ldr	r3, [pc, #184]	; (8011160 <__swsetup_r+0xd0>)
 80110a8:	429c      	cmp	r4, r3
 80110aa:	d10f      	bne.n	80110cc <__swsetup_r+0x3c>
 80110ac:	686c      	ldr	r4, [r5, #4]
 80110ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	0715      	lsls	r5, r2, #28
 80110b6:	d42c      	bmi.n	8011112 <__swsetup_r+0x82>
 80110b8:	06d0      	lsls	r0, r2, #27
 80110ba:	d411      	bmi.n	80110e0 <__swsetup_r+0x50>
 80110bc:	2209      	movs	r2, #9
 80110be:	6032      	str	r2, [r6, #0]
 80110c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80110c4:	81a3      	strh	r3, [r4, #12]
 80110c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80110ca:	e03e      	b.n	801114a <__swsetup_r+0xba>
 80110cc:	4b25      	ldr	r3, [pc, #148]	; (8011164 <__swsetup_r+0xd4>)
 80110ce:	429c      	cmp	r4, r3
 80110d0:	d101      	bne.n	80110d6 <__swsetup_r+0x46>
 80110d2:	68ac      	ldr	r4, [r5, #8]
 80110d4:	e7eb      	b.n	80110ae <__swsetup_r+0x1e>
 80110d6:	4b24      	ldr	r3, [pc, #144]	; (8011168 <__swsetup_r+0xd8>)
 80110d8:	429c      	cmp	r4, r3
 80110da:	bf08      	it	eq
 80110dc:	68ec      	ldreq	r4, [r5, #12]
 80110de:	e7e6      	b.n	80110ae <__swsetup_r+0x1e>
 80110e0:	0751      	lsls	r1, r2, #29
 80110e2:	d512      	bpl.n	801110a <__swsetup_r+0x7a>
 80110e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110e6:	b141      	cbz	r1, 80110fa <__swsetup_r+0x6a>
 80110e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110ec:	4299      	cmp	r1, r3
 80110ee:	d002      	beq.n	80110f6 <__swsetup_r+0x66>
 80110f0:	4630      	mov	r0, r6
 80110f2:	f001 fb69 	bl	80127c8 <_free_r>
 80110f6:	2300      	movs	r3, #0
 80110f8:	6363      	str	r3, [r4, #52]	; 0x34
 80110fa:	89a3      	ldrh	r3, [r4, #12]
 80110fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011100:	81a3      	strh	r3, [r4, #12]
 8011102:	2300      	movs	r3, #0
 8011104:	6063      	str	r3, [r4, #4]
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	6023      	str	r3, [r4, #0]
 801110a:	89a3      	ldrh	r3, [r4, #12]
 801110c:	f043 0308 	orr.w	r3, r3, #8
 8011110:	81a3      	strh	r3, [r4, #12]
 8011112:	6923      	ldr	r3, [r4, #16]
 8011114:	b94b      	cbnz	r3, 801112a <__swsetup_r+0x9a>
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801111c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011120:	d003      	beq.n	801112a <__swsetup_r+0x9a>
 8011122:	4621      	mov	r1, r4
 8011124:	4630      	mov	r0, r6
 8011126:	f001 f813 	bl	8012150 <__smakebuf_r>
 801112a:	89a2      	ldrh	r2, [r4, #12]
 801112c:	f012 0301 	ands.w	r3, r2, #1
 8011130:	d00c      	beq.n	801114c <__swsetup_r+0xbc>
 8011132:	2300      	movs	r3, #0
 8011134:	60a3      	str	r3, [r4, #8]
 8011136:	6963      	ldr	r3, [r4, #20]
 8011138:	425b      	negs	r3, r3
 801113a:	61a3      	str	r3, [r4, #24]
 801113c:	6923      	ldr	r3, [r4, #16]
 801113e:	b953      	cbnz	r3, 8011156 <__swsetup_r+0xc6>
 8011140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011144:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011148:	d1ba      	bne.n	80110c0 <__swsetup_r+0x30>
 801114a:	bd70      	pop	{r4, r5, r6, pc}
 801114c:	0792      	lsls	r2, r2, #30
 801114e:	bf58      	it	pl
 8011150:	6963      	ldrpl	r3, [r4, #20]
 8011152:	60a3      	str	r3, [r4, #8]
 8011154:	e7f2      	b.n	801113c <__swsetup_r+0xac>
 8011156:	2000      	movs	r0, #0
 8011158:	e7f7      	b.n	801114a <__swsetup_r+0xba>
 801115a:	bf00      	nop
 801115c:	20001c38 	.word	0x20001c38
 8011160:	0801581c 	.word	0x0801581c
 8011164:	0801583c 	.word	0x0801583c
 8011168:	080157fc 	.word	0x080157fc

0801116c <quorem>:
 801116c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011170:	6903      	ldr	r3, [r0, #16]
 8011172:	690c      	ldr	r4, [r1, #16]
 8011174:	42a3      	cmp	r3, r4
 8011176:	4680      	mov	r8, r0
 8011178:	f2c0 8082 	blt.w	8011280 <quorem+0x114>
 801117c:	3c01      	subs	r4, #1
 801117e:	f101 0714 	add.w	r7, r1, #20
 8011182:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8011186:	f100 0614 	add.w	r6, r0, #20
 801118a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801118e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8011192:	eb06 030c 	add.w	r3, r6, ip
 8011196:	3501      	adds	r5, #1
 8011198:	eb07 090c 	add.w	r9, r7, ip
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	fbb0 f5f5 	udiv	r5, r0, r5
 80111a2:	b395      	cbz	r5, 801120a <quorem+0x9e>
 80111a4:	f04f 0a00 	mov.w	sl, #0
 80111a8:	4638      	mov	r0, r7
 80111aa:	46b6      	mov	lr, r6
 80111ac:	46d3      	mov	fp, sl
 80111ae:	f850 2b04 	ldr.w	r2, [r0], #4
 80111b2:	b293      	uxth	r3, r2
 80111b4:	fb05 a303 	mla	r3, r5, r3, sl
 80111b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80111bc:	b29b      	uxth	r3, r3
 80111be:	ebab 0303 	sub.w	r3, fp, r3
 80111c2:	0c12      	lsrs	r2, r2, #16
 80111c4:	f8de b000 	ldr.w	fp, [lr]
 80111c8:	fb05 a202 	mla	r2, r5, r2, sl
 80111cc:	fa13 f38b 	uxtah	r3, r3, fp
 80111d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80111d4:	fa1f fb82 	uxth.w	fp, r2
 80111d8:	f8de 2000 	ldr.w	r2, [lr]
 80111dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80111e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80111e4:	b29b      	uxth	r3, r3
 80111e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80111ea:	4581      	cmp	r9, r0
 80111ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80111f0:	f84e 3b04 	str.w	r3, [lr], #4
 80111f4:	d2db      	bcs.n	80111ae <quorem+0x42>
 80111f6:	f856 300c 	ldr.w	r3, [r6, ip]
 80111fa:	b933      	cbnz	r3, 801120a <quorem+0x9e>
 80111fc:	9b01      	ldr	r3, [sp, #4]
 80111fe:	3b04      	subs	r3, #4
 8011200:	429e      	cmp	r6, r3
 8011202:	461a      	mov	r2, r3
 8011204:	d330      	bcc.n	8011268 <quorem+0xfc>
 8011206:	f8c8 4010 	str.w	r4, [r8, #16]
 801120a:	4640      	mov	r0, r8
 801120c:	f001 fa08 	bl	8012620 <__mcmp>
 8011210:	2800      	cmp	r0, #0
 8011212:	db25      	blt.n	8011260 <quorem+0xf4>
 8011214:	3501      	adds	r5, #1
 8011216:	4630      	mov	r0, r6
 8011218:	f04f 0c00 	mov.w	ip, #0
 801121c:	f857 2b04 	ldr.w	r2, [r7], #4
 8011220:	f8d0 e000 	ldr.w	lr, [r0]
 8011224:	b293      	uxth	r3, r2
 8011226:	ebac 0303 	sub.w	r3, ip, r3
 801122a:	0c12      	lsrs	r2, r2, #16
 801122c:	fa13 f38e 	uxtah	r3, r3, lr
 8011230:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011238:	b29b      	uxth	r3, r3
 801123a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801123e:	45b9      	cmp	r9, r7
 8011240:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011244:	f840 3b04 	str.w	r3, [r0], #4
 8011248:	d2e8      	bcs.n	801121c <quorem+0xb0>
 801124a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801124e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011252:	b92a      	cbnz	r2, 8011260 <quorem+0xf4>
 8011254:	3b04      	subs	r3, #4
 8011256:	429e      	cmp	r6, r3
 8011258:	461a      	mov	r2, r3
 801125a:	d30b      	bcc.n	8011274 <quorem+0x108>
 801125c:	f8c8 4010 	str.w	r4, [r8, #16]
 8011260:	4628      	mov	r0, r5
 8011262:	b003      	add	sp, #12
 8011264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011268:	6812      	ldr	r2, [r2, #0]
 801126a:	3b04      	subs	r3, #4
 801126c:	2a00      	cmp	r2, #0
 801126e:	d1ca      	bne.n	8011206 <quorem+0x9a>
 8011270:	3c01      	subs	r4, #1
 8011272:	e7c5      	b.n	8011200 <quorem+0x94>
 8011274:	6812      	ldr	r2, [r2, #0]
 8011276:	3b04      	subs	r3, #4
 8011278:	2a00      	cmp	r2, #0
 801127a:	d1ef      	bne.n	801125c <quorem+0xf0>
 801127c:	3c01      	subs	r4, #1
 801127e:	e7ea      	b.n	8011256 <quorem+0xea>
 8011280:	2000      	movs	r0, #0
 8011282:	e7ee      	b.n	8011262 <quorem+0xf6>
 8011284:	0000      	movs	r0, r0
	...

08011288 <_dtoa_r>:
 8011288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801128c:	ec57 6b10 	vmov	r6, r7, d0
 8011290:	b097      	sub	sp, #92	; 0x5c
 8011292:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011294:	9106      	str	r1, [sp, #24]
 8011296:	4604      	mov	r4, r0
 8011298:	920b      	str	r2, [sp, #44]	; 0x2c
 801129a:	9312      	str	r3, [sp, #72]	; 0x48
 801129c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80112a0:	e9cd 6700 	strd	r6, r7, [sp]
 80112a4:	b93d      	cbnz	r5, 80112b6 <_dtoa_r+0x2e>
 80112a6:	2010      	movs	r0, #16
 80112a8:	f000 ff92 	bl	80121d0 <malloc>
 80112ac:	6260      	str	r0, [r4, #36]	; 0x24
 80112ae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80112b2:	6005      	str	r5, [r0, #0]
 80112b4:	60c5      	str	r5, [r0, #12]
 80112b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112b8:	6819      	ldr	r1, [r3, #0]
 80112ba:	b151      	cbz	r1, 80112d2 <_dtoa_r+0x4a>
 80112bc:	685a      	ldr	r2, [r3, #4]
 80112be:	604a      	str	r2, [r1, #4]
 80112c0:	2301      	movs	r3, #1
 80112c2:	4093      	lsls	r3, r2
 80112c4:	608b      	str	r3, [r1, #8]
 80112c6:	4620      	mov	r0, r4
 80112c8:	f000 ffc9 	bl	801225e <_Bfree>
 80112cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80112ce:	2200      	movs	r2, #0
 80112d0:	601a      	str	r2, [r3, #0]
 80112d2:	1e3b      	subs	r3, r7, #0
 80112d4:	bfbb      	ittet	lt
 80112d6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80112da:	9301      	strlt	r3, [sp, #4]
 80112dc:	2300      	movge	r3, #0
 80112de:	2201      	movlt	r2, #1
 80112e0:	bfac      	ite	ge
 80112e2:	f8c8 3000 	strge.w	r3, [r8]
 80112e6:	f8c8 2000 	strlt.w	r2, [r8]
 80112ea:	4baf      	ldr	r3, [pc, #700]	; (80115a8 <_dtoa_r+0x320>)
 80112ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80112f0:	ea33 0308 	bics.w	r3, r3, r8
 80112f4:	d114      	bne.n	8011320 <_dtoa_r+0x98>
 80112f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80112f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80112fc:	6013      	str	r3, [r2, #0]
 80112fe:	9b00      	ldr	r3, [sp, #0]
 8011300:	b923      	cbnz	r3, 801130c <_dtoa_r+0x84>
 8011302:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8011306:	2800      	cmp	r0, #0
 8011308:	f000 8542 	beq.w	8011d90 <_dtoa_r+0xb08>
 801130c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801130e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80115bc <_dtoa_r+0x334>
 8011312:	2b00      	cmp	r3, #0
 8011314:	f000 8544 	beq.w	8011da0 <_dtoa_r+0xb18>
 8011318:	f10b 0303 	add.w	r3, fp, #3
 801131c:	f000 bd3e 	b.w	8011d9c <_dtoa_r+0xb14>
 8011320:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011324:	2200      	movs	r2, #0
 8011326:	2300      	movs	r3, #0
 8011328:	4630      	mov	r0, r6
 801132a:	4639      	mov	r1, r7
 801132c:	f7ef fbf4 	bl	8000b18 <__aeabi_dcmpeq>
 8011330:	4681      	mov	r9, r0
 8011332:	b168      	cbz	r0, 8011350 <_dtoa_r+0xc8>
 8011334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011336:	2301      	movs	r3, #1
 8011338:	6013      	str	r3, [r2, #0]
 801133a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801133c:	2b00      	cmp	r3, #0
 801133e:	f000 8524 	beq.w	8011d8a <_dtoa_r+0xb02>
 8011342:	4b9a      	ldr	r3, [pc, #616]	; (80115ac <_dtoa_r+0x324>)
 8011344:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011346:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 801134a:	6013      	str	r3, [r2, #0]
 801134c:	f000 bd28 	b.w	8011da0 <_dtoa_r+0xb18>
 8011350:	aa14      	add	r2, sp, #80	; 0x50
 8011352:	a915      	add	r1, sp, #84	; 0x54
 8011354:	ec47 6b10 	vmov	d0, r6, r7
 8011358:	4620      	mov	r0, r4
 801135a:	f001 f9d8 	bl	801270e <__d2b>
 801135e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8011362:	9004      	str	r0, [sp, #16]
 8011364:	2d00      	cmp	r5, #0
 8011366:	d07c      	beq.n	8011462 <_dtoa_r+0x1da>
 8011368:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801136c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8011370:	46b2      	mov	sl, r6
 8011372:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8011376:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801137a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801137e:	2200      	movs	r2, #0
 8011380:	4b8b      	ldr	r3, [pc, #556]	; (80115b0 <_dtoa_r+0x328>)
 8011382:	4650      	mov	r0, sl
 8011384:	4659      	mov	r1, fp
 8011386:	f7ee ffa7 	bl	80002d8 <__aeabi_dsub>
 801138a:	a381      	add	r3, pc, #516	; (adr r3, 8011590 <_dtoa_r+0x308>)
 801138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011390:	f7ef f95a 	bl	8000648 <__aeabi_dmul>
 8011394:	a380      	add	r3, pc, #512	; (adr r3, 8011598 <_dtoa_r+0x310>)
 8011396:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139a:	f7ee ff9f 	bl	80002dc <__adddf3>
 801139e:	4606      	mov	r6, r0
 80113a0:	4628      	mov	r0, r5
 80113a2:	460f      	mov	r7, r1
 80113a4:	f7ef f8e6 	bl	8000574 <__aeabi_i2d>
 80113a8:	a37d      	add	r3, pc, #500	; (adr r3, 80115a0 <_dtoa_r+0x318>)
 80113aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ae:	f7ef f94b 	bl	8000648 <__aeabi_dmul>
 80113b2:	4602      	mov	r2, r0
 80113b4:	460b      	mov	r3, r1
 80113b6:	4630      	mov	r0, r6
 80113b8:	4639      	mov	r1, r7
 80113ba:	f7ee ff8f 	bl	80002dc <__adddf3>
 80113be:	4606      	mov	r6, r0
 80113c0:	460f      	mov	r7, r1
 80113c2:	f7ef fbf1 	bl	8000ba8 <__aeabi_d2iz>
 80113c6:	2200      	movs	r2, #0
 80113c8:	4682      	mov	sl, r0
 80113ca:	2300      	movs	r3, #0
 80113cc:	4630      	mov	r0, r6
 80113ce:	4639      	mov	r1, r7
 80113d0:	f7ef fbac 	bl	8000b2c <__aeabi_dcmplt>
 80113d4:	b148      	cbz	r0, 80113ea <_dtoa_r+0x162>
 80113d6:	4650      	mov	r0, sl
 80113d8:	f7ef f8cc 	bl	8000574 <__aeabi_i2d>
 80113dc:	4632      	mov	r2, r6
 80113de:	463b      	mov	r3, r7
 80113e0:	f7ef fb9a 	bl	8000b18 <__aeabi_dcmpeq>
 80113e4:	b908      	cbnz	r0, 80113ea <_dtoa_r+0x162>
 80113e6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80113ea:	f1ba 0f16 	cmp.w	sl, #22
 80113ee:	d859      	bhi.n	80114a4 <_dtoa_r+0x21c>
 80113f0:	4970      	ldr	r1, [pc, #448]	; (80115b4 <_dtoa_r+0x32c>)
 80113f2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80113f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80113fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80113fe:	f7ef fbb3 	bl	8000b68 <__aeabi_dcmpgt>
 8011402:	2800      	cmp	r0, #0
 8011404:	d050      	beq.n	80114a8 <_dtoa_r+0x220>
 8011406:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801140a:	2300      	movs	r3, #0
 801140c:	930f      	str	r3, [sp, #60]	; 0x3c
 801140e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011410:	1b5d      	subs	r5, r3, r5
 8011412:	f1b5 0801 	subs.w	r8, r5, #1
 8011416:	bf49      	itett	mi
 8011418:	f1c5 0301 	rsbmi	r3, r5, #1
 801141c:	2300      	movpl	r3, #0
 801141e:	9305      	strmi	r3, [sp, #20]
 8011420:	f04f 0800 	movmi.w	r8, #0
 8011424:	bf58      	it	pl
 8011426:	9305      	strpl	r3, [sp, #20]
 8011428:	f1ba 0f00 	cmp.w	sl, #0
 801142c:	db3e      	blt.n	80114ac <_dtoa_r+0x224>
 801142e:	2300      	movs	r3, #0
 8011430:	44d0      	add	r8, sl
 8011432:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011436:	9307      	str	r3, [sp, #28]
 8011438:	9b06      	ldr	r3, [sp, #24]
 801143a:	2b09      	cmp	r3, #9
 801143c:	f200 8090 	bhi.w	8011560 <_dtoa_r+0x2d8>
 8011440:	2b05      	cmp	r3, #5
 8011442:	bfc4      	itt	gt
 8011444:	3b04      	subgt	r3, #4
 8011446:	9306      	strgt	r3, [sp, #24]
 8011448:	9b06      	ldr	r3, [sp, #24]
 801144a:	f1a3 0302 	sub.w	r3, r3, #2
 801144e:	bfcc      	ite	gt
 8011450:	2500      	movgt	r5, #0
 8011452:	2501      	movle	r5, #1
 8011454:	2b03      	cmp	r3, #3
 8011456:	f200 808f 	bhi.w	8011578 <_dtoa_r+0x2f0>
 801145a:	e8df f003 	tbb	[pc, r3]
 801145e:	7f7d      	.short	0x7f7d
 8011460:	7131      	.short	0x7131
 8011462:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8011466:	441d      	add	r5, r3
 8011468:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801146c:	2820      	cmp	r0, #32
 801146e:	dd13      	ble.n	8011498 <_dtoa_r+0x210>
 8011470:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8011474:	9b00      	ldr	r3, [sp, #0]
 8011476:	fa08 f800 	lsl.w	r8, r8, r0
 801147a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801147e:	fa23 f000 	lsr.w	r0, r3, r0
 8011482:	ea48 0000 	orr.w	r0, r8, r0
 8011486:	f7ef f865 	bl	8000554 <__aeabi_ui2d>
 801148a:	2301      	movs	r3, #1
 801148c:	4682      	mov	sl, r0
 801148e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8011492:	3d01      	subs	r5, #1
 8011494:	9313      	str	r3, [sp, #76]	; 0x4c
 8011496:	e772      	b.n	801137e <_dtoa_r+0xf6>
 8011498:	9b00      	ldr	r3, [sp, #0]
 801149a:	f1c0 0020 	rsb	r0, r0, #32
 801149e:	fa03 f000 	lsl.w	r0, r3, r0
 80114a2:	e7f0      	b.n	8011486 <_dtoa_r+0x1fe>
 80114a4:	2301      	movs	r3, #1
 80114a6:	e7b1      	b.n	801140c <_dtoa_r+0x184>
 80114a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80114aa:	e7b0      	b.n	801140e <_dtoa_r+0x186>
 80114ac:	9b05      	ldr	r3, [sp, #20]
 80114ae:	eba3 030a 	sub.w	r3, r3, sl
 80114b2:	9305      	str	r3, [sp, #20]
 80114b4:	f1ca 0300 	rsb	r3, sl, #0
 80114b8:	9307      	str	r3, [sp, #28]
 80114ba:	2300      	movs	r3, #0
 80114bc:	930e      	str	r3, [sp, #56]	; 0x38
 80114be:	e7bb      	b.n	8011438 <_dtoa_r+0x1b0>
 80114c0:	2301      	movs	r3, #1
 80114c2:	930a      	str	r3, [sp, #40]	; 0x28
 80114c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	dd59      	ble.n	801157e <_dtoa_r+0x2f6>
 80114ca:	9302      	str	r3, [sp, #8]
 80114cc:	4699      	mov	r9, r3
 80114ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80114d0:	2200      	movs	r2, #0
 80114d2:	6072      	str	r2, [r6, #4]
 80114d4:	2204      	movs	r2, #4
 80114d6:	f102 0014 	add.w	r0, r2, #20
 80114da:	4298      	cmp	r0, r3
 80114dc:	6871      	ldr	r1, [r6, #4]
 80114de:	d953      	bls.n	8011588 <_dtoa_r+0x300>
 80114e0:	4620      	mov	r0, r4
 80114e2:	f000 fe88 	bl	80121f6 <_Balloc>
 80114e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114e8:	6030      	str	r0, [r6, #0]
 80114ea:	f1b9 0f0e 	cmp.w	r9, #14
 80114ee:	f8d3 b000 	ldr.w	fp, [r3]
 80114f2:	f200 80e6 	bhi.w	80116c2 <_dtoa_r+0x43a>
 80114f6:	2d00      	cmp	r5, #0
 80114f8:	f000 80e3 	beq.w	80116c2 <_dtoa_r+0x43a>
 80114fc:	ed9d 7b00 	vldr	d7, [sp]
 8011500:	f1ba 0f00 	cmp.w	sl, #0
 8011504:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8011508:	dd74      	ble.n	80115f4 <_dtoa_r+0x36c>
 801150a:	4a2a      	ldr	r2, [pc, #168]	; (80115b4 <_dtoa_r+0x32c>)
 801150c:	f00a 030f 	and.w	r3, sl, #15
 8011510:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8011514:	ed93 7b00 	vldr	d7, [r3]
 8011518:	ea4f 162a 	mov.w	r6, sl, asr #4
 801151c:	06f0      	lsls	r0, r6, #27
 801151e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8011522:	d565      	bpl.n	80115f0 <_dtoa_r+0x368>
 8011524:	4b24      	ldr	r3, [pc, #144]	; (80115b8 <_dtoa_r+0x330>)
 8011526:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801152a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801152e:	f7ef f9b5 	bl	800089c <__aeabi_ddiv>
 8011532:	e9cd 0100 	strd	r0, r1, [sp]
 8011536:	f006 060f 	and.w	r6, r6, #15
 801153a:	2503      	movs	r5, #3
 801153c:	4f1e      	ldr	r7, [pc, #120]	; (80115b8 <_dtoa_r+0x330>)
 801153e:	e04c      	b.n	80115da <_dtoa_r+0x352>
 8011540:	2301      	movs	r3, #1
 8011542:	930a      	str	r3, [sp, #40]	; 0x28
 8011544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011546:	4453      	add	r3, sl
 8011548:	f103 0901 	add.w	r9, r3, #1
 801154c:	9302      	str	r3, [sp, #8]
 801154e:	464b      	mov	r3, r9
 8011550:	2b01      	cmp	r3, #1
 8011552:	bfb8      	it	lt
 8011554:	2301      	movlt	r3, #1
 8011556:	e7ba      	b.n	80114ce <_dtoa_r+0x246>
 8011558:	2300      	movs	r3, #0
 801155a:	e7b2      	b.n	80114c2 <_dtoa_r+0x23a>
 801155c:	2300      	movs	r3, #0
 801155e:	e7f0      	b.n	8011542 <_dtoa_r+0x2ba>
 8011560:	2501      	movs	r5, #1
 8011562:	2300      	movs	r3, #0
 8011564:	9306      	str	r3, [sp, #24]
 8011566:	950a      	str	r5, [sp, #40]	; 0x28
 8011568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801156c:	9302      	str	r3, [sp, #8]
 801156e:	4699      	mov	r9, r3
 8011570:	2200      	movs	r2, #0
 8011572:	2312      	movs	r3, #18
 8011574:	920b      	str	r2, [sp, #44]	; 0x2c
 8011576:	e7aa      	b.n	80114ce <_dtoa_r+0x246>
 8011578:	2301      	movs	r3, #1
 801157a:	930a      	str	r3, [sp, #40]	; 0x28
 801157c:	e7f4      	b.n	8011568 <_dtoa_r+0x2e0>
 801157e:	2301      	movs	r3, #1
 8011580:	9302      	str	r3, [sp, #8]
 8011582:	4699      	mov	r9, r3
 8011584:	461a      	mov	r2, r3
 8011586:	e7f5      	b.n	8011574 <_dtoa_r+0x2ec>
 8011588:	3101      	adds	r1, #1
 801158a:	6071      	str	r1, [r6, #4]
 801158c:	0052      	lsls	r2, r2, #1
 801158e:	e7a2      	b.n	80114d6 <_dtoa_r+0x24e>
 8011590:	636f4361 	.word	0x636f4361
 8011594:	3fd287a7 	.word	0x3fd287a7
 8011598:	8b60c8b3 	.word	0x8b60c8b3
 801159c:	3fc68a28 	.word	0x3fc68a28
 80115a0:	509f79fb 	.word	0x509f79fb
 80115a4:	3fd34413 	.word	0x3fd34413
 80115a8:	7ff00000 	.word	0x7ff00000
 80115ac:	08015a7d 	.word	0x08015a7d
 80115b0:	3ff80000 	.word	0x3ff80000
 80115b4:	08015888 	.word	0x08015888
 80115b8:	08015860 	.word	0x08015860
 80115bc:	080157f7 	.word	0x080157f7
 80115c0:	07f1      	lsls	r1, r6, #31
 80115c2:	d508      	bpl.n	80115d6 <_dtoa_r+0x34e>
 80115c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80115c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80115cc:	f7ef f83c 	bl	8000648 <__aeabi_dmul>
 80115d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80115d4:	3501      	adds	r5, #1
 80115d6:	1076      	asrs	r6, r6, #1
 80115d8:	3708      	adds	r7, #8
 80115da:	2e00      	cmp	r6, #0
 80115dc:	d1f0      	bne.n	80115c0 <_dtoa_r+0x338>
 80115de:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80115e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80115e6:	f7ef f959 	bl	800089c <__aeabi_ddiv>
 80115ea:	e9cd 0100 	strd	r0, r1, [sp]
 80115ee:	e01a      	b.n	8011626 <_dtoa_r+0x39e>
 80115f0:	2502      	movs	r5, #2
 80115f2:	e7a3      	b.n	801153c <_dtoa_r+0x2b4>
 80115f4:	f000 80a0 	beq.w	8011738 <_dtoa_r+0x4b0>
 80115f8:	f1ca 0600 	rsb	r6, sl, #0
 80115fc:	4b9f      	ldr	r3, [pc, #636]	; (801187c <_dtoa_r+0x5f4>)
 80115fe:	4fa0      	ldr	r7, [pc, #640]	; (8011880 <_dtoa_r+0x5f8>)
 8011600:	f006 020f 	and.w	r2, r6, #15
 8011604:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801160c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8011610:	f7ef f81a 	bl	8000648 <__aeabi_dmul>
 8011614:	e9cd 0100 	strd	r0, r1, [sp]
 8011618:	1136      	asrs	r6, r6, #4
 801161a:	2300      	movs	r3, #0
 801161c:	2502      	movs	r5, #2
 801161e:	2e00      	cmp	r6, #0
 8011620:	d17f      	bne.n	8011722 <_dtoa_r+0x49a>
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1e1      	bne.n	80115ea <_dtoa_r+0x362>
 8011626:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011628:	2b00      	cmp	r3, #0
 801162a:	f000 8087 	beq.w	801173c <_dtoa_r+0x4b4>
 801162e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011632:	2200      	movs	r2, #0
 8011634:	4b93      	ldr	r3, [pc, #588]	; (8011884 <_dtoa_r+0x5fc>)
 8011636:	4630      	mov	r0, r6
 8011638:	4639      	mov	r1, r7
 801163a:	f7ef fa77 	bl	8000b2c <__aeabi_dcmplt>
 801163e:	2800      	cmp	r0, #0
 8011640:	d07c      	beq.n	801173c <_dtoa_r+0x4b4>
 8011642:	f1b9 0f00 	cmp.w	r9, #0
 8011646:	d079      	beq.n	801173c <_dtoa_r+0x4b4>
 8011648:	9b02      	ldr	r3, [sp, #8]
 801164a:	2b00      	cmp	r3, #0
 801164c:	dd35      	ble.n	80116ba <_dtoa_r+0x432>
 801164e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011652:	9308      	str	r3, [sp, #32]
 8011654:	4639      	mov	r1, r7
 8011656:	2200      	movs	r2, #0
 8011658:	4b8b      	ldr	r3, [pc, #556]	; (8011888 <_dtoa_r+0x600>)
 801165a:	4630      	mov	r0, r6
 801165c:	f7ee fff4 	bl	8000648 <__aeabi_dmul>
 8011660:	e9cd 0100 	strd	r0, r1, [sp]
 8011664:	9f02      	ldr	r7, [sp, #8]
 8011666:	3501      	adds	r5, #1
 8011668:	4628      	mov	r0, r5
 801166a:	f7ee ff83 	bl	8000574 <__aeabi_i2d>
 801166e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011672:	f7ee ffe9 	bl	8000648 <__aeabi_dmul>
 8011676:	2200      	movs	r2, #0
 8011678:	4b84      	ldr	r3, [pc, #528]	; (801188c <_dtoa_r+0x604>)
 801167a:	f7ee fe2f 	bl	80002dc <__adddf3>
 801167e:	4605      	mov	r5, r0
 8011680:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8011684:	2f00      	cmp	r7, #0
 8011686:	d15d      	bne.n	8011744 <_dtoa_r+0x4bc>
 8011688:	2200      	movs	r2, #0
 801168a:	4b81      	ldr	r3, [pc, #516]	; (8011890 <_dtoa_r+0x608>)
 801168c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011690:	f7ee fe22 	bl	80002d8 <__aeabi_dsub>
 8011694:	462a      	mov	r2, r5
 8011696:	4633      	mov	r3, r6
 8011698:	e9cd 0100 	strd	r0, r1, [sp]
 801169c:	f7ef fa64 	bl	8000b68 <__aeabi_dcmpgt>
 80116a0:	2800      	cmp	r0, #0
 80116a2:	f040 8288 	bne.w	8011bb6 <_dtoa_r+0x92e>
 80116a6:	462a      	mov	r2, r5
 80116a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80116ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80116b0:	f7ef fa3c 	bl	8000b2c <__aeabi_dcmplt>
 80116b4:	2800      	cmp	r0, #0
 80116b6:	f040 827c 	bne.w	8011bb2 <_dtoa_r+0x92a>
 80116ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80116be:	e9cd 2300 	strd	r2, r3, [sp]
 80116c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	f2c0 8150 	blt.w	801196a <_dtoa_r+0x6e2>
 80116ca:	f1ba 0f0e 	cmp.w	sl, #14
 80116ce:	f300 814c 	bgt.w	801196a <_dtoa_r+0x6e2>
 80116d2:	4b6a      	ldr	r3, [pc, #424]	; (801187c <_dtoa_r+0x5f4>)
 80116d4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80116d8:	ed93 7b00 	vldr	d7, [r3]
 80116dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80116de:	2b00      	cmp	r3, #0
 80116e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80116e4:	f280 80d8 	bge.w	8011898 <_dtoa_r+0x610>
 80116e8:	f1b9 0f00 	cmp.w	r9, #0
 80116ec:	f300 80d4 	bgt.w	8011898 <_dtoa_r+0x610>
 80116f0:	f040 825e 	bne.w	8011bb0 <_dtoa_r+0x928>
 80116f4:	2200      	movs	r2, #0
 80116f6:	4b66      	ldr	r3, [pc, #408]	; (8011890 <_dtoa_r+0x608>)
 80116f8:	ec51 0b17 	vmov	r0, r1, d7
 80116fc:	f7ee ffa4 	bl	8000648 <__aeabi_dmul>
 8011700:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011704:	f7ef fa26 	bl	8000b54 <__aeabi_dcmpge>
 8011708:	464f      	mov	r7, r9
 801170a:	464e      	mov	r6, r9
 801170c:	2800      	cmp	r0, #0
 801170e:	f040 8234 	bne.w	8011b7a <_dtoa_r+0x8f2>
 8011712:	2331      	movs	r3, #49	; 0x31
 8011714:	f10b 0501 	add.w	r5, fp, #1
 8011718:	f88b 3000 	strb.w	r3, [fp]
 801171c:	f10a 0a01 	add.w	sl, sl, #1
 8011720:	e22f      	b.n	8011b82 <_dtoa_r+0x8fa>
 8011722:	07f2      	lsls	r2, r6, #31
 8011724:	d505      	bpl.n	8011732 <_dtoa_r+0x4aa>
 8011726:	e9d7 2300 	ldrd	r2, r3, [r7]
 801172a:	f7ee ff8d 	bl	8000648 <__aeabi_dmul>
 801172e:	3501      	adds	r5, #1
 8011730:	2301      	movs	r3, #1
 8011732:	1076      	asrs	r6, r6, #1
 8011734:	3708      	adds	r7, #8
 8011736:	e772      	b.n	801161e <_dtoa_r+0x396>
 8011738:	2502      	movs	r5, #2
 801173a:	e774      	b.n	8011626 <_dtoa_r+0x39e>
 801173c:	f8cd a020 	str.w	sl, [sp, #32]
 8011740:	464f      	mov	r7, r9
 8011742:	e791      	b.n	8011668 <_dtoa_r+0x3e0>
 8011744:	4b4d      	ldr	r3, [pc, #308]	; (801187c <_dtoa_r+0x5f4>)
 8011746:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801174a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801174e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011750:	2b00      	cmp	r3, #0
 8011752:	d047      	beq.n	80117e4 <_dtoa_r+0x55c>
 8011754:	4602      	mov	r2, r0
 8011756:	460b      	mov	r3, r1
 8011758:	2000      	movs	r0, #0
 801175a:	494e      	ldr	r1, [pc, #312]	; (8011894 <_dtoa_r+0x60c>)
 801175c:	f7ef f89e 	bl	800089c <__aeabi_ddiv>
 8011760:	462a      	mov	r2, r5
 8011762:	4633      	mov	r3, r6
 8011764:	f7ee fdb8 	bl	80002d8 <__aeabi_dsub>
 8011768:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801176c:	465d      	mov	r5, fp
 801176e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011772:	f7ef fa19 	bl	8000ba8 <__aeabi_d2iz>
 8011776:	4606      	mov	r6, r0
 8011778:	f7ee fefc 	bl	8000574 <__aeabi_i2d>
 801177c:	4602      	mov	r2, r0
 801177e:	460b      	mov	r3, r1
 8011780:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011784:	f7ee fda8 	bl	80002d8 <__aeabi_dsub>
 8011788:	3630      	adds	r6, #48	; 0x30
 801178a:	f805 6b01 	strb.w	r6, [r5], #1
 801178e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011792:	e9cd 0100 	strd	r0, r1, [sp]
 8011796:	f7ef f9c9 	bl	8000b2c <__aeabi_dcmplt>
 801179a:	2800      	cmp	r0, #0
 801179c:	d163      	bne.n	8011866 <_dtoa_r+0x5de>
 801179e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117a2:	2000      	movs	r0, #0
 80117a4:	4937      	ldr	r1, [pc, #220]	; (8011884 <_dtoa_r+0x5fc>)
 80117a6:	f7ee fd97 	bl	80002d8 <__aeabi_dsub>
 80117aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80117ae:	f7ef f9bd 	bl	8000b2c <__aeabi_dcmplt>
 80117b2:	2800      	cmp	r0, #0
 80117b4:	f040 80b7 	bne.w	8011926 <_dtoa_r+0x69e>
 80117b8:	eba5 030b 	sub.w	r3, r5, fp
 80117bc:	429f      	cmp	r7, r3
 80117be:	f77f af7c 	ble.w	80116ba <_dtoa_r+0x432>
 80117c2:	2200      	movs	r2, #0
 80117c4:	4b30      	ldr	r3, [pc, #192]	; (8011888 <_dtoa_r+0x600>)
 80117c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80117ca:	f7ee ff3d 	bl	8000648 <__aeabi_dmul>
 80117ce:	2200      	movs	r2, #0
 80117d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80117d4:	4b2c      	ldr	r3, [pc, #176]	; (8011888 <_dtoa_r+0x600>)
 80117d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117da:	f7ee ff35 	bl	8000648 <__aeabi_dmul>
 80117de:	e9cd 0100 	strd	r0, r1, [sp]
 80117e2:	e7c4      	b.n	801176e <_dtoa_r+0x4e6>
 80117e4:	462a      	mov	r2, r5
 80117e6:	4633      	mov	r3, r6
 80117e8:	f7ee ff2e 	bl	8000648 <__aeabi_dmul>
 80117ec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80117f0:	eb0b 0507 	add.w	r5, fp, r7
 80117f4:	465e      	mov	r6, fp
 80117f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117fa:	f7ef f9d5 	bl	8000ba8 <__aeabi_d2iz>
 80117fe:	4607      	mov	r7, r0
 8011800:	f7ee feb8 	bl	8000574 <__aeabi_i2d>
 8011804:	3730      	adds	r7, #48	; 0x30
 8011806:	4602      	mov	r2, r0
 8011808:	460b      	mov	r3, r1
 801180a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801180e:	f7ee fd63 	bl	80002d8 <__aeabi_dsub>
 8011812:	f806 7b01 	strb.w	r7, [r6], #1
 8011816:	42ae      	cmp	r6, r5
 8011818:	e9cd 0100 	strd	r0, r1, [sp]
 801181c:	f04f 0200 	mov.w	r2, #0
 8011820:	d126      	bne.n	8011870 <_dtoa_r+0x5e8>
 8011822:	4b1c      	ldr	r3, [pc, #112]	; (8011894 <_dtoa_r+0x60c>)
 8011824:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011828:	f7ee fd58 	bl	80002dc <__adddf3>
 801182c:	4602      	mov	r2, r0
 801182e:	460b      	mov	r3, r1
 8011830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011834:	f7ef f998 	bl	8000b68 <__aeabi_dcmpgt>
 8011838:	2800      	cmp	r0, #0
 801183a:	d174      	bne.n	8011926 <_dtoa_r+0x69e>
 801183c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8011840:	2000      	movs	r0, #0
 8011842:	4914      	ldr	r1, [pc, #80]	; (8011894 <_dtoa_r+0x60c>)
 8011844:	f7ee fd48 	bl	80002d8 <__aeabi_dsub>
 8011848:	4602      	mov	r2, r0
 801184a:	460b      	mov	r3, r1
 801184c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011850:	f7ef f96c 	bl	8000b2c <__aeabi_dcmplt>
 8011854:	2800      	cmp	r0, #0
 8011856:	f43f af30 	beq.w	80116ba <_dtoa_r+0x432>
 801185a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801185e:	2b30      	cmp	r3, #48	; 0x30
 8011860:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011864:	d002      	beq.n	801186c <_dtoa_r+0x5e4>
 8011866:	f8dd a020 	ldr.w	sl, [sp, #32]
 801186a:	e04a      	b.n	8011902 <_dtoa_r+0x67a>
 801186c:	4615      	mov	r5, r2
 801186e:	e7f4      	b.n	801185a <_dtoa_r+0x5d2>
 8011870:	4b05      	ldr	r3, [pc, #20]	; (8011888 <_dtoa_r+0x600>)
 8011872:	f7ee fee9 	bl	8000648 <__aeabi_dmul>
 8011876:	e9cd 0100 	strd	r0, r1, [sp]
 801187a:	e7bc      	b.n	80117f6 <_dtoa_r+0x56e>
 801187c:	08015888 	.word	0x08015888
 8011880:	08015860 	.word	0x08015860
 8011884:	3ff00000 	.word	0x3ff00000
 8011888:	40240000 	.word	0x40240000
 801188c:	401c0000 	.word	0x401c0000
 8011890:	40140000 	.word	0x40140000
 8011894:	3fe00000 	.word	0x3fe00000
 8011898:	e9dd 6700 	ldrd	r6, r7, [sp]
 801189c:	465d      	mov	r5, fp
 801189e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118a2:	4630      	mov	r0, r6
 80118a4:	4639      	mov	r1, r7
 80118a6:	f7ee fff9 	bl	800089c <__aeabi_ddiv>
 80118aa:	f7ef f97d 	bl	8000ba8 <__aeabi_d2iz>
 80118ae:	4680      	mov	r8, r0
 80118b0:	f7ee fe60 	bl	8000574 <__aeabi_i2d>
 80118b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118b8:	f7ee fec6 	bl	8000648 <__aeabi_dmul>
 80118bc:	4602      	mov	r2, r0
 80118be:	460b      	mov	r3, r1
 80118c0:	4630      	mov	r0, r6
 80118c2:	4639      	mov	r1, r7
 80118c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80118c8:	f7ee fd06 	bl	80002d8 <__aeabi_dsub>
 80118cc:	f805 6b01 	strb.w	r6, [r5], #1
 80118d0:	eba5 060b 	sub.w	r6, r5, fp
 80118d4:	45b1      	cmp	r9, r6
 80118d6:	4602      	mov	r2, r0
 80118d8:	460b      	mov	r3, r1
 80118da:	d139      	bne.n	8011950 <_dtoa_r+0x6c8>
 80118dc:	f7ee fcfe 	bl	80002dc <__adddf3>
 80118e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118e4:	4606      	mov	r6, r0
 80118e6:	460f      	mov	r7, r1
 80118e8:	f7ef f93e 	bl	8000b68 <__aeabi_dcmpgt>
 80118ec:	b9c8      	cbnz	r0, 8011922 <_dtoa_r+0x69a>
 80118ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80118f2:	4630      	mov	r0, r6
 80118f4:	4639      	mov	r1, r7
 80118f6:	f7ef f90f 	bl	8000b18 <__aeabi_dcmpeq>
 80118fa:	b110      	cbz	r0, 8011902 <_dtoa_r+0x67a>
 80118fc:	f018 0f01 	tst.w	r8, #1
 8011900:	d10f      	bne.n	8011922 <_dtoa_r+0x69a>
 8011902:	9904      	ldr	r1, [sp, #16]
 8011904:	4620      	mov	r0, r4
 8011906:	f000 fcaa 	bl	801225e <_Bfree>
 801190a:	2300      	movs	r3, #0
 801190c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801190e:	702b      	strb	r3, [r5, #0]
 8011910:	f10a 0301 	add.w	r3, sl, #1
 8011914:	6013      	str	r3, [r2, #0]
 8011916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011918:	2b00      	cmp	r3, #0
 801191a:	f000 8241 	beq.w	8011da0 <_dtoa_r+0xb18>
 801191e:	601d      	str	r5, [r3, #0]
 8011920:	e23e      	b.n	8011da0 <_dtoa_r+0xb18>
 8011922:	f8cd a020 	str.w	sl, [sp, #32]
 8011926:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801192a:	2a39      	cmp	r2, #57	; 0x39
 801192c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8011930:	d108      	bne.n	8011944 <_dtoa_r+0x6bc>
 8011932:	459b      	cmp	fp, r3
 8011934:	d10a      	bne.n	801194c <_dtoa_r+0x6c4>
 8011936:	9b08      	ldr	r3, [sp, #32]
 8011938:	3301      	adds	r3, #1
 801193a:	9308      	str	r3, [sp, #32]
 801193c:	2330      	movs	r3, #48	; 0x30
 801193e:	f88b 3000 	strb.w	r3, [fp]
 8011942:	465b      	mov	r3, fp
 8011944:	781a      	ldrb	r2, [r3, #0]
 8011946:	3201      	adds	r2, #1
 8011948:	701a      	strb	r2, [r3, #0]
 801194a:	e78c      	b.n	8011866 <_dtoa_r+0x5de>
 801194c:	461d      	mov	r5, r3
 801194e:	e7ea      	b.n	8011926 <_dtoa_r+0x69e>
 8011950:	2200      	movs	r2, #0
 8011952:	4b9b      	ldr	r3, [pc, #620]	; (8011bc0 <_dtoa_r+0x938>)
 8011954:	f7ee fe78 	bl	8000648 <__aeabi_dmul>
 8011958:	2200      	movs	r2, #0
 801195a:	2300      	movs	r3, #0
 801195c:	4606      	mov	r6, r0
 801195e:	460f      	mov	r7, r1
 8011960:	f7ef f8da 	bl	8000b18 <__aeabi_dcmpeq>
 8011964:	2800      	cmp	r0, #0
 8011966:	d09a      	beq.n	801189e <_dtoa_r+0x616>
 8011968:	e7cb      	b.n	8011902 <_dtoa_r+0x67a>
 801196a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801196c:	2a00      	cmp	r2, #0
 801196e:	f000 808b 	beq.w	8011a88 <_dtoa_r+0x800>
 8011972:	9a06      	ldr	r2, [sp, #24]
 8011974:	2a01      	cmp	r2, #1
 8011976:	dc6e      	bgt.n	8011a56 <_dtoa_r+0x7ce>
 8011978:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801197a:	2a00      	cmp	r2, #0
 801197c:	d067      	beq.n	8011a4e <_dtoa_r+0x7c6>
 801197e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8011982:	9f07      	ldr	r7, [sp, #28]
 8011984:	9d05      	ldr	r5, [sp, #20]
 8011986:	9a05      	ldr	r2, [sp, #20]
 8011988:	2101      	movs	r1, #1
 801198a:	441a      	add	r2, r3
 801198c:	4620      	mov	r0, r4
 801198e:	9205      	str	r2, [sp, #20]
 8011990:	4498      	add	r8, r3
 8011992:	f000 fd04 	bl	801239e <__i2b>
 8011996:	4606      	mov	r6, r0
 8011998:	2d00      	cmp	r5, #0
 801199a:	dd0c      	ble.n	80119b6 <_dtoa_r+0x72e>
 801199c:	f1b8 0f00 	cmp.w	r8, #0
 80119a0:	dd09      	ble.n	80119b6 <_dtoa_r+0x72e>
 80119a2:	4545      	cmp	r5, r8
 80119a4:	9a05      	ldr	r2, [sp, #20]
 80119a6:	462b      	mov	r3, r5
 80119a8:	bfa8      	it	ge
 80119aa:	4643      	movge	r3, r8
 80119ac:	1ad2      	subs	r2, r2, r3
 80119ae:	9205      	str	r2, [sp, #20]
 80119b0:	1aed      	subs	r5, r5, r3
 80119b2:	eba8 0803 	sub.w	r8, r8, r3
 80119b6:	9b07      	ldr	r3, [sp, #28]
 80119b8:	b1eb      	cbz	r3, 80119f6 <_dtoa_r+0x76e>
 80119ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d067      	beq.n	8011a90 <_dtoa_r+0x808>
 80119c0:	b18f      	cbz	r7, 80119e6 <_dtoa_r+0x75e>
 80119c2:	4631      	mov	r1, r6
 80119c4:	463a      	mov	r2, r7
 80119c6:	4620      	mov	r0, r4
 80119c8:	f000 fd88 	bl	80124dc <__pow5mult>
 80119cc:	9a04      	ldr	r2, [sp, #16]
 80119ce:	4601      	mov	r1, r0
 80119d0:	4606      	mov	r6, r0
 80119d2:	4620      	mov	r0, r4
 80119d4:	f000 fcec 	bl	80123b0 <__multiply>
 80119d8:	9904      	ldr	r1, [sp, #16]
 80119da:	9008      	str	r0, [sp, #32]
 80119dc:	4620      	mov	r0, r4
 80119de:	f000 fc3e 	bl	801225e <_Bfree>
 80119e2:	9b08      	ldr	r3, [sp, #32]
 80119e4:	9304      	str	r3, [sp, #16]
 80119e6:	9b07      	ldr	r3, [sp, #28]
 80119e8:	1bda      	subs	r2, r3, r7
 80119ea:	d004      	beq.n	80119f6 <_dtoa_r+0x76e>
 80119ec:	9904      	ldr	r1, [sp, #16]
 80119ee:	4620      	mov	r0, r4
 80119f0:	f000 fd74 	bl	80124dc <__pow5mult>
 80119f4:	9004      	str	r0, [sp, #16]
 80119f6:	2101      	movs	r1, #1
 80119f8:	4620      	mov	r0, r4
 80119fa:	f000 fcd0 	bl	801239e <__i2b>
 80119fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a00:	4607      	mov	r7, r0
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	f000 81d0 	beq.w	8011da8 <_dtoa_r+0xb20>
 8011a08:	461a      	mov	r2, r3
 8011a0a:	4601      	mov	r1, r0
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	f000 fd65 	bl	80124dc <__pow5mult>
 8011a12:	9b06      	ldr	r3, [sp, #24]
 8011a14:	2b01      	cmp	r3, #1
 8011a16:	4607      	mov	r7, r0
 8011a18:	dc40      	bgt.n	8011a9c <_dtoa_r+0x814>
 8011a1a:	9b00      	ldr	r3, [sp, #0]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d139      	bne.n	8011a94 <_dtoa_r+0x80c>
 8011a20:	9b01      	ldr	r3, [sp, #4]
 8011a22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d136      	bne.n	8011a98 <_dtoa_r+0x810>
 8011a2a:	9b01      	ldr	r3, [sp, #4]
 8011a2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011a30:	0d1b      	lsrs	r3, r3, #20
 8011a32:	051b      	lsls	r3, r3, #20
 8011a34:	b12b      	cbz	r3, 8011a42 <_dtoa_r+0x7ba>
 8011a36:	9b05      	ldr	r3, [sp, #20]
 8011a38:	3301      	adds	r3, #1
 8011a3a:	9305      	str	r3, [sp, #20]
 8011a3c:	f108 0801 	add.w	r8, r8, #1
 8011a40:	2301      	movs	r3, #1
 8011a42:	9307      	str	r3, [sp, #28]
 8011a44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d12a      	bne.n	8011aa0 <_dtoa_r+0x818>
 8011a4a:	2001      	movs	r0, #1
 8011a4c:	e030      	b.n	8011ab0 <_dtoa_r+0x828>
 8011a4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011a50:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8011a54:	e795      	b.n	8011982 <_dtoa_r+0x6fa>
 8011a56:	9b07      	ldr	r3, [sp, #28]
 8011a58:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8011a5c:	42bb      	cmp	r3, r7
 8011a5e:	bfbf      	itttt	lt
 8011a60:	9b07      	ldrlt	r3, [sp, #28]
 8011a62:	9707      	strlt	r7, [sp, #28]
 8011a64:	1afa      	sublt	r2, r7, r3
 8011a66:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8011a68:	bfbb      	ittet	lt
 8011a6a:	189b      	addlt	r3, r3, r2
 8011a6c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8011a6e:	1bdf      	subge	r7, r3, r7
 8011a70:	2700      	movlt	r7, #0
 8011a72:	f1b9 0f00 	cmp.w	r9, #0
 8011a76:	bfb5      	itete	lt
 8011a78:	9b05      	ldrlt	r3, [sp, #20]
 8011a7a:	9d05      	ldrge	r5, [sp, #20]
 8011a7c:	eba3 0509 	sublt.w	r5, r3, r9
 8011a80:	464b      	movge	r3, r9
 8011a82:	bfb8      	it	lt
 8011a84:	2300      	movlt	r3, #0
 8011a86:	e77e      	b.n	8011986 <_dtoa_r+0x6fe>
 8011a88:	9f07      	ldr	r7, [sp, #28]
 8011a8a:	9d05      	ldr	r5, [sp, #20]
 8011a8c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011a8e:	e783      	b.n	8011998 <_dtoa_r+0x710>
 8011a90:	9a07      	ldr	r2, [sp, #28]
 8011a92:	e7ab      	b.n	80119ec <_dtoa_r+0x764>
 8011a94:	2300      	movs	r3, #0
 8011a96:	e7d4      	b.n	8011a42 <_dtoa_r+0x7ba>
 8011a98:	9b00      	ldr	r3, [sp, #0]
 8011a9a:	e7d2      	b.n	8011a42 <_dtoa_r+0x7ba>
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	9307      	str	r3, [sp, #28]
 8011aa0:	693b      	ldr	r3, [r7, #16]
 8011aa2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8011aa6:	6918      	ldr	r0, [r3, #16]
 8011aa8:	f000 fc2b 	bl	8012302 <__hi0bits>
 8011aac:	f1c0 0020 	rsb	r0, r0, #32
 8011ab0:	4440      	add	r0, r8
 8011ab2:	f010 001f 	ands.w	r0, r0, #31
 8011ab6:	d047      	beq.n	8011b48 <_dtoa_r+0x8c0>
 8011ab8:	f1c0 0320 	rsb	r3, r0, #32
 8011abc:	2b04      	cmp	r3, #4
 8011abe:	dd3b      	ble.n	8011b38 <_dtoa_r+0x8b0>
 8011ac0:	9b05      	ldr	r3, [sp, #20]
 8011ac2:	f1c0 001c 	rsb	r0, r0, #28
 8011ac6:	4403      	add	r3, r0
 8011ac8:	9305      	str	r3, [sp, #20]
 8011aca:	4405      	add	r5, r0
 8011acc:	4480      	add	r8, r0
 8011ace:	9b05      	ldr	r3, [sp, #20]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	dd05      	ble.n	8011ae0 <_dtoa_r+0x858>
 8011ad4:	461a      	mov	r2, r3
 8011ad6:	9904      	ldr	r1, [sp, #16]
 8011ad8:	4620      	mov	r0, r4
 8011ada:	f000 fd4d 	bl	8012578 <__lshift>
 8011ade:	9004      	str	r0, [sp, #16]
 8011ae0:	f1b8 0f00 	cmp.w	r8, #0
 8011ae4:	dd05      	ble.n	8011af2 <_dtoa_r+0x86a>
 8011ae6:	4639      	mov	r1, r7
 8011ae8:	4642      	mov	r2, r8
 8011aea:	4620      	mov	r0, r4
 8011aec:	f000 fd44 	bl	8012578 <__lshift>
 8011af0:	4607      	mov	r7, r0
 8011af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011af4:	b353      	cbz	r3, 8011b4c <_dtoa_r+0x8c4>
 8011af6:	4639      	mov	r1, r7
 8011af8:	9804      	ldr	r0, [sp, #16]
 8011afa:	f000 fd91 	bl	8012620 <__mcmp>
 8011afe:	2800      	cmp	r0, #0
 8011b00:	da24      	bge.n	8011b4c <_dtoa_r+0x8c4>
 8011b02:	2300      	movs	r3, #0
 8011b04:	220a      	movs	r2, #10
 8011b06:	9904      	ldr	r1, [sp, #16]
 8011b08:	4620      	mov	r0, r4
 8011b0a:	f000 fbbf 	bl	801228c <__multadd>
 8011b0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b10:	9004      	str	r0, [sp, #16]
 8011b12:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	f000 814d 	beq.w	8011db6 <_dtoa_r+0xb2e>
 8011b1c:	2300      	movs	r3, #0
 8011b1e:	4631      	mov	r1, r6
 8011b20:	220a      	movs	r2, #10
 8011b22:	4620      	mov	r0, r4
 8011b24:	f000 fbb2 	bl	801228c <__multadd>
 8011b28:	9b02      	ldr	r3, [sp, #8]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	4606      	mov	r6, r0
 8011b2e:	dc4f      	bgt.n	8011bd0 <_dtoa_r+0x948>
 8011b30:	9b06      	ldr	r3, [sp, #24]
 8011b32:	2b02      	cmp	r3, #2
 8011b34:	dd4c      	ble.n	8011bd0 <_dtoa_r+0x948>
 8011b36:	e011      	b.n	8011b5c <_dtoa_r+0x8d4>
 8011b38:	d0c9      	beq.n	8011ace <_dtoa_r+0x846>
 8011b3a:	9a05      	ldr	r2, [sp, #20]
 8011b3c:	331c      	adds	r3, #28
 8011b3e:	441a      	add	r2, r3
 8011b40:	9205      	str	r2, [sp, #20]
 8011b42:	441d      	add	r5, r3
 8011b44:	4498      	add	r8, r3
 8011b46:	e7c2      	b.n	8011ace <_dtoa_r+0x846>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	e7f6      	b.n	8011b3a <_dtoa_r+0x8b2>
 8011b4c:	f1b9 0f00 	cmp.w	r9, #0
 8011b50:	dc38      	bgt.n	8011bc4 <_dtoa_r+0x93c>
 8011b52:	9b06      	ldr	r3, [sp, #24]
 8011b54:	2b02      	cmp	r3, #2
 8011b56:	dd35      	ble.n	8011bc4 <_dtoa_r+0x93c>
 8011b58:	f8cd 9008 	str.w	r9, [sp, #8]
 8011b5c:	9b02      	ldr	r3, [sp, #8]
 8011b5e:	b963      	cbnz	r3, 8011b7a <_dtoa_r+0x8f2>
 8011b60:	4639      	mov	r1, r7
 8011b62:	2205      	movs	r2, #5
 8011b64:	4620      	mov	r0, r4
 8011b66:	f000 fb91 	bl	801228c <__multadd>
 8011b6a:	4601      	mov	r1, r0
 8011b6c:	4607      	mov	r7, r0
 8011b6e:	9804      	ldr	r0, [sp, #16]
 8011b70:	f000 fd56 	bl	8012620 <__mcmp>
 8011b74:	2800      	cmp	r0, #0
 8011b76:	f73f adcc 	bgt.w	8011712 <_dtoa_r+0x48a>
 8011b7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b7c:	465d      	mov	r5, fp
 8011b7e:	ea6f 0a03 	mvn.w	sl, r3
 8011b82:	f04f 0900 	mov.w	r9, #0
 8011b86:	4639      	mov	r1, r7
 8011b88:	4620      	mov	r0, r4
 8011b8a:	f000 fb68 	bl	801225e <_Bfree>
 8011b8e:	2e00      	cmp	r6, #0
 8011b90:	f43f aeb7 	beq.w	8011902 <_dtoa_r+0x67a>
 8011b94:	f1b9 0f00 	cmp.w	r9, #0
 8011b98:	d005      	beq.n	8011ba6 <_dtoa_r+0x91e>
 8011b9a:	45b1      	cmp	r9, r6
 8011b9c:	d003      	beq.n	8011ba6 <_dtoa_r+0x91e>
 8011b9e:	4649      	mov	r1, r9
 8011ba0:	4620      	mov	r0, r4
 8011ba2:	f000 fb5c 	bl	801225e <_Bfree>
 8011ba6:	4631      	mov	r1, r6
 8011ba8:	4620      	mov	r0, r4
 8011baa:	f000 fb58 	bl	801225e <_Bfree>
 8011bae:	e6a8      	b.n	8011902 <_dtoa_r+0x67a>
 8011bb0:	2700      	movs	r7, #0
 8011bb2:	463e      	mov	r6, r7
 8011bb4:	e7e1      	b.n	8011b7a <_dtoa_r+0x8f2>
 8011bb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8011bba:	463e      	mov	r6, r7
 8011bbc:	e5a9      	b.n	8011712 <_dtoa_r+0x48a>
 8011bbe:	bf00      	nop
 8011bc0:	40240000 	.word	0x40240000
 8011bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011bc6:	f8cd 9008 	str.w	r9, [sp, #8]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	f000 80fa 	beq.w	8011dc4 <_dtoa_r+0xb3c>
 8011bd0:	2d00      	cmp	r5, #0
 8011bd2:	dd05      	ble.n	8011be0 <_dtoa_r+0x958>
 8011bd4:	4631      	mov	r1, r6
 8011bd6:	462a      	mov	r2, r5
 8011bd8:	4620      	mov	r0, r4
 8011bda:	f000 fccd 	bl	8012578 <__lshift>
 8011bde:	4606      	mov	r6, r0
 8011be0:	9b07      	ldr	r3, [sp, #28]
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d04c      	beq.n	8011c80 <_dtoa_r+0x9f8>
 8011be6:	6871      	ldr	r1, [r6, #4]
 8011be8:	4620      	mov	r0, r4
 8011bea:	f000 fb04 	bl	80121f6 <_Balloc>
 8011bee:	6932      	ldr	r2, [r6, #16]
 8011bf0:	3202      	adds	r2, #2
 8011bf2:	4605      	mov	r5, r0
 8011bf4:	0092      	lsls	r2, r2, #2
 8011bf6:	f106 010c 	add.w	r1, r6, #12
 8011bfa:	300c      	adds	r0, #12
 8011bfc:	f000 faf0 	bl	80121e0 <memcpy>
 8011c00:	2201      	movs	r2, #1
 8011c02:	4629      	mov	r1, r5
 8011c04:	4620      	mov	r0, r4
 8011c06:	f000 fcb7 	bl	8012578 <__lshift>
 8011c0a:	9b00      	ldr	r3, [sp, #0]
 8011c0c:	f8cd b014 	str.w	fp, [sp, #20]
 8011c10:	f003 0301 	and.w	r3, r3, #1
 8011c14:	46b1      	mov	r9, r6
 8011c16:	9307      	str	r3, [sp, #28]
 8011c18:	4606      	mov	r6, r0
 8011c1a:	4639      	mov	r1, r7
 8011c1c:	9804      	ldr	r0, [sp, #16]
 8011c1e:	f7ff faa5 	bl	801116c <quorem>
 8011c22:	4649      	mov	r1, r9
 8011c24:	4605      	mov	r5, r0
 8011c26:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011c2a:	9804      	ldr	r0, [sp, #16]
 8011c2c:	f000 fcf8 	bl	8012620 <__mcmp>
 8011c30:	4632      	mov	r2, r6
 8011c32:	9000      	str	r0, [sp, #0]
 8011c34:	4639      	mov	r1, r7
 8011c36:	4620      	mov	r0, r4
 8011c38:	f000 fd0c 	bl	8012654 <__mdiff>
 8011c3c:	68c3      	ldr	r3, [r0, #12]
 8011c3e:	4602      	mov	r2, r0
 8011c40:	bb03      	cbnz	r3, 8011c84 <_dtoa_r+0x9fc>
 8011c42:	4601      	mov	r1, r0
 8011c44:	9008      	str	r0, [sp, #32]
 8011c46:	9804      	ldr	r0, [sp, #16]
 8011c48:	f000 fcea 	bl	8012620 <__mcmp>
 8011c4c:	9a08      	ldr	r2, [sp, #32]
 8011c4e:	4603      	mov	r3, r0
 8011c50:	4611      	mov	r1, r2
 8011c52:	4620      	mov	r0, r4
 8011c54:	9308      	str	r3, [sp, #32]
 8011c56:	f000 fb02 	bl	801225e <_Bfree>
 8011c5a:	9b08      	ldr	r3, [sp, #32]
 8011c5c:	b9a3      	cbnz	r3, 8011c88 <_dtoa_r+0xa00>
 8011c5e:	9a06      	ldr	r2, [sp, #24]
 8011c60:	b992      	cbnz	r2, 8011c88 <_dtoa_r+0xa00>
 8011c62:	9a07      	ldr	r2, [sp, #28]
 8011c64:	b982      	cbnz	r2, 8011c88 <_dtoa_r+0xa00>
 8011c66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011c6a:	d029      	beq.n	8011cc0 <_dtoa_r+0xa38>
 8011c6c:	9b00      	ldr	r3, [sp, #0]
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	dd01      	ble.n	8011c76 <_dtoa_r+0x9ee>
 8011c72:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8011c76:	9b05      	ldr	r3, [sp, #20]
 8011c78:	1c5d      	adds	r5, r3, #1
 8011c7a:	f883 8000 	strb.w	r8, [r3]
 8011c7e:	e782      	b.n	8011b86 <_dtoa_r+0x8fe>
 8011c80:	4630      	mov	r0, r6
 8011c82:	e7c2      	b.n	8011c0a <_dtoa_r+0x982>
 8011c84:	2301      	movs	r3, #1
 8011c86:	e7e3      	b.n	8011c50 <_dtoa_r+0x9c8>
 8011c88:	9a00      	ldr	r2, [sp, #0]
 8011c8a:	2a00      	cmp	r2, #0
 8011c8c:	db04      	blt.n	8011c98 <_dtoa_r+0xa10>
 8011c8e:	d125      	bne.n	8011cdc <_dtoa_r+0xa54>
 8011c90:	9a06      	ldr	r2, [sp, #24]
 8011c92:	bb1a      	cbnz	r2, 8011cdc <_dtoa_r+0xa54>
 8011c94:	9a07      	ldr	r2, [sp, #28]
 8011c96:	bb0a      	cbnz	r2, 8011cdc <_dtoa_r+0xa54>
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	ddec      	ble.n	8011c76 <_dtoa_r+0x9ee>
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	9904      	ldr	r1, [sp, #16]
 8011ca0:	4620      	mov	r0, r4
 8011ca2:	f000 fc69 	bl	8012578 <__lshift>
 8011ca6:	4639      	mov	r1, r7
 8011ca8:	9004      	str	r0, [sp, #16]
 8011caa:	f000 fcb9 	bl	8012620 <__mcmp>
 8011cae:	2800      	cmp	r0, #0
 8011cb0:	dc03      	bgt.n	8011cba <_dtoa_r+0xa32>
 8011cb2:	d1e0      	bne.n	8011c76 <_dtoa_r+0x9ee>
 8011cb4:	f018 0f01 	tst.w	r8, #1
 8011cb8:	d0dd      	beq.n	8011c76 <_dtoa_r+0x9ee>
 8011cba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011cbe:	d1d8      	bne.n	8011c72 <_dtoa_r+0x9ea>
 8011cc0:	9b05      	ldr	r3, [sp, #20]
 8011cc2:	9a05      	ldr	r2, [sp, #20]
 8011cc4:	1c5d      	adds	r5, r3, #1
 8011cc6:	2339      	movs	r3, #57	; 0x39
 8011cc8:	7013      	strb	r3, [r2, #0]
 8011cca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011cce:	2b39      	cmp	r3, #57	; 0x39
 8011cd0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011cd4:	d04f      	beq.n	8011d76 <_dtoa_r+0xaee>
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	7013      	strb	r3, [r2, #0]
 8011cda:	e754      	b.n	8011b86 <_dtoa_r+0x8fe>
 8011cdc:	9a05      	ldr	r2, [sp, #20]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	f102 0501 	add.w	r5, r2, #1
 8011ce4:	dd06      	ble.n	8011cf4 <_dtoa_r+0xa6c>
 8011ce6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8011cea:	d0e9      	beq.n	8011cc0 <_dtoa_r+0xa38>
 8011cec:	f108 0801 	add.w	r8, r8, #1
 8011cf0:	9b05      	ldr	r3, [sp, #20]
 8011cf2:	e7c2      	b.n	8011c7a <_dtoa_r+0x9f2>
 8011cf4:	9a02      	ldr	r2, [sp, #8]
 8011cf6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8011cfa:	eba5 030b 	sub.w	r3, r5, fp
 8011cfe:	4293      	cmp	r3, r2
 8011d00:	d021      	beq.n	8011d46 <_dtoa_r+0xabe>
 8011d02:	2300      	movs	r3, #0
 8011d04:	220a      	movs	r2, #10
 8011d06:	9904      	ldr	r1, [sp, #16]
 8011d08:	4620      	mov	r0, r4
 8011d0a:	f000 fabf 	bl	801228c <__multadd>
 8011d0e:	45b1      	cmp	r9, r6
 8011d10:	9004      	str	r0, [sp, #16]
 8011d12:	f04f 0300 	mov.w	r3, #0
 8011d16:	f04f 020a 	mov.w	r2, #10
 8011d1a:	4649      	mov	r1, r9
 8011d1c:	4620      	mov	r0, r4
 8011d1e:	d105      	bne.n	8011d2c <_dtoa_r+0xaa4>
 8011d20:	f000 fab4 	bl	801228c <__multadd>
 8011d24:	4681      	mov	r9, r0
 8011d26:	4606      	mov	r6, r0
 8011d28:	9505      	str	r5, [sp, #20]
 8011d2a:	e776      	b.n	8011c1a <_dtoa_r+0x992>
 8011d2c:	f000 faae 	bl	801228c <__multadd>
 8011d30:	4631      	mov	r1, r6
 8011d32:	4681      	mov	r9, r0
 8011d34:	2300      	movs	r3, #0
 8011d36:	220a      	movs	r2, #10
 8011d38:	4620      	mov	r0, r4
 8011d3a:	f000 faa7 	bl	801228c <__multadd>
 8011d3e:	4606      	mov	r6, r0
 8011d40:	e7f2      	b.n	8011d28 <_dtoa_r+0xaa0>
 8011d42:	f04f 0900 	mov.w	r9, #0
 8011d46:	2201      	movs	r2, #1
 8011d48:	9904      	ldr	r1, [sp, #16]
 8011d4a:	4620      	mov	r0, r4
 8011d4c:	f000 fc14 	bl	8012578 <__lshift>
 8011d50:	4639      	mov	r1, r7
 8011d52:	9004      	str	r0, [sp, #16]
 8011d54:	f000 fc64 	bl	8012620 <__mcmp>
 8011d58:	2800      	cmp	r0, #0
 8011d5a:	dcb6      	bgt.n	8011cca <_dtoa_r+0xa42>
 8011d5c:	d102      	bne.n	8011d64 <_dtoa_r+0xadc>
 8011d5e:	f018 0f01 	tst.w	r8, #1
 8011d62:	d1b2      	bne.n	8011cca <_dtoa_r+0xa42>
 8011d64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8011d68:	2b30      	cmp	r3, #48	; 0x30
 8011d6a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8011d6e:	f47f af0a 	bne.w	8011b86 <_dtoa_r+0x8fe>
 8011d72:	4615      	mov	r5, r2
 8011d74:	e7f6      	b.n	8011d64 <_dtoa_r+0xadc>
 8011d76:	4593      	cmp	fp, r2
 8011d78:	d105      	bne.n	8011d86 <_dtoa_r+0xafe>
 8011d7a:	2331      	movs	r3, #49	; 0x31
 8011d7c:	f10a 0a01 	add.w	sl, sl, #1
 8011d80:	f88b 3000 	strb.w	r3, [fp]
 8011d84:	e6ff      	b.n	8011b86 <_dtoa_r+0x8fe>
 8011d86:	4615      	mov	r5, r2
 8011d88:	e79f      	b.n	8011cca <_dtoa_r+0xa42>
 8011d8a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8011df0 <_dtoa_r+0xb68>
 8011d8e:	e007      	b.n	8011da0 <_dtoa_r+0xb18>
 8011d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011d92:	f8df b060 	ldr.w	fp, [pc, #96]	; 8011df4 <_dtoa_r+0xb6c>
 8011d96:	b11b      	cbz	r3, 8011da0 <_dtoa_r+0xb18>
 8011d98:	f10b 0308 	add.w	r3, fp, #8
 8011d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011d9e:	6013      	str	r3, [r2, #0]
 8011da0:	4658      	mov	r0, fp
 8011da2:	b017      	add	sp, #92	; 0x5c
 8011da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011da8:	9b06      	ldr	r3, [sp, #24]
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	f77f ae35 	ble.w	8011a1a <_dtoa_r+0x792>
 8011db0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011db2:	9307      	str	r3, [sp, #28]
 8011db4:	e649      	b.n	8011a4a <_dtoa_r+0x7c2>
 8011db6:	9b02      	ldr	r3, [sp, #8]
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	dc03      	bgt.n	8011dc4 <_dtoa_r+0xb3c>
 8011dbc:	9b06      	ldr	r3, [sp, #24]
 8011dbe:	2b02      	cmp	r3, #2
 8011dc0:	f73f aecc 	bgt.w	8011b5c <_dtoa_r+0x8d4>
 8011dc4:	465d      	mov	r5, fp
 8011dc6:	4639      	mov	r1, r7
 8011dc8:	9804      	ldr	r0, [sp, #16]
 8011dca:	f7ff f9cf 	bl	801116c <quorem>
 8011dce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8011dd2:	f805 8b01 	strb.w	r8, [r5], #1
 8011dd6:	9a02      	ldr	r2, [sp, #8]
 8011dd8:	eba5 030b 	sub.w	r3, r5, fp
 8011ddc:	429a      	cmp	r2, r3
 8011dde:	ddb0      	ble.n	8011d42 <_dtoa_r+0xaba>
 8011de0:	2300      	movs	r3, #0
 8011de2:	220a      	movs	r2, #10
 8011de4:	9904      	ldr	r1, [sp, #16]
 8011de6:	4620      	mov	r0, r4
 8011de8:	f000 fa50 	bl	801228c <__multadd>
 8011dec:	9004      	str	r0, [sp, #16]
 8011dee:	e7ea      	b.n	8011dc6 <_dtoa_r+0xb3e>
 8011df0:	08015a7c 	.word	0x08015a7c
 8011df4:	080157ee 	.word	0x080157ee

08011df8 <__sflush_r>:
 8011df8:	898a      	ldrh	r2, [r1, #12]
 8011dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dfe:	4605      	mov	r5, r0
 8011e00:	0710      	lsls	r0, r2, #28
 8011e02:	460c      	mov	r4, r1
 8011e04:	d458      	bmi.n	8011eb8 <__sflush_r+0xc0>
 8011e06:	684b      	ldr	r3, [r1, #4]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	dc05      	bgt.n	8011e18 <__sflush_r+0x20>
 8011e0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	dc02      	bgt.n	8011e18 <__sflush_r+0x20>
 8011e12:	2000      	movs	r0, #0
 8011e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e1a:	2e00      	cmp	r6, #0
 8011e1c:	d0f9      	beq.n	8011e12 <__sflush_r+0x1a>
 8011e1e:	2300      	movs	r3, #0
 8011e20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011e24:	682f      	ldr	r7, [r5, #0]
 8011e26:	6a21      	ldr	r1, [r4, #32]
 8011e28:	602b      	str	r3, [r5, #0]
 8011e2a:	d032      	beq.n	8011e92 <__sflush_r+0x9a>
 8011e2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011e2e:	89a3      	ldrh	r3, [r4, #12]
 8011e30:	075a      	lsls	r2, r3, #29
 8011e32:	d505      	bpl.n	8011e40 <__sflush_r+0x48>
 8011e34:	6863      	ldr	r3, [r4, #4]
 8011e36:	1ac0      	subs	r0, r0, r3
 8011e38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011e3a:	b10b      	cbz	r3, 8011e40 <__sflush_r+0x48>
 8011e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011e3e:	1ac0      	subs	r0, r0, r3
 8011e40:	2300      	movs	r3, #0
 8011e42:	4602      	mov	r2, r0
 8011e44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011e46:	6a21      	ldr	r1, [r4, #32]
 8011e48:	4628      	mov	r0, r5
 8011e4a:	47b0      	blx	r6
 8011e4c:	1c43      	adds	r3, r0, #1
 8011e4e:	89a3      	ldrh	r3, [r4, #12]
 8011e50:	d106      	bne.n	8011e60 <__sflush_r+0x68>
 8011e52:	6829      	ldr	r1, [r5, #0]
 8011e54:	291d      	cmp	r1, #29
 8011e56:	d848      	bhi.n	8011eea <__sflush_r+0xf2>
 8011e58:	4a29      	ldr	r2, [pc, #164]	; (8011f00 <__sflush_r+0x108>)
 8011e5a:	40ca      	lsrs	r2, r1
 8011e5c:	07d6      	lsls	r6, r2, #31
 8011e5e:	d544      	bpl.n	8011eea <__sflush_r+0xf2>
 8011e60:	2200      	movs	r2, #0
 8011e62:	6062      	str	r2, [r4, #4]
 8011e64:	04d9      	lsls	r1, r3, #19
 8011e66:	6922      	ldr	r2, [r4, #16]
 8011e68:	6022      	str	r2, [r4, #0]
 8011e6a:	d504      	bpl.n	8011e76 <__sflush_r+0x7e>
 8011e6c:	1c42      	adds	r2, r0, #1
 8011e6e:	d101      	bne.n	8011e74 <__sflush_r+0x7c>
 8011e70:	682b      	ldr	r3, [r5, #0]
 8011e72:	b903      	cbnz	r3, 8011e76 <__sflush_r+0x7e>
 8011e74:	6560      	str	r0, [r4, #84]	; 0x54
 8011e76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011e78:	602f      	str	r7, [r5, #0]
 8011e7a:	2900      	cmp	r1, #0
 8011e7c:	d0c9      	beq.n	8011e12 <__sflush_r+0x1a>
 8011e7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011e82:	4299      	cmp	r1, r3
 8011e84:	d002      	beq.n	8011e8c <__sflush_r+0x94>
 8011e86:	4628      	mov	r0, r5
 8011e88:	f000 fc9e 	bl	80127c8 <_free_r>
 8011e8c:	2000      	movs	r0, #0
 8011e8e:	6360      	str	r0, [r4, #52]	; 0x34
 8011e90:	e7c0      	b.n	8011e14 <__sflush_r+0x1c>
 8011e92:	2301      	movs	r3, #1
 8011e94:	4628      	mov	r0, r5
 8011e96:	47b0      	blx	r6
 8011e98:	1c41      	adds	r1, r0, #1
 8011e9a:	d1c8      	bne.n	8011e2e <__sflush_r+0x36>
 8011e9c:	682b      	ldr	r3, [r5, #0]
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d0c5      	beq.n	8011e2e <__sflush_r+0x36>
 8011ea2:	2b1d      	cmp	r3, #29
 8011ea4:	d001      	beq.n	8011eaa <__sflush_r+0xb2>
 8011ea6:	2b16      	cmp	r3, #22
 8011ea8:	d101      	bne.n	8011eae <__sflush_r+0xb6>
 8011eaa:	602f      	str	r7, [r5, #0]
 8011eac:	e7b1      	b.n	8011e12 <__sflush_r+0x1a>
 8011eae:	89a3      	ldrh	r3, [r4, #12]
 8011eb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb4:	81a3      	strh	r3, [r4, #12]
 8011eb6:	e7ad      	b.n	8011e14 <__sflush_r+0x1c>
 8011eb8:	690f      	ldr	r7, [r1, #16]
 8011eba:	2f00      	cmp	r7, #0
 8011ebc:	d0a9      	beq.n	8011e12 <__sflush_r+0x1a>
 8011ebe:	0793      	lsls	r3, r2, #30
 8011ec0:	680e      	ldr	r6, [r1, #0]
 8011ec2:	bf08      	it	eq
 8011ec4:	694b      	ldreq	r3, [r1, #20]
 8011ec6:	600f      	str	r7, [r1, #0]
 8011ec8:	bf18      	it	ne
 8011eca:	2300      	movne	r3, #0
 8011ecc:	eba6 0807 	sub.w	r8, r6, r7
 8011ed0:	608b      	str	r3, [r1, #8]
 8011ed2:	f1b8 0f00 	cmp.w	r8, #0
 8011ed6:	dd9c      	ble.n	8011e12 <__sflush_r+0x1a>
 8011ed8:	4643      	mov	r3, r8
 8011eda:	463a      	mov	r2, r7
 8011edc:	6a21      	ldr	r1, [r4, #32]
 8011ede:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011ee0:	4628      	mov	r0, r5
 8011ee2:	47b0      	blx	r6
 8011ee4:	2800      	cmp	r0, #0
 8011ee6:	dc06      	bgt.n	8011ef6 <__sflush_r+0xfe>
 8011ee8:	89a3      	ldrh	r3, [r4, #12]
 8011eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eee:	81a3      	strh	r3, [r4, #12]
 8011ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ef4:	e78e      	b.n	8011e14 <__sflush_r+0x1c>
 8011ef6:	4407      	add	r7, r0
 8011ef8:	eba8 0800 	sub.w	r8, r8, r0
 8011efc:	e7e9      	b.n	8011ed2 <__sflush_r+0xda>
 8011efe:	bf00      	nop
 8011f00:	20400001 	.word	0x20400001

08011f04 <_fflush_r>:
 8011f04:	b538      	push	{r3, r4, r5, lr}
 8011f06:	690b      	ldr	r3, [r1, #16]
 8011f08:	4605      	mov	r5, r0
 8011f0a:	460c      	mov	r4, r1
 8011f0c:	b1db      	cbz	r3, 8011f46 <_fflush_r+0x42>
 8011f0e:	b118      	cbz	r0, 8011f18 <_fflush_r+0x14>
 8011f10:	6983      	ldr	r3, [r0, #24]
 8011f12:	b90b      	cbnz	r3, 8011f18 <_fflush_r+0x14>
 8011f14:	f000 f860 	bl	8011fd8 <__sinit>
 8011f18:	4b0c      	ldr	r3, [pc, #48]	; (8011f4c <_fflush_r+0x48>)
 8011f1a:	429c      	cmp	r4, r3
 8011f1c:	d109      	bne.n	8011f32 <_fflush_r+0x2e>
 8011f1e:	686c      	ldr	r4, [r5, #4]
 8011f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f24:	b17b      	cbz	r3, 8011f46 <_fflush_r+0x42>
 8011f26:	4621      	mov	r1, r4
 8011f28:	4628      	mov	r0, r5
 8011f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011f2e:	f7ff bf63 	b.w	8011df8 <__sflush_r>
 8011f32:	4b07      	ldr	r3, [pc, #28]	; (8011f50 <_fflush_r+0x4c>)
 8011f34:	429c      	cmp	r4, r3
 8011f36:	d101      	bne.n	8011f3c <_fflush_r+0x38>
 8011f38:	68ac      	ldr	r4, [r5, #8]
 8011f3a:	e7f1      	b.n	8011f20 <_fflush_r+0x1c>
 8011f3c:	4b05      	ldr	r3, [pc, #20]	; (8011f54 <_fflush_r+0x50>)
 8011f3e:	429c      	cmp	r4, r3
 8011f40:	bf08      	it	eq
 8011f42:	68ec      	ldreq	r4, [r5, #12]
 8011f44:	e7ec      	b.n	8011f20 <_fflush_r+0x1c>
 8011f46:	2000      	movs	r0, #0
 8011f48:	bd38      	pop	{r3, r4, r5, pc}
 8011f4a:	bf00      	nop
 8011f4c:	0801581c 	.word	0x0801581c
 8011f50:	0801583c 	.word	0x0801583c
 8011f54:	080157fc 	.word	0x080157fc

08011f58 <std>:
 8011f58:	2300      	movs	r3, #0
 8011f5a:	b510      	push	{r4, lr}
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8011f62:	6083      	str	r3, [r0, #8]
 8011f64:	8181      	strh	r1, [r0, #12]
 8011f66:	6643      	str	r3, [r0, #100]	; 0x64
 8011f68:	81c2      	strh	r2, [r0, #14]
 8011f6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f6e:	6183      	str	r3, [r0, #24]
 8011f70:	4619      	mov	r1, r3
 8011f72:	2208      	movs	r2, #8
 8011f74:	305c      	adds	r0, #92	; 0x5c
 8011f76:	f7fe fb15 	bl	80105a4 <memset>
 8011f7a:	4b05      	ldr	r3, [pc, #20]	; (8011f90 <std+0x38>)
 8011f7c:	6263      	str	r3, [r4, #36]	; 0x24
 8011f7e:	4b05      	ldr	r3, [pc, #20]	; (8011f94 <std+0x3c>)
 8011f80:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f82:	4b05      	ldr	r3, [pc, #20]	; (8011f98 <std+0x40>)
 8011f84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f86:	4b05      	ldr	r3, [pc, #20]	; (8011f9c <std+0x44>)
 8011f88:	6224      	str	r4, [r4, #32]
 8011f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8011f8c:	bd10      	pop	{r4, pc}
 8011f8e:	bf00      	nop
 8011f90:	08012e5d 	.word	0x08012e5d
 8011f94:	08012e7f 	.word	0x08012e7f
 8011f98:	08012eb7 	.word	0x08012eb7
 8011f9c:	08012edb 	.word	0x08012edb

08011fa0 <_cleanup_r>:
 8011fa0:	4901      	ldr	r1, [pc, #4]	; (8011fa8 <_cleanup_r+0x8>)
 8011fa2:	f000 b885 	b.w	80120b0 <_fwalk_reent>
 8011fa6:	bf00      	nop
 8011fa8:	08011f05 	.word	0x08011f05

08011fac <__sfmoreglue>:
 8011fac:	b570      	push	{r4, r5, r6, lr}
 8011fae:	1e4a      	subs	r2, r1, #1
 8011fb0:	2568      	movs	r5, #104	; 0x68
 8011fb2:	4355      	muls	r5, r2
 8011fb4:	460e      	mov	r6, r1
 8011fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011fba:	f000 fc53 	bl	8012864 <_malloc_r>
 8011fbe:	4604      	mov	r4, r0
 8011fc0:	b140      	cbz	r0, 8011fd4 <__sfmoreglue+0x28>
 8011fc2:	2100      	movs	r1, #0
 8011fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8011fc8:	300c      	adds	r0, #12
 8011fca:	60a0      	str	r0, [r4, #8]
 8011fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011fd0:	f7fe fae8 	bl	80105a4 <memset>
 8011fd4:	4620      	mov	r0, r4
 8011fd6:	bd70      	pop	{r4, r5, r6, pc}

08011fd8 <__sinit>:
 8011fd8:	6983      	ldr	r3, [r0, #24]
 8011fda:	b510      	push	{r4, lr}
 8011fdc:	4604      	mov	r4, r0
 8011fde:	bb33      	cbnz	r3, 801202e <__sinit+0x56>
 8011fe0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011fe4:	6503      	str	r3, [r0, #80]	; 0x50
 8011fe6:	4b12      	ldr	r3, [pc, #72]	; (8012030 <__sinit+0x58>)
 8011fe8:	4a12      	ldr	r2, [pc, #72]	; (8012034 <__sinit+0x5c>)
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	6282      	str	r2, [r0, #40]	; 0x28
 8011fee:	4298      	cmp	r0, r3
 8011ff0:	bf04      	itt	eq
 8011ff2:	2301      	moveq	r3, #1
 8011ff4:	6183      	streq	r3, [r0, #24]
 8011ff6:	f000 f81f 	bl	8012038 <__sfp>
 8011ffa:	6060      	str	r0, [r4, #4]
 8011ffc:	4620      	mov	r0, r4
 8011ffe:	f000 f81b 	bl	8012038 <__sfp>
 8012002:	60a0      	str	r0, [r4, #8]
 8012004:	4620      	mov	r0, r4
 8012006:	f000 f817 	bl	8012038 <__sfp>
 801200a:	2200      	movs	r2, #0
 801200c:	60e0      	str	r0, [r4, #12]
 801200e:	2104      	movs	r1, #4
 8012010:	6860      	ldr	r0, [r4, #4]
 8012012:	f7ff ffa1 	bl	8011f58 <std>
 8012016:	2201      	movs	r2, #1
 8012018:	2109      	movs	r1, #9
 801201a:	68a0      	ldr	r0, [r4, #8]
 801201c:	f7ff ff9c 	bl	8011f58 <std>
 8012020:	2202      	movs	r2, #2
 8012022:	2112      	movs	r1, #18
 8012024:	68e0      	ldr	r0, [r4, #12]
 8012026:	f7ff ff97 	bl	8011f58 <std>
 801202a:	2301      	movs	r3, #1
 801202c:	61a3      	str	r3, [r4, #24]
 801202e:	bd10      	pop	{r4, pc}
 8012030:	080157b8 	.word	0x080157b8
 8012034:	08011fa1 	.word	0x08011fa1

08012038 <__sfp>:
 8012038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801203a:	4b1b      	ldr	r3, [pc, #108]	; (80120a8 <__sfp+0x70>)
 801203c:	681e      	ldr	r6, [r3, #0]
 801203e:	69b3      	ldr	r3, [r6, #24]
 8012040:	4607      	mov	r7, r0
 8012042:	b913      	cbnz	r3, 801204a <__sfp+0x12>
 8012044:	4630      	mov	r0, r6
 8012046:	f7ff ffc7 	bl	8011fd8 <__sinit>
 801204a:	3648      	adds	r6, #72	; 0x48
 801204c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012050:	3b01      	subs	r3, #1
 8012052:	d503      	bpl.n	801205c <__sfp+0x24>
 8012054:	6833      	ldr	r3, [r6, #0]
 8012056:	b133      	cbz	r3, 8012066 <__sfp+0x2e>
 8012058:	6836      	ldr	r6, [r6, #0]
 801205a:	e7f7      	b.n	801204c <__sfp+0x14>
 801205c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012060:	b16d      	cbz	r5, 801207e <__sfp+0x46>
 8012062:	3468      	adds	r4, #104	; 0x68
 8012064:	e7f4      	b.n	8012050 <__sfp+0x18>
 8012066:	2104      	movs	r1, #4
 8012068:	4638      	mov	r0, r7
 801206a:	f7ff ff9f 	bl	8011fac <__sfmoreglue>
 801206e:	6030      	str	r0, [r6, #0]
 8012070:	2800      	cmp	r0, #0
 8012072:	d1f1      	bne.n	8012058 <__sfp+0x20>
 8012074:	230c      	movs	r3, #12
 8012076:	603b      	str	r3, [r7, #0]
 8012078:	4604      	mov	r4, r0
 801207a:	4620      	mov	r0, r4
 801207c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801207e:	4b0b      	ldr	r3, [pc, #44]	; (80120ac <__sfp+0x74>)
 8012080:	6665      	str	r5, [r4, #100]	; 0x64
 8012082:	e9c4 5500 	strd	r5, r5, [r4]
 8012086:	60a5      	str	r5, [r4, #8]
 8012088:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801208c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8012090:	2208      	movs	r2, #8
 8012092:	4629      	mov	r1, r5
 8012094:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012098:	f7fe fa84 	bl	80105a4 <memset>
 801209c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80120a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80120a4:	e7e9      	b.n	801207a <__sfp+0x42>
 80120a6:	bf00      	nop
 80120a8:	080157b8 	.word	0x080157b8
 80120ac:	ffff0001 	.word	0xffff0001

080120b0 <_fwalk_reent>:
 80120b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80120b4:	4680      	mov	r8, r0
 80120b6:	4689      	mov	r9, r1
 80120b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80120bc:	2600      	movs	r6, #0
 80120be:	b914      	cbnz	r4, 80120c6 <_fwalk_reent+0x16>
 80120c0:	4630      	mov	r0, r6
 80120c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80120c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80120ca:	3f01      	subs	r7, #1
 80120cc:	d501      	bpl.n	80120d2 <_fwalk_reent+0x22>
 80120ce:	6824      	ldr	r4, [r4, #0]
 80120d0:	e7f5      	b.n	80120be <_fwalk_reent+0xe>
 80120d2:	89ab      	ldrh	r3, [r5, #12]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d907      	bls.n	80120e8 <_fwalk_reent+0x38>
 80120d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80120dc:	3301      	adds	r3, #1
 80120de:	d003      	beq.n	80120e8 <_fwalk_reent+0x38>
 80120e0:	4629      	mov	r1, r5
 80120e2:	4640      	mov	r0, r8
 80120e4:	47c8      	blx	r9
 80120e6:	4306      	orrs	r6, r0
 80120e8:	3568      	adds	r5, #104	; 0x68
 80120ea:	e7ee      	b.n	80120ca <_fwalk_reent+0x1a>

080120ec <_localeconv_r>:
 80120ec:	4b04      	ldr	r3, [pc, #16]	; (8012100 <_localeconv_r+0x14>)
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	6a18      	ldr	r0, [r3, #32]
 80120f2:	4b04      	ldr	r3, [pc, #16]	; (8012104 <_localeconv_r+0x18>)
 80120f4:	2800      	cmp	r0, #0
 80120f6:	bf08      	it	eq
 80120f8:	4618      	moveq	r0, r3
 80120fa:	30f0      	adds	r0, #240	; 0xf0
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	20001c38 	.word	0x20001c38
 8012104:	20001c9c 	.word	0x20001c9c

08012108 <__swhatbuf_r>:
 8012108:	b570      	push	{r4, r5, r6, lr}
 801210a:	460e      	mov	r6, r1
 801210c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012110:	2900      	cmp	r1, #0
 8012112:	b096      	sub	sp, #88	; 0x58
 8012114:	4614      	mov	r4, r2
 8012116:	461d      	mov	r5, r3
 8012118:	da07      	bge.n	801212a <__swhatbuf_r+0x22>
 801211a:	2300      	movs	r3, #0
 801211c:	602b      	str	r3, [r5, #0]
 801211e:	89b3      	ldrh	r3, [r6, #12]
 8012120:	061a      	lsls	r2, r3, #24
 8012122:	d410      	bmi.n	8012146 <__swhatbuf_r+0x3e>
 8012124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012128:	e00e      	b.n	8012148 <__swhatbuf_r+0x40>
 801212a:	466a      	mov	r2, sp
 801212c:	f000 fefc 	bl	8012f28 <_fstat_r>
 8012130:	2800      	cmp	r0, #0
 8012132:	dbf2      	blt.n	801211a <__swhatbuf_r+0x12>
 8012134:	9a01      	ldr	r2, [sp, #4]
 8012136:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801213a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801213e:	425a      	negs	r2, r3
 8012140:	415a      	adcs	r2, r3
 8012142:	602a      	str	r2, [r5, #0]
 8012144:	e7ee      	b.n	8012124 <__swhatbuf_r+0x1c>
 8012146:	2340      	movs	r3, #64	; 0x40
 8012148:	2000      	movs	r0, #0
 801214a:	6023      	str	r3, [r4, #0]
 801214c:	b016      	add	sp, #88	; 0x58
 801214e:	bd70      	pop	{r4, r5, r6, pc}

08012150 <__smakebuf_r>:
 8012150:	898b      	ldrh	r3, [r1, #12]
 8012152:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012154:	079d      	lsls	r5, r3, #30
 8012156:	4606      	mov	r6, r0
 8012158:	460c      	mov	r4, r1
 801215a:	d507      	bpl.n	801216c <__smakebuf_r+0x1c>
 801215c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012160:	6023      	str	r3, [r4, #0]
 8012162:	6123      	str	r3, [r4, #16]
 8012164:	2301      	movs	r3, #1
 8012166:	6163      	str	r3, [r4, #20]
 8012168:	b002      	add	sp, #8
 801216a:	bd70      	pop	{r4, r5, r6, pc}
 801216c:	ab01      	add	r3, sp, #4
 801216e:	466a      	mov	r2, sp
 8012170:	f7ff ffca 	bl	8012108 <__swhatbuf_r>
 8012174:	9900      	ldr	r1, [sp, #0]
 8012176:	4605      	mov	r5, r0
 8012178:	4630      	mov	r0, r6
 801217a:	f000 fb73 	bl	8012864 <_malloc_r>
 801217e:	b948      	cbnz	r0, 8012194 <__smakebuf_r+0x44>
 8012180:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012184:	059a      	lsls	r2, r3, #22
 8012186:	d4ef      	bmi.n	8012168 <__smakebuf_r+0x18>
 8012188:	f023 0303 	bic.w	r3, r3, #3
 801218c:	f043 0302 	orr.w	r3, r3, #2
 8012190:	81a3      	strh	r3, [r4, #12]
 8012192:	e7e3      	b.n	801215c <__smakebuf_r+0xc>
 8012194:	4b0d      	ldr	r3, [pc, #52]	; (80121cc <__smakebuf_r+0x7c>)
 8012196:	62b3      	str	r3, [r6, #40]	; 0x28
 8012198:	89a3      	ldrh	r3, [r4, #12]
 801219a:	6020      	str	r0, [r4, #0]
 801219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80121a0:	81a3      	strh	r3, [r4, #12]
 80121a2:	9b00      	ldr	r3, [sp, #0]
 80121a4:	6163      	str	r3, [r4, #20]
 80121a6:	9b01      	ldr	r3, [sp, #4]
 80121a8:	6120      	str	r0, [r4, #16]
 80121aa:	b15b      	cbz	r3, 80121c4 <__smakebuf_r+0x74>
 80121ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80121b0:	4630      	mov	r0, r6
 80121b2:	f000 fecb 	bl	8012f4c <_isatty_r>
 80121b6:	b128      	cbz	r0, 80121c4 <__smakebuf_r+0x74>
 80121b8:	89a3      	ldrh	r3, [r4, #12]
 80121ba:	f023 0303 	bic.w	r3, r3, #3
 80121be:	f043 0301 	orr.w	r3, r3, #1
 80121c2:	81a3      	strh	r3, [r4, #12]
 80121c4:	89a3      	ldrh	r3, [r4, #12]
 80121c6:	431d      	orrs	r5, r3
 80121c8:	81a5      	strh	r5, [r4, #12]
 80121ca:	e7cd      	b.n	8012168 <__smakebuf_r+0x18>
 80121cc:	08011fa1 	.word	0x08011fa1

080121d0 <malloc>:
 80121d0:	4b02      	ldr	r3, [pc, #8]	; (80121dc <malloc+0xc>)
 80121d2:	4601      	mov	r1, r0
 80121d4:	6818      	ldr	r0, [r3, #0]
 80121d6:	f000 bb45 	b.w	8012864 <_malloc_r>
 80121da:	bf00      	nop
 80121dc:	20001c38 	.word	0x20001c38

080121e0 <memcpy>:
 80121e0:	b510      	push	{r4, lr}
 80121e2:	1e43      	subs	r3, r0, #1
 80121e4:	440a      	add	r2, r1
 80121e6:	4291      	cmp	r1, r2
 80121e8:	d100      	bne.n	80121ec <memcpy+0xc>
 80121ea:	bd10      	pop	{r4, pc}
 80121ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80121f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80121f4:	e7f7      	b.n	80121e6 <memcpy+0x6>

080121f6 <_Balloc>:
 80121f6:	b570      	push	{r4, r5, r6, lr}
 80121f8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80121fa:	4604      	mov	r4, r0
 80121fc:	460e      	mov	r6, r1
 80121fe:	b93d      	cbnz	r5, 8012210 <_Balloc+0x1a>
 8012200:	2010      	movs	r0, #16
 8012202:	f7ff ffe5 	bl	80121d0 <malloc>
 8012206:	6260      	str	r0, [r4, #36]	; 0x24
 8012208:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801220c:	6005      	str	r5, [r0, #0]
 801220e:	60c5      	str	r5, [r0, #12]
 8012210:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8012212:	68eb      	ldr	r3, [r5, #12]
 8012214:	b183      	cbz	r3, 8012238 <_Balloc+0x42>
 8012216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012218:	68db      	ldr	r3, [r3, #12]
 801221a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801221e:	b9b8      	cbnz	r0, 8012250 <_Balloc+0x5a>
 8012220:	2101      	movs	r1, #1
 8012222:	fa01 f506 	lsl.w	r5, r1, r6
 8012226:	1d6a      	adds	r2, r5, #5
 8012228:	0092      	lsls	r2, r2, #2
 801222a:	4620      	mov	r0, r4
 801222c:	f000 fabe 	bl	80127ac <_calloc_r>
 8012230:	b160      	cbz	r0, 801224c <_Balloc+0x56>
 8012232:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8012236:	e00e      	b.n	8012256 <_Balloc+0x60>
 8012238:	2221      	movs	r2, #33	; 0x21
 801223a:	2104      	movs	r1, #4
 801223c:	4620      	mov	r0, r4
 801223e:	f000 fab5 	bl	80127ac <_calloc_r>
 8012242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012244:	60e8      	str	r0, [r5, #12]
 8012246:	68db      	ldr	r3, [r3, #12]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d1e4      	bne.n	8012216 <_Balloc+0x20>
 801224c:	2000      	movs	r0, #0
 801224e:	bd70      	pop	{r4, r5, r6, pc}
 8012250:	6802      	ldr	r2, [r0, #0]
 8012252:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8012256:	2300      	movs	r3, #0
 8012258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801225c:	e7f7      	b.n	801224e <_Balloc+0x58>

0801225e <_Bfree>:
 801225e:	b570      	push	{r4, r5, r6, lr}
 8012260:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8012262:	4606      	mov	r6, r0
 8012264:	460d      	mov	r5, r1
 8012266:	b93c      	cbnz	r4, 8012278 <_Bfree+0x1a>
 8012268:	2010      	movs	r0, #16
 801226a:	f7ff ffb1 	bl	80121d0 <malloc>
 801226e:	6270      	str	r0, [r6, #36]	; 0x24
 8012270:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012274:	6004      	str	r4, [r0, #0]
 8012276:	60c4      	str	r4, [r0, #12]
 8012278:	b13d      	cbz	r5, 801228a <_Bfree+0x2c>
 801227a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801227c:	686a      	ldr	r2, [r5, #4]
 801227e:	68db      	ldr	r3, [r3, #12]
 8012280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8012284:	6029      	str	r1, [r5, #0]
 8012286:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801228a:	bd70      	pop	{r4, r5, r6, pc}

0801228c <__multadd>:
 801228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012290:	690d      	ldr	r5, [r1, #16]
 8012292:	461f      	mov	r7, r3
 8012294:	4606      	mov	r6, r0
 8012296:	460c      	mov	r4, r1
 8012298:	f101 0c14 	add.w	ip, r1, #20
 801229c:	2300      	movs	r3, #0
 801229e:	f8dc 0000 	ldr.w	r0, [ip]
 80122a2:	b281      	uxth	r1, r0
 80122a4:	fb02 7101 	mla	r1, r2, r1, r7
 80122a8:	0c0f      	lsrs	r7, r1, #16
 80122aa:	0c00      	lsrs	r0, r0, #16
 80122ac:	fb02 7000 	mla	r0, r2, r0, r7
 80122b0:	b289      	uxth	r1, r1
 80122b2:	3301      	adds	r3, #1
 80122b4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80122b8:	429d      	cmp	r5, r3
 80122ba:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80122be:	f84c 1b04 	str.w	r1, [ip], #4
 80122c2:	dcec      	bgt.n	801229e <__multadd+0x12>
 80122c4:	b1d7      	cbz	r7, 80122fc <__multadd+0x70>
 80122c6:	68a3      	ldr	r3, [r4, #8]
 80122c8:	42ab      	cmp	r3, r5
 80122ca:	dc12      	bgt.n	80122f2 <__multadd+0x66>
 80122cc:	6861      	ldr	r1, [r4, #4]
 80122ce:	4630      	mov	r0, r6
 80122d0:	3101      	adds	r1, #1
 80122d2:	f7ff ff90 	bl	80121f6 <_Balloc>
 80122d6:	6922      	ldr	r2, [r4, #16]
 80122d8:	3202      	adds	r2, #2
 80122da:	f104 010c 	add.w	r1, r4, #12
 80122de:	4680      	mov	r8, r0
 80122e0:	0092      	lsls	r2, r2, #2
 80122e2:	300c      	adds	r0, #12
 80122e4:	f7ff ff7c 	bl	80121e0 <memcpy>
 80122e8:	4621      	mov	r1, r4
 80122ea:	4630      	mov	r0, r6
 80122ec:	f7ff ffb7 	bl	801225e <_Bfree>
 80122f0:	4644      	mov	r4, r8
 80122f2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80122f6:	3501      	adds	r5, #1
 80122f8:	615f      	str	r7, [r3, #20]
 80122fa:	6125      	str	r5, [r4, #16]
 80122fc:	4620      	mov	r0, r4
 80122fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012302 <__hi0bits>:
 8012302:	0c02      	lsrs	r2, r0, #16
 8012304:	0412      	lsls	r2, r2, #16
 8012306:	4603      	mov	r3, r0
 8012308:	b9b2      	cbnz	r2, 8012338 <__hi0bits+0x36>
 801230a:	0403      	lsls	r3, r0, #16
 801230c:	2010      	movs	r0, #16
 801230e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8012312:	bf04      	itt	eq
 8012314:	021b      	lsleq	r3, r3, #8
 8012316:	3008      	addeq	r0, #8
 8012318:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801231c:	bf04      	itt	eq
 801231e:	011b      	lsleq	r3, r3, #4
 8012320:	3004      	addeq	r0, #4
 8012322:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8012326:	bf04      	itt	eq
 8012328:	009b      	lsleq	r3, r3, #2
 801232a:	3002      	addeq	r0, #2
 801232c:	2b00      	cmp	r3, #0
 801232e:	db06      	blt.n	801233e <__hi0bits+0x3c>
 8012330:	005b      	lsls	r3, r3, #1
 8012332:	d503      	bpl.n	801233c <__hi0bits+0x3a>
 8012334:	3001      	adds	r0, #1
 8012336:	4770      	bx	lr
 8012338:	2000      	movs	r0, #0
 801233a:	e7e8      	b.n	801230e <__hi0bits+0xc>
 801233c:	2020      	movs	r0, #32
 801233e:	4770      	bx	lr

08012340 <__lo0bits>:
 8012340:	6803      	ldr	r3, [r0, #0]
 8012342:	f013 0207 	ands.w	r2, r3, #7
 8012346:	4601      	mov	r1, r0
 8012348:	d00b      	beq.n	8012362 <__lo0bits+0x22>
 801234a:	07da      	lsls	r2, r3, #31
 801234c:	d423      	bmi.n	8012396 <__lo0bits+0x56>
 801234e:	0798      	lsls	r0, r3, #30
 8012350:	bf49      	itett	mi
 8012352:	085b      	lsrmi	r3, r3, #1
 8012354:	089b      	lsrpl	r3, r3, #2
 8012356:	2001      	movmi	r0, #1
 8012358:	600b      	strmi	r3, [r1, #0]
 801235a:	bf5c      	itt	pl
 801235c:	600b      	strpl	r3, [r1, #0]
 801235e:	2002      	movpl	r0, #2
 8012360:	4770      	bx	lr
 8012362:	b298      	uxth	r0, r3
 8012364:	b9a8      	cbnz	r0, 8012392 <__lo0bits+0x52>
 8012366:	0c1b      	lsrs	r3, r3, #16
 8012368:	2010      	movs	r0, #16
 801236a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801236e:	bf04      	itt	eq
 8012370:	0a1b      	lsreq	r3, r3, #8
 8012372:	3008      	addeq	r0, #8
 8012374:	071a      	lsls	r2, r3, #28
 8012376:	bf04      	itt	eq
 8012378:	091b      	lsreq	r3, r3, #4
 801237a:	3004      	addeq	r0, #4
 801237c:	079a      	lsls	r2, r3, #30
 801237e:	bf04      	itt	eq
 8012380:	089b      	lsreq	r3, r3, #2
 8012382:	3002      	addeq	r0, #2
 8012384:	07da      	lsls	r2, r3, #31
 8012386:	d402      	bmi.n	801238e <__lo0bits+0x4e>
 8012388:	085b      	lsrs	r3, r3, #1
 801238a:	d006      	beq.n	801239a <__lo0bits+0x5a>
 801238c:	3001      	adds	r0, #1
 801238e:	600b      	str	r3, [r1, #0]
 8012390:	4770      	bx	lr
 8012392:	4610      	mov	r0, r2
 8012394:	e7e9      	b.n	801236a <__lo0bits+0x2a>
 8012396:	2000      	movs	r0, #0
 8012398:	4770      	bx	lr
 801239a:	2020      	movs	r0, #32
 801239c:	4770      	bx	lr

0801239e <__i2b>:
 801239e:	b510      	push	{r4, lr}
 80123a0:	460c      	mov	r4, r1
 80123a2:	2101      	movs	r1, #1
 80123a4:	f7ff ff27 	bl	80121f6 <_Balloc>
 80123a8:	2201      	movs	r2, #1
 80123aa:	6144      	str	r4, [r0, #20]
 80123ac:	6102      	str	r2, [r0, #16]
 80123ae:	bd10      	pop	{r4, pc}

080123b0 <__multiply>:
 80123b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123b4:	4614      	mov	r4, r2
 80123b6:	690a      	ldr	r2, [r1, #16]
 80123b8:	6923      	ldr	r3, [r4, #16]
 80123ba:	429a      	cmp	r2, r3
 80123bc:	bfb8      	it	lt
 80123be:	460b      	movlt	r3, r1
 80123c0:	4688      	mov	r8, r1
 80123c2:	bfbc      	itt	lt
 80123c4:	46a0      	movlt	r8, r4
 80123c6:	461c      	movlt	r4, r3
 80123c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80123cc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80123d0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80123d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80123d8:	eb07 0609 	add.w	r6, r7, r9
 80123dc:	42b3      	cmp	r3, r6
 80123de:	bfb8      	it	lt
 80123e0:	3101      	addlt	r1, #1
 80123e2:	f7ff ff08 	bl	80121f6 <_Balloc>
 80123e6:	f100 0514 	add.w	r5, r0, #20
 80123ea:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80123ee:	462b      	mov	r3, r5
 80123f0:	2200      	movs	r2, #0
 80123f2:	4573      	cmp	r3, lr
 80123f4:	d316      	bcc.n	8012424 <__multiply+0x74>
 80123f6:	f104 0214 	add.w	r2, r4, #20
 80123fa:	f108 0114 	add.w	r1, r8, #20
 80123fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8012402:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8012406:	9300      	str	r3, [sp, #0]
 8012408:	9b00      	ldr	r3, [sp, #0]
 801240a:	9201      	str	r2, [sp, #4]
 801240c:	4293      	cmp	r3, r2
 801240e:	d80c      	bhi.n	801242a <__multiply+0x7a>
 8012410:	2e00      	cmp	r6, #0
 8012412:	dd03      	ble.n	801241c <__multiply+0x6c>
 8012414:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8012418:	2b00      	cmp	r3, #0
 801241a:	d05d      	beq.n	80124d8 <__multiply+0x128>
 801241c:	6106      	str	r6, [r0, #16]
 801241e:	b003      	add	sp, #12
 8012420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012424:	f843 2b04 	str.w	r2, [r3], #4
 8012428:	e7e3      	b.n	80123f2 <__multiply+0x42>
 801242a:	f8b2 b000 	ldrh.w	fp, [r2]
 801242e:	f1bb 0f00 	cmp.w	fp, #0
 8012432:	d023      	beq.n	801247c <__multiply+0xcc>
 8012434:	4689      	mov	r9, r1
 8012436:	46ac      	mov	ip, r5
 8012438:	f04f 0800 	mov.w	r8, #0
 801243c:	f859 4b04 	ldr.w	r4, [r9], #4
 8012440:	f8dc a000 	ldr.w	sl, [ip]
 8012444:	b2a3      	uxth	r3, r4
 8012446:	fa1f fa8a 	uxth.w	sl, sl
 801244a:	fb0b a303 	mla	r3, fp, r3, sl
 801244e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8012452:	f8dc 4000 	ldr.w	r4, [ip]
 8012456:	4443      	add	r3, r8
 8012458:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801245c:	fb0b 840a 	mla	r4, fp, sl, r8
 8012460:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8012464:	46e2      	mov	sl, ip
 8012466:	b29b      	uxth	r3, r3
 8012468:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801246c:	454f      	cmp	r7, r9
 801246e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8012472:	f84a 3b04 	str.w	r3, [sl], #4
 8012476:	d82b      	bhi.n	80124d0 <__multiply+0x120>
 8012478:	f8cc 8004 	str.w	r8, [ip, #4]
 801247c:	9b01      	ldr	r3, [sp, #4]
 801247e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8012482:	3204      	adds	r2, #4
 8012484:	f1ba 0f00 	cmp.w	sl, #0
 8012488:	d020      	beq.n	80124cc <__multiply+0x11c>
 801248a:	682b      	ldr	r3, [r5, #0]
 801248c:	4689      	mov	r9, r1
 801248e:	46a8      	mov	r8, r5
 8012490:	f04f 0b00 	mov.w	fp, #0
 8012494:	f8b9 c000 	ldrh.w	ip, [r9]
 8012498:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801249c:	fb0a 440c 	mla	r4, sl, ip, r4
 80124a0:	445c      	add	r4, fp
 80124a2:	46c4      	mov	ip, r8
 80124a4:	b29b      	uxth	r3, r3
 80124a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80124aa:	f84c 3b04 	str.w	r3, [ip], #4
 80124ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80124b2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80124b6:	0c1b      	lsrs	r3, r3, #16
 80124b8:	fb0a b303 	mla	r3, sl, r3, fp
 80124bc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80124c0:	454f      	cmp	r7, r9
 80124c2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80124c6:	d805      	bhi.n	80124d4 <__multiply+0x124>
 80124c8:	f8c8 3004 	str.w	r3, [r8, #4]
 80124cc:	3504      	adds	r5, #4
 80124ce:	e79b      	b.n	8012408 <__multiply+0x58>
 80124d0:	46d4      	mov	ip, sl
 80124d2:	e7b3      	b.n	801243c <__multiply+0x8c>
 80124d4:	46e0      	mov	r8, ip
 80124d6:	e7dd      	b.n	8012494 <__multiply+0xe4>
 80124d8:	3e01      	subs	r6, #1
 80124da:	e799      	b.n	8012410 <__multiply+0x60>

080124dc <__pow5mult>:
 80124dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124e0:	4615      	mov	r5, r2
 80124e2:	f012 0203 	ands.w	r2, r2, #3
 80124e6:	4606      	mov	r6, r0
 80124e8:	460f      	mov	r7, r1
 80124ea:	d007      	beq.n	80124fc <__pow5mult+0x20>
 80124ec:	3a01      	subs	r2, #1
 80124ee:	4c21      	ldr	r4, [pc, #132]	; (8012574 <__pow5mult+0x98>)
 80124f0:	2300      	movs	r3, #0
 80124f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80124f6:	f7ff fec9 	bl	801228c <__multadd>
 80124fa:	4607      	mov	r7, r0
 80124fc:	10ad      	asrs	r5, r5, #2
 80124fe:	d035      	beq.n	801256c <__pow5mult+0x90>
 8012500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8012502:	b93c      	cbnz	r4, 8012514 <__pow5mult+0x38>
 8012504:	2010      	movs	r0, #16
 8012506:	f7ff fe63 	bl	80121d0 <malloc>
 801250a:	6270      	str	r0, [r6, #36]	; 0x24
 801250c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8012510:	6004      	str	r4, [r0, #0]
 8012512:	60c4      	str	r4, [r0, #12]
 8012514:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8012518:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801251c:	b94c      	cbnz	r4, 8012532 <__pow5mult+0x56>
 801251e:	f240 2171 	movw	r1, #625	; 0x271
 8012522:	4630      	mov	r0, r6
 8012524:	f7ff ff3b 	bl	801239e <__i2b>
 8012528:	2300      	movs	r3, #0
 801252a:	f8c8 0008 	str.w	r0, [r8, #8]
 801252e:	4604      	mov	r4, r0
 8012530:	6003      	str	r3, [r0, #0]
 8012532:	f04f 0800 	mov.w	r8, #0
 8012536:	07eb      	lsls	r3, r5, #31
 8012538:	d50a      	bpl.n	8012550 <__pow5mult+0x74>
 801253a:	4639      	mov	r1, r7
 801253c:	4622      	mov	r2, r4
 801253e:	4630      	mov	r0, r6
 8012540:	f7ff ff36 	bl	80123b0 <__multiply>
 8012544:	4639      	mov	r1, r7
 8012546:	4681      	mov	r9, r0
 8012548:	4630      	mov	r0, r6
 801254a:	f7ff fe88 	bl	801225e <_Bfree>
 801254e:	464f      	mov	r7, r9
 8012550:	106d      	asrs	r5, r5, #1
 8012552:	d00b      	beq.n	801256c <__pow5mult+0x90>
 8012554:	6820      	ldr	r0, [r4, #0]
 8012556:	b938      	cbnz	r0, 8012568 <__pow5mult+0x8c>
 8012558:	4622      	mov	r2, r4
 801255a:	4621      	mov	r1, r4
 801255c:	4630      	mov	r0, r6
 801255e:	f7ff ff27 	bl	80123b0 <__multiply>
 8012562:	6020      	str	r0, [r4, #0]
 8012564:	f8c0 8000 	str.w	r8, [r0]
 8012568:	4604      	mov	r4, r0
 801256a:	e7e4      	b.n	8012536 <__pow5mult+0x5a>
 801256c:	4638      	mov	r0, r7
 801256e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012572:	bf00      	nop
 8012574:	08015950 	.word	0x08015950

08012578 <__lshift>:
 8012578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801257c:	460c      	mov	r4, r1
 801257e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012582:	6923      	ldr	r3, [r4, #16]
 8012584:	6849      	ldr	r1, [r1, #4]
 8012586:	eb0a 0903 	add.w	r9, sl, r3
 801258a:	68a3      	ldr	r3, [r4, #8]
 801258c:	4607      	mov	r7, r0
 801258e:	4616      	mov	r6, r2
 8012590:	f109 0501 	add.w	r5, r9, #1
 8012594:	42ab      	cmp	r3, r5
 8012596:	db32      	blt.n	80125fe <__lshift+0x86>
 8012598:	4638      	mov	r0, r7
 801259a:	f7ff fe2c 	bl	80121f6 <_Balloc>
 801259e:	2300      	movs	r3, #0
 80125a0:	4680      	mov	r8, r0
 80125a2:	f100 0114 	add.w	r1, r0, #20
 80125a6:	461a      	mov	r2, r3
 80125a8:	4553      	cmp	r3, sl
 80125aa:	db2b      	blt.n	8012604 <__lshift+0x8c>
 80125ac:	6920      	ldr	r0, [r4, #16]
 80125ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80125b2:	f104 0314 	add.w	r3, r4, #20
 80125b6:	f016 021f 	ands.w	r2, r6, #31
 80125ba:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80125be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80125c2:	d025      	beq.n	8012610 <__lshift+0x98>
 80125c4:	f1c2 0e20 	rsb	lr, r2, #32
 80125c8:	2000      	movs	r0, #0
 80125ca:	681e      	ldr	r6, [r3, #0]
 80125cc:	468a      	mov	sl, r1
 80125ce:	4096      	lsls	r6, r2
 80125d0:	4330      	orrs	r0, r6
 80125d2:	f84a 0b04 	str.w	r0, [sl], #4
 80125d6:	f853 0b04 	ldr.w	r0, [r3], #4
 80125da:	459c      	cmp	ip, r3
 80125dc:	fa20 f00e 	lsr.w	r0, r0, lr
 80125e0:	d814      	bhi.n	801260c <__lshift+0x94>
 80125e2:	6048      	str	r0, [r1, #4]
 80125e4:	b108      	cbz	r0, 80125ea <__lshift+0x72>
 80125e6:	f109 0502 	add.w	r5, r9, #2
 80125ea:	3d01      	subs	r5, #1
 80125ec:	4638      	mov	r0, r7
 80125ee:	f8c8 5010 	str.w	r5, [r8, #16]
 80125f2:	4621      	mov	r1, r4
 80125f4:	f7ff fe33 	bl	801225e <_Bfree>
 80125f8:	4640      	mov	r0, r8
 80125fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125fe:	3101      	adds	r1, #1
 8012600:	005b      	lsls	r3, r3, #1
 8012602:	e7c7      	b.n	8012594 <__lshift+0x1c>
 8012604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8012608:	3301      	adds	r3, #1
 801260a:	e7cd      	b.n	80125a8 <__lshift+0x30>
 801260c:	4651      	mov	r1, sl
 801260e:	e7dc      	b.n	80125ca <__lshift+0x52>
 8012610:	3904      	subs	r1, #4
 8012612:	f853 2b04 	ldr.w	r2, [r3], #4
 8012616:	f841 2f04 	str.w	r2, [r1, #4]!
 801261a:	459c      	cmp	ip, r3
 801261c:	d8f9      	bhi.n	8012612 <__lshift+0x9a>
 801261e:	e7e4      	b.n	80125ea <__lshift+0x72>

08012620 <__mcmp>:
 8012620:	6903      	ldr	r3, [r0, #16]
 8012622:	690a      	ldr	r2, [r1, #16]
 8012624:	1a9b      	subs	r3, r3, r2
 8012626:	b530      	push	{r4, r5, lr}
 8012628:	d10c      	bne.n	8012644 <__mcmp+0x24>
 801262a:	0092      	lsls	r2, r2, #2
 801262c:	3014      	adds	r0, #20
 801262e:	3114      	adds	r1, #20
 8012630:	1884      	adds	r4, r0, r2
 8012632:	4411      	add	r1, r2
 8012634:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8012638:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801263c:	4295      	cmp	r5, r2
 801263e:	d003      	beq.n	8012648 <__mcmp+0x28>
 8012640:	d305      	bcc.n	801264e <__mcmp+0x2e>
 8012642:	2301      	movs	r3, #1
 8012644:	4618      	mov	r0, r3
 8012646:	bd30      	pop	{r4, r5, pc}
 8012648:	42a0      	cmp	r0, r4
 801264a:	d3f3      	bcc.n	8012634 <__mcmp+0x14>
 801264c:	e7fa      	b.n	8012644 <__mcmp+0x24>
 801264e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012652:	e7f7      	b.n	8012644 <__mcmp+0x24>

08012654 <__mdiff>:
 8012654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012658:	460d      	mov	r5, r1
 801265a:	4607      	mov	r7, r0
 801265c:	4611      	mov	r1, r2
 801265e:	4628      	mov	r0, r5
 8012660:	4614      	mov	r4, r2
 8012662:	f7ff ffdd 	bl	8012620 <__mcmp>
 8012666:	1e06      	subs	r6, r0, #0
 8012668:	d108      	bne.n	801267c <__mdiff+0x28>
 801266a:	4631      	mov	r1, r6
 801266c:	4638      	mov	r0, r7
 801266e:	f7ff fdc2 	bl	80121f6 <_Balloc>
 8012672:	2301      	movs	r3, #1
 8012674:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8012678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801267c:	bfa4      	itt	ge
 801267e:	4623      	movge	r3, r4
 8012680:	462c      	movge	r4, r5
 8012682:	4638      	mov	r0, r7
 8012684:	6861      	ldr	r1, [r4, #4]
 8012686:	bfa6      	itte	ge
 8012688:	461d      	movge	r5, r3
 801268a:	2600      	movge	r6, #0
 801268c:	2601      	movlt	r6, #1
 801268e:	f7ff fdb2 	bl	80121f6 <_Balloc>
 8012692:	692b      	ldr	r3, [r5, #16]
 8012694:	60c6      	str	r6, [r0, #12]
 8012696:	6926      	ldr	r6, [r4, #16]
 8012698:	f105 0914 	add.w	r9, r5, #20
 801269c:	f104 0214 	add.w	r2, r4, #20
 80126a0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80126a4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80126a8:	f100 0514 	add.w	r5, r0, #20
 80126ac:	f04f 0e00 	mov.w	lr, #0
 80126b0:	f852 ab04 	ldr.w	sl, [r2], #4
 80126b4:	f859 4b04 	ldr.w	r4, [r9], #4
 80126b8:	fa1e f18a 	uxtah	r1, lr, sl
 80126bc:	b2a3      	uxth	r3, r4
 80126be:	1ac9      	subs	r1, r1, r3
 80126c0:	0c23      	lsrs	r3, r4, #16
 80126c2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80126c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80126ca:	b289      	uxth	r1, r1
 80126cc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80126d0:	45c8      	cmp	r8, r9
 80126d2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80126d6:	4694      	mov	ip, r2
 80126d8:	f845 3b04 	str.w	r3, [r5], #4
 80126dc:	d8e8      	bhi.n	80126b0 <__mdiff+0x5c>
 80126de:	45bc      	cmp	ip, r7
 80126e0:	d304      	bcc.n	80126ec <__mdiff+0x98>
 80126e2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80126e6:	b183      	cbz	r3, 801270a <__mdiff+0xb6>
 80126e8:	6106      	str	r6, [r0, #16]
 80126ea:	e7c5      	b.n	8012678 <__mdiff+0x24>
 80126ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80126f0:	fa1e f381 	uxtah	r3, lr, r1
 80126f4:	141a      	asrs	r2, r3, #16
 80126f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012700:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012704:	f845 3b04 	str.w	r3, [r5], #4
 8012708:	e7e9      	b.n	80126de <__mdiff+0x8a>
 801270a:	3e01      	subs	r6, #1
 801270c:	e7e9      	b.n	80126e2 <__mdiff+0x8e>

0801270e <__d2b>:
 801270e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012712:	460e      	mov	r6, r1
 8012714:	2101      	movs	r1, #1
 8012716:	ec59 8b10 	vmov	r8, r9, d0
 801271a:	4615      	mov	r5, r2
 801271c:	f7ff fd6b 	bl	80121f6 <_Balloc>
 8012720:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8012724:	4607      	mov	r7, r0
 8012726:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801272a:	bb34      	cbnz	r4, 801277a <__d2b+0x6c>
 801272c:	9301      	str	r3, [sp, #4]
 801272e:	f1b8 0300 	subs.w	r3, r8, #0
 8012732:	d027      	beq.n	8012784 <__d2b+0x76>
 8012734:	a802      	add	r0, sp, #8
 8012736:	f840 3d08 	str.w	r3, [r0, #-8]!
 801273a:	f7ff fe01 	bl	8012340 <__lo0bits>
 801273e:	9900      	ldr	r1, [sp, #0]
 8012740:	b1f0      	cbz	r0, 8012780 <__d2b+0x72>
 8012742:	9a01      	ldr	r2, [sp, #4]
 8012744:	f1c0 0320 	rsb	r3, r0, #32
 8012748:	fa02 f303 	lsl.w	r3, r2, r3
 801274c:	430b      	orrs	r3, r1
 801274e:	40c2      	lsrs	r2, r0
 8012750:	617b      	str	r3, [r7, #20]
 8012752:	9201      	str	r2, [sp, #4]
 8012754:	9b01      	ldr	r3, [sp, #4]
 8012756:	61bb      	str	r3, [r7, #24]
 8012758:	2b00      	cmp	r3, #0
 801275a:	bf14      	ite	ne
 801275c:	2102      	movne	r1, #2
 801275e:	2101      	moveq	r1, #1
 8012760:	6139      	str	r1, [r7, #16]
 8012762:	b1c4      	cbz	r4, 8012796 <__d2b+0x88>
 8012764:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8012768:	4404      	add	r4, r0
 801276a:	6034      	str	r4, [r6, #0]
 801276c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8012770:	6028      	str	r0, [r5, #0]
 8012772:	4638      	mov	r0, r7
 8012774:	b003      	add	sp, #12
 8012776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801277a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801277e:	e7d5      	b.n	801272c <__d2b+0x1e>
 8012780:	6179      	str	r1, [r7, #20]
 8012782:	e7e7      	b.n	8012754 <__d2b+0x46>
 8012784:	a801      	add	r0, sp, #4
 8012786:	f7ff fddb 	bl	8012340 <__lo0bits>
 801278a:	9b01      	ldr	r3, [sp, #4]
 801278c:	617b      	str	r3, [r7, #20]
 801278e:	2101      	movs	r1, #1
 8012790:	6139      	str	r1, [r7, #16]
 8012792:	3020      	adds	r0, #32
 8012794:	e7e5      	b.n	8012762 <__d2b+0x54>
 8012796:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801279a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801279e:	6030      	str	r0, [r6, #0]
 80127a0:	6918      	ldr	r0, [r3, #16]
 80127a2:	f7ff fdae 	bl	8012302 <__hi0bits>
 80127a6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80127aa:	e7e1      	b.n	8012770 <__d2b+0x62>

080127ac <_calloc_r>:
 80127ac:	b538      	push	{r3, r4, r5, lr}
 80127ae:	fb02 f401 	mul.w	r4, r2, r1
 80127b2:	4621      	mov	r1, r4
 80127b4:	f000 f856 	bl	8012864 <_malloc_r>
 80127b8:	4605      	mov	r5, r0
 80127ba:	b118      	cbz	r0, 80127c4 <_calloc_r+0x18>
 80127bc:	4622      	mov	r2, r4
 80127be:	2100      	movs	r1, #0
 80127c0:	f7fd fef0 	bl	80105a4 <memset>
 80127c4:	4628      	mov	r0, r5
 80127c6:	bd38      	pop	{r3, r4, r5, pc}

080127c8 <_free_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	4605      	mov	r5, r0
 80127cc:	2900      	cmp	r1, #0
 80127ce:	d045      	beq.n	801285c <_free_r+0x94>
 80127d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80127d4:	1f0c      	subs	r4, r1, #4
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	bfb8      	it	lt
 80127da:	18e4      	addlt	r4, r4, r3
 80127dc:	f000 fc03 	bl	8012fe6 <__malloc_lock>
 80127e0:	4a1f      	ldr	r2, [pc, #124]	; (8012860 <_free_r+0x98>)
 80127e2:	6813      	ldr	r3, [r2, #0]
 80127e4:	4610      	mov	r0, r2
 80127e6:	b933      	cbnz	r3, 80127f6 <_free_r+0x2e>
 80127e8:	6063      	str	r3, [r4, #4]
 80127ea:	6014      	str	r4, [r2, #0]
 80127ec:	4628      	mov	r0, r5
 80127ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80127f2:	f000 bbf9 	b.w	8012fe8 <__malloc_unlock>
 80127f6:	42a3      	cmp	r3, r4
 80127f8:	d90c      	bls.n	8012814 <_free_r+0x4c>
 80127fa:	6821      	ldr	r1, [r4, #0]
 80127fc:	1862      	adds	r2, r4, r1
 80127fe:	4293      	cmp	r3, r2
 8012800:	bf04      	itt	eq
 8012802:	681a      	ldreq	r2, [r3, #0]
 8012804:	685b      	ldreq	r3, [r3, #4]
 8012806:	6063      	str	r3, [r4, #4]
 8012808:	bf04      	itt	eq
 801280a:	1852      	addeq	r2, r2, r1
 801280c:	6022      	streq	r2, [r4, #0]
 801280e:	6004      	str	r4, [r0, #0]
 8012810:	e7ec      	b.n	80127ec <_free_r+0x24>
 8012812:	4613      	mov	r3, r2
 8012814:	685a      	ldr	r2, [r3, #4]
 8012816:	b10a      	cbz	r2, 801281c <_free_r+0x54>
 8012818:	42a2      	cmp	r2, r4
 801281a:	d9fa      	bls.n	8012812 <_free_r+0x4a>
 801281c:	6819      	ldr	r1, [r3, #0]
 801281e:	1858      	adds	r0, r3, r1
 8012820:	42a0      	cmp	r0, r4
 8012822:	d10b      	bne.n	801283c <_free_r+0x74>
 8012824:	6820      	ldr	r0, [r4, #0]
 8012826:	4401      	add	r1, r0
 8012828:	1858      	adds	r0, r3, r1
 801282a:	4282      	cmp	r2, r0
 801282c:	6019      	str	r1, [r3, #0]
 801282e:	d1dd      	bne.n	80127ec <_free_r+0x24>
 8012830:	6810      	ldr	r0, [r2, #0]
 8012832:	6852      	ldr	r2, [r2, #4]
 8012834:	605a      	str	r2, [r3, #4]
 8012836:	4401      	add	r1, r0
 8012838:	6019      	str	r1, [r3, #0]
 801283a:	e7d7      	b.n	80127ec <_free_r+0x24>
 801283c:	d902      	bls.n	8012844 <_free_r+0x7c>
 801283e:	230c      	movs	r3, #12
 8012840:	602b      	str	r3, [r5, #0]
 8012842:	e7d3      	b.n	80127ec <_free_r+0x24>
 8012844:	6820      	ldr	r0, [r4, #0]
 8012846:	1821      	adds	r1, r4, r0
 8012848:	428a      	cmp	r2, r1
 801284a:	bf04      	itt	eq
 801284c:	6811      	ldreq	r1, [r2, #0]
 801284e:	6852      	ldreq	r2, [r2, #4]
 8012850:	6062      	str	r2, [r4, #4]
 8012852:	bf04      	itt	eq
 8012854:	1809      	addeq	r1, r1, r0
 8012856:	6021      	streq	r1, [r4, #0]
 8012858:	605c      	str	r4, [r3, #4]
 801285a:	e7c7      	b.n	80127ec <_free_r+0x24>
 801285c:	bd38      	pop	{r3, r4, r5, pc}
 801285e:	bf00      	nop
 8012860:	20002264 	.word	0x20002264

08012864 <_malloc_r>:
 8012864:	b570      	push	{r4, r5, r6, lr}
 8012866:	1ccd      	adds	r5, r1, #3
 8012868:	f025 0503 	bic.w	r5, r5, #3
 801286c:	3508      	adds	r5, #8
 801286e:	2d0c      	cmp	r5, #12
 8012870:	bf38      	it	cc
 8012872:	250c      	movcc	r5, #12
 8012874:	2d00      	cmp	r5, #0
 8012876:	4606      	mov	r6, r0
 8012878:	db01      	blt.n	801287e <_malloc_r+0x1a>
 801287a:	42a9      	cmp	r1, r5
 801287c:	d903      	bls.n	8012886 <_malloc_r+0x22>
 801287e:	230c      	movs	r3, #12
 8012880:	6033      	str	r3, [r6, #0]
 8012882:	2000      	movs	r0, #0
 8012884:	bd70      	pop	{r4, r5, r6, pc}
 8012886:	f000 fbae 	bl	8012fe6 <__malloc_lock>
 801288a:	4a21      	ldr	r2, [pc, #132]	; (8012910 <_malloc_r+0xac>)
 801288c:	6814      	ldr	r4, [r2, #0]
 801288e:	4621      	mov	r1, r4
 8012890:	b991      	cbnz	r1, 80128b8 <_malloc_r+0x54>
 8012892:	4c20      	ldr	r4, [pc, #128]	; (8012914 <_malloc_r+0xb0>)
 8012894:	6823      	ldr	r3, [r4, #0]
 8012896:	b91b      	cbnz	r3, 80128a0 <_malloc_r+0x3c>
 8012898:	4630      	mov	r0, r6
 801289a:	f000 facf 	bl	8012e3c <_sbrk_r>
 801289e:	6020      	str	r0, [r4, #0]
 80128a0:	4629      	mov	r1, r5
 80128a2:	4630      	mov	r0, r6
 80128a4:	f000 faca 	bl	8012e3c <_sbrk_r>
 80128a8:	1c43      	adds	r3, r0, #1
 80128aa:	d124      	bne.n	80128f6 <_malloc_r+0x92>
 80128ac:	230c      	movs	r3, #12
 80128ae:	6033      	str	r3, [r6, #0]
 80128b0:	4630      	mov	r0, r6
 80128b2:	f000 fb99 	bl	8012fe8 <__malloc_unlock>
 80128b6:	e7e4      	b.n	8012882 <_malloc_r+0x1e>
 80128b8:	680b      	ldr	r3, [r1, #0]
 80128ba:	1b5b      	subs	r3, r3, r5
 80128bc:	d418      	bmi.n	80128f0 <_malloc_r+0x8c>
 80128be:	2b0b      	cmp	r3, #11
 80128c0:	d90f      	bls.n	80128e2 <_malloc_r+0x7e>
 80128c2:	600b      	str	r3, [r1, #0]
 80128c4:	50cd      	str	r5, [r1, r3]
 80128c6:	18cc      	adds	r4, r1, r3
 80128c8:	4630      	mov	r0, r6
 80128ca:	f000 fb8d 	bl	8012fe8 <__malloc_unlock>
 80128ce:	f104 000b 	add.w	r0, r4, #11
 80128d2:	1d23      	adds	r3, r4, #4
 80128d4:	f020 0007 	bic.w	r0, r0, #7
 80128d8:	1ac3      	subs	r3, r0, r3
 80128da:	d0d3      	beq.n	8012884 <_malloc_r+0x20>
 80128dc:	425a      	negs	r2, r3
 80128de:	50e2      	str	r2, [r4, r3]
 80128e0:	e7d0      	b.n	8012884 <_malloc_r+0x20>
 80128e2:	428c      	cmp	r4, r1
 80128e4:	684b      	ldr	r3, [r1, #4]
 80128e6:	bf16      	itet	ne
 80128e8:	6063      	strne	r3, [r4, #4]
 80128ea:	6013      	streq	r3, [r2, #0]
 80128ec:	460c      	movne	r4, r1
 80128ee:	e7eb      	b.n	80128c8 <_malloc_r+0x64>
 80128f0:	460c      	mov	r4, r1
 80128f2:	6849      	ldr	r1, [r1, #4]
 80128f4:	e7cc      	b.n	8012890 <_malloc_r+0x2c>
 80128f6:	1cc4      	adds	r4, r0, #3
 80128f8:	f024 0403 	bic.w	r4, r4, #3
 80128fc:	42a0      	cmp	r0, r4
 80128fe:	d005      	beq.n	801290c <_malloc_r+0xa8>
 8012900:	1a21      	subs	r1, r4, r0
 8012902:	4630      	mov	r0, r6
 8012904:	f000 fa9a 	bl	8012e3c <_sbrk_r>
 8012908:	3001      	adds	r0, #1
 801290a:	d0cf      	beq.n	80128ac <_malloc_r+0x48>
 801290c:	6025      	str	r5, [r4, #0]
 801290e:	e7db      	b.n	80128c8 <_malloc_r+0x64>
 8012910:	20002264 	.word	0x20002264
 8012914:	20002268 	.word	0x20002268

08012918 <__ssputs_r>:
 8012918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801291c:	688e      	ldr	r6, [r1, #8]
 801291e:	429e      	cmp	r6, r3
 8012920:	4682      	mov	sl, r0
 8012922:	460c      	mov	r4, r1
 8012924:	4690      	mov	r8, r2
 8012926:	4699      	mov	r9, r3
 8012928:	d837      	bhi.n	801299a <__ssputs_r+0x82>
 801292a:	898a      	ldrh	r2, [r1, #12]
 801292c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012930:	d031      	beq.n	8012996 <__ssputs_r+0x7e>
 8012932:	6825      	ldr	r5, [r4, #0]
 8012934:	6909      	ldr	r1, [r1, #16]
 8012936:	1a6f      	subs	r7, r5, r1
 8012938:	6965      	ldr	r5, [r4, #20]
 801293a:	2302      	movs	r3, #2
 801293c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012940:	fb95 f5f3 	sdiv	r5, r5, r3
 8012944:	f109 0301 	add.w	r3, r9, #1
 8012948:	443b      	add	r3, r7
 801294a:	429d      	cmp	r5, r3
 801294c:	bf38      	it	cc
 801294e:	461d      	movcc	r5, r3
 8012950:	0553      	lsls	r3, r2, #21
 8012952:	d530      	bpl.n	80129b6 <__ssputs_r+0x9e>
 8012954:	4629      	mov	r1, r5
 8012956:	f7ff ff85 	bl	8012864 <_malloc_r>
 801295a:	4606      	mov	r6, r0
 801295c:	b950      	cbnz	r0, 8012974 <__ssputs_r+0x5c>
 801295e:	230c      	movs	r3, #12
 8012960:	f8ca 3000 	str.w	r3, [sl]
 8012964:	89a3      	ldrh	r3, [r4, #12]
 8012966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801296a:	81a3      	strh	r3, [r4, #12]
 801296c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012974:	463a      	mov	r2, r7
 8012976:	6921      	ldr	r1, [r4, #16]
 8012978:	f7ff fc32 	bl	80121e0 <memcpy>
 801297c:	89a3      	ldrh	r3, [r4, #12]
 801297e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012986:	81a3      	strh	r3, [r4, #12]
 8012988:	6126      	str	r6, [r4, #16]
 801298a:	6165      	str	r5, [r4, #20]
 801298c:	443e      	add	r6, r7
 801298e:	1bed      	subs	r5, r5, r7
 8012990:	6026      	str	r6, [r4, #0]
 8012992:	60a5      	str	r5, [r4, #8]
 8012994:	464e      	mov	r6, r9
 8012996:	454e      	cmp	r6, r9
 8012998:	d900      	bls.n	801299c <__ssputs_r+0x84>
 801299a:	464e      	mov	r6, r9
 801299c:	4632      	mov	r2, r6
 801299e:	4641      	mov	r1, r8
 80129a0:	6820      	ldr	r0, [r4, #0]
 80129a2:	f000 fb07 	bl	8012fb4 <memmove>
 80129a6:	68a3      	ldr	r3, [r4, #8]
 80129a8:	1b9b      	subs	r3, r3, r6
 80129aa:	60a3      	str	r3, [r4, #8]
 80129ac:	6823      	ldr	r3, [r4, #0]
 80129ae:	441e      	add	r6, r3
 80129b0:	6026      	str	r6, [r4, #0]
 80129b2:	2000      	movs	r0, #0
 80129b4:	e7dc      	b.n	8012970 <__ssputs_r+0x58>
 80129b6:	462a      	mov	r2, r5
 80129b8:	f000 fb17 	bl	8012fea <_realloc_r>
 80129bc:	4606      	mov	r6, r0
 80129be:	2800      	cmp	r0, #0
 80129c0:	d1e2      	bne.n	8012988 <__ssputs_r+0x70>
 80129c2:	6921      	ldr	r1, [r4, #16]
 80129c4:	4650      	mov	r0, sl
 80129c6:	f7ff feff 	bl	80127c8 <_free_r>
 80129ca:	e7c8      	b.n	801295e <__ssputs_r+0x46>

080129cc <_svfiprintf_r>:
 80129cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d0:	461d      	mov	r5, r3
 80129d2:	898b      	ldrh	r3, [r1, #12]
 80129d4:	061f      	lsls	r7, r3, #24
 80129d6:	b09d      	sub	sp, #116	; 0x74
 80129d8:	4680      	mov	r8, r0
 80129da:	460c      	mov	r4, r1
 80129dc:	4616      	mov	r6, r2
 80129de:	d50f      	bpl.n	8012a00 <_svfiprintf_r+0x34>
 80129e0:	690b      	ldr	r3, [r1, #16]
 80129e2:	b96b      	cbnz	r3, 8012a00 <_svfiprintf_r+0x34>
 80129e4:	2140      	movs	r1, #64	; 0x40
 80129e6:	f7ff ff3d 	bl	8012864 <_malloc_r>
 80129ea:	6020      	str	r0, [r4, #0]
 80129ec:	6120      	str	r0, [r4, #16]
 80129ee:	b928      	cbnz	r0, 80129fc <_svfiprintf_r+0x30>
 80129f0:	230c      	movs	r3, #12
 80129f2:	f8c8 3000 	str.w	r3, [r8]
 80129f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80129fa:	e0c8      	b.n	8012b8e <_svfiprintf_r+0x1c2>
 80129fc:	2340      	movs	r3, #64	; 0x40
 80129fe:	6163      	str	r3, [r4, #20]
 8012a00:	2300      	movs	r3, #0
 8012a02:	9309      	str	r3, [sp, #36]	; 0x24
 8012a04:	2320      	movs	r3, #32
 8012a06:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012a0a:	2330      	movs	r3, #48	; 0x30
 8012a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012a10:	9503      	str	r5, [sp, #12]
 8012a12:	f04f 0b01 	mov.w	fp, #1
 8012a16:	4637      	mov	r7, r6
 8012a18:	463d      	mov	r5, r7
 8012a1a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012a1e:	b10b      	cbz	r3, 8012a24 <_svfiprintf_r+0x58>
 8012a20:	2b25      	cmp	r3, #37	; 0x25
 8012a22:	d13e      	bne.n	8012aa2 <_svfiprintf_r+0xd6>
 8012a24:	ebb7 0a06 	subs.w	sl, r7, r6
 8012a28:	d00b      	beq.n	8012a42 <_svfiprintf_r+0x76>
 8012a2a:	4653      	mov	r3, sl
 8012a2c:	4632      	mov	r2, r6
 8012a2e:	4621      	mov	r1, r4
 8012a30:	4640      	mov	r0, r8
 8012a32:	f7ff ff71 	bl	8012918 <__ssputs_r>
 8012a36:	3001      	adds	r0, #1
 8012a38:	f000 80a4 	beq.w	8012b84 <_svfiprintf_r+0x1b8>
 8012a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a3e:	4453      	add	r3, sl
 8012a40:	9309      	str	r3, [sp, #36]	; 0x24
 8012a42:	783b      	ldrb	r3, [r7, #0]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	f000 809d 	beq.w	8012b84 <_svfiprintf_r+0x1b8>
 8012a4a:	2300      	movs	r3, #0
 8012a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012a54:	9304      	str	r3, [sp, #16]
 8012a56:	9307      	str	r3, [sp, #28]
 8012a58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012a5c:	931a      	str	r3, [sp, #104]	; 0x68
 8012a5e:	462f      	mov	r7, r5
 8012a60:	2205      	movs	r2, #5
 8012a62:	f817 1b01 	ldrb.w	r1, [r7], #1
 8012a66:	4850      	ldr	r0, [pc, #320]	; (8012ba8 <_svfiprintf_r+0x1dc>)
 8012a68:	f7ed fbe2 	bl	8000230 <memchr>
 8012a6c:	9b04      	ldr	r3, [sp, #16]
 8012a6e:	b9d0      	cbnz	r0, 8012aa6 <_svfiprintf_r+0xda>
 8012a70:	06d9      	lsls	r1, r3, #27
 8012a72:	bf44      	itt	mi
 8012a74:	2220      	movmi	r2, #32
 8012a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a7a:	071a      	lsls	r2, r3, #28
 8012a7c:	bf44      	itt	mi
 8012a7e:	222b      	movmi	r2, #43	; 0x2b
 8012a80:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012a84:	782a      	ldrb	r2, [r5, #0]
 8012a86:	2a2a      	cmp	r2, #42	; 0x2a
 8012a88:	d015      	beq.n	8012ab6 <_svfiprintf_r+0xea>
 8012a8a:	9a07      	ldr	r2, [sp, #28]
 8012a8c:	462f      	mov	r7, r5
 8012a8e:	2000      	movs	r0, #0
 8012a90:	250a      	movs	r5, #10
 8012a92:	4639      	mov	r1, r7
 8012a94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012a98:	3b30      	subs	r3, #48	; 0x30
 8012a9a:	2b09      	cmp	r3, #9
 8012a9c:	d94d      	bls.n	8012b3a <_svfiprintf_r+0x16e>
 8012a9e:	b1b8      	cbz	r0, 8012ad0 <_svfiprintf_r+0x104>
 8012aa0:	e00f      	b.n	8012ac2 <_svfiprintf_r+0xf6>
 8012aa2:	462f      	mov	r7, r5
 8012aa4:	e7b8      	b.n	8012a18 <_svfiprintf_r+0x4c>
 8012aa6:	4a40      	ldr	r2, [pc, #256]	; (8012ba8 <_svfiprintf_r+0x1dc>)
 8012aa8:	1a80      	subs	r0, r0, r2
 8012aaa:	fa0b f000 	lsl.w	r0, fp, r0
 8012aae:	4318      	orrs	r0, r3
 8012ab0:	9004      	str	r0, [sp, #16]
 8012ab2:	463d      	mov	r5, r7
 8012ab4:	e7d3      	b.n	8012a5e <_svfiprintf_r+0x92>
 8012ab6:	9a03      	ldr	r2, [sp, #12]
 8012ab8:	1d11      	adds	r1, r2, #4
 8012aba:	6812      	ldr	r2, [r2, #0]
 8012abc:	9103      	str	r1, [sp, #12]
 8012abe:	2a00      	cmp	r2, #0
 8012ac0:	db01      	blt.n	8012ac6 <_svfiprintf_r+0xfa>
 8012ac2:	9207      	str	r2, [sp, #28]
 8012ac4:	e004      	b.n	8012ad0 <_svfiprintf_r+0x104>
 8012ac6:	4252      	negs	r2, r2
 8012ac8:	f043 0302 	orr.w	r3, r3, #2
 8012acc:	9207      	str	r2, [sp, #28]
 8012ace:	9304      	str	r3, [sp, #16]
 8012ad0:	783b      	ldrb	r3, [r7, #0]
 8012ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8012ad4:	d10c      	bne.n	8012af0 <_svfiprintf_r+0x124>
 8012ad6:	787b      	ldrb	r3, [r7, #1]
 8012ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8012ada:	d133      	bne.n	8012b44 <_svfiprintf_r+0x178>
 8012adc:	9b03      	ldr	r3, [sp, #12]
 8012ade:	1d1a      	adds	r2, r3, #4
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	9203      	str	r2, [sp, #12]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	bfb8      	it	lt
 8012ae8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012aec:	3702      	adds	r7, #2
 8012aee:	9305      	str	r3, [sp, #20]
 8012af0:	4d2e      	ldr	r5, [pc, #184]	; (8012bac <_svfiprintf_r+0x1e0>)
 8012af2:	7839      	ldrb	r1, [r7, #0]
 8012af4:	2203      	movs	r2, #3
 8012af6:	4628      	mov	r0, r5
 8012af8:	f7ed fb9a 	bl	8000230 <memchr>
 8012afc:	b138      	cbz	r0, 8012b0e <_svfiprintf_r+0x142>
 8012afe:	2340      	movs	r3, #64	; 0x40
 8012b00:	1b40      	subs	r0, r0, r5
 8012b02:	fa03 f000 	lsl.w	r0, r3, r0
 8012b06:	9b04      	ldr	r3, [sp, #16]
 8012b08:	4303      	orrs	r3, r0
 8012b0a:	3701      	adds	r7, #1
 8012b0c:	9304      	str	r3, [sp, #16]
 8012b0e:	7839      	ldrb	r1, [r7, #0]
 8012b10:	4827      	ldr	r0, [pc, #156]	; (8012bb0 <_svfiprintf_r+0x1e4>)
 8012b12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012b16:	2206      	movs	r2, #6
 8012b18:	1c7e      	adds	r6, r7, #1
 8012b1a:	f7ed fb89 	bl	8000230 <memchr>
 8012b1e:	2800      	cmp	r0, #0
 8012b20:	d038      	beq.n	8012b94 <_svfiprintf_r+0x1c8>
 8012b22:	4b24      	ldr	r3, [pc, #144]	; (8012bb4 <_svfiprintf_r+0x1e8>)
 8012b24:	bb13      	cbnz	r3, 8012b6c <_svfiprintf_r+0x1a0>
 8012b26:	9b03      	ldr	r3, [sp, #12]
 8012b28:	3307      	adds	r3, #7
 8012b2a:	f023 0307 	bic.w	r3, r3, #7
 8012b2e:	3308      	adds	r3, #8
 8012b30:	9303      	str	r3, [sp, #12]
 8012b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b34:	444b      	add	r3, r9
 8012b36:	9309      	str	r3, [sp, #36]	; 0x24
 8012b38:	e76d      	b.n	8012a16 <_svfiprintf_r+0x4a>
 8012b3a:	fb05 3202 	mla	r2, r5, r2, r3
 8012b3e:	2001      	movs	r0, #1
 8012b40:	460f      	mov	r7, r1
 8012b42:	e7a6      	b.n	8012a92 <_svfiprintf_r+0xc6>
 8012b44:	2300      	movs	r3, #0
 8012b46:	3701      	adds	r7, #1
 8012b48:	9305      	str	r3, [sp, #20]
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	250a      	movs	r5, #10
 8012b4e:	4638      	mov	r0, r7
 8012b50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012b54:	3a30      	subs	r2, #48	; 0x30
 8012b56:	2a09      	cmp	r2, #9
 8012b58:	d903      	bls.n	8012b62 <_svfiprintf_r+0x196>
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d0c8      	beq.n	8012af0 <_svfiprintf_r+0x124>
 8012b5e:	9105      	str	r1, [sp, #20]
 8012b60:	e7c6      	b.n	8012af0 <_svfiprintf_r+0x124>
 8012b62:	fb05 2101 	mla	r1, r5, r1, r2
 8012b66:	2301      	movs	r3, #1
 8012b68:	4607      	mov	r7, r0
 8012b6a:	e7f0      	b.n	8012b4e <_svfiprintf_r+0x182>
 8012b6c:	ab03      	add	r3, sp, #12
 8012b6e:	9300      	str	r3, [sp, #0]
 8012b70:	4622      	mov	r2, r4
 8012b72:	4b11      	ldr	r3, [pc, #68]	; (8012bb8 <_svfiprintf_r+0x1ec>)
 8012b74:	a904      	add	r1, sp, #16
 8012b76:	4640      	mov	r0, r8
 8012b78:	f7fd fdb0 	bl	80106dc <_printf_float>
 8012b7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012b80:	4681      	mov	r9, r0
 8012b82:	d1d6      	bne.n	8012b32 <_svfiprintf_r+0x166>
 8012b84:	89a3      	ldrh	r3, [r4, #12]
 8012b86:	065b      	lsls	r3, r3, #25
 8012b88:	f53f af35 	bmi.w	80129f6 <_svfiprintf_r+0x2a>
 8012b8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b8e:	b01d      	add	sp, #116	; 0x74
 8012b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b94:	ab03      	add	r3, sp, #12
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	4622      	mov	r2, r4
 8012b9a:	4b07      	ldr	r3, [pc, #28]	; (8012bb8 <_svfiprintf_r+0x1ec>)
 8012b9c:	a904      	add	r1, sp, #16
 8012b9e:	4640      	mov	r0, r8
 8012ba0:	f7fe f852 	bl	8010c48 <_printf_i>
 8012ba4:	e7ea      	b.n	8012b7c <_svfiprintf_r+0x1b0>
 8012ba6:	bf00      	nop
 8012ba8:	0801595c 	.word	0x0801595c
 8012bac:	08015962 	.word	0x08015962
 8012bb0:	08015966 	.word	0x08015966
 8012bb4:	080106dd 	.word	0x080106dd
 8012bb8:	08012919 	.word	0x08012919

08012bbc <__sfputc_r>:
 8012bbc:	6893      	ldr	r3, [r2, #8]
 8012bbe:	3b01      	subs	r3, #1
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	b410      	push	{r4}
 8012bc4:	6093      	str	r3, [r2, #8]
 8012bc6:	da08      	bge.n	8012bda <__sfputc_r+0x1e>
 8012bc8:	6994      	ldr	r4, [r2, #24]
 8012bca:	42a3      	cmp	r3, r4
 8012bcc:	db01      	blt.n	8012bd2 <__sfputc_r+0x16>
 8012bce:	290a      	cmp	r1, #10
 8012bd0:	d103      	bne.n	8012bda <__sfputc_r+0x1e>
 8012bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012bd6:	f7fe ba09 	b.w	8010fec <__swbuf_r>
 8012bda:	6813      	ldr	r3, [r2, #0]
 8012bdc:	1c58      	adds	r0, r3, #1
 8012bde:	6010      	str	r0, [r2, #0]
 8012be0:	7019      	strb	r1, [r3, #0]
 8012be2:	4608      	mov	r0, r1
 8012be4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012be8:	4770      	bx	lr

08012bea <__sfputs_r>:
 8012bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012bec:	4606      	mov	r6, r0
 8012bee:	460f      	mov	r7, r1
 8012bf0:	4614      	mov	r4, r2
 8012bf2:	18d5      	adds	r5, r2, r3
 8012bf4:	42ac      	cmp	r4, r5
 8012bf6:	d101      	bne.n	8012bfc <__sfputs_r+0x12>
 8012bf8:	2000      	movs	r0, #0
 8012bfa:	e007      	b.n	8012c0c <__sfputs_r+0x22>
 8012bfc:	463a      	mov	r2, r7
 8012bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c02:	4630      	mov	r0, r6
 8012c04:	f7ff ffda 	bl	8012bbc <__sfputc_r>
 8012c08:	1c43      	adds	r3, r0, #1
 8012c0a:	d1f3      	bne.n	8012bf4 <__sfputs_r+0xa>
 8012c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012c10 <_vfiprintf_r>:
 8012c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c14:	460c      	mov	r4, r1
 8012c16:	b09d      	sub	sp, #116	; 0x74
 8012c18:	4617      	mov	r7, r2
 8012c1a:	461d      	mov	r5, r3
 8012c1c:	4606      	mov	r6, r0
 8012c1e:	b118      	cbz	r0, 8012c28 <_vfiprintf_r+0x18>
 8012c20:	6983      	ldr	r3, [r0, #24]
 8012c22:	b90b      	cbnz	r3, 8012c28 <_vfiprintf_r+0x18>
 8012c24:	f7ff f9d8 	bl	8011fd8 <__sinit>
 8012c28:	4b7c      	ldr	r3, [pc, #496]	; (8012e1c <_vfiprintf_r+0x20c>)
 8012c2a:	429c      	cmp	r4, r3
 8012c2c:	d158      	bne.n	8012ce0 <_vfiprintf_r+0xd0>
 8012c2e:	6874      	ldr	r4, [r6, #4]
 8012c30:	89a3      	ldrh	r3, [r4, #12]
 8012c32:	0718      	lsls	r0, r3, #28
 8012c34:	d55e      	bpl.n	8012cf4 <_vfiprintf_r+0xe4>
 8012c36:	6923      	ldr	r3, [r4, #16]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d05b      	beq.n	8012cf4 <_vfiprintf_r+0xe4>
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c40:	2320      	movs	r3, #32
 8012c42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012c46:	2330      	movs	r3, #48	; 0x30
 8012c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012c4c:	9503      	str	r5, [sp, #12]
 8012c4e:	f04f 0b01 	mov.w	fp, #1
 8012c52:	46b8      	mov	r8, r7
 8012c54:	4645      	mov	r5, r8
 8012c56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8012c5a:	b10b      	cbz	r3, 8012c60 <_vfiprintf_r+0x50>
 8012c5c:	2b25      	cmp	r3, #37	; 0x25
 8012c5e:	d154      	bne.n	8012d0a <_vfiprintf_r+0xfa>
 8012c60:	ebb8 0a07 	subs.w	sl, r8, r7
 8012c64:	d00b      	beq.n	8012c7e <_vfiprintf_r+0x6e>
 8012c66:	4653      	mov	r3, sl
 8012c68:	463a      	mov	r2, r7
 8012c6a:	4621      	mov	r1, r4
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f7ff ffbc 	bl	8012bea <__sfputs_r>
 8012c72:	3001      	adds	r0, #1
 8012c74:	f000 80c2 	beq.w	8012dfc <_vfiprintf_r+0x1ec>
 8012c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c7a:	4453      	add	r3, sl
 8012c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8012c7e:	f898 3000 	ldrb.w	r3, [r8]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	f000 80ba 	beq.w	8012dfc <_vfiprintf_r+0x1ec>
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c92:	9304      	str	r3, [sp, #16]
 8012c94:	9307      	str	r3, [sp, #28]
 8012c96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012c9a:	931a      	str	r3, [sp, #104]	; 0x68
 8012c9c:	46a8      	mov	r8, r5
 8012c9e:	2205      	movs	r2, #5
 8012ca0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012ca4:	485e      	ldr	r0, [pc, #376]	; (8012e20 <_vfiprintf_r+0x210>)
 8012ca6:	f7ed fac3 	bl	8000230 <memchr>
 8012caa:	9b04      	ldr	r3, [sp, #16]
 8012cac:	bb78      	cbnz	r0, 8012d0e <_vfiprintf_r+0xfe>
 8012cae:	06d9      	lsls	r1, r3, #27
 8012cb0:	bf44      	itt	mi
 8012cb2:	2220      	movmi	r2, #32
 8012cb4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cb8:	071a      	lsls	r2, r3, #28
 8012cba:	bf44      	itt	mi
 8012cbc:	222b      	movmi	r2, #43	; 0x2b
 8012cbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012cc2:	782a      	ldrb	r2, [r5, #0]
 8012cc4:	2a2a      	cmp	r2, #42	; 0x2a
 8012cc6:	d02a      	beq.n	8012d1e <_vfiprintf_r+0x10e>
 8012cc8:	9a07      	ldr	r2, [sp, #28]
 8012cca:	46a8      	mov	r8, r5
 8012ccc:	2000      	movs	r0, #0
 8012cce:	250a      	movs	r5, #10
 8012cd0:	4641      	mov	r1, r8
 8012cd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012cd6:	3b30      	subs	r3, #48	; 0x30
 8012cd8:	2b09      	cmp	r3, #9
 8012cda:	d969      	bls.n	8012db0 <_vfiprintf_r+0x1a0>
 8012cdc:	b360      	cbz	r0, 8012d38 <_vfiprintf_r+0x128>
 8012cde:	e024      	b.n	8012d2a <_vfiprintf_r+0x11a>
 8012ce0:	4b50      	ldr	r3, [pc, #320]	; (8012e24 <_vfiprintf_r+0x214>)
 8012ce2:	429c      	cmp	r4, r3
 8012ce4:	d101      	bne.n	8012cea <_vfiprintf_r+0xda>
 8012ce6:	68b4      	ldr	r4, [r6, #8]
 8012ce8:	e7a2      	b.n	8012c30 <_vfiprintf_r+0x20>
 8012cea:	4b4f      	ldr	r3, [pc, #316]	; (8012e28 <_vfiprintf_r+0x218>)
 8012cec:	429c      	cmp	r4, r3
 8012cee:	bf08      	it	eq
 8012cf0:	68f4      	ldreq	r4, [r6, #12]
 8012cf2:	e79d      	b.n	8012c30 <_vfiprintf_r+0x20>
 8012cf4:	4621      	mov	r1, r4
 8012cf6:	4630      	mov	r0, r6
 8012cf8:	f7fe f9ca 	bl	8011090 <__swsetup_r>
 8012cfc:	2800      	cmp	r0, #0
 8012cfe:	d09d      	beq.n	8012c3c <_vfiprintf_r+0x2c>
 8012d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012d04:	b01d      	add	sp, #116	; 0x74
 8012d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d0a:	46a8      	mov	r8, r5
 8012d0c:	e7a2      	b.n	8012c54 <_vfiprintf_r+0x44>
 8012d0e:	4a44      	ldr	r2, [pc, #272]	; (8012e20 <_vfiprintf_r+0x210>)
 8012d10:	1a80      	subs	r0, r0, r2
 8012d12:	fa0b f000 	lsl.w	r0, fp, r0
 8012d16:	4318      	orrs	r0, r3
 8012d18:	9004      	str	r0, [sp, #16]
 8012d1a:	4645      	mov	r5, r8
 8012d1c:	e7be      	b.n	8012c9c <_vfiprintf_r+0x8c>
 8012d1e:	9a03      	ldr	r2, [sp, #12]
 8012d20:	1d11      	adds	r1, r2, #4
 8012d22:	6812      	ldr	r2, [r2, #0]
 8012d24:	9103      	str	r1, [sp, #12]
 8012d26:	2a00      	cmp	r2, #0
 8012d28:	db01      	blt.n	8012d2e <_vfiprintf_r+0x11e>
 8012d2a:	9207      	str	r2, [sp, #28]
 8012d2c:	e004      	b.n	8012d38 <_vfiprintf_r+0x128>
 8012d2e:	4252      	negs	r2, r2
 8012d30:	f043 0302 	orr.w	r3, r3, #2
 8012d34:	9207      	str	r2, [sp, #28]
 8012d36:	9304      	str	r3, [sp, #16]
 8012d38:	f898 3000 	ldrb.w	r3, [r8]
 8012d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8012d3e:	d10e      	bne.n	8012d5e <_vfiprintf_r+0x14e>
 8012d40:	f898 3001 	ldrb.w	r3, [r8, #1]
 8012d44:	2b2a      	cmp	r3, #42	; 0x2a
 8012d46:	d138      	bne.n	8012dba <_vfiprintf_r+0x1aa>
 8012d48:	9b03      	ldr	r3, [sp, #12]
 8012d4a:	1d1a      	adds	r2, r3, #4
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	9203      	str	r2, [sp, #12]
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	bfb8      	it	lt
 8012d54:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012d58:	f108 0802 	add.w	r8, r8, #2
 8012d5c:	9305      	str	r3, [sp, #20]
 8012d5e:	4d33      	ldr	r5, [pc, #204]	; (8012e2c <_vfiprintf_r+0x21c>)
 8012d60:	f898 1000 	ldrb.w	r1, [r8]
 8012d64:	2203      	movs	r2, #3
 8012d66:	4628      	mov	r0, r5
 8012d68:	f7ed fa62 	bl	8000230 <memchr>
 8012d6c:	b140      	cbz	r0, 8012d80 <_vfiprintf_r+0x170>
 8012d6e:	2340      	movs	r3, #64	; 0x40
 8012d70:	1b40      	subs	r0, r0, r5
 8012d72:	fa03 f000 	lsl.w	r0, r3, r0
 8012d76:	9b04      	ldr	r3, [sp, #16]
 8012d78:	4303      	orrs	r3, r0
 8012d7a:	f108 0801 	add.w	r8, r8, #1
 8012d7e:	9304      	str	r3, [sp, #16]
 8012d80:	f898 1000 	ldrb.w	r1, [r8]
 8012d84:	482a      	ldr	r0, [pc, #168]	; (8012e30 <_vfiprintf_r+0x220>)
 8012d86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012d8a:	2206      	movs	r2, #6
 8012d8c:	f108 0701 	add.w	r7, r8, #1
 8012d90:	f7ed fa4e 	bl	8000230 <memchr>
 8012d94:	2800      	cmp	r0, #0
 8012d96:	d037      	beq.n	8012e08 <_vfiprintf_r+0x1f8>
 8012d98:	4b26      	ldr	r3, [pc, #152]	; (8012e34 <_vfiprintf_r+0x224>)
 8012d9a:	bb1b      	cbnz	r3, 8012de4 <_vfiprintf_r+0x1d4>
 8012d9c:	9b03      	ldr	r3, [sp, #12]
 8012d9e:	3307      	adds	r3, #7
 8012da0:	f023 0307 	bic.w	r3, r3, #7
 8012da4:	3308      	adds	r3, #8
 8012da6:	9303      	str	r3, [sp, #12]
 8012da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012daa:	444b      	add	r3, r9
 8012dac:	9309      	str	r3, [sp, #36]	; 0x24
 8012dae:	e750      	b.n	8012c52 <_vfiprintf_r+0x42>
 8012db0:	fb05 3202 	mla	r2, r5, r2, r3
 8012db4:	2001      	movs	r0, #1
 8012db6:	4688      	mov	r8, r1
 8012db8:	e78a      	b.n	8012cd0 <_vfiprintf_r+0xc0>
 8012dba:	2300      	movs	r3, #0
 8012dbc:	f108 0801 	add.w	r8, r8, #1
 8012dc0:	9305      	str	r3, [sp, #20]
 8012dc2:	4619      	mov	r1, r3
 8012dc4:	250a      	movs	r5, #10
 8012dc6:	4640      	mov	r0, r8
 8012dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012dcc:	3a30      	subs	r2, #48	; 0x30
 8012dce:	2a09      	cmp	r2, #9
 8012dd0:	d903      	bls.n	8012dda <_vfiprintf_r+0x1ca>
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d0c3      	beq.n	8012d5e <_vfiprintf_r+0x14e>
 8012dd6:	9105      	str	r1, [sp, #20]
 8012dd8:	e7c1      	b.n	8012d5e <_vfiprintf_r+0x14e>
 8012dda:	fb05 2101 	mla	r1, r5, r1, r2
 8012dde:	2301      	movs	r3, #1
 8012de0:	4680      	mov	r8, r0
 8012de2:	e7f0      	b.n	8012dc6 <_vfiprintf_r+0x1b6>
 8012de4:	ab03      	add	r3, sp, #12
 8012de6:	9300      	str	r3, [sp, #0]
 8012de8:	4622      	mov	r2, r4
 8012dea:	4b13      	ldr	r3, [pc, #76]	; (8012e38 <_vfiprintf_r+0x228>)
 8012dec:	a904      	add	r1, sp, #16
 8012dee:	4630      	mov	r0, r6
 8012df0:	f7fd fc74 	bl	80106dc <_printf_float>
 8012df4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8012df8:	4681      	mov	r9, r0
 8012dfa:	d1d5      	bne.n	8012da8 <_vfiprintf_r+0x198>
 8012dfc:	89a3      	ldrh	r3, [r4, #12]
 8012dfe:	065b      	lsls	r3, r3, #25
 8012e00:	f53f af7e 	bmi.w	8012d00 <_vfiprintf_r+0xf0>
 8012e04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e06:	e77d      	b.n	8012d04 <_vfiprintf_r+0xf4>
 8012e08:	ab03      	add	r3, sp, #12
 8012e0a:	9300      	str	r3, [sp, #0]
 8012e0c:	4622      	mov	r2, r4
 8012e0e:	4b0a      	ldr	r3, [pc, #40]	; (8012e38 <_vfiprintf_r+0x228>)
 8012e10:	a904      	add	r1, sp, #16
 8012e12:	4630      	mov	r0, r6
 8012e14:	f7fd ff18 	bl	8010c48 <_printf_i>
 8012e18:	e7ec      	b.n	8012df4 <_vfiprintf_r+0x1e4>
 8012e1a:	bf00      	nop
 8012e1c:	0801581c 	.word	0x0801581c
 8012e20:	0801595c 	.word	0x0801595c
 8012e24:	0801583c 	.word	0x0801583c
 8012e28:	080157fc 	.word	0x080157fc
 8012e2c:	08015962 	.word	0x08015962
 8012e30:	08015966 	.word	0x08015966
 8012e34:	080106dd 	.word	0x080106dd
 8012e38:	08012beb 	.word	0x08012beb

08012e3c <_sbrk_r>:
 8012e3c:	b538      	push	{r3, r4, r5, lr}
 8012e3e:	4c06      	ldr	r4, [pc, #24]	; (8012e58 <_sbrk_r+0x1c>)
 8012e40:	2300      	movs	r3, #0
 8012e42:	4605      	mov	r5, r0
 8012e44:	4608      	mov	r0, r1
 8012e46:	6023      	str	r3, [r4, #0]
 8012e48:	f7f5 fa9e 	bl	8008388 <_sbrk>
 8012e4c:	1c43      	adds	r3, r0, #1
 8012e4e:	d102      	bne.n	8012e56 <_sbrk_r+0x1a>
 8012e50:	6823      	ldr	r3, [r4, #0]
 8012e52:	b103      	cbz	r3, 8012e56 <_sbrk_r+0x1a>
 8012e54:	602b      	str	r3, [r5, #0]
 8012e56:	bd38      	pop	{r3, r4, r5, pc}
 8012e58:	20002cf0 	.word	0x20002cf0

08012e5c <__sread>:
 8012e5c:	b510      	push	{r4, lr}
 8012e5e:	460c      	mov	r4, r1
 8012e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e64:	f000 f8e8 	bl	8013038 <_read_r>
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	bfab      	itete	ge
 8012e6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012e6e:	89a3      	ldrhlt	r3, [r4, #12]
 8012e70:	181b      	addge	r3, r3, r0
 8012e72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012e76:	bfac      	ite	ge
 8012e78:	6563      	strge	r3, [r4, #84]	; 0x54
 8012e7a:	81a3      	strhlt	r3, [r4, #12]
 8012e7c:	bd10      	pop	{r4, pc}

08012e7e <__swrite>:
 8012e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012e82:	461f      	mov	r7, r3
 8012e84:	898b      	ldrh	r3, [r1, #12]
 8012e86:	05db      	lsls	r3, r3, #23
 8012e88:	4605      	mov	r5, r0
 8012e8a:	460c      	mov	r4, r1
 8012e8c:	4616      	mov	r6, r2
 8012e8e:	d505      	bpl.n	8012e9c <__swrite+0x1e>
 8012e90:	2302      	movs	r3, #2
 8012e92:	2200      	movs	r2, #0
 8012e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012e98:	f000 f868 	bl	8012f6c <_lseek_r>
 8012e9c:	89a3      	ldrh	r3, [r4, #12]
 8012e9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012ea6:	81a3      	strh	r3, [r4, #12]
 8012ea8:	4632      	mov	r2, r6
 8012eaa:	463b      	mov	r3, r7
 8012eac:	4628      	mov	r0, r5
 8012eae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012eb2:	f000 b817 	b.w	8012ee4 <_write_r>

08012eb6 <__sseek>:
 8012eb6:	b510      	push	{r4, lr}
 8012eb8:	460c      	mov	r4, r1
 8012eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ebe:	f000 f855 	bl	8012f6c <_lseek_r>
 8012ec2:	1c43      	adds	r3, r0, #1
 8012ec4:	89a3      	ldrh	r3, [r4, #12]
 8012ec6:	bf15      	itete	ne
 8012ec8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012eca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012ece:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ed2:	81a3      	strheq	r3, [r4, #12]
 8012ed4:	bf18      	it	ne
 8012ed6:	81a3      	strhne	r3, [r4, #12]
 8012ed8:	bd10      	pop	{r4, pc}

08012eda <__sclose>:
 8012eda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ede:	f000 b813 	b.w	8012f08 <_close_r>
	...

08012ee4 <_write_r>:
 8012ee4:	b538      	push	{r3, r4, r5, lr}
 8012ee6:	4c07      	ldr	r4, [pc, #28]	; (8012f04 <_write_r+0x20>)
 8012ee8:	4605      	mov	r5, r0
 8012eea:	4608      	mov	r0, r1
 8012eec:	4611      	mov	r1, r2
 8012eee:	2200      	movs	r2, #0
 8012ef0:	6022      	str	r2, [r4, #0]
 8012ef2:	461a      	mov	r2, r3
 8012ef4:	f7f4 ff05 	bl	8007d02 <_write>
 8012ef8:	1c43      	adds	r3, r0, #1
 8012efa:	d102      	bne.n	8012f02 <_write_r+0x1e>
 8012efc:	6823      	ldr	r3, [r4, #0]
 8012efe:	b103      	cbz	r3, 8012f02 <_write_r+0x1e>
 8012f00:	602b      	str	r3, [r5, #0]
 8012f02:	bd38      	pop	{r3, r4, r5, pc}
 8012f04:	20002cf0 	.word	0x20002cf0

08012f08 <_close_r>:
 8012f08:	b538      	push	{r3, r4, r5, lr}
 8012f0a:	4c06      	ldr	r4, [pc, #24]	; (8012f24 <_close_r+0x1c>)
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	4605      	mov	r5, r0
 8012f10:	4608      	mov	r0, r1
 8012f12:	6023      	str	r3, [r4, #0]
 8012f14:	f7f5 fa03 	bl	800831e <_close>
 8012f18:	1c43      	adds	r3, r0, #1
 8012f1a:	d102      	bne.n	8012f22 <_close_r+0x1a>
 8012f1c:	6823      	ldr	r3, [r4, #0]
 8012f1e:	b103      	cbz	r3, 8012f22 <_close_r+0x1a>
 8012f20:	602b      	str	r3, [r5, #0]
 8012f22:	bd38      	pop	{r3, r4, r5, pc}
 8012f24:	20002cf0 	.word	0x20002cf0

08012f28 <_fstat_r>:
 8012f28:	b538      	push	{r3, r4, r5, lr}
 8012f2a:	4c07      	ldr	r4, [pc, #28]	; (8012f48 <_fstat_r+0x20>)
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	4605      	mov	r5, r0
 8012f30:	4608      	mov	r0, r1
 8012f32:	4611      	mov	r1, r2
 8012f34:	6023      	str	r3, [r4, #0]
 8012f36:	f7f5 f9fe 	bl	8008336 <_fstat>
 8012f3a:	1c43      	adds	r3, r0, #1
 8012f3c:	d102      	bne.n	8012f44 <_fstat_r+0x1c>
 8012f3e:	6823      	ldr	r3, [r4, #0]
 8012f40:	b103      	cbz	r3, 8012f44 <_fstat_r+0x1c>
 8012f42:	602b      	str	r3, [r5, #0]
 8012f44:	bd38      	pop	{r3, r4, r5, pc}
 8012f46:	bf00      	nop
 8012f48:	20002cf0 	.word	0x20002cf0

08012f4c <_isatty_r>:
 8012f4c:	b538      	push	{r3, r4, r5, lr}
 8012f4e:	4c06      	ldr	r4, [pc, #24]	; (8012f68 <_isatty_r+0x1c>)
 8012f50:	2300      	movs	r3, #0
 8012f52:	4605      	mov	r5, r0
 8012f54:	4608      	mov	r0, r1
 8012f56:	6023      	str	r3, [r4, #0]
 8012f58:	f7f5 f9fd 	bl	8008356 <_isatty>
 8012f5c:	1c43      	adds	r3, r0, #1
 8012f5e:	d102      	bne.n	8012f66 <_isatty_r+0x1a>
 8012f60:	6823      	ldr	r3, [r4, #0]
 8012f62:	b103      	cbz	r3, 8012f66 <_isatty_r+0x1a>
 8012f64:	602b      	str	r3, [r5, #0]
 8012f66:	bd38      	pop	{r3, r4, r5, pc}
 8012f68:	20002cf0 	.word	0x20002cf0

08012f6c <_lseek_r>:
 8012f6c:	b538      	push	{r3, r4, r5, lr}
 8012f6e:	4c07      	ldr	r4, [pc, #28]	; (8012f8c <_lseek_r+0x20>)
 8012f70:	4605      	mov	r5, r0
 8012f72:	4608      	mov	r0, r1
 8012f74:	4611      	mov	r1, r2
 8012f76:	2200      	movs	r2, #0
 8012f78:	6022      	str	r2, [r4, #0]
 8012f7a:	461a      	mov	r2, r3
 8012f7c:	f7f5 f9f6 	bl	800836c <_lseek>
 8012f80:	1c43      	adds	r3, r0, #1
 8012f82:	d102      	bne.n	8012f8a <_lseek_r+0x1e>
 8012f84:	6823      	ldr	r3, [r4, #0]
 8012f86:	b103      	cbz	r3, 8012f8a <_lseek_r+0x1e>
 8012f88:	602b      	str	r3, [r5, #0]
 8012f8a:	bd38      	pop	{r3, r4, r5, pc}
 8012f8c:	20002cf0 	.word	0x20002cf0

08012f90 <__ascii_mbtowc>:
 8012f90:	b082      	sub	sp, #8
 8012f92:	b901      	cbnz	r1, 8012f96 <__ascii_mbtowc+0x6>
 8012f94:	a901      	add	r1, sp, #4
 8012f96:	b142      	cbz	r2, 8012faa <__ascii_mbtowc+0x1a>
 8012f98:	b14b      	cbz	r3, 8012fae <__ascii_mbtowc+0x1e>
 8012f9a:	7813      	ldrb	r3, [r2, #0]
 8012f9c:	600b      	str	r3, [r1, #0]
 8012f9e:	7812      	ldrb	r2, [r2, #0]
 8012fa0:	1c10      	adds	r0, r2, #0
 8012fa2:	bf18      	it	ne
 8012fa4:	2001      	movne	r0, #1
 8012fa6:	b002      	add	sp, #8
 8012fa8:	4770      	bx	lr
 8012faa:	4610      	mov	r0, r2
 8012fac:	e7fb      	b.n	8012fa6 <__ascii_mbtowc+0x16>
 8012fae:	f06f 0001 	mvn.w	r0, #1
 8012fb2:	e7f8      	b.n	8012fa6 <__ascii_mbtowc+0x16>

08012fb4 <memmove>:
 8012fb4:	4288      	cmp	r0, r1
 8012fb6:	b510      	push	{r4, lr}
 8012fb8:	eb01 0302 	add.w	r3, r1, r2
 8012fbc:	d807      	bhi.n	8012fce <memmove+0x1a>
 8012fbe:	1e42      	subs	r2, r0, #1
 8012fc0:	4299      	cmp	r1, r3
 8012fc2:	d00a      	beq.n	8012fda <memmove+0x26>
 8012fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012fc8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012fcc:	e7f8      	b.n	8012fc0 <memmove+0xc>
 8012fce:	4283      	cmp	r3, r0
 8012fd0:	d9f5      	bls.n	8012fbe <memmove+0xa>
 8012fd2:	1881      	adds	r1, r0, r2
 8012fd4:	1ad2      	subs	r2, r2, r3
 8012fd6:	42d3      	cmn	r3, r2
 8012fd8:	d100      	bne.n	8012fdc <memmove+0x28>
 8012fda:	bd10      	pop	{r4, pc}
 8012fdc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012fe0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012fe4:	e7f7      	b.n	8012fd6 <memmove+0x22>

08012fe6 <__malloc_lock>:
 8012fe6:	4770      	bx	lr

08012fe8 <__malloc_unlock>:
 8012fe8:	4770      	bx	lr

08012fea <_realloc_r>:
 8012fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fec:	4607      	mov	r7, r0
 8012fee:	4614      	mov	r4, r2
 8012ff0:	460e      	mov	r6, r1
 8012ff2:	b921      	cbnz	r1, 8012ffe <_realloc_r+0x14>
 8012ff4:	4611      	mov	r1, r2
 8012ff6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012ffa:	f7ff bc33 	b.w	8012864 <_malloc_r>
 8012ffe:	b922      	cbnz	r2, 801300a <_realloc_r+0x20>
 8013000:	f7ff fbe2 	bl	80127c8 <_free_r>
 8013004:	4625      	mov	r5, r4
 8013006:	4628      	mov	r0, r5
 8013008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801300a:	f000 f834 	bl	8013076 <_malloc_usable_size_r>
 801300e:	42a0      	cmp	r0, r4
 8013010:	d20f      	bcs.n	8013032 <_realloc_r+0x48>
 8013012:	4621      	mov	r1, r4
 8013014:	4638      	mov	r0, r7
 8013016:	f7ff fc25 	bl	8012864 <_malloc_r>
 801301a:	4605      	mov	r5, r0
 801301c:	2800      	cmp	r0, #0
 801301e:	d0f2      	beq.n	8013006 <_realloc_r+0x1c>
 8013020:	4631      	mov	r1, r6
 8013022:	4622      	mov	r2, r4
 8013024:	f7ff f8dc 	bl	80121e0 <memcpy>
 8013028:	4631      	mov	r1, r6
 801302a:	4638      	mov	r0, r7
 801302c:	f7ff fbcc 	bl	80127c8 <_free_r>
 8013030:	e7e9      	b.n	8013006 <_realloc_r+0x1c>
 8013032:	4635      	mov	r5, r6
 8013034:	e7e7      	b.n	8013006 <_realloc_r+0x1c>
	...

08013038 <_read_r>:
 8013038:	b538      	push	{r3, r4, r5, lr}
 801303a:	4c07      	ldr	r4, [pc, #28]	; (8013058 <_read_r+0x20>)
 801303c:	4605      	mov	r5, r0
 801303e:	4608      	mov	r0, r1
 8013040:	4611      	mov	r1, r2
 8013042:	2200      	movs	r2, #0
 8013044:	6022      	str	r2, [r4, #0]
 8013046:	461a      	mov	r2, r3
 8013048:	f7f5 f94c 	bl	80082e4 <_read>
 801304c:	1c43      	adds	r3, r0, #1
 801304e:	d102      	bne.n	8013056 <_read_r+0x1e>
 8013050:	6823      	ldr	r3, [r4, #0]
 8013052:	b103      	cbz	r3, 8013056 <_read_r+0x1e>
 8013054:	602b      	str	r3, [r5, #0]
 8013056:	bd38      	pop	{r3, r4, r5, pc}
 8013058:	20002cf0 	.word	0x20002cf0

0801305c <__ascii_wctomb>:
 801305c:	b149      	cbz	r1, 8013072 <__ascii_wctomb+0x16>
 801305e:	2aff      	cmp	r2, #255	; 0xff
 8013060:	bf85      	ittet	hi
 8013062:	238a      	movhi	r3, #138	; 0x8a
 8013064:	6003      	strhi	r3, [r0, #0]
 8013066:	700a      	strbls	r2, [r1, #0]
 8013068:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801306c:	bf98      	it	ls
 801306e:	2001      	movls	r0, #1
 8013070:	4770      	bx	lr
 8013072:	4608      	mov	r0, r1
 8013074:	4770      	bx	lr

08013076 <_malloc_usable_size_r>:
 8013076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801307a:	1f18      	subs	r0, r3, #4
 801307c:	2b00      	cmp	r3, #0
 801307e:	bfbc      	itt	lt
 8013080:	580b      	ldrlt	r3, [r1, r0]
 8013082:	18c0      	addlt	r0, r0, r3
 8013084:	4770      	bx	lr
	...

08013088 <log10>:
 8013088:	b5f0      	push	{r4, r5, r6, r7, lr}
 801308a:	ed2d 8b02 	vpush	{d8}
 801308e:	b08b      	sub	sp, #44	; 0x2c
 8013090:	ec55 4b10 	vmov	r4, r5, d0
 8013094:	f000 f9e8 	bl	8013468 <__ieee754_log10>
 8013098:	4b36      	ldr	r3, [pc, #216]	; (8013174 <log10+0xec>)
 801309a:	eeb0 8a40 	vmov.f32	s16, s0
 801309e:	eef0 8a60 	vmov.f32	s17, s1
 80130a2:	f993 6000 	ldrsb.w	r6, [r3]
 80130a6:	1c73      	adds	r3, r6, #1
 80130a8:	d05c      	beq.n	8013164 <log10+0xdc>
 80130aa:	4622      	mov	r2, r4
 80130ac:	462b      	mov	r3, r5
 80130ae:	4620      	mov	r0, r4
 80130b0:	4629      	mov	r1, r5
 80130b2:	f7ed fd63 	bl	8000b7c <__aeabi_dcmpun>
 80130b6:	4607      	mov	r7, r0
 80130b8:	2800      	cmp	r0, #0
 80130ba:	d153      	bne.n	8013164 <log10+0xdc>
 80130bc:	2200      	movs	r2, #0
 80130be:	2300      	movs	r3, #0
 80130c0:	4620      	mov	r0, r4
 80130c2:	4629      	mov	r1, r5
 80130c4:	f7ed fd3c 	bl	8000b40 <__aeabi_dcmple>
 80130c8:	2800      	cmp	r0, #0
 80130ca:	d04b      	beq.n	8013164 <log10+0xdc>
 80130cc:	4b2a      	ldr	r3, [pc, #168]	; (8013178 <log10+0xf0>)
 80130ce:	9301      	str	r3, [sp, #4]
 80130d0:	9708      	str	r7, [sp, #32]
 80130d2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80130d6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80130da:	b9a6      	cbnz	r6, 8013106 <log10+0x7e>
 80130dc:	4b27      	ldr	r3, [pc, #156]	; (801317c <log10+0xf4>)
 80130de:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80130e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80130e6:	4620      	mov	r0, r4
 80130e8:	2200      	movs	r2, #0
 80130ea:	2300      	movs	r3, #0
 80130ec:	4629      	mov	r1, r5
 80130ee:	f7ed fd13 	bl	8000b18 <__aeabi_dcmpeq>
 80130f2:	bb40      	cbnz	r0, 8013146 <log10+0xbe>
 80130f4:	2301      	movs	r3, #1
 80130f6:	2e02      	cmp	r6, #2
 80130f8:	9300      	str	r3, [sp, #0]
 80130fa:	d119      	bne.n	8013130 <log10+0xa8>
 80130fc:	f7fd fa28 	bl	8010550 <__errno>
 8013100:	2321      	movs	r3, #33	; 0x21
 8013102:	6003      	str	r3, [r0, #0]
 8013104:	e019      	b.n	801313a <log10+0xb2>
 8013106:	4b1e      	ldr	r3, [pc, #120]	; (8013180 <log10+0xf8>)
 8013108:	2200      	movs	r2, #0
 801310a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801310e:	4620      	mov	r0, r4
 8013110:	2200      	movs	r2, #0
 8013112:	2300      	movs	r3, #0
 8013114:	4629      	mov	r1, r5
 8013116:	f7ed fcff 	bl	8000b18 <__aeabi_dcmpeq>
 801311a:	2800      	cmp	r0, #0
 801311c:	d0ea      	beq.n	80130f4 <log10+0x6c>
 801311e:	2302      	movs	r3, #2
 8013120:	429e      	cmp	r6, r3
 8013122:	9300      	str	r3, [sp, #0]
 8013124:	d111      	bne.n	801314a <log10+0xc2>
 8013126:	f7fd fa13 	bl	8010550 <__errno>
 801312a:	2322      	movs	r3, #34	; 0x22
 801312c:	6003      	str	r3, [r0, #0]
 801312e:	e011      	b.n	8013154 <log10+0xcc>
 8013130:	4668      	mov	r0, sp
 8013132:	f000 fff4 	bl	801411e <matherr>
 8013136:	2800      	cmp	r0, #0
 8013138:	d0e0      	beq.n	80130fc <log10+0x74>
 801313a:	4812      	ldr	r0, [pc, #72]	; (8013184 <log10+0xfc>)
 801313c:	f000 fff4 	bl	8014128 <nan>
 8013140:	ed8d 0b06 	vstr	d0, [sp, #24]
 8013144:	e006      	b.n	8013154 <log10+0xcc>
 8013146:	2302      	movs	r3, #2
 8013148:	9300      	str	r3, [sp, #0]
 801314a:	4668      	mov	r0, sp
 801314c:	f000 ffe7 	bl	801411e <matherr>
 8013150:	2800      	cmp	r0, #0
 8013152:	d0e8      	beq.n	8013126 <log10+0x9e>
 8013154:	9b08      	ldr	r3, [sp, #32]
 8013156:	b11b      	cbz	r3, 8013160 <log10+0xd8>
 8013158:	f7fd f9fa 	bl	8010550 <__errno>
 801315c:	9b08      	ldr	r3, [sp, #32]
 801315e:	6003      	str	r3, [r0, #0]
 8013160:	ed9d 8b06 	vldr	d8, [sp, #24]
 8013164:	eeb0 0a48 	vmov.f32	s0, s16
 8013168:	eef0 0a68 	vmov.f32	s1, s17
 801316c:	b00b      	add	sp, #44	; 0x2c
 801316e:	ecbd 8b02 	vpop	{d8}
 8013172:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013174:	20001e08 	.word	0x20001e08
 8013178:	08015a78 	.word	0x08015a78
 801317c:	c7efffff 	.word	0xc7efffff
 8013180:	fff00000 	.word	0xfff00000
 8013184:	08015961 	.word	0x08015961

08013188 <pow>:
 8013188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801318c:	ed2d 8b04 	vpush	{d8-d9}
 8013190:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8013464 <pow+0x2dc>
 8013194:	b08d      	sub	sp, #52	; 0x34
 8013196:	ec57 6b10 	vmov	r6, r7, d0
 801319a:	ec55 4b11 	vmov	r4, r5, d1
 801319e:	f000 f9ef 	bl	8013580 <__ieee754_pow>
 80131a2:	f999 3000 	ldrsb.w	r3, [r9]
 80131a6:	9300      	str	r3, [sp, #0]
 80131a8:	3301      	adds	r3, #1
 80131aa:	eeb0 8a40 	vmov.f32	s16, s0
 80131ae:	eef0 8a60 	vmov.f32	s17, s1
 80131b2:	46c8      	mov	r8, r9
 80131b4:	d05f      	beq.n	8013276 <pow+0xee>
 80131b6:	4622      	mov	r2, r4
 80131b8:	462b      	mov	r3, r5
 80131ba:	4620      	mov	r0, r4
 80131bc:	4629      	mov	r1, r5
 80131be:	f7ed fcdd 	bl	8000b7c <__aeabi_dcmpun>
 80131c2:	4683      	mov	fp, r0
 80131c4:	2800      	cmp	r0, #0
 80131c6:	d156      	bne.n	8013276 <pow+0xee>
 80131c8:	4632      	mov	r2, r6
 80131ca:	463b      	mov	r3, r7
 80131cc:	4630      	mov	r0, r6
 80131ce:	4639      	mov	r1, r7
 80131d0:	f7ed fcd4 	bl	8000b7c <__aeabi_dcmpun>
 80131d4:	9001      	str	r0, [sp, #4]
 80131d6:	b1e8      	cbz	r0, 8013214 <pow+0x8c>
 80131d8:	2200      	movs	r2, #0
 80131da:	2300      	movs	r3, #0
 80131dc:	4620      	mov	r0, r4
 80131de:	4629      	mov	r1, r5
 80131e0:	f7ed fc9a 	bl	8000b18 <__aeabi_dcmpeq>
 80131e4:	2800      	cmp	r0, #0
 80131e6:	d046      	beq.n	8013276 <pow+0xee>
 80131e8:	2301      	movs	r3, #1
 80131ea:	9302      	str	r3, [sp, #8]
 80131ec:	4b96      	ldr	r3, [pc, #600]	; (8013448 <pow+0x2c0>)
 80131ee:	9303      	str	r3, [sp, #12]
 80131f0:	4b96      	ldr	r3, [pc, #600]	; (801344c <pow+0x2c4>)
 80131f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80131f6:	2200      	movs	r2, #0
 80131f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80131fc:	9b00      	ldr	r3, [sp, #0]
 80131fe:	2b02      	cmp	r3, #2
 8013200:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013204:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013208:	d033      	beq.n	8013272 <pow+0xea>
 801320a:	a802      	add	r0, sp, #8
 801320c:	f000 ff87 	bl	801411e <matherr>
 8013210:	bb48      	cbnz	r0, 8013266 <pow+0xde>
 8013212:	e05d      	b.n	80132d0 <pow+0x148>
 8013214:	f04f 0a00 	mov.w	sl, #0
 8013218:	f04f 0b00 	mov.w	fp, #0
 801321c:	4652      	mov	r2, sl
 801321e:	465b      	mov	r3, fp
 8013220:	4630      	mov	r0, r6
 8013222:	4639      	mov	r1, r7
 8013224:	f7ed fc78 	bl	8000b18 <__aeabi_dcmpeq>
 8013228:	ec4b ab19 	vmov	d9, sl, fp
 801322c:	2800      	cmp	r0, #0
 801322e:	d054      	beq.n	80132da <pow+0x152>
 8013230:	4652      	mov	r2, sl
 8013232:	465b      	mov	r3, fp
 8013234:	4620      	mov	r0, r4
 8013236:	4629      	mov	r1, r5
 8013238:	f7ed fc6e 	bl	8000b18 <__aeabi_dcmpeq>
 801323c:	4680      	mov	r8, r0
 801323e:	b318      	cbz	r0, 8013288 <pow+0x100>
 8013240:	2301      	movs	r3, #1
 8013242:	9302      	str	r3, [sp, #8]
 8013244:	4b80      	ldr	r3, [pc, #512]	; (8013448 <pow+0x2c0>)
 8013246:	9303      	str	r3, [sp, #12]
 8013248:	9b01      	ldr	r3, [sp, #4]
 801324a:	930a      	str	r3, [sp, #40]	; 0x28
 801324c:	9b00      	ldr	r3, [sp, #0]
 801324e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013252:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013256:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d0d5      	beq.n	801320a <pow+0x82>
 801325e:	4b7b      	ldr	r3, [pc, #492]	; (801344c <pow+0x2c4>)
 8013260:	2200      	movs	r2, #0
 8013262:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013268:	b11b      	cbz	r3, 8013272 <pow+0xea>
 801326a:	f7fd f971 	bl	8010550 <__errno>
 801326e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013270:	6003      	str	r3, [r0, #0]
 8013272:	ed9d 8b08 	vldr	d8, [sp, #32]
 8013276:	eeb0 0a48 	vmov.f32	s0, s16
 801327a:	eef0 0a68 	vmov.f32	s1, s17
 801327e:	b00d      	add	sp, #52	; 0x34
 8013280:	ecbd 8b04 	vpop	{d8-d9}
 8013284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013288:	ec45 4b10 	vmov	d0, r4, r5
 801328c:	f000 ff3f 	bl	801410e <finite>
 8013290:	2800      	cmp	r0, #0
 8013292:	d0f0      	beq.n	8013276 <pow+0xee>
 8013294:	4652      	mov	r2, sl
 8013296:	465b      	mov	r3, fp
 8013298:	4620      	mov	r0, r4
 801329a:	4629      	mov	r1, r5
 801329c:	f7ed fc46 	bl	8000b2c <__aeabi_dcmplt>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	d0e8      	beq.n	8013276 <pow+0xee>
 80132a4:	2301      	movs	r3, #1
 80132a6:	9302      	str	r3, [sp, #8]
 80132a8:	4b67      	ldr	r3, [pc, #412]	; (8013448 <pow+0x2c0>)
 80132aa:	9303      	str	r3, [sp, #12]
 80132ac:	f999 3000 	ldrsb.w	r3, [r9]
 80132b0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80132b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80132b8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80132bc:	b913      	cbnz	r3, 80132c4 <pow+0x13c>
 80132be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80132c2:	e7a2      	b.n	801320a <pow+0x82>
 80132c4:	4962      	ldr	r1, [pc, #392]	; (8013450 <pow+0x2c8>)
 80132c6:	2000      	movs	r0, #0
 80132c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80132cc:	2b02      	cmp	r3, #2
 80132ce:	d19c      	bne.n	801320a <pow+0x82>
 80132d0:	f7fd f93e 	bl	8010550 <__errno>
 80132d4:	2321      	movs	r3, #33	; 0x21
 80132d6:	6003      	str	r3, [r0, #0]
 80132d8:	e7c5      	b.n	8013266 <pow+0xde>
 80132da:	eeb0 0a48 	vmov.f32	s0, s16
 80132de:	eef0 0a68 	vmov.f32	s1, s17
 80132e2:	f000 ff14 	bl	801410e <finite>
 80132e6:	9000      	str	r0, [sp, #0]
 80132e8:	2800      	cmp	r0, #0
 80132ea:	f040 8081 	bne.w	80133f0 <pow+0x268>
 80132ee:	ec47 6b10 	vmov	d0, r6, r7
 80132f2:	f000 ff0c 	bl	801410e <finite>
 80132f6:	2800      	cmp	r0, #0
 80132f8:	d07a      	beq.n	80133f0 <pow+0x268>
 80132fa:	ec45 4b10 	vmov	d0, r4, r5
 80132fe:	f000 ff06 	bl	801410e <finite>
 8013302:	2800      	cmp	r0, #0
 8013304:	d074      	beq.n	80133f0 <pow+0x268>
 8013306:	ec53 2b18 	vmov	r2, r3, d8
 801330a:	ee18 0a10 	vmov	r0, s16
 801330e:	4619      	mov	r1, r3
 8013310:	f7ed fc34 	bl	8000b7c <__aeabi_dcmpun>
 8013314:	f999 9000 	ldrsb.w	r9, [r9]
 8013318:	4b4b      	ldr	r3, [pc, #300]	; (8013448 <pow+0x2c0>)
 801331a:	b1b0      	cbz	r0, 801334a <pow+0x1c2>
 801331c:	2201      	movs	r2, #1
 801331e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013322:	9b00      	ldr	r3, [sp, #0]
 8013324:	930a      	str	r3, [sp, #40]	; 0x28
 8013326:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801332a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801332e:	f1b9 0f00 	cmp.w	r9, #0
 8013332:	d0c4      	beq.n	80132be <pow+0x136>
 8013334:	4652      	mov	r2, sl
 8013336:	465b      	mov	r3, fp
 8013338:	4650      	mov	r0, sl
 801333a:	4659      	mov	r1, fp
 801333c:	f7ed faae 	bl	800089c <__aeabi_ddiv>
 8013340:	f1b9 0f02 	cmp.w	r9, #2
 8013344:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013348:	e7c1      	b.n	80132ce <pow+0x146>
 801334a:	2203      	movs	r2, #3
 801334c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013350:	900a      	str	r0, [sp, #40]	; 0x28
 8013352:	4629      	mov	r1, r5
 8013354:	4620      	mov	r0, r4
 8013356:	2200      	movs	r2, #0
 8013358:	4b3e      	ldr	r3, [pc, #248]	; (8013454 <pow+0x2cc>)
 801335a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801335e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8013362:	f7ed f971 	bl	8000648 <__aeabi_dmul>
 8013366:	4604      	mov	r4, r0
 8013368:	460d      	mov	r5, r1
 801336a:	f1b9 0f00 	cmp.w	r9, #0
 801336e:	d124      	bne.n	80133ba <pow+0x232>
 8013370:	4b39      	ldr	r3, [pc, #228]	; (8013458 <pow+0x2d0>)
 8013372:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8013376:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801337a:	4630      	mov	r0, r6
 801337c:	4652      	mov	r2, sl
 801337e:	465b      	mov	r3, fp
 8013380:	4639      	mov	r1, r7
 8013382:	f7ed fbd3 	bl	8000b2c <__aeabi_dcmplt>
 8013386:	2800      	cmp	r0, #0
 8013388:	d056      	beq.n	8013438 <pow+0x2b0>
 801338a:	ec45 4b10 	vmov	d0, r4, r5
 801338e:	f000 fed3 	bl	8014138 <rint>
 8013392:	4622      	mov	r2, r4
 8013394:	462b      	mov	r3, r5
 8013396:	ec51 0b10 	vmov	r0, r1, d0
 801339a:	f7ed fbbd 	bl	8000b18 <__aeabi_dcmpeq>
 801339e:	b920      	cbnz	r0, 80133aa <pow+0x222>
 80133a0:	4b2e      	ldr	r3, [pc, #184]	; (801345c <pow+0x2d4>)
 80133a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80133a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80133aa:	f998 3000 	ldrsb.w	r3, [r8]
 80133ae:	2b02      	cmp	r3, #2
 80133b0:	d142      	bne.n	8013438 <pow+0x2b0>
 80133b2:	f7fd f8cd 	bl	8010550 <__errno>
 80133b6:	2322      	movs	r3, #34	; 0x22
 80133b8:	e78d      	b.n	80132d6 <pow+0x14e>
 80133ba:	4b29      	ldr	r3, [pc, #164]	; (8013460 <pow+0x2d8>)
 80133bc:	2200      	movs	r2, #0
 80133be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80133c2:	4630      	mov	r0, r6
 80133c4:	4652      	mov	r2, sl
 80133c6:	465b      	mov	r3, fp
 80133c8:	4639      	mov	r1, r7
 80133ca:	f7ed fbaf 	bl	8000b2c <__aeabi_dcmplt>
 80133ce:	2800      	cmp	r0, #0
 80133d0:	d0eb      	beq.n	80133aa <pow+0x222>
 80133d2:	ec45 4b10 	vmov	d0, r4, r5
 80133d6:	f000 feaf 	bl	8014138 <rint>
 80133da:	4622      	mov	r2, r4
 80133dc:	462b      	mov	r3, r5
 80133de:	ec51 0b10 	vmov	r0, r1, d0
 80133e2:	f7ed fb99 	bl	8000b18 <__aeabi_dcmpeq>
 80133e6:	2800      	cmp	r0, #0
 80133e8:	d1df      	bne.n	80133aa <pow+0x222>
 80133ea:	2200      	movs	r2, #0
 80133ec:	4b18      	ldr	r3, [pc, #96]	; (8013450 <pow+0x2c8>)
 80133ee:	e7da      	b.n	80133a6 <pow+0x21e>
 80133f0:	2200      	movs	r2, #0
 80133f2:	2300      	movs	r3, #0
 80133f4:	ec51 0b18 	vmov	r0, r1, d8
 80133f8:	f7ed fb8e 	bl	8000b18 <__aeabi_dcmpeq>
 80133fc:	2800      	cmp	r0, #0
 80133fe:	f43f af3a 	beq.w	8013276 <pow+0xee>
 8013402:	ec47 6b10 	vmov	d0, r6, r7
 8013406:	f000 fe82 	bl	801410e <finite>
 801340a:	2800      	cmp	r0, #0
 801340c:	f43f af33 	beq.w	8013276 <pow+0xee>
 8013410:	ec45 4b10 	vmov	d0, r4, r5
 8013414:	f000 fe7b 	bl	801410e <finite>
 8013418:	2800      	cmp	r0, #0
 801341a:	f43f af2c 	beq.w	8013276 <pow+0xee>
 801341e:	2304      	movs	r3, #4
 8013420:	9302      	str	r3, [sp, #8]
 8013422:	4b09      	ldr	r3, [pc, #36]	; (8013448 <pow+0x2c0>)
 8013424:	9303      	str	r3, [sp, #12]
 8013426:	2300      	movs	r3, #0
 8013428:	930a      	str	r3, [sp, #40]	; 0x28
 801342a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801342e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8013432:	ed8d 9b08 	vstr	d9, [sp, #32]
 8013436:	e7b8      	b.n	80133aa <pow+0x222>
 8013438:	a802      	add	r0, sp, #8
 801343a:	f000 fe70 	bl	801411e <matherr>
 801343e:	2800      	cmp	r0, #0
 8013440:	f47f af11 	bne.w	8013266 <pow+0xde>
 8013444:	e7b5      	b.n	80133b2 <pow+0x22a>
 8013446:	bf00      	nop
 8013448:	08015a7e 	.word	0x08015a7e
 801344c:	3ff00000 	.word	0x3ff00000
 8013450:	fff00000 	.word	0xfff00000
 8013454:	3fe00000 	.word	0x3fe00000
 8013458:	47efffff 	.word	0x47efffff
 801345c:	c7efffff 	.word	0xc7efffff
 8013460:	7ff00000 	.word	0x7ff00000
 8013464:	20001e08 	.word	0x20001e08

08013468 <__ieee754_log10>:
 8013468:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801346c:	ec55 4b10 	vmov	r4, r5, d0
 8013470:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8013474:	462b      	mov	r3, r5
 8013476:	da2f      	bge.n	80134d8 <__ieee754_log10+0x70>
 8013478:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 801347c:	4322      	orrs	r2, r4
 801347e:	d10a      	bne.n	8013496 <__ieee754_log10+0x2e>
 8013480:	493b      	ldr	r1, [pc, #236]	; (8013570 <__ieee754_log10+0x108>)
 8013482:	2200      	movs	r2, #0
 8013484:	2300      	movs	r3, #0
 8013486:	2000      	movs	r0, #0
 8013488:	f7ed fa08 	bl	800089c <__aeabi_ddiv>
 801348c:	ec41 0b10 	vmov	d0, r0, r1
 8013490:	b003      	add	sp, #12
 8013492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013496:	2d00      	cmp	r5, #0
 8013498:	da08      	bge.n	80134ac <__ieee754_log10+0x44>
 801349a:	ee10 2a10 	vmov	r2, s0
 801349e:	4620      	mov	r0, r4
 80134a0:	4629      	mov	r1, r5
 80134a2:	f7ec ff19 	bl	80002d8 <__aeabi_dsub>
 80134a6:	2200      	movs	r2, #0
 80134a8:	2300      	movs	r3, #0
 80134aa:	e7ed      	b.n	8013488 <__ieee754_log10+0x20>
 80134ac:	2200      	movs	r2, #0
 80134ae:	4b31      	ldr	r3, [pc, #196]	; (8013574 <__ieee754_log10+0x10c>)
 80134b0:	4629      	mov	r1, r5
 80134b2:	ee10 0a10 	vmov	r0, s0
 80134b6:	f7ed f8c7 	bl	8000648 <__aeabi_dmul>
 80134ba:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80134be:	4604      	mov	r4, r0
 80134c0:	460d      	mov	r5, r1
 80134c2:	460b      	mov	r3, r1
 80134c4:	492c      	ldr	r1, [pc, #176]	; (8013578 <__ieee754_log10+0x110>)
 80134c6:	428b      	cmp	r3, r1
 80134c8:	dd08      	ble.n	80134dc <__ieee754_log10+0x74>
 80134ca:	4622      	mov	r2, r4
 80134cc:	462b      	mov	r3, r5
 80134ce:	4620      	mov	r0, r4
 80134d0:	4629      	mov	r1, r5
 80134d2:	f7ec ff03 	bl	80002dc <__adddf3>
 80134d6:	e7d9      	b.n	801348c <__ieee754_log10+0x24>
 80134d8:	2200      	movs	r2, #0
 80134da:	e7f3      	b.n	80134c4 <__ieee754_log10+0x5c>
 80134dc:	1518      	asrs	r0, r3, #20
 80134de:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80134e2:	4410      	add	r0, r2
 80134e4:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80134e8:	4448      	add	r0, r9
 80134ea:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80134ee:	f7ed f841 	bl	8000574 <__aeabi_i2d>
 80134f2:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80134f6:	3303      	adds	r3, #3
 80134f8:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80134fc:	ec45 4b10 	vmov	d0, r4, r5
 8013500:	4606      	mov	r6, r0
 8013502:	460f      	mov	r7, r1
 8013504:	f000 ff14 	bl	8014330 <__ieee754_log>
 8013508:	a313      	add	r3, pc, #76	; (adr r3, 8013558 <__ieee754_log10+0xf0>)
 801350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801350e:	4630      	mov	r0, r6
 8013510:	4639      	mov	r1, r7
 8013512:	ed8d 0b00 	vstr	d0, [sp]
 8013516:	f7ed f897 	bl	8000648 <__aeabi_dmul>
 801351a:	ed9d 0b00 	vldr	d0, [sp]
 801351e:	4604      	mov	r4, r0
 8013520:	460d      	mov	r5, r1
 8013522:	a30f      	add	r3, pc, #60	; (adr r3, 8013560 <__ieee754_log10+0xf8>)
 8013524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013528:	ec51 0b10 	vmov	r0, r1, d0
 801352c:	f7ed f88c 	bl	8000648 <__aeabi_dmul>
 8013530:	4602      	mov	r2, r0
 8013532:	460b      	mov	r3, r1
 8013534:	4620      	mov	r0, r4
 8013536:	4629      	mov	r1, r5
 8013538:	f7ec fed0 	bl	80002dc <__adddf3>
 801353c:	a30a      	add	r3, pc, #40	; (adr r3, 8013568 <__ieee754_log10+0x100>)
 801353e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013542:	4604      	mov	r4, r0
 8013544:	460d      	mov	r5, r1
 8013546:	4630      	mov	r0, r6
 8013548:	4639      	mov	r1, r7
 801354a:	f7ed f87d 	bl	8000648 <__aeabi_dmul>
 801354e:	4602      	mov	r2, r0
 8013550:	460b      	mov	r3, r1
 8013552:	4620      	mov	r0, r4
 8013554:	4629      	mov	r1, r5
 8013556:	e7bc      	b.n	80134d2 <__ieee754_log10+0x6a>
 8013558:	11f12b36 	.word	0x11f12b36
 801355c:	3d59fef3 	.word	0x3d59fef3
 8013560:	1526e50e 	.word	0x1526e50e
 8013564:	3fdbcb7b 	.word	0x3fdbcb7b
 8013568:	509f6000 	.word	0x509f6000
 801356c:	3fd34413 	.word	0x3fd34413
 8013570:	c3500000 	.word	0xc3500000
 8013574:	43500000 	.word	0x43500000
 8013578:	7fefffff 	.word	0x7fefffff
 801357c:	00000000 	.word	0x00000000

08013580 <__ieee754_pow>:
 8013580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013584:	b091      	sub	sp, #68	; 0x44
 8013586:	ed8d 1b00 	vstr	d1, [sp]
 801358a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801358e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8013592:	ea58 0302 	orrs.w	r3, r8, r2
 8013596:	ec57 6b10 	vmov	r6, r7, d0
 801359a:	f000 84be 	beq.w	8013f1a <__ieee754_pow+0x99a>
 801359e:	4b7a      	ldr	r3, [pc, #488]	; (8013788 <__ieee754_pow+0x208>)
 80135a0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80135a4:	429c      	cmp	r4, r3
 80135a6:	463d      	mov	r5, r7
 80135a8:	ee10 aa10 	vmov	sl, s0
 80135ac:	dc09      	bgt.n	80135c2 <__ieee754_pow+0x42>
 80135ae:	d103      	bne.n	80135b8 <__ieee754_pow+0x38>
 80135b0:	b93e      	cbnz	r6, 80135c2 <__ieee754_pow+0x42>
 80135b2:	45a0      	cmp	r8, r4
 80135b4:	dc0d      	bgt.n	80135d2 <__ieee754_pow+0x52>
 80135b6:	e001      	b.n	80135bc <__ieee754_pow+0x3c>
 80135b8:	4598      	cmp	r8, r3
 80135ba:	dc02      	bgt.n	80135c2 <__ieee754_pow+0x42>
 80135bc:	4598      	cmp	r8, r3
 80135be:	d10e      	bne.n	80135de <__ieee754_pow+0x5e>
 80135c0:	b16a      	cbz	r2, 80135de <__ieee754_pow+0x5e>
 80135c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80135c6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80135ca:	ea54 030a 	orrs.w	r3, r4, sl
 80135ce:	f000 84a4 	beq.w	8013f1a <__ieee754_pow+0x99a>
 80135d2:	486e      	ldr	r0, [pc, #440]	; (801378c <__ieee754_pow+0x20c>)
 80135d4:	b011      	add	sp, #68	; 0x44
 80135d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135da:	f000 bda5 	b.w	8014128 <nan>
 80135de:	2d00      	cmp	r5, #0
 80135e0:	da53      	bge.n	801368a <__ieee754_pow+0x10a>
 80135e2:	4b6b      	ldr	r3, [pc, #428]	; (8013790 <__ieee754_pow+0x210>)
 80135e4:	4598      	cmp	r8, r3
 80135e6:	dc4d      	bgt.n	8013684 <__ieee754_pow+0x104>
 80135e8:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80135ec:	4598      	cmp	r8, r3
 80135ee:	dd4c      	ble.n	801368a <__ieee754_pow+0x10a>
 80135f0:	ea4f 5328 	mov.w	r3, r8, asr #20
 80135f4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80135f8:	2b14      	cmp	r3, #20
 80135fa:	dd26      	ble.n	801364a <__ieee754_pow+0xca>
 80135fc:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8013600:	fa22 f103 	lsr.w	r1, r2, r3
 8013604:	fa01 f303 	lsl.w	r3, r1, r3
 8013608:	4293      	cmp	r3, r2
 801360a:	d13e      	bne.n	801368a <__ieee754_pow+0x10a>
 801360c:	f001 0101 	and.w	r1, r1, #1
 8013610:	f1c1 0b02 	rsb	fp, r1, #2
 8013614:	2a00      	cmp	r2, #0
 8013616:	d15b      	bne.n	80136d0 <__ieee754_pow+0x150>
 8013618:	4b5b      	ldr	r3, [pc, #364]	; (8013788 <__ieee754_pow+0x208>)
 801361a:	4598      	cmp	r8, r3
 801361c:	d124      	bne.n	8013668 <__ieee754_pow+0xe8>
 801361e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8013622:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8013626:	ea53 030a 	orrs.w	r3, r3, sl
 801362a:	f000 8476 	beq.w	8013f1a <__ieee754_pow+0x99a>
 801362e:	4b59      	ldr	r3, [pc, #356]	; (8013794 <__ieee754_pow+0x214>)
 8013630:	429c      	cmp	r4, r3
 8013632:	dd2d      	ble.n	8013690 <__ieee754_pow+0x110>
 8013634:	f1b9 0f00 	cmp.w	r9, #0
 8013638:	f280 8473 	bge.w	8013f22 <__ieee754_pow+0x9a2>
 801363c:	2000      	movs	r0, #0
 801363e:	2100      	movs	r1, #0
 8013640:	ec41 0b10 	vmov	d0, r0, r1
 8013644:	b011      	add	sp, #68	; 0x44
 8013646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801364a:	2a00      	cmp	r2, #0
 801364c:	d13e      	bne.n	80136cc <__ieee754_pow+0x14c>
 801364e:	f1c3 0314 	rsb	r3, r3, #20
 8013652:	fa48 f103 	asr.w	r1, r8, r3
 8013656:	fa01 f303 	lsl.w	r3, r1, r3
 801365a:	4543      	cmp	r3, r8
 801365c:	f040 8469 	bne.w	8013f32 <__ieee754_pow+0x9b2>
 8013660:	f001 0101 	and.w	r1, r1, #1
 8013664:	f1c1 0b02 	rsb	fp, r1, #2
 8013668:	4b4b      	ldr	r3, [pc, #300]	; (8013798 <__ieee754_pow+0x218>)
 801366a:	4598      	cmp	r8, r3
 801366c:	d118      	bne.n	80136a0 <__ieee754_pow+0x120>
 801366e:	f1b9 0f00 	cmp.w	r9, #0
 8013672:	f280 845a 	bge.w	8013f2a <__ieee754_pow+0x9aa>
 8013676:	4948      	ldr	r1, [pc, #288]	; (8013798 <__ieee754_pow+0x218>)
 8013678:	4632      	mov	r2, r6
 801367a:	463b      	mov	r3, r7
 801367c:	2000      	movs	r0, #0
 801367e:	f7ed f90d 	bl	800089c <__aeabi_ddiv>
 8013682:	e7dd      	b.n	8013640 <__ieee754_pow+0xc0>
 8013684:	f04f 0b02 	mov.w	fp, #2
 8013688:	e7c4      	b.n	8013614 <__ieee754_pow+0x94>
 801368a:	f04f 0b00 	mov.w	fp, #0
 801368e:	e7c1      	b.n	8013614 <__ieee754_pow+0x94>
 8013690:	f1b9 0f00 	cmp.w	r9, #0
 8013694:	dad2      	bge.n	801363c <__ieee754_pow+0xbc>
 8013696:	e9dd 0300 	ldrd	r0, r3, [sp]
 801369a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801369e:	e7cf      	b.n	8013640 <__ieee754_pow+0xc0>
 80136a0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80136a4:	d106      	bne.n	80136b4 <__ieee754_pow+0x134>
 80136a6:	4632      	mov	r2, r6
 80136a8:	463b      	mov	r3, r7
 80136aa:	4610      	mov	r0, r2
 80136ac:	4619      	mov	r1, r3
 80136ae:	f7ec ffcb 	bl	8000648 <__aeabi_dmul>
 80136b2:	e7c5      	b.n	8013640 <__ieee754_pow+0xc0>
 80136b4:	4b39      	ldr	r3, [pc, #228]	; (801379c <__ieee754_pow+0x21c>)
 80136b6:	4599      	cmp	r9, r3
 80136b8:	d10a      	bne.n	80136d0 <__ieee754_pow+0x150>
 80136ba:	2d00      	cmp	r5, #0
 80136bc:	db08      	blt.n	80136d0 <__ieee754_pow+0x150>
 80136be:	ec47 6b10 	vmov	d0, r6, r7
 80136c2:	b011      	add	sp, #68	; 0x44
 80136c4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80136c8:	f000 bc68 	b.w	8013f9c <__ieee754_sqrt>
 80136cc:	f04f 0b00 	mov.w	fp, #0
 80136d0:	ec47 6b10 	vmov	d0, r6, r7
 80136d4:	f000 fd12 	bl	80140fc <fabs>
 80136d8:	ec51 0b10 	vmov	r0, r1, d0
 80136dc:	f1ba 0f00 	cmp.w	sl, #0
 80136e0:	d127      	bne.n	8013732 <__ieee754_pow+0x1b2>
 80136e2:	b124      	cbz	r4, 80136ee <__ieee754_pow+0x16e>
 80136e4:	4b2c      	ldr	r3, [pc, #176]	; (8013798 <__ieee754_pow+0x218>)
 80136e6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80136ea:	429a      	cmp	r2, r3
 80136ec:	d121      	bne.n	8013732 <__ieee754_pow+0x1b2>
 80136ee:	f1b9 0f00 	cmp.w	r9, #0
 80136f2:	da05      	bge.n	8013700 <__ieee754_pow+0x180>
 80136f4:	4602      	mov	r2, r0
 80136f6:	460b      	mov	r3, r1
 80136f8:	2000      	movs	r0, #0
 80136fa:	4927      	ldr	r1, [pc, #156]	; (8013798 <__ieee754_pow+0x218>)
 80136fc:	f7ed f8ce 	bl	800089c <__aeabi_ddiv>
 8013700:	2d00      	cmp	r5, #0
 8013702:	da9d      	bge.n	8013640 <__ieee754_pow+0xc0>
 8013704:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8013708:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801370c:	ea54 030b 	orrs.w	r3, r4, fp
 8013710:	d108      	bne.n	8013724 <__ieee754_pow+0x1a4>
 8013712:	4602      	mov	r2, r0
 8013714:	460b      	mov	r3, r1
 8013716:	4610      	mov	r0, r2
 8013718:	4619      	mov	r1, r3
 801371a:	f7ec fddd 	bl	80002d8 <__aeabi_dsub>
 801371e:	4602      	mov	r2, r0
 8013720:	460b      	mov	r3, r1
 8013722:	e7ac      	b.n	801367e <__ieee754_pow+0xfe>
 8013724:	f1bb 0f01 	cmp.w	fp, #1
 8013728:	d18a      	bne.n	8013640 <__ieee754_pow+0xc0>
 801372a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801372e:	4619      	mov	r1, r3
 8013730:	e786      	b.n	8013640 <__ieee754_pow+0xc0>
 8013732:	0fed      	lsrs	r5, r5, #31
 8013734:	1e6b      	subs	r3, r5, #1
 8013736:	930d      	str	r3, [sp, #52]	; 0x34
 8013738:	ea5b 0303 	orrs.w	r3, fp, r3
 801373c:	d102      	bne.n	8013744 <__ieee754_pow+0x1c4>
 801373e:	4632      	mov	r2, r6
 8013740:	463b      	mov	r3, r7
 8013742:	e7e8      	b.n	8013716 <__ieee754_pow+0x196>
 8013744:	4b16      	ldr	r3, [pc, #88]	; (80137a0 <__ieee754_pow+0x220>)
 8013746:	4598      	cmp	r8, r3
 8013748:	f340 80fe 	ble.w	8013948 <__ieee754_pow+0x3c8>
 801374c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8013750:	4598      	cmp	r8, r3
 8013752:	dd0a      	ble.n	801376a <__ieee754_pow+0x1ea>
 8013754:	4b0f      	ldr	r3, [pc, #60]	; (8013794 <__ieee754_pow+0x214>)
 8013756:	429c      	cmp	r4, r3
 8013758:	dc0d      	bgt.n	8013776 <__ieee754_pow+0x1f6>
 801375a:	f1b9 0f00 	cmp.w	r9, #0
 801375e:	f6bf af6d 	bge.w	801363c <__ieee754_pow+0xbc>
 8013762:	a307      	add	r3, pc, #28	; (adr r3, 8013780 <__ieee754_pow+0x200>)
 8013764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013768:	e79f      	b.n	80136aa <__ieee754_pow+0x12a>
 801376a:	4b0e      	ldr	r3, [pc, #56]	; (80137a4 <__ieee754_pow+0x224>)
 801376c:	429c      	cmp	r4, r3
 801376e:	ddf4      	ble.n	801375a <__ieee754_pow+0x1da>
 8013770:	4b09      	ldr	r3, [pc, #36]	; (8013798 <__ieee754_pow+0x218>)
 8013772:	429c      	cmp	r4, r3
 8013774:	dd18      	ble.n	80137a8 <__ieee754_pow+0x228>
 8013776:	f1b9 0f00 	cmp.w	r9, #0
 801377a:	dcf2      	bgt.n	8013762 <__ieee754_pow+0x1e2>
 801377c:	e75e      	b.n	801363c <__ieee754_pow+0xbc>
 801377e:	bf00      	nop
 8013780:	8800759c 	.word	0x8800759c
 8013784:	7e37e43c 	.word	0x7e37e43c
 8013788:	7ff00000 	.word	0x7ff00000
 801378c:	08015961 	.word	0x08015961
 8013790:	433fffff 	.word	0x433fffff
 8013794:	3fefffff 	.word	0x3fefffff
 8013798:	3ff00000 	.word	0x3ff00000
 801379c:	3fe00000 	.word	0x3fe00000
 80137a0:	41e00000 	.word	0x41e00000
 80137a4:	3feffffe 	.word	0x3feffffe
 80137a8:	2200      	movs	r2, #0
 80137aa:	4b63      	ldr	r3, [pc, #396]	; (8013938 <__ieee754_pow+0x3b8>)
 80137ac:	f7ec fd94 	bl	80002d8 <__aeabi_dsub>
 80137b0:	a355      	add	r3, pc, #340	; (adr r3, 8013908 <__ieee754_pow+0x388>)
 80137b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b6:	4604      	mov	r4, r0
 80137b8:	460d      	mov	r5, r1
 80137ba:	f7ec ff45 	bl	8000648 <__aeabi_dmul>
 80137be:	a354      	add	r3, pc, #336	; (adr r3, 8013910 <__ieee754_pow+0x390>)
 80137c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137c4:	4606      	mov	r6, r0
 80137c6:	460f      	mov	r7, r1
 80137c8:	4620      	mov	r0, r4
 80137ca:	4629      	mov	r1, r5
 80137cc:	f7ec ff3c 	bl	8000648 <__aeabi_dmul>
 80137d0:	2200      	movs	r2, #0
 80137d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80137d6:	4b59      	ldr	r3, [pc, #356]	; (801393c <__ieee754_pow+0x3bc>)
 80137d8:	4620      	mov	r0, r4
 80137da:	4629      	mov	r1, r5
 80137dc:	f7ec ff34 	bl	8000648 <__aeabi_dmul>
 80137e0:	4602      	mov	r2, r0
 80137e2:	460b      	mov	r3, r1
 80137e4:	a14c      	add	r1, pc, #304	; (adr r1, 8013918 <__ieee754_pow+0x398>)
 80137e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137ea:	f7ec fd75 	bl	80002d8 <__aeabi_dsub>
 80137ee:	4622      	mov	r2, r4
 80137f0:	462b      	mov	r3, r5
 80137f2:	f7ec ff29 	bl	8000648 <__aeabi_dmul>
 80137f6:	4602      	mov	r2, r0
 80137f8:	460b      	mov	r3, r1
 80137fa:	2000      	movs	r0, #0
 80137fc:	4950      	ldr	r1, [pc, #320]	; (8013940 <__ieee754_pow+0x3c0>)
 80137fe:	f7ec fd6b 	bl	80002d8 <__aeabi_dsub>
 8013802:	4622      	mov	r2, r4
 8013804:	462b      	mov	r3, r5
 8013806:	4680      	mov	r8, r0
 8013808:	4689      	mov	r9, r1
 801380a:	4620      	mov	r0, r4
 801380c:	4629      	mov	r1, r5
 801380e:	f7ec ff1b 	bl	8000648 <__aeabi_dmul>
 8013812:	4602      	mov	r2, r0
 8013814:	460b      	mov	r3, r1
 8013816:	4640      	mov	r0, r8
 8013818:	4649      	mov	r1, r9
 801381a:	f7ec ff15 	bl	8000648 <__aeabi_dmul>
 801381e:	a340      	add	r3, pc, #256	; (adr r3, 8013920 <__ieee754_pow+0x3a0>)
 8013820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013824:	f7ec ff10 	bl	8000648 <__aeabi_dmul>
 8013828:	4602      	mov	r2, r0
 801382a:	460b      	mov	r3, r1
 801382c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013830:	f7ec fd52 	bl	80002d8 <__aeabi_dsub>
 8013834:	4602      	mov	r2, r0
 8013836:	460b      	mov	r3, r1
 8013838:	4604      	mov	r4, r0
 801383a:	460d      	mov	r5, r1
 801383c:	4630      	mov	r0, r6
 801383e:	4639      	mov	r1, r7
 8013840:	f7ec fd4c 	bl	80002dc <__adddf3>
 8013844:	2000      	movs	r0, #0
 8013846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801384a:	4632      	mov	r2, r6
 801384c:	463b      	mov	r3, r7
 801384e:	f7ec fd43 	bl	80002d8 <__aeabi_dsub>
 8013852:	4602      	mov	r2, r0
 8013854:	460b      	mov	r3, r1
 8013856:	4620      	mov	r0, r4
 8013858:	4629      	mov	r1, r5
 801385a:	f7ec fd3d 	bl	80002d8 <__aeabi_dsub>
 801385e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013860:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8013864:	4313      	orrs	r3, r2
 8013866:	4606      	mov	r6, r0
 8013868:	460f      	mov	r7, r1
 801386a:	f040 81eb 	bne.w	8013c44 <__ieee754_pow+0x6c4>
 801386e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8013928 <__ieee754_pow+0x3a8>
 8013872:	e9dd 4500 	ldrd	r4, r5, [sp]
 8013876:	2400      	movs	r4, #0
 8013878:	4622      	mov	r2, r4
 801387a:	462b      	mov	r3, r5
 801387c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013880:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013884:	f7ec fd28 	bl	80002d8 <__aeabi_dsub>
 8013888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801388c:	f7ec fedc 	bl	8000648 <__aeabi_dmul>
 8013890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013894:	4680      	mov	r8, r0
 8013896:	4689      	mov	r9, r1
 8013898:	4630      	mov	r0, r6
 801389a:	4639      	mov	r1, r7
 801389c:	f7ec fed4 	bl	8000648 <__aeabi_dmul>
 80138a0:	4602      	mov	r2, r0
 80138a2:	460b      	mov	r3, r1
 80138a4:	4640      	mov	r0, r8
 80138a6:	4649      	mov	r1, r9
 80138a8:	f7ec fd18 	bl	80002dc <__adddf3>
 80138ac:	4622      	mov	r2, r4
 80138ae:	462b      	mov	r3, r5
 80138b0:	4680      	mov	r8, r0
 80138b2:	4689      	mov	r9, r1
 80138b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80138b8:	f7ec fec6 	bl	8000648 <__aeabi_dmul>
 80138bc:	460b      	mov	r3, r1
 80138be:	4604      	mov	r4, r0
 80138c0:	460d      	mov	r5, r1
 80138c2:	4602      	mov	r2, r0
 80138c4:	4649      	mov	r1, r9
 80138c6:	4640      	mov	r0, r8
 80138c8:	e9cd 4500 	strd	r4, r5, [sp]
 80138cc:	f7ec fd06 	bl	80002dc <__adddf3>
 80138d0:	4b1c      	ldr	r3, [pc, #112]	; (8013944 <__ieee754_pow+0x3c4>)
 80138d2:	4299      	cmp	r1, r3
 80138d4:	4606      	mov	r6, r0
 80138d6:	460f      	mov	r7, r1
 80138d8:	468b      	mov	fp, r1
 80138da:	f340 82f7 	ble.w	8013ecc <__ieee754_pow+0x94c>
 80138de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80138e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80138e6:	4303      	orrs	r3, r0
 80138e8:	f000 81ea 	beq.w	8013cc0 <__ieee754_pow+0x740>
 80138ec:	a310      	add	r3, pc, #64	; (adr r3, 8013930 <__ieee754_pow+0x3b0>)
 80138ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80138f6:	f7ec fea7 	bl	8000648 <__aeabi_dmul>
 80138fa:	a30d      	add	r3, pc, #52	; (adr r3, 8013930 <__ieee754_pow+0x3b0>)
 80138fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013900:	e6d5      	b.n	80136ae <__ieee754_pow+0x12e>
 8013902:	bf00      	nop
 8013904:	f3af 8000 	nop.w
 8013908:	60000000 	.word	0x60000000
 801390c:	3ff71547 	.word	0x3ff71547
 8013910:	f85ddf44 	.word	0xf85ddf44
 8013914:	3e54ae0b 	.word	0x3e54ae0b
 8013918:	55555555 	.word	0x55555555
 801391c:	3fd55555 	.word	0x3fd55555
 8013920:	652b82fe 	.word	0x652b82fe
 8013924:	3ff71547 	.word	0x3ff71547
 8013928:	00000000 	.word	0x00000000
 801392c:	bff00000 	.word	0xbff00000
 8013930:	8800759c 	.word	0x8800759c
 8013934:	7e37e43c 	.word	0x7e37e43c
 8013938:	3ff00000 	.word	0x3ff00000
 801393c:	3fd00000 	.word	0x3fd00000
 8013940:	3fe00000 	.word	0x3fe00000
 8013944:	408fffff 	.word	0x408fffff
 8013948:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801394c:	f04f 0200 	mov.w	r2, #0
 8013950:	da05      	bge.n	801395e <__ieee754_pow+0x3de>
 8013952:	4bd3      	ldr	r3, [pc, #844]	; (8013ca0 <__ieee754_pow+0x720>)
 8013954:	f7ec fe78 	bl	8000648 <__aeabi_dmul>
 8013958:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801395c:	460c      	mov	r4, r1
 801395e:	1523      	asrs	r3, r4, #20
 8013960:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8013964:	4413      	add	r3, r2
 8013966:	9309      	str	r3, [sp, #36]	; 0x24
 8013968:	4bce      	ldr	r3, [pc, #824]	; (8013ca4 <__ieee754_pow+0x724>)
 801396a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801396e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8013972:	429c      	cmp	r4, r3
 8013974:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8013978:	dd08      	ble.n	801398c <__ieee754_pow+0x40c>
 801397a:	4bcb      	ldr	r3, [pc, #812]	; (8013ca8 <__ieee754_pow+0x728>)
 801397c:	429c      	cmp	r4, r3
 801397e:	f340 815e 	ble.w	8013c3e <__ieee754_pow+0x6be>
 8013982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013984:	3301      	adds	r3, #1
 8013986:	9309      	str	r3, [sp, #36]	; 0x24
 8013988:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801398c:	f04f 0a00 	mov.w	sl, #0
 8013990:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8013994:	930c      	str	r3, [sp, #48]	; 0x30
 8013996:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013998:	4bc4      	ldr	r3, [pc, #784]	; (8013cac <__ieee754_pow+0x72c>)
 801399a:	4413      	add	r3, r2
 801399c:	ed93 7b00 	vldr	d7, [r3]
 80139a0:	4629      	mov	r1, r5
 80139a2:	ec53 2b17 	vmov	r2, r3, d7
 80139a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139aa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80139ae:	f7ec fc93 	bl	80002d8 <__aeabi_dsub>
 80139b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80139b6:	4606      	mov	r6, r0
 80139b8:	460f      	mov	r7, r1
 80139ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139be:	f7ec fc8d 	bl	80002dc <__adddf3>
 80139c2:	4602      	mov	r2, r0
 80139c4:	460b      	mov	r3, r1
 80139c6:	2000      	movs	r0, #0
 80139c8:	49b9      	ldr	r1, [pc, #740]	; (8013cb0 <__ieee754_pow+0x730>)
 80139ca:	f7ec ff67 	bl	800089c <__aeabi_ddiv>
 80139ce:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80139d2:	4602      	mov	r2, r0
 80139d4:	460b      	mov	r3, r1
 80139d6:	4630      	mov	r0, r6
 80139d8:	4639      	mov	r1, r7
 80139da:	f7ec fe35 	bl	8000648 <__aeabi_dmul>
 80139de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80139e2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80139e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80139ea:	2300      	movs	r3, #0
 80139ec:	9302      	str	r3, [sp, #8]
 80139ee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80139f2:	106d      	asrs	r5, r5, #1
 80139f4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80139f8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80139fc:	2200      	movs	r2, #0
 80139fe:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8013a02:	4640      	mov	r0, r8
 8013a04:	4649      	mov	r1, r9
 8013a06:	4614      	mov	r4, r2
 8013a08:	461d      	mov	r5, r3
 8013a0a:	f7ec fe1d 	bl	8000648 <__aeabi_dmul>
 8013a0e:	4602      	mov	r2, r0
 8013a10:	460b      	mov	r3, r1
 8013a12:	4630      	mov	r0, r6
 8013a14:	4639      	mov	r1, r7
 8013a16:	f7ec fc5f 	bl	80002d8 <__aeabi_dsub>
 8013a1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013a1e:	4606      	mov	r6, r0
 8013a20:	460f      	mov	r7, r1
 8013a22:	4620      	mov	r0, r4
 8013a24:	4629      	mov	r1, r5
 8013a26:	f7ec fc57 	bl	80002d8 <__aeabi_dsub>
 8013a2a:	4602      	mov	r2, r0
 8013a2c:	460b      	mov	r3, r1
 8013a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a32:	f7ec fc51 	bl	80002d8 <__aeabi_dsub>
 8013a36:	4642      	mov	r2, r8
 8013a38:	464b      	mov	r3, r9
 8013a3a:	f7ec fe05 	bl	8000648 <__aeabi_dmul>
 8013a3e:	4602      	mov	r2, r0
 8013a40:	460b      	mov	r3, r1
 8013a42:	4630      	mov	r0, r6
 8013a44:	4639      	mov	r1, r7
 8013a46:	f7ec fc47 	bl	80002d8 <__aeabi_dsub>
 8013a4a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013a4e:	f7ec fdfb 	bl	8000648 <__aeabi_dmul>
 8013a52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013a5a:	4610      	mov	r0, r2
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	f7ec fdf3 	bl	8000648 <__aeabi_dmul>
 8013a62:	a37b      	add	r3, pc, #492	; (adr r3, 8013c50 <__ieee754_pow+0x6d0>)
 8013a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a68:	4604      	mov	r4, r0
 8013a6a:	460d      	mov	r5, r1
 8013a6c:	f7ec fdec 	bl	8000648 <__aeabi_dmul>
 8013a70:	a379      	add	r3, pc, #484	; (adr r3, 8013c58 <__ieee754_pow+0x6d8>)
 8013a72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a76:	f7ec fc31 	bl	80002dc <__adddf3>
 8013a7a:	4622      	mov	r2, r4
 8013a7c:	462b      	mov	r3, r5
 8013a7e:	f7ec fde3 	bl	8000648 <__aeabi_dmul>
 8013a82:	a377      	add	r3, pc, #476	; (adr r3, 8013c60 <__ieee754_pow+0x6e0>)
 8013a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a88:	f7ec fc28 	bl	80002dc <__adddf3>
 8013a8c:	4622      	mov	r2, r4
 8013a8e:	462b      	mov	r3, r5
 8013a90:	f7ec fdda 	bl	8000648 <__aeabi_dmul>
 8013a94:	a374      	add	r3, pc, #464	; (adr r3, 8013c68 <__ieee754_pow+0x6e8>)
 8013a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a9a:	f7ec fc1f 	bl	80002dc <__adddf3>
 8013a9e:	4622      	mov	r2, r4
 8013aa0:	462b      	mov	r3, r5
 8013aa2:	f7ec fdd1 	bl	8000648 <__aeabi_dmul>
 8013aa6:	a372      	add	r3, pc, #456	; (adr r3, 8013c70 <__ieee754_pow+0x6f0>)
 8013aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aac:	f7ec fc16 	bl	80002dc <__adddf3>
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	462b      	mov	r3, r5
 8013ab4:	f7ec fdc8 	bl	8000648 <__aeabi_dmul>
 8013ab8:	a36f      	add	r3, pc, #444	; (adr r3, 8013c78 <__ieee754_pow+0x6f8>)
 8013aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013abe:	f7ec fc0d 	bl	80002dc <__adddf3>
 8013ac2:	4622      	mov	r2, r4
 8013ac4:	4606      	mov	r6, r0
 8013ac6:	460f      	mov	r7, r1
 8013ac8:	462b      	mov	r3, r5
 8013aca:	4620      	mov	r0, r4
 8013acc:	4629      	mov	r1, r5
 8013ace:	f7ec fdbb 	bl	8000648 <__aeabi_dmul>
 8013ad2:	4602      	mov	r2, r0
 8013ad4:	460b      	mov	r3, r1
 8013ad6:	4630      	mov	r0, r6
 8013ad8:	4639      	mov	r1, r7
 8013ada:	f7ec fdb5 	bl	8000648 <__aeabi_dmul>
 8013ade:	4642      	mov	r2, r8
 8013ae0:	4604      	mov	r4, r0
 8013ae2:	460d      	mov	r5, r1
 8013ae4:	464b      	mov	r3, r9
 8013ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013aea:	f7ec fbf7 	bl	80002dc <__adddf3>
 8013aee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013af2:	f7ec fda9 	bl	8000648 <__aeabi_dmul>
 8013af6:	4622      	mov	r2, r4
 8013af8:	462b      	mov	r3, r5
 8013afa:	f7ec fbef 	bl	80002dc <__adddf3>
 8013afe:	4642      	mov	r2, r8
 8013b00:	4606      	mov	r6, r0
 8013b02:	460f      	mov	r7, r1
 8013b04:	464b      	mov	r3, r9
 8013b06:	4640      	mov	r0, r8
 8013b08:	4649      	mov	r1, r9
 8013b0a:	f7ec fd9d 	bl	8000648 <__aeabi_dmul>
 8013b0e:	2200      	movs	r2, #0
 8013b10:	4b68      	ldr	r3, [pc, #416]	; (8013cb4 <__ieee754_pow+0x734>)
 8013b12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013b16:	f7ec fbe1 	bl	80002dc <__adddf3>
 8013b1a:	4632      	mov	r2, r6
 8013b1c:	463b      	mov	r3, r7
 8013b1e:	f7ec fbdd 	bl	80002dc <__adddf3>
 8013b22:	9802      	ldr	r0, [sp, #8]
 8013b24:	460d      	mov	r5, r1
 8013b26:	4604      	mov	r4, r0
 8013b28:	4602      	mov	r2, r0
 8013b2a:	460b      	mov	r3, r1
 8013b2c:	4640      	mov	r0, r8
 8013b2e:	4649      	mov	r1, r9
 8013b30:	f7ec fd8a 	bl	8000648 <__aeabi_dmul>
 8013b34:	2200      	movs	r2, #0
 8013b36:	4680      	mov	r8, r0
 8013b38:	4689      	mov	r9, r1
 8013b3a:	4b5e      	ldr	r3, [pc, #376]	; (8013cb4 <__ieee754_pow+0x734>)
 8013b3c:	4620      	mov	r0, r4
 8013b3e:	4629      	mov	r1, r5
 8013b40:	f7ec fbca 	bl	80002d8 <__aeabi_dsub>
 8013b44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013b48:	f7ec fbc6 	bl	80002d8 <__aeabi_dsub>
 8013b4c:	4602      	mov	r2, r0
 8013b4e:	460b      	mov	r3, r1
 8013b50:	4630      	mov	r0, r6
 8013b52:	4639      	mov	r1, r7
 8013b54:	f7ec fbc0 	bl	80002d8 <__aeabi_dsub>
 8013b58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013b5c:	f7ec fd74 	bl	8000648 <__aeabi_dmul>
 8013b60:	4622      	mov	r2, r4
 8013b62:	4606      	mov	r6, r0
 8013b64:	460f      	mov	r7, r1
 8013b66:	462b      	mov	r3, r5
 8013b68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013b6c:	f7ec fd6c 	bl	8000648 <__aeabi_dmul>
 8013b70:	4602      	mov	r2, r0
 8013b72:	460b      	mov	r3, r1
 8013b74:	4630      	mov	r0, r6
 8013b76:	4639      	mov	r1, r7
 8013b78:	f7ec fbb0 	bl	80002dc <__adddf3>
 8013b7c:	4606      	mov	r6, r0
 8013b7e:	460f      	mov	r7, r1
 8013b80:	4602      	mov	r2, r0
 8013b82:	460b      	mov	r3, r1
 8013b84:	4640      	mov	r0, r8
 8013b86:	4649      	mov	r1, r9
 8013b88:	f7ec fba8 	bl	80002dc <__adddf3>
 8013b8c:	9802      	ldr	r0, [sp, #8]
 8013b8e:	a33c      	add	r3, pc, #240	; (adr r3, 8013c80 <__ieee754_pow+0x700>)
 8013b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b94:	4604      	mov	r4, r0
 8013b96:	460d      	mov	r5, r1
 8013b98:	f7ec fd56 	bl	8000648 <__aeabi_dmul>
 8013b9c:	4642      	mov	r2, r8
 8013b9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8013ba2:	464b      	mov	r3, r9
 8013ba4:	4620      	mov	r0, r4
 8013ba6:	4629      	mov	r1, r5
 8013ba8:	f7ec fb96 	bl	80002d8 <__aeabi_dsub>
 8013bac:	4602      	mov	r2, r0
 8013bae:	460b      	mov	r3, r1
 8013bb0:	4630      	mov	r0, r6
 8013bb2:	4639      	mov	r1, r7
 8013bb4:	f7ec fb90 	bl	80002d8 <__aeabi_dsub>
 8013bb8:	a333      	add	r3, pc, #204	; (adr r3, 8013c88 <__ieee754_pow+0x708>)
 8013bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bbe:	f7ec fd43 	bl	8000648 <__aeabi_dmul>
 8013bc2:	a333      	add	r3, pc, #204	; (adr r3, 8013c90 <__ieee754_pow+0x710>)
 8013bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bc8:	4606      	mov	r6, r0
 8013bca:	460f      	mov	r7, r1
 8013bcc:	4620      	mov	r0, r4
 8013bce:	4629      	mov	r1, r5
 8013bd0:	f7ec fd3a 	bl	8000648 <__aeabi_dmul>
 8013bd4:	4602      	mov	r2, r0
 8013bd6:	460b      	mov	r3, r1
 8013bd8:	4630      	mov	r0, r6
 8013bda:	4639      	mov	r1, r7
 8013bdc:	f7ec fb7e 	bl	80002dc <__adddf3>
 8013be0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013be2:	4b35      	ldr	r3, [pc, #212]	; (8013cb8 <__ieee754_pow+0x738>)
 8013be4:	4413      	add	r3, r2
 8013be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013bea:	f7ec fb77 	bl	80002dc <__adddf3>
 8013bee:	4604      	mov	r4, r0
 8013bf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bf2:	460d      	mov	r5, r1
 8013bf4:	f7ec fcbe 	bl	8000574 <__aeabi_i2d>
 8013bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013bfa:	4b30      	ldr	r3, [pc, #192]	; (8013cbc <__ieee754_pow+0x73c>)
 8013bfc:	4413      	add	r3, r2
 8013bfe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013c02:	4606      	mov	r6, r0
 8013c04:	460f      	mov	r7, r1
 8013c06:	4622      	mov	r2, r4
 8013c08:	462b      	mov	r3, r5
 8013c0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013c0e:	f7ec fb65 	bl	80002dc <__adddf3>
 8013c12:	4642      	mov	r2, r8
 8013c14:	464b      	mov	r3, r9
 8013c16:	f7ec fb61 	bl	80002dc <__adddf3>
 8013c1a:	4632      	mov	r2, r6
 8013c1c:	463b      	mov	r3, r7
 8013c1e:	f7ec fb5d 	bl	80002dc <__adddf3>
 8013c22:	9802      	ldr	r0, [sp, #8]
 8013c24:	4632      	mov	r2, r6
 8013c26:	463b      	mov	r3, r7
 8013c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013c2c:	f7ec fb54 	bl	80002d8 <__aeabi_dsub>
 8013c30:	4642      	mov	r2, r8
 8013c32:	464b      	mov	r3, r9
 8013c34:	f7ec fb50 	bl	80002d8 <__aeabi_dsub>
 8013c38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013c3c:	e607      	b.n	801384e <__ieee754_pow+0x2ce>
 8013c3e:	f04f 0a01 	mov.w	sl, #1
 8013c42:	e6a5      	b.n	8013990 <__ieee754_pow+0x410>
 8013c44:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8013c98 <__ieee754_pow+0x718>
 8013c48:	e613      	b.n	8013872 <__ieee754_pow+0x2f2>
 8013c4a:	bf00      	nop
 8013c4c:	f3af 8000 	nop.w
 8013c50:	4a454eef 	.word	0x4a454eef
 8013c54:	3fca7e28 	.word	0x3fca7e28
 8013c58:	93c9db65 	.word	0x93c9db65
 8013c5c:	3fcd864a 	.word	0x3fcd864a
 8013c60:	a91d4101 	.word	0xa91d4101
 8013c64:	3fd17460 	.word	0x3fd17460
 8013c68:	518f264d 	.word	0x518f264d
 8013c6c:	3fd55555 	.word	0x3fd55555
 8013c70:	db6fabff 	.word	0xdb6fabff
 8013c74:	3fdb6db6 	.word	0x3fdb6db6
 8013c78:	33333303 	.word	0x33333303
 8013c7c:	3fe33333 	.word	0x3fe33333
 8013c80:	e0000000 	.word	0xe0000000
 8013c84:	3feec709 	.word	0x3feec709
 8013c88:	dc3a03fd 	.word	0xdc3a03fd
 8013c8c:	3feec709 	.word	0x3feec709
 8013c90:	145b01f5 	.word	0x145b01f5
 8013c94:	be3e2fe0 	.word	0xbe3e2fe0
 8013c98:	00000000 	.word	0x00000000
 8013c9c:	3ff00000 	.word	0x3ff00000
 8013ca0:	43400000 	.word	0x43400000
 8013ca4:	0003988e 	.word	0x0003988e
 8013ca8:	000bb679 	.word	0x000bb679
 8013cac:	08015a88 	.word	0x08015a88
 8013cb0:	3ff00000 	.word	0x3ff00000
 8013cb4:	40080000 	.word	0x40080000
 8013cb8:	08015aa8 	.word	0x08015aa8
 8013cbc:	08015a98 	.word	0x08015a98
 8013cc0:	a3b4      	add	r3, pc, #720	; (adr r3, 8013f94 <__ieee754_pow+0xa14>)
 8013cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc6:	4640      	mov	r0, r8
 8013cc8:	4649      	mov	r1, r9
 8013cca:	f7ec fb07 	bl	80002dc <__adddf3>
 8013cce:	4622      	mov	r2, r4
 8013cd0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8013cd4:	462b      	mov	r3, r5
 8013cd6:	4630      	mov	r0, r6
 8013cd8:	4639      	mov	r1, r7
 8013cda:	f7ec fafd 	bl	80002d8 <__aeabi_dsub>
 8013cde:	4602      	mov	r2, r0
 8013ce0:	460b      	mov	r3, r1
 8013ce2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8013ce6:	f7ec ff3f 	bl	8000b68 <__aeabi_dcmpgt>
 8013cea:	2800      	cmp	r0, #0
 8013cec:	f47f adfe 	bne.w	80138ec <__ieee754_pow+0x36c>
 8013cf0:	4aa3      	ldr	r2, [pc, #652]	; (8013f80 <__ieee754_pow+0xa00>)
 8013cf2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	f340 810a 	ble.w	8013f10 <__ieee754_pow+0x990>
 8013cfc:	151b      	asrs	r3, r3, #20
 8013cfe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8013d02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8013d06:	fa4a f303 	asr.w	r3, sl, r3
 8013d0a:	445b      	add	r3, fp
 8013d0c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8013d10:	4e9c      	ldr	r6, [pc, #624]	; (8013f84 <__ieee754_pow+0xa04>)
 8013d12:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8013d16:	4116      	asrs	r6, r2
 8013d18:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8013d1c:	2000      	movs	r0, #0
 8013d1e:	ea23 0106 	bic.w	r1, r3, r6
 8013d22:	f1c2 0214 	rsb	r2, r2, #20
 8013d26:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8013d2a:	fa4a fa02 	asr.w	sl, sl, r2
 8013d2e:	f1bb 0f00 	cmp.w	fp, #0
 8013d32:	4602      	mov	r2, r0
 8013d34:	460b      	mov	r3, r1
 8013d36:	4620      	mov	r0, r4
 8013d38:	4629      	mov	r1, r5
 8013d3a:	bfb8      	it	lt
 8013d3c:	f1ca 0a00 	rsblt	sl, sl, #0
 8013d40:	f7ec faca 	bl	80002d8 <__aeabi_dsub>
 8013d44:	e9cd 0100 	strd	r0, r1, [sp]
 8013d48:	4642      	mov	r2, r8
 8013d4a:	464b      	mov	r3, r9
 8013d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013d50:	f7ec fac4 	bl	80002dc <__adddf3>
 8013d54:	2000      	movs	r0, #0
 8013d56:	a378      	add	r3, pc, #480	; (adr r3, 8013f38 <__ieee754_pow+0x9b8>)
 8013d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d5c:	4604      	mov	r4, r0
 8013d5e:	460d      	mov	r5, r1
 8013d60:	f7ec fc72 	bl	8000648 <__aeabi_dmul>
 8013d64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013d68:	4606      	mov	r6, r0
 8013d6a:	460f      	mov	r7, r1
 8013d6c:	4620      	mov	r0, r4
 8013d6e:	4629      	mov	r1, r5
 8013d70:	f7ec fab2 	bl	80002d8 <__aeabi_dsub>
 8013d74:	4602      	mov	r2, r0
 8013d76:	460b      	mov	r3, r1
 8013d78:	4640      	mov	r0, r8
 8013d7a:	4649      	mov	r1, r9
 8013d7c:	f7ec faac 	bl	80002d8 <__aeabi_dsub>
 8013d80:	a36f      	add	r3, pc, #444	; (adr r3, 8013f40 <__ieee754_pow+0x9c0>)
 8013d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d86:	f7ec fc5f 	bl	8000648 <__aeabi_dmul>
 8013d8a:	a36f      	add	r3, pc, #444	; (adr r3, 8013f48 <__ieee754_pow+0x9c8>)
 8013d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d90:	4680      	mov	r8, r0
 8013d92:	4689      	mov	r9, r1
 8013d94:	4620      	mov	r0, r4
 8013d96:	4629      	mov	r1, r5
 8013d98:	f7ec fc56 	bl	8000648 <__aeabi_dmul>
 8013d9c:	4602      	mov	r2, r0
 8013d9e:	460b      	mov	r3, r1
 8013da0:	4640      	mov	r0, r8
 8013da2:	4649      	mov	r1, r9
 8013da4:	f7ec fa9a 	bl	80002dc <__adddf3>
 8013da8:	4604      	mov	r4, r0
 8013daa:	460d      	mov	r5, r1
 8013dac:	4602      	mov	r2, r0
 8013dae:	460b      	mov	r3, r1
 8013db0:	4630      	mov	r0, r6
 8013db2:	4639      	mov	r1, r7
 8013db4:	f7ec fa92 	bl	80002dc <__adddf3>
 8013db8:	4632      	mov	r2, r6
 8013dba:	463b      	mov	r3, r7
 8013dbc:	4680      	mov	r8, r0
 8013dbe:	4689      	mov	r9, r1
 8013dc0:	f7ec fa8a 	bl	80002d8 <__aeabi_dsub>
 8013dc4:	4602      	mov	r2, r0
 8013dc6:	460b      	mov	r3, r1
 8013dc8:	4620      	mov	r0, r4
 8013dca:	4629      	mov	r1, r5
 8013dcc:	f7ec fa84 	bl	80002d8 <__aeabi_dsub>
 8013dd0:	4642      	mov	r2, r8
 8013dd2:	4606      	mov	r6, r0
 8013dd4:	460f      	mov	r7, r1
 8013dd6:	464b      	mov	r3, r9
 8013dd8:	4640      	mov	r0, r8
 8013dda:	4649      	mov	r1, r9
 8013ddc:	f7ec fc34 	bl	8000648 <__aeabi_dmul>
 8013de0:	a35b      	add	r3, pc, #364	; (adr r3, 8013f50 <__ieee754_pow+0x9d0>)
 8013de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013de6:	4604      	mov	r4, r0
 8013de8:	460d      	mov	r5, r1
 8013dea:	f7ec fc2d 	bl	8000648 <__aeabi_dmul>
 8013dee:	a35a      	add	r3, pc, #360	; (adr r3, 8013f58 <__ieee754_pow+0x9d8>)
 8013df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013df4:	f7ec fa70 	bl	80002d8 <__aeabi_dsub>
 8013df8:	4622      	mov	r2, r4
 8013dfa:	462b      	mov	r3, r5
 8013dfc:	f7ec fc24 	bl	8000648 <__aeabi_dmul>
 8013e00:	a357      	add	r3, pc, #348	; (adr r3, 8013f60 <__ieee754_pow+0x9e0>)
 8013e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e06:	f7ec fa69 	bl	80002dc <__adddf3>
 8013e0a:	4622      	mov	r2, r4
 8013e0c:	462b      	mov	r3, r5
 8013e0e:	f7ec fc1b 	bl	8000648 <__aeabi_dmul>
 8013e12:	a355      	add	r3, pc, #340	; (adr r3, 8013f68 <__ieee754_pow+0x9e8>)
 8013e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e18:	f7ec fa5e 	bl	80002d8 <__aeabi_dsub>
 8013e1c:	4622      	mov	r2, r4
 8013e1e:	462b      	mov	r3, r5
 8013e20:	f7ec fc12 	bl	8000648 <__aeabi_dmul>
 8013e24:	a352      	add	r3, pc, #328	; (adr r3, 8013f70 <__ieee754_pow+0x9f0>)
 8013e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e2a:	f7ec fa57 	bl	80002dc <__adddf3>
 8013e2e:	4622      	mov	r2, r4
 8013e30:	462b      	mov	r3, r5
 8013e32:	f7ec fc09 	bl	8000648 <__aeabi_dmul>
 8013e36:	4602      	mov	r2, r0
 8013e38:	460b      	mov	r3, r1
 8013e3a:	4640      	mov	r0, r8
 8013e3c:	4649      	mov	r1, r9
 8013e3e:	f7ec fa4b 	bl	80002d8 <__aeabi_dsub>
 8013e42:	4604      	mov	r4, r0
 8013e44:	460d      	mov	r5, r1
 8013e46:	4602      	mov	r2, r0
 8013e48:	460b      	mov	r3, r1
 8013e4a:	4640      	mov	r0, r8
 8013e4c:	4649      	mov	r1, r9
 8013e4e:	f7ec fbfb 	bl	8000648 <__aeabi_dmul>
 8013e52:	2200      	movs	r2, #0
 8013e54:	e9cd 0100 	strd	r0, r1, [sp]
 8013e58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013e5c:	4620      	mov	r0, r4
 8013e5e:	4629      	mov	r1, r5
 8013e60:	f7ec fa3a 	bl	80002d8 <__aeabi_dsub>
 8013e64:	4602      	mov	r2, r0
 8013e66:	460b      	mov	r3, r1
 8013e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013e6c:	f7ec fd16 	bl	800089c <__aeabi_ddiv>
 8013e70:	4632      	mov	r2, r6
 8013e72:	4604      	mov	r4, r0
 8013e74:	460d      	mov	r5, r1
 8013e76:	463b      	mov	r3, r7
 8013e78:	4640      	mov	r0, r8
 8013e7a:	4649      	mov	r1, r9
 8013e7c:	f7ec fbe4 	bl	8000648 <__aeabi_dmul>
 8013e80:	4632      	mov	r2, r6
 8013e82:	463b      	mov	r3, r7
 8013e84:	f7ec fa2a 	bl	80002dc <__adddf3>
 8013e88:	4602      	mov	r2, r0
 8013e8a:	460b      	mov	r3, r1
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	4629      	mov	r1, r5
 8013e90:	f7ec fa22 	bl	80002d8 <__aeabi_dsub>
 8013e94:	4642      	mov	r2, r8
 8013e96:	464b      	mov	r3, r9
 8013e98:	f7ec fa1e 	bl	80002d8 <__aeabi_dsub>
 8013e9c:	4602      	mov	r2, r0
 8013e9e:	460b      	mov	r3, r1
 8013ea0:	2000      	movs	r0, #0
 8013ea2:	4939      	ldr	r1, [pc, #228]	; (8013f88 <__ieee754_pow+0xa08>)
 8013ea4:	f7ec fa18 	bl	80002d8 <__aeabi_dsub>
 8013ea8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8013eac:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8013eb0:	4602      	mov	r2, r0
 8013eb2:	460b      	mov	r3, r1
 8013eb4:	da2f      	bge.n	8013f16 <__ieee754_pow+0x996>
 8013eb6:	4650      	mov	r0, sl
 8013eb8:	ec43 2b10 	vmov	d0, r2, r3
 8013ebc:	f000 f9c0 	bl	8014240 <scalbn>
 8013ec0:	ec51 0b10 	vmov	r0, r1, d0
 8013ec4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ec8:	f7ff bbf1 	b.w	80136ae <__ieee754_pow+0x12e>
 8013ecc:	4b2f      	ldr	r3, [pc, #188]	; (8013f8c <__ieee754_pow+0xa0c>)
 8013ece:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8013ed2:	429e      	cmp	r6, r3
 8013ed4:	f77f af0c 	ble.w	8013cf0 <__ieee754_pow+0x770>
 8013ed8:	4b2d      	ldr	r3, [pc, #180]	; (8013f90 <__ieee754_pow+0xa10>)
 8013eda:	440b      	add	r3, r1
 8013edc:	4303      	orrs	r3, r0
 8013ede:	d00b      	beq.n	8013ef8 <__ieee754_pow+0x978>
 8013ee0:	a325      	add	r3, pc, #148	; (adr r3, 8013f78 <__ieee754_pow+0x9f8>)
 8013ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013eea:	f7ec fbad 	bl	8000648 <__aeabi_dmul>
 8013eee:	a322      	add	r3, pc, #136	; (adr r3, 8013f78 <__ieee754_pow+0x9f8>)
 8013ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ef4:	f7ff bbdb 	b.w	80136ae <__ieee754_pow+0x12e>
 8013ef8:	4622      	mov	r2, r4
 8013efa:	462b      	mov	r3, r5
 8013efc:	f7ec f9ec 	bl	80002d8 <__aeabi_dsub>
 8013f00:	4642      	mov	r2, r8
 8013f02:	464b      	mov	r3, r9
 8013f04:	f7ec fe26 	bl	8000b54 <__aeabi_dcmpge>
 8013f08:	2800      	cmp	r0, #0
 8013f0a:	f43f aef1 	beq.w	8013cf0 <__ieee754_pow+0x770>
 8013f0e:	e7e7      	b.n	8013ee0 <__ieee754_pow+0x960>
 8013f10:	f04f 0a00 	mov.w	sl, #0
 8013f14:	e718      	b.n	8013d48 <__ieee754_pow+0x7c8>
 8013f16:	4621      	mov	r1, r4
 8013f18:	e7d4      	b.n	8013ec4 <__ieee754_pow+0x944>
 8013f1a:	2000      	movs	r0, #0
 8013f1c:	491a      	ldr	r1, [pc, #104]	; (8013f88 <__ieee754_pow+0xa08>)
 8013f1e:	f7ff bb8f 	b.w	8013640 <__ieee754_pow+0xc0>
 8013f22:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013f26:	f7ff bb8b 	b.w	8013640 <__ieee754_pow+0xc0>
 8013f2a:	4630      	mov	r0, r6
 8013f2c:	4639      	mov	r1, r7
 8013f2e:	f7ff bb87 	b.w	8013640 <__ieee754_pow+0xc0>
 8013f32:	4693      	mov	fp, r2
 8013f34:	f7ff bb98 	b.w	8013668 <__ieee754_pow+0xe8>
 8013f38:	00000000 	.word	0x00000000
 8013f3c:	3fe62e43 	.word	0x3fe62e43
 8013f40:	fefa39ef 	.word	0xfefa39ef
 8013f44:	3fe62e42 	.word	0x3fe62e42
 8013f48:	0ca86c39 	.word	0x0ca86c39
 8013f4c:	be205c61 	.word	0xbe205c61
 8013f50:	72bea4d0 	.word	0x72bea4d0
 8013f54:	3e663769 	.word	0x3e663769
 8013f58:	c5d26bf1 	.word	0xc5d26bf1
 8013f5c:	3ebbbd41 	.word	0x3ebbbd41
 8013f60:	af25de2c 	.word	0xaf25de2c
 8013f64:	3f11566a 	.word	0x3f11566a
 8013f68:	16bebd93 	.word	0x16bebd93
 8013f6c:	3f66c16c 	.word	0x3f66c16c
 8013f70:	5555553e 	.word	0x5555553e
 8013f74:	3fc55555 	.word	0x3fc55555
 8013f78:	c2f8f359 	.word	0xc2f8f359
 8013f7c:	01a56e1f 	.word	0x01a56e1f
 8013f80:	3fe00000 	.word	0x3fe00000
 8013f84:	000fffff 	.word	0x000fffff
 8013f88:	3ff00000 	.word	0x3ff00000
 8013f8c:	4090cbff 	.word	0x4090cbff
 8013f90:	3f6f3400 	.word	0x3f6f3400
 8013f94:	652b82fe 	.word	0x652b82fe
 8013f98:	3c971547 	.word	0x3c971547

08013f9c <__ieee754_sqrt>:
 8013f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013fa0:	4955      	ldr	r1, [pc, #340]	; (80140f8 <__ieee754_sqrt+0x15c>)
 8013fa2:	ec55 4b10 	vmov	r4, r5, d0
 8013fa6:	43a9      	bics	r1, r5
 8013fa8:	462b      	mov	r3, r5
 8013faa:	462a      	mov	r2, r5
 8013fac:	d112      	bne.n	8013fd4 <__ieee754_sqrt+0x38>
 8013fae:	ee10 2a10 	vmov	r2, s0
 8013fb2:	ee10 0a10 	vmov	r0, s0
 8013fb6:	4629      	mov	r1, r5
 8013fb8:	f7ec fb46 	bl	8000648 <__aeabi_dmul>
 8013fbc:	4602      	mov	r2, r0
 8013fbe:	460b      	mov	r3, r1
 8013fc0:	4620      	mov	r0, r4
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	f7ec f98a 	bl	80002dc <__adddf3>
 8013fc8:	4604      	mov	r4, r0
 8013fca:	460d      	mov	r5, r1
 8013fcc:	ec45 4b10 	vmov	d0, r4, r5
 8013fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fd4:	2d00      	cmp	r5, #0
 8013fd6:	ee10 0a10 	vmov	r0, s0
 8013fda:	4621      	mov	r1, r4
 8013fdc:	dc0f      	bgt.n	8013ffe <__ieee754_sqrt+0x62>
 8013fde:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013fe2:	4330      	orrs	r0, r6
 8013fe4:	d0f2      	beq.n	8013fcc <__ieee754_sqrt+0x30>
 8013fe6:	b155      	cbz	r5, 8013ffe <__ieee754_sqrt+0x62>
 8013fe8:	ee10 2a10 	vmov	r2, s0
 8013fec:	4620      	mov	r0, r4
 8013fee:	4629      	mov	r1, r5
 8013ff0:	f7ec f972 	bl	80002d8 <__aeabi_dsub>
 8013ff4:	4602      	mov	r2, r0
 8013ff6:	460b      	mov	r3, r1
 8013ff8:	f7ec fc50 	bl	800089c <__aeabi_ddiv>
 8013ffc:	e7e4      	b.n	8013fc8 <__ieee754_sqrt+0x2c>
 8013ffe:	151b      	asrs	r3, r3, #20
 8014000:	d073      	beq.n	80140ea <__ieee754_sqrt+0x14e>
 8014002:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014006:	07dd      	lsls	r5, r3, #31
 8014008:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801400c:	bf48      	it	mi
 801400e:	0fc8      	lsrmi	r0, r1, #31
 8014010:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014014:	bf44      	itt	mi
 8014016:	0049      	lslmi	r1, r1, #1
 8014018:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801401c:	2500      	movs	r5, #0
 801401e:	1058      	asrs	r0, r3, #1
 8014020:	0fcb      	lsrs	r3, r1, #31
 8014022:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014026:	0049      	lsls	r1, r1, #1
 8014028:	2316      	movs	r3, #22
 801402a:	462c      	mov	r4, r5
 801402c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014030:	19a7      	adds	r7, r4, r6
 8014032:	4297      	cmp	r7, r2
 8014034:	bfde      	ittt	le
 8014036:	19bc      	addle	r4, r7, r6
 8014038:	1bd2      	suble	r2, r2, r7
 801403a:	19ad      	addle	r5, r5, r6
 801403c:	0fcf      	lsrs	r7, r1, #31
 801403e:	3b01      	subs	r3, #1
 8014040:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014044:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014048:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801404c:	d1f0      	bne.n	8014030 <__ieee754_sqrt+0x94>
 801404e:	f04f 0c20 	mov.w	ip, #32
 8014052:	469e      	mov	lr, r3
 8014054:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014058:	42a2      	cmp	r2, r4
 801405a:	eb06 070e 	add.w	r7, r6, lr
 801405e:	dc02      	bgt.n	8014066 <__ieee754_sqrt+0xca>
 8014060:	d112      	bne.n	8014088 <__ieee754_sqrt+0xec>
 8014062:	428f      	cmp	r7, r1
 8014064:	d810      	bhi.n	8014088 <__ieee754_sqrt+0xec>
 8014066:	2f00      	cmp	r7, #0
 8014068:	eb07 0e06 	add.w	lr, r7, r6
 801406c:	da42      	bge.n	80140f4 <__ieee754_sqrt+0x158>
 801406e:	f1be 0f00 	cmp.w	lr, #0
 8014072:	db3f      	blt.n	80140f4 <__ieee754_sqrt+0x158>
 8014074:	f104 0801 	add.w	r8, r4, #1
 8014078:	1b12      	subs	r2, r2, r4
 801407a:	428f      	cmp	r7, r1
 801407c:	bf88      	it	hi
 801407e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8014082:	1bc9      	subs	r1, r1, r7
 8014084:	4433      	add	r3, r6
 8014086:	4644      	mov	r4, r8
 8014088:	0052      	lsls	r2, r2, #1
 801408a:	f1bc 0c01 	subs.w	ip, ip, #1
 801408e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8014092:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014096:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801409a:	d1dd      	bne.n	8014058 <__ieee754_sqrt+0xbc>
 801409c:	430a      	orrs	r2, r1
 801409e:	d006      	beq.n	80140ae <__ieee754_sqrt+0x112>
 80140a0:	1c5c      	adds	r4, r3, #1
 80140a2:	bf13      	iteet	ne
 80140a4:	3301      	addne	r3, #1
 80140a6:	3501      	addeq	r5, #1
 80140a8:	4663      	moveq	r3, ip
 80140aa:	f023 0301 	bicne.w	r3, r3, #1
 80140ae:	106a      	asrs	r2, r5, #1
 80140b0:	085b      	lsrs	r3, r3, #1
 80140b2:	07e9      	lsls	r1, r5, #31
 80140b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80140b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80140bc:	bf48      	it	mi
 80140be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80140c2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80140c6:	461c      	mov	r4, r3
 80140c8:	e780      	b.n	8013fcc <__ieee754_sqrt+0x30>
 80140ca:	0aca      	lsrs	r2, r1, #11
 80140cc:	3815      	subs	r0, #21
 80140ce:	0549      	lsls	r1, r1, #21
 80140d0:	2a00      	cmp	r2, #0
 80140d2:	d0fa      	beq.n	80140ca <__ieee754_sqrt+0x12e>
 80140d4:	02d6      	lsls	r6, r2, #11
 80140d6:	d50a      	bpl.n	80140ee <__ieee754_sqrt+0x152>
 80140d8:	f1c3 0420 	rsb	r4, r3, #32
 80140dc:	fa21 f404 	lsr.w	r4, r1, r4
 80140e0:	1e5d      	subs	r5, r3, #1
 80140e2:	4099      	lsls	r1, r3
 80140e4:	4322      	orrs	r2, r4
 80140e6:	1b43      	subs	r3, r0, r5
 80140e8:	e78b      	b.n	8014002 <__ieee754_sqrt+0x66>
 80140ea:	4618      	mov	r0, r3
 80140ec:	e7f0      	b.n	80140d0 <__ieee754_sqrt+0x134>
 80140ee:	0052      	lsls	r2, r2, #1
 80140f0:	3301      	adds	r3, #1
 80140f2:	e7ef      	b.n	80140d4 <__ieee754_sqrt+0x138>
 80140f4:	46a0      	mov	r8, r4
 80140f6:	e7bf      	b.n	8014078 <__ieee754_sqrt+0xdc>
 80140f8:	7ff00000 	.word	0x7ff00000

080140fc <fabs>:
 80140fc:	ec51 0b10 	vmov	r0, r1, d0
 8014100:	ee10 2a10 	vmov	r2, s0
 8014104:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014108:	ec43 2b10 	vmov	d0, r2, r3
 801410c:	4770      	bx	lr

0801410e <finite>:
 801410e:	ee10 3a90 	vmov	r3, s1
 8014112:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8014116:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801411a:	0fc0      	lsrs	r0, r0, #31
 801411c:	4770      	bx	lr

0801411e <matherr>:
 801411e:	2000      	movs	r0, #0
 8014120:	4770      	bx	lr
 8014122:	0000      	movs	r0, r0
 8014124:	0000      	movs	r0, r0
	...

08014128 <nan>:
 8014128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014130 <nan+0x8>
 801412c:	4770      	bx	lr
 801412e:	bf00      	nop
 8014130:	00000000 	.word	0x00000000
 8014134:	7ff80000 	.word	0x7ff80000

08014138 <rint>:
 8014138:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801413a:	ec51 0b10 	vmov	r0, r1, d0
 801413e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014142:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8014146:	2e13      	cmp	r6, #19
 8014148:	460b      	mov	r3, r1
 801414a:	ee10 4a10 	vmov	r4, s0
 801414e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8014152:	dc56      	bgt.n	8014202 <rint+0xca>
 8014154:	2e00      	cmp	r6, #0
 8014156:	da2b      	bge.n	80141b0 <rint+0x78>
 8014158:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801415c:	4302      	orrs	r2, r0
 801415e:	d023      	beq.n	80141a8 <rint+0x70>
 8014160:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8014164:	4302      	orrs	r2, r0
 8014166:	4254      	negs	r4, r2
 8014168:	4314      	orrs	r4, r2
 801416a:	0c4b      	lsrs	r3, r1, #17
 801416c:	0b24      	lsrs	r4, r4, #12
 801416e:	045b      	lsls	r3, r3, #17
 8014170:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8014174:	ea44 0103 	orr.w	r1, r4, r3
 8014178:	460b      	mov	r3, r1
 801417a:	492f      	ldr	r1, [pc, #188]	; (8014238 <rint+0x100>)
 801417c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8014180:	e9d1 6700 	ldrd	r6, r7, [r1]
 8014184:	4602      	mov	r2, r0
 8014186:	4639      	mov	r1, r7
 8014188:	4630      	mov	r0, r6
 801418a:	f7ec f8a7 	bl	80002dc <__adddf3>
 801418e:	e9cd 0100 	strd	r0, r1, [sp]
 8014192:	463b      	mov	r3, r7
 8014194:	4632      	mov	r2, r6
 8014196:	e9dd 0100 	ldrd	r0, r1, [sp]
 801419a:	f7ec f89d 	bl	80002d8 <__aeabi_dsub>
 801419e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141a2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80141a6:	4639      	mov	r1, r7
 80141a8:	ec41 0b10 	vmov	d0, r0, r1
 80141ac:	b003      	add	sp, #12
 80141ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141b0:	4a22      	ldr	r2, [pc, #136]	; (801423c <rint+0x104>)
 80141b2:	4132      	asrs	r2, r6
 80141b4:	ea01 0702 	and.w	r7, r1, r2
 80141b8:	4307      	orrs	r7, r0
 80141ba:	d0f5      	beq.n	80141a8 <rint+0x70>
 80141bc:	0852      	lsrs	r2, r2, #1
 80141be:	4011      	ands	r1, r2
 80141c0:	430c      	orrs	r4, r1
 80141c2:	d00b      	beq.n	80141dc <rint+0xa4>
 80141c4:	ea23 0202 	bic.w	r2, r3, r2
 80141c8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80141cc:	2e13      	cmp	r6, #19
 80141ce:	fa43 f306 	asr.w	r3, r3, r6
 80141d2:	bf0c      	ite	eq
 80141d4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80141d8:	2400      	movne	r4, #0
 80141da:	4313      	orrs	r3, r2
 80141dc:	4916      	ldr	r1, [pc, #88]	; (8014238 <rint+0x100>)
 80141de:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80141e2:	4622      	mov	r2, r4
 80141e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 80141e8:	4620      	mov	r0, r4
 80141ea:	4629      	mov	r1, r5
 80141ec:	f7ec f876 	bl	80002dc <__adddf3>
 80141f0:	e9cd 0100 	strd	r0, r1, [sp]
 80141f4:	4622      	mov	r2, r4
 80141f6:	462b      	mov	r3, r5
 80141f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80141fc:	f7ec f86c 	bl	80002d8 <__aeabi_dsub>
 8014200:	e7d2      	b.n	80141a8 <rint+0x70>
 8014202:	2e33      	cmp	r6, #51	; 0x33
 8014204:	dd07      	ble.n	8014216 <rint+0xde>
 8014206:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801420a:	d1cd      	bne.n	80141a8 <rint+0x70>
 801420c:	ee10 2a10 	vmov	r2, s0
 8014210:	f7ec f864 	bl	80002dc <__adddf3>
 8014214:	e7c8      	b.n	80141a8 <rint+0x70>
 8014216:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801421a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801421e:	40f2      	lsrs	r2, r6
 8014220:	4210      	tst	r0, r2
 8014222:	d0c1      	beq.n	80141a8 <rint+0x70>
 8014224:	0852      	lsrs	r2, r2, #1
 8014226:	4210      	tst	r0, r2
 8014228:	bf1f      	itttt	ne
 801422a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801422e:	ea20 0202 	bicne.w	r2, r0, r2
 8014232:	4134      	asrne	r4, r6
 8014234:	4314      	orrne	r4, r2
 8014236:	e7d1      	b.n	80141dc <rint+0xa4>
 8014238:	08015ab8 	.word	0x08015ab8
 801423c:	000fffff 	.word	0x000fffff

08014240 <scalbn>:
 8014240:	b570      	push	{r4, r5, r6, lr}
 8014242:	ec55 4b10 	vmov	r4, r5, d0
 8014246:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801424a:	4606      	mov	r6, r0
 801424c:	462b      	mov	r3, r5
 801424e:	b9aa      	cbnz	r2, 801427c <scalbn+0x3c>
 8014250:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014254:	4323      	orrs	r3, r4
 8014256:	d03b      	beq.n	80142d0 <scalbn+0x90>
 8014258:	4b31      	ldr	r3, [pc, #196]	; (8014320 <scalbn+0xe0>)
 801425a:	4629      	mov	r1, r5
 801425c:	2200      	movs	r2, #0
 801425e:	ee10 0a10 	vmov	r0, s0
 8014262:	f7ec f9f1 	bl	8000648 <__aeabi_dmul>
 8014266:	4b2f      	ldr	r3, [pc, #188]	; (8014324 <scalbn+0xe4>)
 8014268:	429e      	cmp	r6, r3
 801426a:	4604      	mov	r4, r0
 801426c:	460d      	mov	r5, r1
 801426e:	da12      	bge.n	8014296 <scalbn+0x56>
 8014270:	a327      	add	r3, pc, #156	; (adr r3, 8014310 <scalbn+0xd0>)
 8014272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014276:	f7ec f9e7 	bl	8000648 <__aeabi_dmul>
 801427a:	e009      	b.n	8014290 <scalbn+0x50>
 801427c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014280:	428a      	cmp	r2, r1
 8014282:	d10c      	bne.n	801429e <scalbn+0x5e>
 8014284:	ee10 2a10 	vmov	r2, s0
 8014288:	4620      	mov	r0, r4
 801428a:	4629      	mov	r1, r5
 801428c:	f7ec f826 	bl	80002dc <__adddf3>
 8014290:	4604      	mov	r4, r0
 8014292:	460d      	mov	r5, r1
 8014294:	e01c      	b.n	80142d0 <scalbn+0x90>
 8014296:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801429a:	460b      	mov	r3, r1
 801429c:	3a36      	subs	r2, #54	; 0x36
 801429e:	4432      	add	r2, r6
 80142a0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80142a4:	428a      	cmp	r2, r1
 80142a6:	dd0b      	ble.n	80142c0 <scalbn+0x80>
 80142a8:	ec45 4b11 	vmov	d1, r4, r5
 80142ac:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014318 <scalbn+0xd8>
 80142b0:	f000 f9f0 	bl	8014694 <copysign>
 80142b4:	a318      	add	r3, pc, #96	; (adr r3, 8014318 <scalbn+0xd8>)
 80142b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142ba:	ec51 0b10 	vmov	r0, r1, d0
 80142be:	e7da      	b.n	8014276 <scalbn+0x36>
 80142c0:	2a00      	cmp	r2, #0
 80142c2:	dd08      	ble.n	80142d6 <scalbn+0x96>
 80142c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80142c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80142cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80142d0:	ec45 4b10 	vmov	d0, r4, r5
 80142d4:	bd70      	pop	{r4, r5, r6, pc}
 80142d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80142da:	da0d      	bge.n	80142f8 <scalbn+0xb8>
 80142dc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80142e0:	429e      	cmp	r6, r3
 80142e2:	ec45 4b11 	vmov	d1, r4, r5
 80142e6:	dce1      	bgt.n	80142ac <scalbn+0x6c>
 80142e8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014310 <scalbn+0xd0>
 80142ec:	f000 f9d2 	bl	8014694 <copysign>
 80142f0:	a307      	add	r3, pc, #28	; (adr r3, 8014310 <scalbn+0xd0>)
 80142f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142f6:	e7e0      	b.n	80142ba <scalbn+0x7a>
 80142f8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80142fc:	3236      	adds	r2, #54	; 0x36
 80142fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014302:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014306:	4620      	mov	r0, r4
 8014308:	4629      	mov	r1, r5
 801430a:	2200      	movs	r2, #0
 801430c:	4b06      	ldr	r3, [pc, #24]	; (8014328 <scalbn+0xe8>)
 801430e:	e7b2      	b.n	8014276 <scalbn+0x36>
 8014310:	c2f8f359 	.word	0xc2f8f359
 8014314:	01a56e1f 	.word	0x01a56e1f
 8014318:	8800759c 	.word	0x8800759c
 801431c:	7e37e43c 	.word	0x7e37e43c
 8014320:	43500000 	.word	0x43500000
 8014324:	ffff3cb0 	.word	0xffff3cb0
 8014328:	3c900000 	.word	0x3c900000
 801432c:	00000000 	.word	0x00000000

08014330 <__ieee754_log>:
 8014330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014334:	ec51 0b10 	vmov	r0, r1, d0
 8014338:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801433c:	b087      	sub	sp, #28
 801433e:	460d      	mov	r5, r1
 8014340:	da27      	bge.n	8014392 <__ieee754_log+0x62>
 8014342:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014346:	4303      	orrs	r3, r0
 8014348:	ee10 2a10 	vmov	r2, s0
 801434c:	d10a      	bne.n	8014364 <__ieee754_log+0x34>
 801434e:	49cc      	ldr	r1, [pc, #816]	; (8014680 <__ieee754_log+0x350>)
 8014350:	2200      	movs	r2, #0
 8014352:	2300      	movs	r3, #0
 8014354:	2000      	movs	r0, #0
 8014356:	f7ec faa1 	bl	800089c <__aeabi_ddiv>
 801435a:	ec41 0b10 	vmov	d0, r0, r1
 801435e:	b007      	add	sp, #28
 8014360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014364:	2900      	cmp	r1, #0
 8014366:	da05      	bge.n	8014374 <__ieee754_log+0x44>
 8014368:	460b      	mov	r3, r1
 801436a:	f7eb ffb5 	bl	80002d8 <__aeabi_dsub>
 801436e:	2200      	movs	r2, #0
 8014370:	2300      	movs	r3, #0
 8014372:	e7f0      	b.n	8014356 <__ieee754_log+0x26>
 8014374:	4bc3      	ldr	r3, [pc, #780]	; (8014684 <__ieee754_log+0x354>)
 8014376:	2200      	movs	r2, #0
 8014378:	f7ec f966 	bl	8000648 <__aeabi_dmul>
 801437c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8014380:	460d      	mov	r5, r1
 8014382:	4ac1      	ldr	r2, [pc, #772]	; (8014688 <__ieee754_log+0x358>)
 8014384:	4295      	cmp	r5, r2
 8014386:	dd06      	ble.n	8014396 <__ieee754_log+0x66>
 8014388:	4602      	mov	r2, r0
 801438a:	460b      	mov	r3, r1
 801438c:	f7eb ffa6 	bl	80002dc <__adddf3>
 8014390:	e7e3      	b.n	801435a <__ieee754_log+0x2a>
 8014392:	2300      	movs	r3, #0
 8014394:	e7f5      	b.n	8014382 <__ieee754_log+0x52>
 8014396:	152c      	asrs	r4, r5, #20
 8014398:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 801439c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80143a0:	441c      	add	r4, r3
 80143a2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80143a6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80143aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80143ae:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80143b2:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80143b6:	ea42 0105 	orr.w	r1, r2, r5
 80143ba:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80143be:	2200      	movs	r2, #0
 80143c0:	4bb2      	ldr	r3, [pc, #712]	; (801468c <__ieee754_log+0x35c>)
 80143c2:	f7eb ff89 	bl	80002d8 <__aeabi_dsub>
 80143c6:	1cab      	adds	r3, r5, #2
 80143c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80143cc:	2b02      	cmp	r3, #2
 80143ce:	4682      	mov	sl, r0
 80143d0:	468b      	mov	fp, r1
 80143d2:	f04f 0200 	mov.w	r2, #0
 80143d6:	dc53      	bgt.n	8014480 <__ieee754_log+0x150>
 80143d8:	2300      	movs	r3, #0
 80143da:	f7ec fb9d 	bl	8000b18 <__aeabi_dcmpeq>
 80143de:	b1d0      	cbz	r0, 8014416 <__ieee754_log+0xe6>
 80143e0:	2c00      	cmp	r4, #0
 80143e2:	f000 8120 	beq.w	8014626 <__ieee754_log+0x2f6>
 80143e6:	4620      	mov	r0, r4
 80143e8:	f7ec f8c4 	bl	8000574 <__aeabi_i2d>
 80143ec:	a390      	add	r3, pc, #576	; (adr r3, 8014630 <__ieee754_log+0x300>)
 80143ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143f2:	4606      	mov	r6, r0
 80143f4:	460f      	mov	r7, r1
 80143f6:	f7ec f927 	bl	8000648 <__aeabi_dmul>
 80143fa:	a38f      	add	r3, pc, #572	; (adr r3, 8014638 <__ieee754_log+0x308>)
 80143fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014400:	4604      	mov	r4, r0
 8014402:	460d      	mov	r5, r1
 8014404:	4630      	mov	r0, r6
 8014406:	4639      	mov	r1, r7
 8014408:	f7ec f91e 	bl	8000648 <__aeabi_dmul>
 801440c:	4602      	mov	r2, r0
 801440e:	460b      	mov	r3, r1
 8014410:	4620      	mov	r0, r4
 8014412:	4629      	mov	r1, r5
 8014414:	e7ba      	b.n	801438c <__ieee754_log+0x5c>
 8014416:	a38a      	add	r3, pc, #552	; (adr r3, 8014640 <__ieee754_log+0x310>)
 8014418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801441c:	4650      	mov	r0, sl
 801441e:	4659      	mov	r1, fp
 8014420:	f7ec f912 	bl	8000648 <__aeabi_dmul>
 8014424:	4602      	mov	r2, r0
 8014426:	460b      	mov	r3, r1
 8014428:	2000      	movs	r0, #0
 801442a:	4999      	ldr	r1, [pc, #612]	; (8014690 <__ieee754_log+0x360>)
 801442c:	f7eb ff54 	bl	80002d8 <__aeabi_dsub>
 8014430:	4652      	mov	r2, sl
 8014432:	4606      	mov	r6, r0
 8014434:	460f      	mov	r7, r1
 8014436:	465b      	mov	r3, fp
 8014438:	4650      	mov	r0, sl
 801443a:	4659      	mov	r1, fp
 801443c:	f7ec f904 	bl	8000648 <__aeabi_dmul>
 8014440:	4602      	mov	r2, r0
 8014442:	460b      	mov	r3, r1
 8014444:	4630      	mov	r0, r6
 8014446:	4639      	mov	r1, r7
 8014448:	f7ec f8fe 	bl	8000648 <__aeabi_dmul>
 801444c:	4606      	mov	r6, r0
 801444e:	460f      	mov	r7, r1
 8014450:	b914      	cbnz	r4, 8014458 <__ieee754_log+0x128>
 8014452:	4632      	mov	r2, r6
 8014454:	463b      	mov	r3, r7
 8014456:	e0a0      	b.n	801459a <__ieee754_log+0x26a>
 8014458:	4620      	mov	r0, r4
 801445a:	f7ec f88b 	bl	8000574 <__aeabi_i2d>
 801445e:	a374      	add	r3, pc, #464	; (adr r3, 8014630 <__ieee754_log+0x300>)
 8014460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014464:	4680      	mov	r8, r0
 8014466:	4689      	mov	r9, r1
 8014468:	f7ec f8ee 	bl	8000648 <__aeabi_dmul>
 801446c:	a372      	add	r3, pc, #456	; (adr r3, 8014638 <__ieee754_log+0x308>)
 801446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014472:	4604      	mov	r4, r0
 8014474:	460d      	mov	r5, r1
 8014476:	4640      	mov	r0, r8
 8014478:	4649      	mov	r1, r9
 801447a:	f7ec f8e5 	bl	8000648 <__aeabi_dmul>
 801447e:	e0a5      	b.n	80145cc <__ieee754_log+0x29c>
 8014480:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014484:	f7eb ff2a 	bl	80002dc <__adddf3>
 8014488:	4602      	mov	r2, r0
 801448a:	460b      	mov	r3, r1
 801448c:	4650      	mov	r0, sl
 801448e:	4659      	mov	r1, fp
 8014490:	f7ec fa04 	bl	800089c <__aeabi_ddiv>
 8014494:	e9cd 0100 	strd	r0, r1, [sp]
 8014498:	4620      	mov	r0, r4
 801449a:	f7ec f86b 	bl	8000574 <__aeabi_i2d>
 801449e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80144a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80144a6:	4610      	mov	r0, r2
 80144a8:	4619      	mov	r1, r3
 80144aa:	f7ec f8cd 	bl	8000648 <__aeabi_dmul>
 80144ae:	4602      	mov	r2, r0
 80144b0:	460b      	mov	r3, r1
 80144b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80144b6:	f7ec f8c7 	bl	8000648 <__aeabi_dmul>
 80144ba:	a363      	add	r3, pc, #396	; (adr r3, 8014648 <__ieee754_log+0x318>)
 80144bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144c0:	4680      	mov	r8, r0
 80144c2:	4689      	mov	r9, r1
 80144c4:	f7ec f8c0 	bl	8000648 <__aeabi_dmul>
 80144c8:	a361      	add	r3, pc, #388	; (adr r3, 8014650 <__ieee754_log+0x320>)
 80144ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ce:	f7eb ff05 	bl	80002dc <__adddf3>
 80144d2:	4642      	mov	r2, r8
 80144d4:	464b      	mov	r3, r9
 80144d6:	f7ec f8b7 	bl	8000648 <__aeabi_dmul>
 80144da:	a35f      	add	r3, pc, #380	; (adr r3, 8014658 <__ieee754_log+0x328>)
 80144dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144e0:	f7eb fefc 	bl	80002dc <__adddf3>
 80144e4:	4642      	mov	r2, r8
 80144e6:	464b      	mov	r3, r9
 80144e8:	f7ec f8ae 	bl	8000648 <__aeabi_dmul>
 80144ec:	a35c      	add	r3, pc, #368	; (adr r3, 8014660 <__ieee754_log+0x330>)
 80144ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144f2:	f7eb fef3 	bl	80002dc <__adddf3>
 80144f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80144fa:	f7ec f8a5 	bl	8000648 <__aeabi_dmul>
 80144fe:	a35a      	add	r3, pc, #360	; (adr r3, 8014668 <__ieee754_log+0x338>)
 8014500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014504:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014508:	4640      	mov	r0, r8
 801450a:	4649      	mov	r1, r9
 801450c:	f7ec f89c 	bl	8000648 <__aeabi_dmul>
 8014510:	a357      	add	r3, pc, #348	; (adr r3, 8014670 <__ieee754_log+0x340>)
 8014512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014516:	f7eb fee1 	bl	80002dc <__adddf3>
 801451a:	4642      	mov	r2, r8
 801451c:	464b      	mov	r3, r9
 801451e:	f7ec f893 	bl	8000648 <__aeabi_dmul>
 8014522:	a355      	add	r3, pc, #340	; (adr r3, 8014678 <__ieee754_log+0x348>)
 8014524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014528:	f7eb fed8 	bl	80002dc <__adddf3>
 801452c:	4642      	mov	r2, r8
 801452e:	464b      	mov	r3, r9
 8014530:	f7ec f88a 	bl	8000648 <__aeabi_dmul>
 8014534:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8014538:	4602      	mov	r2, r0
 801453a:	460b      	mov	r3, r1
 801453c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8014540:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014544:	f7eb feca 	bl	80002dc <__adddf3>
 8014548:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 801454c:	3551      	adds	r5, #81	; 0x51
 801454e:	4335      	orrs	r5, r6
 8014550:	2d00      	cmp	r5, #0
 8014552:	4680      	mov	r8, r0
 8014554:	4689      	mov	r9, r1
 8014556:	dd48      	ble.n	80145ea <__ieee754_log+0x2ba>
 8014558:	2200      	movs	r2, #0
 801455a:	4b4d      	ldr	r3, [pc, #308]	; (8014690 <__ieee754_log+0x360>)
 801455c:	4650      	mov	r0, sl
 801455e:	4659      	mov	r1, fp
 8014560:	f7ec f872 	bl	8000648 <__aeabi_dmul>
 8014564:	4652      	mov	r2, sl
 8014566:	465b      	mov	r3, fp
 8014568:	f7ec f86e 	bl	8000648 <__aeabi_dmul>
 801456c:	4602      	mov	r2, r0
 801456e:	460b      	mov	r3, r1
 8014570:	4606      	mov	r6, r0
 8014572:	460f      	mov	r7, r1
 8014574:	4640      	mov	r0, r8
 8014576:	4649      	mov	r1, r9
 8014578:	f7eb feb0 	bl	80002dc <__adddf3>
 801457c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014580:	f7ec f862 	bl	8000648 <__aeabi_dmul>
 8014584:	4680      	mov	r8, r0
 8014586:	4689      	mov	r9, r1
 8014588:	b964      	cbnz	r4, 80145a4 <__ieee754_log+0x274>
 801458a:	4602      	mov	r2, r0
 801458c:	460b      	mov	r3, r1
 801458e:	4630      	mov	r0, r6
 8014590:	4639      	mov	r1, r7
 8014592:	f7eb fea1 	bl	80002d8 <__aeabi_dsub>
 8014596:	4602      	mov	r2, r0
 8014598:	460b      	mov	r3, r1
 801459a:	4650      	mov	r0, sl
 801459c:	4659      	mov	r1, fp
 801459e:	f7eb fe9b 	bl	80002d8 <__aeabi_dsub>
 80145a2:	e6da      	b.n	801435a <__ieee754_log+0x2a>
 80145a4:	a322      	add	r3, pc, #136	; (adr r3, 8014630 <__ieee754_log+0x300>)
 80145a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145ae:	f7ec f84b 	bl	8000648 <__aeabi_dmul>
 80145b2:	a321      	add	r3, pc, #132	; (adr r3, 8014638 <__ieee754_log+0x308>)
 80145b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145b8:	4604      	mov	r4, r0
 80145ba:	460d      	mov	r5, r1
 80145bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80145c0:	f7ec f842 	bl	8000648 <__aeabi_dmul>
 80145c4:	4642      	mov	r2, r8
 80145c6:	464b      	mov	r3, r9
 80145c8:	f7eb fe88 	bl	80002dc <__adddf3>
 80145cc:	4602      	mov	r2, r0
 80145ce:	460b      	mov	r3, r1
 80145d0:	4630      	mov	r0, r6
 80145d2:	4639      	mov	r1, r7
 80145d4:	f7eb fe80 	bl	80002d8 <__aeabi_dsub>
 80145d8:	4652      	mov	r2, sl
 80145da:	465b      	mov	r3, fp
 80145dc:	f7eb fe7c 	bl	80002d8 <__aeabi_dsub>
 80145e0:	4602      	mov	r2, r0
 80145e2:	460b      	mov	r3, r1
 80145e4:	4620      	mov	r0, r4
 80145e6:	4629      	mov	r1, r5
 80145e8:	e7d9      	b.n	801459e <__ieee754_log+0x26e>
 80145ea:	4602      	mov	r2, r0
 80145ec:	460b      	mov	r3, r1
 80145ee:	4650      	mov	r0, sl
 80145f0:	4659      	mov	r1, fp
 80145f2:	f7eb fe71 	bl	80002d8 <__aeabi_dsub>
 80145f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80145fa:	f7ec f825 	bl	8000648 <__aeabi_dmul>
 80145fe:	4606      	mov	r6, r0
 8014600:	460f      	mov	r7, r1
 8014602:	2c00      	cmp	r4, #0
 8014604:	f43f af25 	beq.w	8014452 <__ieee754_log+0x122>
 8014608:	a309      	add	r3, pc, #36	; (adr r3, 8014630 <__ieee754_log+0x300>)
 801460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801460e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014612:	f7ec f819 	bl	8000648 <__aeabi_dmul>
 8014616:	a308      	add	r3, pc, #32	; (adr r3, 8014638 <__ieee754_log+0x308>)
 8014618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801461c:	4604      	mov	r4, r0
 801461e:	460d      	mov	r5, r1
 8014620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014624:	e729      	b.n	801447a <__ieee754_log+0x14a>
 8014626:	2000      	movs	r0, #0
 8014628:	2100      	movs	r1, #0
 801462a:	e696      	b.n	801435a <__ieee754_log+0x2a>
 801462c:	f3af 8000 	nop.w
 8014630:	fee00000 	.word	0xfee00000
 8014634:	3fe62e42 	.word	0x3fe62e42
 8014638:	35793c76 	.word	0x35793c76
 801463c:	3dea39ef 	.word	0x3dea39ef
 8014640:	55555555 	.word	0x55555555
 8014644:	3fd55555 	.word	0x3fd55555
 8014648:	df3e5244 	.word	0xdf3e5244
 801464c:	3fc2f112 	.word	0x3fc2f112
 8014650:	96cb03de 	.word	0x96cb03de
 8014654:	3fc74664 	.word	0x3fc74664
 8014658:	94229359 	.word	0x94229359
 801465c:	3fd24924 	.word	0x3fd24924
 8014660:	55555593 	.word	0x55555593
 8014664:	3fe55555 	.word	0x3fe55555
 8014668:	d078c69f 	.word	0xd078c69f
 801466c:	3fc39a09 	.word	0x3fc39a09
 8014670:	1d8e78af 	.word	0x1d8e78af
 8014674:	3fcc71c5 	.word	0x3fcc71c5
 8014678:	9997fa04 	.word	0x9997fa04
 801467c:	3fd99999 	.word	0x3fd99999
 8014680:	c3500000 	.word	0xc3500000
 8014684:	43500000 	.word	0x43500000
 8014688:	7fefffff 	.word	0x7fefffff
 801468c:	3ff00000 	.word	0x3ff00000
 8014690:	3fe00000 	.word	0x3fe00000

08014694 <copysign>:
 8014694:	ec51 0b10 	vmov	r0, r1, d0
 8014698:	ee11 0a90 	vmov	r0, s3
 801469c:	ee10 2a10 	vmov	r2, s0
 80146a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80146a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80146a8:	ea41 0300 	orr.w	r3, r1, r0
 80146ac:	ec43 2b10 	vmov	d0, r2, r3
 80146b0:	4770      	bx	lr
	...

080146b4 <_init>:
 80146b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146b6:	bf00      	nop
 80146b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146ba:	bc08      	pop	{r3}
 80146bc:	469e      	mov	lr, r3
 80146be:	4770      	bx	lr

080146c0 <_fini>:
 80146c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146c2:	bf00      	nop
 80146c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80146c6:	bc08      	pop	{r3}
 80146c8:	469e      	mov	lr, r3
 80146ca:	4770      	bx	lr
