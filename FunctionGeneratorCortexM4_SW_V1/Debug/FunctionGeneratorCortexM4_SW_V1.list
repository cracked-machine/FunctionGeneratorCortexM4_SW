
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007974  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e80  08007e80  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007e80  08007e80  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e80  08007e80  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e80  08007e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000035c  20000078  08007f00  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003d4  08007f00  000203d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f22a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ecb  00000000  00000000  0003f2d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001970  00000000  00000000  000431a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001758  00000000  00000000  00044b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bf83  00000000  00000000  00046268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018091  00000000  00000000  000721eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0011796c  00000000  00000000  0008a27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a1be8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007104  00000000  00000000  001a1c64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007b3c 	.word	0x08007b3c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08007b3c 	.word	0x08007b3c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f006 fcdf 	bl	8006c9c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002de:	4b32      	ldr	r3, [pc, #200]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e6:	4b30      	ldr	r3, [pc, #192]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ec:	4b2e      	ldr	r3, [pc, #184]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <MX_ADC1_Init+0xe8>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002fe:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000304:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000306:	2204      	movs	r2, #4
 8000308:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030a:	4b27      	ldr	r3, [pc, #156]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800030c:	2200      	movs	r2, #0
 800030e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000310:	4b25      	ldr	r3, [pc, #148]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000312:	2201      	movs	r2, #1
 8000314:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000316:	4b24      	ldr	r3, [pc, #144]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000318:	2201      	movs	r2, #1
 800031a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031c:	4b22      	ldr	r3, [pc, #136]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800031e:	2200      	movs	r2, #0
 8000320:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000324:	4b20      	ldr	r3, [pc, #128]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000326:	2200      	movs	r2, #0
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800032c:	2200      	movs	r2, #0
 800032e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000330:	4b1d      	ldr	r3, [pc, #116]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000332:	2201      	movs	r2, #1
 8000334:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000338:	4b1b      	ldr	r3, [pc, #108]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800033a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4817      	ldr	r0, [pc, #92]	; (80003a8 <MX_ADC1_Init+0xe8>)
 800034a:	f001 fb3f 	bl	80019cc <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 fccb 	bl	8000cee <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000358:	2300      	movs	r3, #0
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800035c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000360:	4619      	mov	r1, r3
 8000362:	4811      	ldr	r0, [pc, #68]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000364:	f002 f8c8 	bl	80024f8 <HAL_ADCEx_MultiModeConfigChannel>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800036e:	f000 fcbe 	bl	8000cee <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000372:	4b0e      	ldr	r3, [pc, #56]	; (80003ac <MX_ADC1_Init+0xec>)
 8000374:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000376:	2306      	movs	r3, #6
 8000378:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800037e:	237f      	movs	r3, #127	; 0x7f
 8000380:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000382:	2304      	movs	r3, #4
 8000384:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000386:	2300      	movs	r3, #0
 8000388:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800038a:	1d3b      	adds	r3, r7, #4
 800038c:	4619      	mov	r1, r3
 800038e:	4806      	ldr	r0, [pc, #24]	; (80003a8 <MX_ADC1_Init+0xe8>)
 8000390:	f001 fcdc 	bl	8001d4c <HAL_ADC_ConfigChannel>
 8000394:	4603      	mov	r3, r0
 8000396:	2b00      	cmp	r3, #0
 8000398:	d001      	beq.n	800039e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800039a:	f000 fca8 	bl	8000cee <Error_Handler>
  }

}
 800039e:	bf00      	nop
 80003a0:	3730      	adds	r7, #48	; 0x30
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	200000a8 	.word	0x200000a8
 80003ac:	0c900008 	.word	0x0c900008

080003b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b08a      	sub	sp, #40	; 0x28
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b8:	f107 0314 	add.w	r3, r7, #20
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	605a      	str	r2, [r3, #4]
 80003c2:	609a      	str	r2, [r3, #8]
 80003c4:	60da      	str	r2, [r3, #12]
 80003c6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80003d0:	d14f      	bne.n	8000472 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80003d2:	4b2a      	ldr	r3, [pc, #168]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003d6:	4a29      	ldr	r2, [pc, #164]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003de:	4b27      	ldr	r3, [pc, #156]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e6:	613b      	str	r3, [r7, #16]
 80003e8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b24      	ldr	r3, [pc, #144]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003ee:	4a23      	ldr	r2, [pc, #140]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80003f6:	4b21      	ldr	r3, [pc, #132]	; (800047c <HAL_ADC_MspInit+0xcc>)
 80003f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80003fa:	f003 0301 	and.w	r3, r3, #1
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000402:	2304      	movs	r3, #4
 8000404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000406:	2303      	movs	r3, #3
 8000408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800040e:	f107 0314 	add.w	r3, r7, #20
 8000412:	4619      	mov	r1, r3
 8000414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000418:	f003 f9a0 	bl	800375c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800041c:	4b18      	ldr	r3, [pc, #96]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800041e:	4a19      	ldr	r2, [pc, #100]	; (8000484 <HAL_ADC_MspInit+0xd4>)
 8000420:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000422:	4b17      	ldr	r3, [pc, #92]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000424:	2205      	movs	r2, #5
 8000426:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000428:	4b15      	ldr	r3, [pc, #84]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800042a:	2200      	movs	r2, #0
 800042c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800042e:	4b14      	ldr	r3, [pc, #80]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000430:	2200      	movs	r2, #0
 8000432:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000436:	2280      	movs	r2, #128	; 0x80
 8000438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800043a:	4b11      	ldr	r3, [pc, #68]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800043c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000442:	4b0f      	ldr	r3, [pc, #60]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000444:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800044c:	2220      	movs	r2, #32
 800044e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000450:	4b0b      	ldr	r3, [pc, #44]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000456:	480a      	ldr	r0, [pc, #40]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 8000458:	f002 ffc6 	bl	80033e8 <HAL_DMA_Init>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000462:	f000 fc44 	bl	8000cee <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a05      	ldr	r2, [pc, #20]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046a:	655a      	str	r2, [r3, #84]	; 0x54
 800046c:	4a04      	ldr	r2, [pc, #16]	; (8000480 <HAL_ADC_MspInit+0xd0>)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000472:	bf00      	nop
 8000474:	3728      	adds	r7, #40	; 0x28
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40021000 	.word	0x40021000
 8000480:	20000114 	.word	0x20000114
 8000484:	40020008 	.word	0x40020008

08000488 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 800048c:	4b0f      	ldr	r3, [pc, #60]	; (80004cc <MX_COMP1_Init+0x44>)
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <MX_COMP1_Init+0x48>)
 8000490:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_COMP1_Init+0x44>)
 8000494:	2200      	movs	r2, #0
 8000496:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000498:	4b0c      	ldr	r3, [pc, #48]	; (80004cc <MX_COMP1_Init+0x44>)
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <MX_COMP1_Init+0x4c>)
 800049c:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80004a4:	4b09      	ldr	r3, [pc, #36]	; (80004cc <MX_COMP1_Init+0x44>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_COMP1_Init+0x44>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80004b0:	4b06      	ldr	r3, [pc, #24]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80004b6:	4805      	ldr	r0, [pc, #20]	; (80004cc <MX_COMP1_Init+0x44>)
 80004b8:	f002 fa72 	bl	80029a0 <HAL_COMP_Init>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 80004c2:	f000 fc14 	bl	8000cee <Error_Handler>
  }

}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	20000174 	.word	0x20000174
 80004d0:	40010200 	.word	0x40010200
 80004d4:	00800030 	.word	0x00800030

080004d8 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b088      	sub	sp, #32
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e0:	f107 030c 	add.w	r3, r7, #12
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0f      	ldr	r2, [pc, #60]	; (8000534 <HAL_COMP_MspInit+0x5c>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d118      	bne.n	800052c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b0f      	ldr	r3, [pc, #60]	; (8000538 <HAL_COMP_MspInit+0x60>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000500:	f043 0301 	orr.w	r3, r3, #1
 8000504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <HAL_COMP_MspInit+0x60>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	2302      	movs	r3, #2
 8000514:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000516:	2303      	movs	r3, #3
 8000518:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051a:	2300      	movs	r3, #0
 800051c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	4619      	mov	r1, r3
 8000524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000528:	f003 f918 	bl	800375c <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 800052c:	bf00      	nop
 800052e:	3720      	adds	r7, #32
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40010200 	.word	0x40010200
 8000538:	40021000 	.word	0x40021000

0800053c <MX_DAC1_Init>:
DAC_HandleTypeDef hdac2;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f006 fba7 	bl	8006c9c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 800054e:	4b23      	ldr	r3, [pc, #140]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000550:	4a23      	ldr	r2, [pc, #140]	; (80005e0 <MX_DAC1_Init+0xa4>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000554:	4821      	ldr	r0, [pc, #132]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000556:	f002 fcc6 	bl	8002ee6 <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 fbc5 	bl	8000cee <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000574:	231e      	movs	r3, #30
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	4813      	ldr	r0, [pc, #76]	; (80005dc <MX_DAC1_Init+0xa0>)
 8000590:	f002 fd46 	bl	8003020 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fba8 	bl	8000cee <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800059e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80005a2:	2100      	movs	r1, #0
 80005a4:	480d      	ldr	r0, [pc, #52]	; (80005dc <MX_DAC1_Init+0xa0>)
 80005a6:	f002 fee7 	bl	8003378 <HAL_DACEx_TriangleWaveGenerate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 80005b0:	f000 fb9d 	bl	8000cee <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005bc:	463b      	mov	r3, r7
 80005be:	2210      	movs	r2, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4806      	ldr	r0, [pc, #24]	; (80005dc <MX_DAC1_Init+0xa0>)
 80005c4:	f002 fd2c 	bl	8003020 <HAL_DAC_ConfigChannel>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 80005ce:	f000 fb8e 	bl	8000cee <Error_Handler>
  }

}
 80005d2:	bf00      	nop
 80005d4:	3730      	adds	r7, #48	; 0x30
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200001ac 	.word	0x200001ac
 80005e0:	50000800 	.word	0x50000800

080005e4 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08c      	sub	sp, #48	; 0x30
 80005e8:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2230      	movs	r2, #48	; 0x30
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f006 fb53 	bl	8006c9c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_DAC2_Init+0x80>)
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <MX_DAC2_Init+0x84>)
 80005fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80005fc:	4819      	ldr	r0, [pc, #100]	; (8000664 <MX_DAC2_Init+0x80>)
 80005fe:	f002 fc72 	bl	8002ee6 <HAL_DAC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000608:	f000 fb71 	bl	8000cee <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800060c:	2302      	movs	r3, #2
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000610:	2300      	movs	r3, #0
 8000612:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000614:	2300      	movs	r3, #0
 8000616:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800061c:	231e      	movs	r3, #30
 800061e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000628:	2301      	movs	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000630:	463b      	mov	r3, r7
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	480b      	ldr	r0, [pc, #44]	; (8000664 <MX_DAC2_Init+0x80>)
 8000638:	f002 fcf2 	bl	8003020 <HAL_DAC_ConfigChannel>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 8000642:	f000 fb54 	bl	8000cee <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac2, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 8000646:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 800064a:	2100      	movs	r1, #0
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_DAC2_Init+0x80>)
 800064e:	f002 fe93 	bl	8003378 <HAL_DACEx_TriangleWaveGenerate>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_DAC2_Init+0x78>
  {
    Error_Handler();
 8000658:	f000 fb49 	bl	8000cee <Error_Handler>
  }

}
 800065c:	bf00      	nop
 800065e:	3730      	adds	r7, #48	; 0x30
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000198 	.word	0x20000198
 8000668:	50000c00 	.word	0x50000c00

0800066c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08c      	sub	sp, #48	; 0x30
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a40      	ldr	r2, [pc, #256]	; (800078c <HAL_DAC_MspInit+0x120>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d125      	bne.n	80006da <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800068e:	4b40      	ldr	r3, [pc, #256]	; (8000790 <HAL_DAC_MspInit+0x124>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a3f      	ldr	r2, [pc, #252]	; (8000790 <HAL_DAC_MspInit+0x124>)
 8000694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <HAL_DAC_MspInit+0x124>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006a2:	61bb      	str	r3, [r7, #24]
 80006a4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a39      	ldr	r2, [pc, #228]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	617b      	str	r3, [r7, #20]
 80006bc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006be:	2330      	movs	r3, #48	; 0x30
 80006c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c2:	2303      	movs	r3, #3
 80006c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 031c 	add.w	r3, r7, #28
 80006ce:	4619      	mov	r1, r3
 80006d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d4:	f003 f842 	bl	800375c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 80006d8:	e054      	b.n	8000784 <HAL_DAC_MspInit+0x118>
  else if(dacHandle->Instance==DAC2)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a2d      	ldr	r2, [pc, #180]	; (8000794 <HAL_DAC_MspInit+0x128>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d14f      	bne.n	8000784 <HAL_DAC_MspInit+0x118>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80006e4:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e8:	4a29      	ldr	r2, [pc, #164]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f0:	4b27      	ldr	r3, [pc, #156]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <HAL_DAC_MspInit+0x124>)
 80006fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000700:	4a23      	ldr	r2, [pc, #140]	; (8000790 <HAL_DAC_MspInit+0x124>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <HAL_DAC_MspInit+0x124>)
 800070a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000718:	2303      	movs	r3, #3
 800071a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000720:	f107 031c 	add.w	r3, r7, #28
 8000724:	4619      	mov	r1, r3
 8000726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800072a:	f003 f817 	bl	800375c <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel2;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000730:	4a1a      	ldr	r2, [pc, #104]	; (800079c <HAL_DAC_MspInit+0x130>)
 8000732:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000736:	2229      	movs	r2, #41	; 0x29
 8000738:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800073c:	2210      	movs	r2, #16
 800073e:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000748:	2280      	movs	r2, #128	; 0x80
 800074a:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800074e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000752:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000754:	4b10      	ldr	r3, [pc, #64]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000756:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800075a:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 800075c:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800075e:	2220      	movs	r2, #32
 8000760:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8000768:	480b      	ldr	r0, [pc, #44]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800076a:	f002 fe3d 	bl	80033e8 <HAL_DMA_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_DAC_MspInit+0x10c>
      Error_Handler();
 8000774:	f000 fabb 	bl	8000cee <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	4a06      	ldr	r2, [pc, #24]	; (8000798 <HAL_DAC_MspInit+0x12c>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	; 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	50000800 	.word	0x50000800
 8000790:	40021000 	.word	0x40021000
 8000794:	50000c00 	.word	0x50000c00
 8000798:	200001c0 	.word	0x200001c0
 800079c:	4002001c 	.word	0x4002001c

080007a0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_DMA_Init+0x60>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_DMA_Init+0x60>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6493      	str	r3, [r2, #72]	; 0x48
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_DMA_Init+0x60>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_DMA_Init+0x60>)
 80007c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <MX_DMA_Init+0x60>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6493      	str	r3, [r2, #72]	; 0x48
 80007ca:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MX_DMA_Init+0x60>)
 80007cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	200b      	movs	r0, #11
 80007dc:	f002 fb4f 	bl	8002e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007e0:	200b      	movs	r0, #11
 80007e2:	f002 fb66 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2100      	movs	r1, #0
 80007ea:	200c      	movs	r0, #12
 80007ec:	f002 fb47 	bl	8002e7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80007f0:	200c      	movs	r0, #12
 80007f2:	f002 fb5e 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

}
 80007f6:	bf00      	nop
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8000808:	4b20      	ldr	r3, [pc, #128]	; (800088c <update_dc_bias_sweep+0x88>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d006      	beq.n	800081e <update_dc_bias_sweep+0x1a>
 8000810:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <update_dc_bias_sweep+0x8c>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <update_dc_bias_sweep+0x8c>)
 800081a:	801a      	strh	r2, [r3, #0]
 800081c:	e005      	b.n	800082a <update_dc_bias_sweep+0x26>
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <update_dc_bias_sweep+0x8c>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	3b01      	subs	r3, #1
 8000824:	b29a      	uxth	r2, r3
 8000826:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <update_dc_bias_sweep+0x8c>)
 8000828:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <update_dc_bias_sweep+0x8c>)
 800082c:	881b      	ldrh	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d10a      	bne.n	8000848 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8000832:	4b18      	ldr	r3, [pc, #96]	; (8000894 <update_dc_bias_sweep+0x90>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <update_dc_bias_sweep+0x3e>
 800083a:	4b16      	ldr	r3, [pc, #88]	; (8000894 <update_dc_bias_sweep+0x90>)
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	e002      	b.n	8000848 <update_dc_bias_sweep+0x44>
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <update_dc_bias_sweep+0x90>)
 8000844:	2201      	movs	r2, #1
 8000846:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <update_dc_bias_sweep+0x8c>)
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d102      	bne.n	8000856 <update_dc_bias_sweep+0x52>
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <update_dc_bias_sweep+0x88>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <update_dc_bias_sweep+0x8c>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800085e:	d302      	bcc.n	8000866 <update_dc_bias_sweep+0x62>
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <update_dc_bias_sweep+0x88>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <update_dc_bias_sweep+0x90>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	461a      	mov	r2, r3
 800086e:	2108      	movs	r1, #8
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f003 f8f4 	bl	8003a60 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000878:	4b05      	ldr	r3, [pc, #20]	; (8000890 <update_dc_bias_sweep+0x8c>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	2200      	movs	r2, #0
 800087e:	2110      	movs	r1, #16
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <update_dc_bias_sweep+0x94>)
 8000882:	f002 fba5 	bl	8002fd0 <HAL_DAC_SetValue>
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000000 	.word	0x20000000
 8000890:	20000094 	.word	0x20000094
 8000894:	20000098 	.word	0x20000098
 8000898:	200001ac 	.word	0x200001ac

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b41      	ldr	r3, [pc, #260]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a40      	ldr	r2, [pc, #256]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b3e      	ldr	r3, [pc, #248]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b3b      	ldr	r3, [pc, #236]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a3a      	ldr	r2, [pc, #232]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b38      	ldr	r3, [pc, #224]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b35      	ldr	r3, [pc, #212]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a34      	ldr	r2, [pc, #208]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b32      	ldr	r3, [pc, #200]	; (80009b8 <MX_GPIO_Init+0x11c>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_TEST_Pin|TRIGMODE_Pin|SG2_Pin|SG1_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f244 0138 	movw	r1, #16440	; 0x4038
 8000900:	482e      	ldr	r0, [pc, #184]	; (80009bc <MX_GPIO_Init+0x120>)
 8000902:	f003 f8ad 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090e:	f003 f8a7 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SG0_Pin|DC_Pin|CS_Pin|RST_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f240 21c1 	movw	r1, #705	; 0x2c1
 8000918:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x124>)
 800091a:	f003 f8a1 	bl	8003a60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|SG2_Pin|SG1_Pin;
 800091e:	f244 0330 	movw	r3, #16432	; 0x4030
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4821      	ldr	r0, [pc, #132]	; (80009bc <MX_GPIO_Init+0x120>)
 8000938:	f002 ff10 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 800093c:	2308      	movs	r3, #8
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	481a      	ldr	r0, [pc, #104]	; (80009bc <MX_GPIO_Init+0x120>)
 8000954:	f002 ff02 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8000958:	2308      	movs	r3, #8
 800095a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095c:	2301      	movs	r3, #1
 800095e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000964:	2300      	movs	r3, #0
 8000966:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 030c 	add.w	r3, r7, #12
 800096c:	4619      	mov	r1, r3
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f002 fef3 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 8000976:	2301      	movs	r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	4619      	mov	r1, r3
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <MX_GPIO_Init+0x124>)
 800098e:	f002 fee5 	bl	800375c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RST_Pin;
 8000992:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000998:	2301      	movs	r3, #1
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4619      	mov	r1, r3
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_GPIO_Init+0x124>)
 80009ac:	f002 fed6 	bl	800375c <HAL_GPIO_Init>

}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000
 80009bc:	48000800 	.word	0x48000800
 80009c0:	48000400 	.word	0x48000400

080009c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d013      	beq.n	8000a04 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80009dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80009e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00b      	beq.n	8000a04 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80009ec:	e000      	b.n	80009f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80009ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80009f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f9      	beq.n	80009ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80009fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	b2d2      	uxtb	r2, r2
 8000a02:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	370c      	adds	r7, #12
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	60f8      	str	r0, [r7, #12]
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	e009      	b.n	8000a3c <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	1c5a      	adds	r2, r3, #1
 8000a2c:	60ba      	str	r2, [r7, #8]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ffc7 	bl	80009c4 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
 8000a3c:	697a      	ldr	r2, [r7, #20]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	dbf1      	blt.n	8000a28 <_write+0x16>
  return len;
 8000a44:	687b      	ldr	r3, [r7, #4]
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3718      	adds	r7, #24
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a56:	f000 fd64 	bl	8001522 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a5a:	f000 f8db 	bl	8000c14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a5e:	f7ff ff1d 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 8000a62:	f7ff fe9d 	bl	80007a0 <MX_DMA_Init>
  MX_DAC1_Init();
 8000a66:	f7ff fd69 	bl	800053c <MX_DAC1_Init>
  MX_TIM6_Init();
 8000a6a:	f000 fc11 	bl	8001290 <MX_TIM6_Init>
  MX_DAC2_Init();
 8000a6e:	f7ff fdb9 	bl	80005e4 <MX_DAC2_Init>
  MX_ADC1_Init();
 8000a72:	f7ff fc25 	bl	80002c0 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000a76:	f7ff fd07 	bl	8000488 <MX_COMP1_Init>
  MX_TIM2_Init();
 8000a7a:	f000 fb9f 	bl	80011bc <MX_TIM2_Init>
  MX_TIM17_Init();
 8000a7e:	f000 fc3d 	bl	80012fc <MX_TIM17_Init>
  MX_SPI3_Init();
 8000a82:	f000 f971 	bl	8000d68 <MX_SPI3_Init>
  MX_RNG_Init();
 8000a86:	f000 f939 	bl	8000cfc <MX_RNG_Init>
  MX_TIM1_Init();
 8000a8a:	f000 fb27 	bl	80010dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4856      	ldr	r0, [pc, #344]	; (8000bec <main+0x19c>)
 8000a92:	f002 fa4a 	bl	8002f2a <HAL_DAC_Start>
  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8000a96:	2110      	movs	r1, #16
 8000a98:	4854      	ldr	r0, [pc, #336]	; (8000bec <main+0x19c>)
 8000a9a:	f002 fa46 	bl	8002f2a <HAL_DAC_Start>
  // auxilliary signal sync output (external)
  HAL_DAC_Start(&hdac2, DAC2_CHANNEL_1);
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4853      	ldr	r0, [pc, #332]	; (8000bf0 <main+0x1a0>)
 8000aa2:	f002 fa42 	bl	8002f2a <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim6);
 8000aa6:	4853      	ldr	r0, [pc, #332]	; (8000bf4 <main+0x1a4>)
 8000aa8:	f004 fbf4 	bl	8005294 <HAL_TIM_Base_Start>

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2108      	movs	r1, #8
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f002 ffd4 	bl	8003a60 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2101      	movs	r1, #1
 8000abc:	484e      	ldr	r0, [pc, #312]	; (8000bf8 <main+0x1a8>)
 8000abe:	f002 ffcf 	bl	8003a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	2120      	movs	r1, #32
 8000ac6:	484d      	ldr	r0, [pc, #308]	; (8000bfc <main+0x1ac>)
 8000ac8:	f002 ffca 	bl	8003a60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000acc:	2200      	movs	r2, #0
 8000ace:	2110      	movs	r1, #16
 8000ad0:	484a      	ldr	r0, [pc, #296]	; (8000bfc <main+0x1ac>)
 8000ad2:	f002 ffc5 	bl	8003a60 <HAL_GPIO_WritePin>


  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8000ad6:	484a      	ldr	r0, [pc, #296]	; (8000c00 <main+0x1b0>)
 8000ad8:	f004 fc0a 	bl	80052f0 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
#else
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4846      	ldr	r0, [pc, #280]	; (8000bfc <main+0x1ac>)
 8000ae2:	f002 ffbd 	bl	8003a60 <HAL_GPIO_WritePin>

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8000ae6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aea:	689b      	ldr	r3, [r3, #8]
 8000aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af0:	f023 0307 	bic.w	r3, r3, #7
 8000af4:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8000af6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000afa:	689b      	ldr	r3, [r3, #8]
 8000afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b00:	f043 0305 	orr.w	r3, r3, #5
 8000b04:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

  HAL_TIM_Base_Start_IT(&htim2);
 8000b06:	483f      	ldr	r0, [pc, #252]	; (8000c04 <main+0x1b4>)
 8000b08:	f004 fbf2 	bl	80052f0 <HAL_TIM_Base_Start_IT>
#endif


  ILI9341_Init();
 8000b0c:	f005 fdac 	bl	8006668 <ILI9341_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //printf("Test\n");
	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000b10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b14:	f005 ff4c 	bl	80069b0 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f005 fd4b 	bl	80065b4 <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	2301      	movs	r3, #1
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	220a      	movs	r2, #10
 8000b2c:	210a      	movs	r1, #10
 8000b2e:	4836      	ldr	r0, [pc, #216]	; (8000c08 <main+0x1b8>)
 8000b30:	f005 fc4e 	bl	80063d0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8000b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b38:	9301      	str	r3, [sp, #4]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2214      	movs	r2, #20
 8000b42:	210a      	movs	r1, #10
 8000b44:	4831      	ldr	r0, [pc, #196]	; (8000c0c <main+0x1bc>)
 8000b46:	f005 fc43 	bl	80063d0 <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000b4a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b4e:	f000 fd59 	bl	8001604 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000b52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b56:	f005 ff2b 	bl	80069b0 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 1000; i++)
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e03c      	b.n	8000bda <main+0x18a>
	  		{
	  			uint32_t random_num = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	603b      	str	r3, [r7, #0]
	  			uint16_t xr = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	817b      	strh	r3, [r7, #10]
	  			uint16_t yr = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	813b      	strh	r3, [r7, #8]
	  			uint16_t radiusr = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	80fb      	strh	r3, [r7, #6]
	  			uint16_t colourr = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	80bb      	strh	r3, [r7, #4]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b74:	463b      	mov	r3, r7
 8000b76:	4619      	mov	r1, r3
 8000b78:	4825      	ldr	r0, [pc, #148]	; (8000c10 <main+0x1c0>)
 8000b7a:	f003 ffd0 	bl	8004b1e <HAL_RNG_GenerateRandomNumber>
	  			xr = random_num;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	817b      	strh	r3, [r7, #10]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b82:	463b      	mov	r3, r7
 8000b84:	4619      	mov	r1, r3
 8000b86:	4822      	ldr	r0, [pc, #136]	; (8000c10 <main+0x1c0>)
 8000b88:	f003 ffc9 	bl	8004b1e <HAL_RNG_GenerateRandomNumber>
	  			yr = random_num;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	813b      	strh	r3, [r7, #8]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b90:	463b      	mov	r3, r7
 8000b92:	4619      	mov	r1, r3
 8000b94:	481e      	ldr	r0, [pc, #120]	; (8000c10 <main+0x1c0>)
 8000b96:	f003 ffc2 	bl	8004b1e <HAL_RNG_GenerateRandomNumber>
	  			radiusr = random_num;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	80fb      	strh	r3, [r7, #6]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	481b      	ldr	r0, [pc, #108]	; (8000c10 <main+0x1c0>)
 8000ba4:	f003 ffbb 	bl	8004b1e <HAL_RNG_GenerateRandomNumber>
	  			colourr = random_num;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	80bb      	strh	r3, [r7, #4]

	  			xr &= 0x01FF;
 8000bac:	897b      	ldrh	r3, [r7, #10]
 8000bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bb2:	817b      	strh	r3, [r7, #10]
	  			yr &= 0x01FF;
 8000bb4:	893b      	ldrh	r3, [r7, #8]
 8000bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000bba:	813b      	strh	r3, [r7, #8]
	  			radiusr &= 0x001F;
 8000bbc:	88fb      	ldrh	r3, [r7, #6]
 8000bbe:	f003 031f 	and.w	r3, r3, #31
 8000bc2:	80fb      	strh	r3, [r7, #6]
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8000bc4:	88fb      	ldrh	r3, [r7, #6]
 8000bc6:	085b      	lsrs	r3, r3, #1
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	8939      	ldrh	r1, [r7, #8]
 8000bce:	8978      	ldrh	r0, [r7, #10]
 8000bd0:	f005 fadc 	bl	800618c <ILI9341_Draw_Filled_Circle>
	  		for(uint32_t i = 0; i < 1000; i++)
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000be0:	d3be      	bcc.n	8000b60 <main+0x110>
	  		}
	  		HAL_Delay(1000);
 8000be2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000be6:	f000 fd0d 	bl	8001604 <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000bea:	e791      	b.n	8000b10 <main+0xc0>
 8000bec:	200001ac 	.word	0x200001ac
 8000bf0:	20000198 	.word	0x20000198
 8000bf4:	200002e8 	.word	0x200002e8
 8000bf8:	48000400 	.word	0x48000400
 8000bfc:	48000800 	.word	0x48000800
 8000c00:	2000029c 	.word	0x2000029c
 8000c04:	20000380 	.word	0x20000380
 8000c08:	08007b5c 	.word	0x08007b5c
 8000c0c:	08007b78 	.word	0x08007b78
 8000c10:	20000224 	.word	0x20000224

08000c14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b0a8      	sub	sp, #160	; 0xa0
 8000c18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c1e:	2238      	movs	r2, #56	; 0x38
 8000c20:	2100      	movs	r1, #0
 8000c22:	4618      	mov	r0, r3
 8000c24:	f006 f83a 	bl	8006c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c38:	463b      	mov	r3, r7
 8000c3a:	2254      	movs	r2, #84	; 0x54
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 f82c 	bl	8006c9c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c44:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c48:	f002 ff3c 	bl	8003ac4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c54:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c56:	2340      	movs	r3, #64	; 0x40
 8000c58:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c60:	2302      	movs	r3, #2
 8000c62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000c6c:	2308      	movs	r3, #8
 8000c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c84:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f002 ffbf 	bl	8003c0c <HAL_RCC_OscConfig>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c94:	f000 f82b 	bl	8000cee <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c98:	230f      	movs	r3, #15
 8000c9a:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c9c:	2303      	movs	r3, #3
 8000c9e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000cac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 fac2 	bl	800423c <HAL_RCC_ClockConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cbe:	f000 f816 	bl	8000cee <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8000cc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000cc6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8000cc8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cce:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f003 fca0 	bl	800461c <HAL_RCCEx_PeriphCLKConfig>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ce2:	f000 f804 	bl	8000cee <Error_Handler>
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	37a0      	adds	r7, #160	; 0xa0
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cee:	b480      	push	{r7}
 8000cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cf2:	bf00      	nop
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <MX_RNG_Init+0x24>)
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <MX_RNG_Init+0x28>)
 8000d04:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_RNG_Init+0x24>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000d0c:	4804      	ldr	r0, [pc, #16]	; (8000d20 <MX_RNG_Init+0x24>)
 8000d0e:	f003 fed1 	bl	8004ab4 <HAL_RNG_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000d18:	f7ff ffe9 	bl	8000cee <Error_Handler>
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000224 	.word	0x20000224
 8000d24:	50060800 	.word	0x50060800

08000d28 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b085      	sub	sp, #20
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_RNG_MspInit+0x38>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d10b      	bne.n	8000d52 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000d3a:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <HAL_RNG_MspInit+0x3c>)
 8000d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3e:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <HAL_RNG_MspInit+0x3c>)
 8000d40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d46:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <HAL_RNG_MspInit+0x3c>)
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000d52:	bf00      	nop
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	50060800 	.word	0x50060800
 8000d64:	40021000 	.word	0x40021000

08000d68 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000d6e:	4a1c      	ldr	r2, [pc, #112]	; (8000de0 <MX_SPI3_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d72:	4b1a      	ldr	r3, [pc, #104]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000d82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000d86:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d9a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000db6:	2207      	movs	r2, #7
 8000db8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000dc2:	2208      	movs	r2, #8
 8000dc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_SPI3_Init+0x74>)
 8000dc8:	f003 fef8 	bl	8004bbc <HAL_SPI_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000dd2:	f7ff ff8c 	bl	8000cee <Error_Handler>
  }

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000238 	.word	0x20000238
 8000de0:	40003c00 	.word	0x40003c00

08000de4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_SPI_MspInit+0x7c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d128      	bne.n	8000e58 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_SPI_MspInit+0x80>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0304 	and.w	r3, r3, #4
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000e36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e48:	2306      	movs	r3, #6
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <HAL_SPI_MspInit+0x84>)
 8000e54:	f002 fc82 	bl	800375c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40003c00 	.word	0x40003c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	48000800 	.word	0x48000800

08000e6c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000e70:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7a:	6093      	str	r3, [r2, #8]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40007000 	.word	0x40007000

08000e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	4a0e      	ldr	r2, [pc, #56]	; (8000ed0 <HAL_MspInit+0x44>)
 8000e98:	f043 0301 	orr.w	r3, r3, #1
 8000e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	603b      	str	r3, [r7, #0]
 8000ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000ec2:	f7ff ffd3 	bl	8000e6c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f28:	f000 fb4e 	bl	80015c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	printf("Test\n");
 8000f34:	4806      	ldr	r0, [pc, #24]	; (8000f50 <DMA1_Channel1_IRQHandler+0x20>)
 8000f36:	f005 ff2d 	bl	8006d94 <puts>
	printf("%lu\n", trigger_input[0]);
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <DMA1_Channel1_IRQHandler+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <DMA1_Channel1_IRQHandler+0x28>)
 8000f42:	f005 feb3 	bl	8006cac <iprintf>
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <DMA1_Channel1_IRQHandler+0x2c>)
 8000f48:	f002 faf6 	bl	8003538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	08007b88 	.word	0x08007b88
 8000f54:	20000220 	.word	0x20000220
 8000f58:	08007b90 	.word	0x08007b90
 8000f5c:	20000114 	.word	0x20000114

08000f60 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DMA1_Channel2_IRQHandler+0x10>)
 8000f66:	f002 fae7 	bl	8003538 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	200001c0 	.word	0x200001c0

08000f74 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8000f78:	f7ff fc44 	bl	8000804 <update_dc_bias_sweep>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8000f7e:	f004 fa93 	bl	80054a8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000f82:	4803      	ldr	r0, [pc, #12]	; (8000f90 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8000f84:	f004 fa90 	bl	80054a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000334 	.word	0x20000334
 8000f90:	2000029c 	.word	0x2000029c

08000f94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000f98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <TIM2_IRQHandler+0x18>)
 8000f9e:	f002 fd77 	bl	8003a90 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000fa2:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <TIM2_IRQHandler+0x1c>)
 8000fa4:	f004 fa80 	bl	80054a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	48000800 	.word	0x48000800
 8000fb0:	20000380 	.word	0x20000380

08000fb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00a      	b.n	8000fdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc6:	f3af 8000 	nop.w
 8000fca:	4601      	mov	r1, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf0      	blt.n	8000fc6 <_read+0x12>
	}

return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001016:	605a      	str	r2, [r3, #4]
	return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
	return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x50>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x16>
		heap_end = &end;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <_sbrk+0x50>)
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <_sbrk+0x54>)
 800106c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <_sbrk+0x50>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <_sbrk+0x50>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	466a      	mov	r2, sp
 800107e:	4293      	cmp	r3, r2
 8001080:	d907      	bls.n	8001092 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001082:	f005 fde1 	bl	8006c48 <__errno>
 8001086:	4602      	mov	r2, r0
 8001088:	230c      	movs	r3, #12
 800108a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001090:	e006      	b.n	80010a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <_sbrk+0x50>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <_sbrk+0x50>)
 800109c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000009c 	.word	0x2000009c
 80010ac:	200003d8 	.word	0x200003d8

080010b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <SystemInit+0x28>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <SystemInit+0x28>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SystemInit+0x28>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ca:	609a      	str	r2, [r3, #8]
#endif
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b09a      	sub	sp, #104	; 0x68
 80010e0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80010e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80010e6:	2224      	movs	r2, #36	; 0x24
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f005 fdd6 	bl	8006c9c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	2234      	movs	r2, #52	; 0x34
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f005 fdca 	bl	8006c9c <memset>

  htim1.Instance = TIM1;
 8001108:	4b2a      	ldr	r3, [pc, #168]	; (80011b4 <MX_TIM1_Init+0xd8>)
 800110a:	4a2b      	ldr	r2, [pc, #172]	; (80011b8 <MX_TIM1_Init+0xdc>)
 800110c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800110e:	4b29      	ldr	r3, [pc, #164]	; (80011b4 <MX_TIM1_Init+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b27      	ldr	r3, [pc, #156]	; (80011b4 <MX_TIM1_Init+0xd8>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 64;
 800111a:	4b26      	ldr	r3, [pc, #152]	; (80011b4 <MX_TIM1_Init+0xd8>)
 800111c:	2240      	movs	r2, #64	; 0x40
 800111e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001120:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <MX_TIM1_Init+0xd8>)
 8001122:	2200      	movs	r2, #0
 8001124:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001126:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <MX_TIM1_Init+0xd8>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800112c:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <MX_TIM1_Init+0xd8>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001132:	2303      	movs	r3, #3
 8001134:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001136:	2300      	movs	r3, #0
 8001138:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800113a:	2301      	movs	r3, #1
 800113c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001146:	2300      	movs	r3, #0
 8001148:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800114a:	2301      	movs	r3, #1
 800114c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001156:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800115a:	4619      	mov	r1, r3
 800115c:	4815      	ldr	r0, [pc, #84]	; (80011b4 <MX_TIM1_Init+0xd8>)
 800115e:	f004 f8fd 	bl	800535c <HAL_TIM_Encoder_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001168:	f7ff fdc1 	bl	8000cee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001178:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800117c:	4619      	mov	r1, r3
 800117e:	480d      	ldr	r0, [pc, #52]	; (80011b4 <MX_TIM1_Init+0xd8>)
 8001180:	f004 fe76 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 800118a:	f7ff fdb0 	bl	8000cee <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001192:	2300      	movs	r3, #0
 8001194:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_TIM1_Init+0xd8>)
 800119c:	f004 fefe 	bl	8005f9c <HAL_TIMEx_ConfigBreakDeadTime>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80011a6:	f7ff fda2 	bl	8000cee <Error_Handler>
  }

}
 80011aa:	bf00      	nop
 80011ac:	3768      	adds	r7, #104	; 0x68
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000334 	.word	0x20000334
 80011b8:	40012c00 	.word	0x40012c00

080011bc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e0:	463b      	mov	r3, r7
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80011ea:	4b28      	ldr	r3, [pc, #160]	; (800128c <MX_TIM2_Init+0xd0>)
 80011ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80011f2:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_TIM2_Init+0xd0>)
 80011f4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80011f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <MX_TIM2_Init+0xd0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001200:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_TIM2_Init+0xd0>)
 8001202:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001206:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <MX_TIM2_Init+0xd0>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_TIM2_Init+0xd0>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001214:	481d      	ldr	r0, [pc, #116]	; (800128c <MX_TIM2_Init+0xd0>)
 8001216:	f003 ffe6 	bl	80051e6 <HAL_TIM_Base_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001220:	f7ff fd65 	bl	8000cee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	4619      	mov	r1, r3
 8001230:	4816      	ldr	r0, [pc, #88]	; (800128c <MX_TIM2_Init+0xd0>)
 8001232:	f004 fab9 	bl	80057a8 <HAL_TIM_ConfigClockSource>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800123c:	f7ff fd57 	bl	8000cee <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001240:	2305      	movs	r3, #5
 8001242:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001244:	2350      	movs	r3, #80	; 0x50
 8001246:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001250:	f107 030c 	add.w	r3, r7, #12
 8001254:	4619      	mov	r1, r3
 8001256:	480d      	ldr	r0, [pc, #52]	; (800128c <MX_TIM2_Init+0xd0>)
 8001258:	f004 fb96 	bl	8005988 <HAL_TIM_SlaveConfigSynchro>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001262:	f7ff fd44 	bl	8000cee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001266:	2300      	movs	r3, #0
 8001268:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126e:	463b      	mov	r3, r7
 8001270:	4619      	mov	r1, r3
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <MX_TIM2_Init+0xd0>)
 8001274:	f004 fdfc 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800127e:	f7ff fd36 	bl	8000cee <Error_Handler>
  }

}
 8001282:	bf00      	nop
 8001284:	3730      	adds	r7, #48	; 0x30
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000380 	.word	0x20000380

08001290 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]

  htim6.Instance = TIM6;
 80012a0:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <MX_TIM6_Init+0x64>)
 80012a2:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <MX_TIM6_Init+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80012a6:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <MX_TIM6_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <MX_TIM6_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1;
 80012b2:	4b10      	ldr	r3, [pc, #64]	; (80012f4 <MX_TIM6_Init+0x64>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <MX_TIM6_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012be:	480d      	ldr	r0, [pc, #52]	; (80012f4 <MX_TIM6_Init+0x64>)
 80012c0:	f003 ff91 	bl	80051e6 <HAL_TIM_Base_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80012ca:	f7ff fd10 	bl	8000cee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ce:	2320      	movs	r3, #32
 80012d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	; (80012f4 <MX_TIM6_Init+0x64>)
 80012dc:	f004 fdc8 	bl	8005e70 <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80012e6:	f7ff fd02 	bl	8000cee <Error_Handler>
  }

}
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200002e8 	.word	0x200002e8
 80012f8:	40001000 	.word	0x40001000

080012fc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001300:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_TIM17_Init+0x44>)
 8001302:	4a10      	ldr	r2, [pc, #64]	; (8001344 <MX_TIM17_Init+0x48>)
 8001304:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_TIM17_Init+0x44>)
 8001308:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800130c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_TIM17_Init+0x44>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 8;
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <MX_TIM17_Init+0x44>)
 8001316:	2208      	movs	r2, #8
 8001318:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_TIM17_Init+0x44>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001320:	4b07      	ldr	r3, [pc, #28]	; (8001340 <MX_TIM17_Init+0x44>)
 8001322:	2200      	movs	r2, #0
 8001324:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_TIM17_Init+0x44>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800132c:	4804      	ldr	r0, [pc, #16]	; (8001340 <MX_TIM17_Init+0x44>)
 800132e:	f003 ff5a 	bl	80051e6 <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8001338:	f7ff fcd9 	bl	8000cee <Error_Handler>
  }

}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	2000029c 	.word	0x2000029c
 8001344:	40014800 	.word	0x40014800

08001348 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d12f      	bne.n	80013ca <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_TIM_Encoder_MspInit+0x90>)
 800136c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001374:	6613      	str	r3, [r2, #96]	; 0x60
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001382:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a14      	ldr	r2, [pc, #80]	; (80013d8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_TIM_Encoder_MspInit+0x90>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0304 	and.w	r3, r3, #4
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800139a:	2303      	movs	r3, #3
 800139c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80013aa:	2302      	movs	r3, #2
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4809      	ldr	r0, [pc, #36]	; (80013dc <HAL_TIM_Encoder_MspInit+0x94>)
 80013b6:	f002 f9d1 	bl	800375c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	201a      	movs	r0, #26
 80013c0:	f001 fd5d 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80013c4:	201a      	movs	r0, #26
 80013c6:	f001 fd74 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	; 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40012c00 	.word	0x40012c00
 80013d8:	40021000 	.word	0x40021000
 80013dc:	48000800 	.word	0x48000800

080013e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08c      	sub	sp, #48	; 0x30
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001400:	d131      	bne.n	8001466 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6593      	str	r3, [r2, #88]	; 0x58
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	61bb      	str	r3, [r7, #24]
 8001418:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141a:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	617b      	str	r3, [r7, #20]
 8001430:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001432:	2301      	movs	r3, #1
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001442:	2301      	movs	r3, #1
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001450:	f002 f984 	bl	800375c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	201c      	movs	r0, #28
 800145a:	f001 fd10 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800145e:	201c      	movs	r0, #28
 8001460:	f001 fd27 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001464:	e02a      	b.n	80014bc <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM6)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <HAL_TIM_Base_MspInit+0xe8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d10c      	bne.n	800148a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	4a13      	ldr	r2, [pc, #76]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 8001476:	f043 0310 	orr.w	r3, r3, #16
 800147a:	6593      	str	r3, [r2, #88]	; 0x58
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	f003 0310 	and.w	r3, r3, #16
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	693b      	ldr	r3, [r7, #16]
}
 8001488:	e018      	b.n	80014bc <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM17)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a0f      	ldr	r2, [pc, #60]	; (80014cc <HAL_TIM_Base_MspInit+0xec>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d113      	bne.n	80014bc <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 8001496:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001498:	4a0a      	ldr	r2, [pc, #40]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149e:	6613      	str	r3, [r2, #96]	; 0x60
 80014a0:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <HAL_TIM_Base_MspInit+0xe4>)
 80014a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014a8:	60fb      	str	r3, [r7, #12]
 80014aa:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	2100      	movs	r1, #0
 80014b0:	201a      	movs	r0, #26
 80014b2:	f001 fce4 	bl	8002e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80014b6:	201a      	movs	r0, #26
 80014b8:	f001 fcfb 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
}
 80014bc:	bf00      	nop
 80014be:	3730      	adds	r7, #48	; 0x30
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40001000 	.word	0x40001000
 80014cc:	40014800 	.word	0x40014800

080014d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d0:	480d      	ldr	r0, [pc, #52]	; (8001508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80014d2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014d4:	480d      	ldr	r0, [pc, #52]	; (800150c <LoopForever+0x6>)
  ldr r1, =_edata
 80014d6:	490e      	ldr	r1, [pc, #56]	; (8001510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014d8:	4a0e      	ldr	r2, [pc, #56]	; (8001514 <LoopForever+0xe>)
  movs r3, #0
 80014da:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80014dc:	e002      	b.n	80014e4 <LoopCopyDataInit>

080014de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e2:	3304      	adds	r3, #4

080014e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e8:	d3f9      	bcc.n	80014de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ea:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014ec:	4c0b      	ldr	r4, [pc, #44]	; (800151c <LoopForever+0x16>)
  movs r3, #0
 80014ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f0:	e001      	b.n	80014f6 <LoopFillZerobss>

080014f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f4:	3204      	adds	r2, #4

080014f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f8:	d3fb      	bcc.n	80014f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014fa:	f7ff fdd9 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014fe:	f005 fba9 	bl	8006c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001502:	f7ff faa5 	bl	8000a50 <main>

08001506 <LoopForever>:

LoopForever:
    b LoopForever
 8001506:	e7fe      	b.n	8001506 <LoopForever>
  ldr   r0, =_estack
 8001508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001514:	08007e88 	.word	0x08007e88
  ldr r2, =_sbss
 8001518:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800151c:	200003d4 	.word	0x200003d4

08001520 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC1_2_IRQHandler>

08001522 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001528:	2300      	movs	r3, #0
 800152a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f001 fc9b 	bl	8002e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f80e 	bl	8001554 <HAL_InitTick>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d002      	beq.n	8001544 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	71fb      	strb	r3, [r7, #7]
 8001542:	e001      	b.n	8001548 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001544:	f7ff fca2 	bl	8000e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001548:	79fb      	ldrb	r3, [r7, #7]

}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800155c:	2300      	movs	r3, #0
 800155e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001560:	4b16      	ldr	r3, [pc, #88]	; (80015bc <HAL_InitTick+0x68>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d022      	beq.n	80015ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_InitTick+0x6c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <HAL_InitTick+0x68>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001574:	fbb1 f3f3 	udiv	r3, r1, r3
 8001578:	fbb2 f3f3 	udiv	r3, r2, r3
 800157c:	4618      	mov	r0, r3
 800157e:	f001 fca6 	bl	8002ece <HAL_SYSTICK_Config>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d10f      	bne.n	80015a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b0f      	cmp	r3, #15
 800158c:	d809      	bhi.n	80015a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800158e:	2200      	movs	r2, #0
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001596:	f001 fc72 	bl	8002e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_InitTick+0x70>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6013      	str	r3, [r2, #0]
 80015a0:	e007      	b.n	80015b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e004      	b.n	80015b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e001      	b.n	80015b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	2000000c 	.word	0x2000000c
 80015c0:	20000004 	.word	0x20000004
 80015c4:	20000008 	.word	0x20000008

080015c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <HAL_IncTick+0x1c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_IncTick+0x20>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a03      	ldr	r2, [pc, #12]	; (80015e4 <HAL_IncTick+0x1c>)
 80015d8:	6013      	str	r3, [r2, #0]
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	200003cc 	.word	0x200003cc
 80015e8:	2000000c 	.word	0x2000000c

080015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return uwTick;
 80015f0:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_GetTick+0x14>)
 80015f2:	681b      	ldr	r3, [r3, #0]
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	200003cc 	.word	0x200003cc

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff ffee 	bl	80015ec <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800161c:	d004      	beq.n	8001628 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_Delay+0x40>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4413      	add	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001628:	bf00      	nop
 800162a:	f7ff ffdf 	bl	80015ec <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	429a      	cmp	r2, r3
 8001638:	d8f7      	bhi.n	800162a <HAL_Delay+0x26>
  {
  }
}
 800163a:	bf00      	nop
 800163c:	3710      	adds	r7, #16
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	2000000c 	.word	0x2000000c

08001648 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	431a      	orrs	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	609a      	str	r2, [r3, #8]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
 8001676:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	609a      	str	r2, [r3, #8]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80016b0:	b490      	push	{r4, r7}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
 80016bc:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	3360      	adds	r3, #96	; 0x60
 80016c2:	461a      	mov	r2, r3
 80016c4:	68bb      	ldr	r3, [r7, #8]
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <LL_ADC_SetOffset+0x40>)
 80016d0:	4013      	ands	r3, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	430a      	orrs	r2, r1
 80016dc:	4313      	orrs	r3, r2
 80016de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80016e2:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc90      	pop	{r4, r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	03fff000 	.word	0x03fff000

080016f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016f4:	b490      	push	{r4, r7}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	3360      	adds	r3, #96	; 0x60
 8001702:	461a      	mov	r2, r3
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800170c:	6823      	ldr	r3, [r4, #0]
 800170e:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bc90      	pop	{r4, r7}
 800171a:	4770      	bx	lr

0800171c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800171c:	b490      	push	{r4, r7}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3360      	adds	r3, #96	; 0x60
 800172c:	461a      	mov	r2, r3
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4313      	orrs	r3, r2
 8001740:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001742:	bf00      	nop
 8001744:	3710      	adds	r7, #16
 8001746:	46bd      	mov	sp, r7
 8001748:	bc90      	pop	{r4, r7}
 800174a:	4770      	bx	lr

0800174c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800174c:	b490      	push	{r4, r7}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	3360      	adds	r3, #96	; 0x60
 800175c:	461a      	mov	r2, r3
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001766:	6823      	ldr	r3, [r4, #0]
 8001768:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4313      	orrs	r3, r2
 8001770:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bc90      	pop	{r4, r7}
 800177a:	4770      	bx	lr

0800177c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800177c:	b490      	push	{r4, r7}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3360      	adds	r3, #96	; 0x60
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001796:	6823      	ldr	r3, [r4, #0]
 8001798:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4313      	orrs	r3, r2
 80017a0:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc90      	pop	{r4, r7}
 80017aa:	4770      	bx	lr

080017ac <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	615a      	str	r2, [r3, #20]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr

080017d2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017d2:	b490      	push	{r4, r7}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	60f8      	str	r0, [r7, #12]
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3330      	adds	r3, #48	; 0x30
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	f003 030c 	and.w	r3, r3, #12
 80017ee:	4413      	add	r3, r2
 80017f0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80017f2:	6822      	ldr	r2, [r4, #0]
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f003 031f 	and.w	r3, r3, #31
 80017fa:	211f      	movs	r1, #31
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	401a      	ands	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	0e9b      	lsrs	r3, r3, #26
 8001808:	f003 011f 	and.w	r1, r3, #31
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	f003 031f 	and.w	r3, r3, #31
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	4313      	orrs	r3, r2
 8001818:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bc90      	pop	{r4, r7}
 8001822:	4770      	bx	lr

08001824 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001824:	b490      	push	{r4, r7}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3314      	adds	r3, #20
 8001834:	461a      	mov	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	0e5b      	lsrs	r3, r3, #25
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	f003 0304 	and.w	r3, r3, #4
 8001840:	4413      	add	r3, r2
 8001842:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001844:	6822      	ldr	r2, [r4, #0]
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	0d1b      	lsrs	r3, r3, #20
 800184a:	f003 031f 	and.w	r3, r3, #31
 800184e:	2107      	movs	r1, #7
 8001850:	fa01 f303 	lsl.w	r3, r1, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	401a      	ands	r2, r3
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	0d1b      	lsrs	r3, r3, #20
 800185c:	f003 031f 	and.w	r3, r3, #31
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	fa01 f303 	lsl.w	r3, r1, r3
 8001866:	4313      	orrs	r3, r2
 8001868:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bc90      	pop	{r4, r7}
 8001872:	4770      	bx	lr

08001874 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001886:	68bb      	ldr	r3, [r7, #8]
 8001888:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800188c:	43db      	mvns	r3, r3
 800188e:	401a      	ands	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f003 0318 	and.w	r3, r3, #24
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001898:	40d9      	lsrs	r1, r3
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	400b      	ands	r3, r1
 800189e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018a2:	431a      	orrs	r2, r3
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018aa:	bf00      	nop
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	0007ffff 	.word	0x0007ffff

080018bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80018cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	6093      	str	r3, [r2, #8]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80018f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80018f4:	d101      	bne.n	80018fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001918:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800191c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001940:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001944:	d101      	bne.n	800194a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001946:	2301      	movs	r3, #1
 8001948:	e000      	b.n	800194c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d101      	bne.n	8001970 <LL_ADC_IsEnabled+0x18>
 800196c:	2301      	movs	r3, #1
 800196e:	e000      	b.n	8001972 <LL_ADC_IsEnabled+0x1a>
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b04      	cmp	r3, #4
 8001990:	d101      	bne.n	8001996 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d101      	bne.n	80019bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80019b8:	2301      	movs	r3, #1
 80019ba:	e000      	b.n	80019be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019d8:	2300      	movs	r3, #0
 80019da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e1ad      	b.n	8001d42 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7fe fcdb 	bl	80003b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff ff67 	bl	80018e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff4d 	bl	80018bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff82 	bl	8001930 <LL_ADC_IsInternalRegulatorEnabled>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d113      	bne.n	8001a5a <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff ff66 	bl	8001908 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a3c:	4b9e      	ldr	r3, [pc, #632]	; (8001cb8 <HAL_ADC_Init+0x2ec>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	099b      	lsrs	r3, r3, #6
 8001a42:	4a9e      	ldr	r2, [pc, #632]	; (8001cbc <HAL_ADC_Init+0x2f0>)
 8001a44:	fba2 2303 	umull	r2, r3, r2, r3
 8001a48:	099b      	lsrs	r3, r3, #6
 8001a4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a4c:	e002      	b.n	8001a54 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1f9      	bne.n	8001a4e <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f7ff ff66 	bl	8001930 <LL_ADC_IsInternalRegulatorEnabled>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10d      	bne.n	8001a86 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6e:	f043 0210 	orr.w	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff ff77 	bl	800197e <LL_ADC_REG_IsConversionOngoing>
 8001a90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a96:	f003 0310 	and.w	r3, r3, #16
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8148 	bne.w	8001d30 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 8144 	bne.w	8001d30 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ab0:	f043 0202 	orr.w	r2, r3, #2
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff ff4b 	bl	8001958 <LL_ADC_IsEnabled>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d141      	bne.n	8001b4c <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad0:	d004      	beq.n	8001adc <HAL_ADC_Init+0x110>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a7a      	ldr	r2, [pc, #488]	; (8001cc0 <HAL_ADC_Init+0x2f4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d10f      	bne.n	8001afc <HAL_ADC_Init+0x130>
 8001adc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001ae0:	f7ff ff3a 	bl	8001958 <LL_ADC_IsEnabled>
 8001ae4:	4604      	mov	r4, r0
 8001ae6:	4876      	ldr	r0, [pc, #472]	; (8001cc0 <HAL_ADC_Init+0x2f4>)
 8001ae8:	f7ff ff36 	bl	8001958 <LL_ADC_IsEnabled>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4323      	orrs	r3, r4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bf0c      	ite	eq
 8001af4:	2301      	moveq	r3, #1
 8001af6:	2300      	movne	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	e012      	b.n	8001b22 <HAL_ADC_Init+0x156>
 8001afc:	4871      	ldr	r0, [pc, #452]	; (8001cc4 <HAL_ADC_Init+0x2f8>)
 8001afe:	f7ff ff2b 	bl	8001958 <LL_ADC_IsEnabled>
 8001b02:	4604      	mov	r4, r0
 8001b04:	4870      	ldr	r0, [pc, #448]	; (8001cc8 <HAL_ADC_Init+0x2fc>)
 8001b06:	f7ff ff27 	bl	8001958 <LL_ADC_IsEnabled>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	431c      	orrs	r4, r3
 8001b0e:	486f      	ldr	r0, [pc, #444]	; (8001ccc <HAL_ADC_Init+0x300>)
 8001b10:	f7ff ff22 	bl	8001958 <LL_ADC_IsEnabled>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4323      	orrs	r3, r4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bf0c      	ite	eq
 8001b1c:	2301      	moveq	r3, #1
 8001b1e:	2300      	movne	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d012      	beq.n	8001b4c <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b2e:	d004      	beq.n	8001b3a <HAL_ADC_Init+0x16e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a62      	ldr	r2, [pc, #392]	; (8001cc0 <HAL_ADC_Init+0x2f4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_ADC_Init+0x172>
 8001b3a:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_ADC_Init+0x304>)
 8001b3c:	e000      	b.n	8001b40 <HAL_ADC_Init+0x174>
 8001b3e:	4a65      	ldr	r2, [pc, #404]	; (8001cd4 <HAL_ADC_Init+0x308>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4619      	mov	r1, r3
 8001b46:	4610      	mov	r0, r2
 8001b48:	f7ff fd7e 	bl	8001648 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	7f5b      	ldrb	r3, [r3, #29]
 8001b50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d106      	bne.n	8001b88 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	045b      	lsls	r3, r3, #17
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d009      	beq.n	8001ba4 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b4b      	ldr	r3, [pc, #300]	; (8001cd8 <HAL_ADC_Init+0x30c>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	430b      	orrs	r3, r1
 8001bb6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fed3 	bl	800197e <LL_ADC_REG_IsConversionOngoing>
 8001bd8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fee0 	bl	80019a4 <LL_ADC_INJ_IsConversionOngoing>
 8001be4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d17f      	bne.n	8001cec <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d17c      	bne.n	8001cec <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bf6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bfe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c0e:	f023 0302 	bic.w	r3, r3, #2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	69b9      	ldr	r1, [r7, #24]
 8001c18:	430b      	orrs	r3, r1
 8001c1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d017      	beq.n	8001c54 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	691a      	ldr	r2, [r3, #16]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001c32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	6911      	ldr	r1, [r2, #16]
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001c52:	e013      	b.n	8001c7c <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	691a      	ldr	r2, [r3, #16]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6812      	ldr	r2, [r2, #0]
 8001c70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d12a      	bne.n	8001cdc <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c90:	f023 0304 	bic.w	r3, r3, #4
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ca2:	4311      	orrs	r1, r2
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	611a      	str	r2, [r3, #16]
 8001cb6:	e019      	b.n	8001cec <HAL_ADC_Init+0x320>
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	053e2d63 	.word	0x053e2d63
 8001cc0:	50000100 	.word	0x50000100
 8001cc4:	50000400 	.word	0x50000400
 8001cc8:	50000500 	.word	0x50000500
 8001ccc:	50000600 	.word	0x50000600
 8001cd0:	50000300 	.word	0x50000300
 8001cd4:	50000700 	.word	0x50000700
 8001cd8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	691a      	ldr	r2, [r3, #16]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0201 	bic.w	r2, r2, #1
 8001cea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d10c      	bne.n	8001d0e <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f023 010f 	bic.w	r1, r3, #15
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
 8001d02:	1e5a      	subs	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d0c:	e007      	b.n	8001d1e <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 020f 	bic.w	r2, r2, #15
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d22:	f023 0303 	bic.w	r3, r3, #3
 8001d26:	f043 0201 	orr.w	r2, r3, #1
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001d2e:	e007      	b.n	8001d40 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	f043 0210 	orr.w	r2, r3, #16
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d40:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}
 8001d4a:	bf00      	nop

08001d4c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b0a6      	sub	sp, #152	; 0x98
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d101      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x22>
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	e38e      	b.n	800248c <HAL_ADC_ConfigChannel+0x740>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff fdff 	bl	800197e <LL_ADC_REG_IsConversionOngoing>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f040 836f 	bne.w	8002466 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	6859      	ldr	r1, [r3, #4]
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	f7ff fd1c 	bl	80017d2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff fded 	bl	800197e <LL_ADC_REG_IsConversionOngoing>
 8001da4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fdf9 	bl	80019a4 <LL_ADC_INJ_IsConversionOngoing>
 8001db2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 817b 	bne.w	80020b6 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f040 8176 	bne.w	80020b6 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001dd2:	d10f      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	4619      	mov	r1, r3
 8001de0:	f7ff fd20 	bl	8001824 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff fcdd 	bl	80017ac <LL_ADC_SetSamplingTimeCommonConfig>
 8001df2:	e00e      	b.n	8001e12 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6819      	ldr	r1, [r3, #0]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f7ff fd0f 	bl	8001824 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fccd 	bl	80017ac <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	08db      	lsrs	r3, r3, #3
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d022      	beq.n	8001e7a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6818      	ldr	r0, [r3, #0]
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	6919      	ldr	r1, [r3, #16]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e44:	f7ff fc34 	bl	80016b0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6818      	ldr	r0, [r3, #0]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	6919      	ldr	r1, [r3, #16]
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	461a      	mov	r2, r3
 8001e56:	f7ff fc79 	bl	800174c <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6919      	ldr	r1, [r3, #16]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	7f1b      	ldrb	r3, [r3, #28]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d102      	bne.n	8001e70 <HAL_ADC_ConfigChannel+0x124>
 8001e6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6e:	e000      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x126>
 8001e70:	2300      	movs	r3, #0
 8001e72:	461a      	mov	r2, r3
 8001e74:	f7ff fc82 	bl	800177c <LL_ADC_SetOffsetSaturation>
 8001e78:	e11d      	b.n	80020b6 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fc37 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d10a      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x15a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fc2c 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	0e9b      	lsrs	r3, r3, #26
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	e012      	b.n	8001ecc <HAL_ADC_ConfigChannel+0x180>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fc21 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ec2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	461a      	mov	r2, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x198>
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0e9b      	lsrs	r3, r3, #26
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	e00a      	b.n	8001efa <HAL_ADC_ConfigChannel+0x1ae>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef4:	fab3 f383 	clz	r3, r3
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d106      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fc08 	bl	800171c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2101      	movs	r1, #1
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fbee 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x1ec>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2101      	movs	r1, #1
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fbe3 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	f003 021f 	and.w	r2, r3, #31
 8001f36:	e010      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x20e>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fbd8 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001f44:	4603      	mov	r3, r0
 8001f46:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f4a:	fa93 f3a3 	rbit	r3, r3
 8001f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f52:	fab3 f383 	clz	r3, r3
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	461a      	mov	r2, r3
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d105      	bne.n	8001f72 <HAL_ADC_ConfigChannel+0x226>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	e00a      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x23c>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d106      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	2101      	movs	r1, #1
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7ff fbc1 	bl	800171c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff fba7 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10a      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x27a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2102      	movs	r1, #2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fb9c 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	f003 021f 	and.w	r2, r3, #31
 8001fc4:	e010      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x29c>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2102      	movs	r1, #2
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fb91 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001fde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x2b4>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0e9b      	lsrs	r3, r3, #26
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	e00a      	b.n	8002016 <HAL_ADC_ConfigChannel+0x2ca>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002008:	fa93 f3a3 	rbit	r3, r3
 800200c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800200e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	429a      	cmp	r2, r3
 8002018:	d106      	bne.n	8002028 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2200      	movs	r2, #0
 8002020:	2102      	movs	r1, #2
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fb7a 	bl	800171c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2103      	movs	r1, #3
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fb60 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8002034:	4603      	mov	r3, r0
 8002036:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10a      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x308>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2103      	movs	r1, #3
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fb55 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	0e9b      	lsrs	r3, r3, #26
 800204e:	f003 021f 	and.w	r2, r3, #31
 8002052:	e010      	b.n	8002076 <HAL_ADC_ConfigChannel+0x32a>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2103      	movs	r1, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb4a 	bl	80016f4 <LL_ADC_GetOffsetChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800206c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800206e:	fab3 f383 	clz	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	461a      	mov	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800207e:	2b00      	cmp	r3, #0
 8002080:	d105      	bne.n	800208e <HAL_ADC_ConfigChannel+0x342>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	0e9b      	lsrs	r3, r3, #26
 8002088:	f003 031f 	and.w	r3, r3, #31
 800208c:	e00a      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x358>
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800209e:	fab3 f383 	clz	r3, r3
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d106      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	2103      	movs	r1, #3
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fb33 	bl	800171c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fc4c 	bl	8001958 <LL_ADC_IsEnabled>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 810c 	bne.w	80022e0 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6818      	ldr	r0, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	461a      	mov	r2, r3
 80020d6:	f7ff fbcd 	bl	8001874 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	4aaf      	ldr	r2, [pc, #700]	; (800239c <HAL_ADC_ConfigChannel+0x650>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	f040 80fd 	bne.w	80022e0 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10b      	bne.n	800210e <HAL_ADC_ConfigChannel+0x3c2>
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0e9b      	lsrs	r3, r3, #26
 80020fc:	3301      	adds	r3, #1
 80020fe:	f003 031f 	and.w	r3, r3, #31
 8002102:	2b09      	cmp	r3, #9
 8002104:	bf94      	ite	ls
 8002106:	2301      	movls	r3, #1
 8002108:	2300      	movhi	r3, #0
 800210a:	b2db      	uxtb	r3, r3
 800210c:	e012      	b.n	8002134 <HAL_ADC_ConfigChannel+0x3e8>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800211c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800211e:	fab3 f383 	clz	r3, r3
 8002122:	b2db      	uxtb	r3, r3
 8002124:	3301      	adds	r3, #1
 8002126:	f003 031f 	and.w	r3, r3, #31
 800212a:	2b09      	cmp	r3, #9
 800212c:	bf94      	ite	ls
 800212e:	2301      	movls	r3, #1
 8002130:	2300      	movhi	r3, #0
 8002132:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002134:	2b00      	cmp	r3, #0
 8002136:	d064      	beq.n	8002202 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	2b00      	cmp	r3, #0
 8002142:	d107      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x408>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	0e9b      	lsrs	r3, r3, #26
 800214a:	3301      	adds	r3, #1
 800214c:	069b      	lsls	r3, r3, #26
 800214e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002152:	e00e      	b.n	8002172 <HAL_ADC_ConfigChannel+0x426>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215c:	fa93 f3a3 	rbit	r3, r3
 8002160:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	3301      	adds	r3, #1
 800216c:	069b      	lsls	r3, r3, #26
 800216e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x446>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	0e9b      	lsrs	r3, r3, #26
 8002184:	3301      	adds	r3, #1
 8002186:	f003 031f 	and.w	r3, r3, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	e010      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x468>
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219a:	fa93 f3a3 	rbit	r3, r3
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	3301      	adds	r3, #1
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	2101      	movs	r1, #1
 80021b0:	fa01 f303 	lsl.w	r3, r1, r3
 80021b4:	ea42 0103 	orr.w	r1, r2, r3
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d10a      	bne.n	80021da <HAL_ADC_ConfigChannel+0x48e>
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	0e9b      	lsrs	r3, r3, #26
 80021ca:	3301      	adds	r3, #1
 80021cc:	f003 021f 	and.w	r2, r3, #31
 80021d0:	4613      	mov	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	4413      	add	r3, r2
 80021d6:	051b      	lsls	r3, r3, #20
 80021d8:	e011      	b.n	80021fe <HAL_ADC_ConfigChannel+0x4b2>
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021e2:	fa93 f3a3 	rbit	r3, r3
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	3301      	adds	r3, #1
 80021f2:	f003 021f 	and.w	r2, r3, #31
 80021f6:	4613      	mov	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	4413      	add	r3, r2
 80021fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021fe:	430b      	orrs	r3, r1
 8002200:	e069      	b.n	80022d6 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800220a:	2b00      	cmp	r3, #0
 800220c:	d107      	bne.n	800221e <HAL_ADC_ConfigChannel+0x4d2>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0e9b      	lsrs	r3, r3, #26
 8002214:	3301      	adds	r3, #1
 8002216:	069b      	lsls	r3, r3, #26
 8002218:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800221c:	e00e      	b.n	800223c <HAL_ADC_ConfigChannel+0x4f0>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002224:	6a3b      	ldr	r3, [r7, #32]
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	61fb      	str	r3, [r7, #28]
  return result;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	fab3 f383 	clz	r3, r3
 8002232:	b2db      	uxtb	r3, r3
 8002234:	3301      	adds	r3, #1
 8002236:	069b      	lsls	r3, r3, #26
 8002238:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002244:	2b00      	cmp	r3, #0
 8002246:	d109      	bne.n	800225c <HAL_ADC_ConfigChannel+0x510>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	0e9b      	lsrs	r3, r3, #26
 800224e:	3301      	adds	r3, #1
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	e010      	b.n	800227e <HAL_ADC_ConfigChannel+0x532>
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	617b      	str	r3, [r7, #20]
  return result;
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	3301      	adds	r3, #1
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	ea42 0103 	orr.w	r1, r2, r3
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10d      	bne.n	80022aa <HAL_ADC_ConfigChannel+0x55e>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	3301      	adds	r3, #1
 8002296:	f003 021f 	and.w	r2, r3, #31
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	051b      	lsls	r3, r3, #20
 80022a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022a8:	e014      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x588>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	60fb      	str	r3, [r7, #12]
  return result;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 021f 	and.w	r2, r3, #31
 80022c6:	4613      	mov	r3, r2
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	4413      	add	r3, r2
 80022cc:	3b1e      	subs	r3, #30
 80022ce:	051b      	lsls	r3, r3, #20
 80022d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022d4:	430b      	orrs	r3, r1
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	6892      	ldr	r2, [r2, #8]
 80022da:	4619      	mov	r1, r3
 80022dc:	f7ff faa2 	bl	8001824 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_ADC_ConfigChannel+0x654>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80c9 	beq.w	8002480 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f6:	d004      	beq.n	8002302 <HAL_ADC_ConfigChannel+0x5b6>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a29      	ldr	r2, [pc, #164]	; (80023a4 <HAL_ADC_ConfigChannel+0x658>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x5ba>
 8002302:	4b29      	ldr	r3, [pc, #164]	; (80023a8 <HAL_ADC_ConfigChannel+0x65c>)
 8002304:	e000      	b.n	8002308 <HAL_ADC_ConfigChannel+0x5bc>
 8002306:	4b29      	ldr	r3, [pc, #164]	; (80023ac <HAL_ADC_ConfigChannel+0x660>)
 8002308:	4618      	mov	r0, r3
 800230a:	f7ff f9c3 	bl	8001694 <LL_ADC_GetCommonPathInternalCh>
 800230e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a26      	ldr	r2, [pc, #152]	; (80023b0 <HAL_ADC_ConfigChannel+0x664>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_ADC_ConfigChannel+0x5da>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <HAL_ADC_ConfigChannel+0x668>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d14e      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002326:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800232a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d148      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800233a:	d005      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x5fc>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a1d      	ldr	r2, [pc, #116]	; (80023b8 <HAL_ADC_ConfigChannel+0x66c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	f040 8099 	bne.w	800247a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002350:	d004      	beq.n	800235c <HAL_ADC_ConfigChannel+0x610>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <HAL_ADC_ConfigChannel+0x658>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x614>
 800235c:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <HAL_ADC_ConfigChannel+0x65c>)
 800235e:	e000      	b.n	8002362 <HAL_ADC_ConfigChannel+0x616>
 8002360:	4a12      	ldr	r2, [pc, #72]	; (80023ac <HAL_ADC_ConfigChannel+0x660>)
 8002362:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002366:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f7ff f97e 	bl	800166e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_ADC_ConfigChannel+0x670>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	099b      	lsrs	r3, r3, #6
 8002378:	4a11      	ldr	r2, [pc, #68]	; (80023c0 <HAL_ADC_ConfigChannel+0x674>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	099a      	lsrs	r2, r3, #6
 8002380:	4613      	mov	r3, r2
 8002382:	005b      	lsls	r3, r3, #1
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800238a:	e002      	b.n	8002392 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	3b01      	subs	r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1f9      	bne.n	800238c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002398:	e06f      	b.n	800247a <HAL_ADC_ConfigChannel+0x72e>
 800239a:	bf00      	nop
 800239c:	407f0000 	.word	0x407f0000
 80023a0:	80080000 	.word	0x80080000
 80023a4:	50000100 	.word	0x50000100
 80023a8:	50000300 	.word	0x50000300
 80023ac:	50000700 	.word	0x50000700
 80023b0:	c3210000 	.word	0xc3210000
 80023b4:	90c00010 	.word	0x90c00010
 80023b8:	50000600 	.word	0x50000600
 80023bc:	20000004 	.word	0x20000004
 80023c0:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a32      	ldr	r2, [pc, #200]	; (8002494 <HAL_ADC_ConfigChannel+0x748>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d125      	bne.n	800241a <HAL_ADC_ConfigChannel+0x6ce>
 80023ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11f      	bne.n	800241a <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <HAL_ADC_ConfigChannel+0x74c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d104      	bne.n	80023ee <HAL_ADC_ConfigChannel+0x6a2>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2c      	ldr	r2, [pc, #176]	; (800249c <HAL_ADC_ConfigChannel+0x750>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d047      	beq.n	800247e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_ConfigChannel+0x6b6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <HAL_ADC_ConfigChannel+0x74c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d101      	bne.n	8002406 <HAL_ADC_ConfigChannel+0x6ba>
 8002402:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_ADC_ConfigChannel+0x754>)
 8002404:	e000      	b.n	8002408 <HAL_ADC_ConfigChannel+0x6bc>
 8002406:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_ADC_ConfigChannel+0x758>)
 8002408:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800240c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f7ff f92b 	bl	800166e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002418:	e031      	b.n	800247e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a22      	ldr	r2, [pc, #136]	; (80024a8 <HAL_ADC_ConfigChannel+0x75c>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d12d      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d127      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a18      	ldr	r2, [pc, #96]	; (8002498 <HAL_ADC_ConfigChannel+0x74c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d022      	beq.n	8002480 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002442:	d004      	beq.n	800244e <HAL_ADC_ConfigChannel+0x702>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_ADC_ConfigChannel+0x74c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_ADC_ConfigChannel+0x706>
 800244e:	4a14      	ldr	r2, [pc, #80]	; (80024a0 <HAL_ADC_ConfigChannel+0x754>)
 8002450:	e000      	b.n	8002454 <HAL_ADC_ConfigChannel+0x708>
 8002452:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_ADC_ConfigChannel+0x758>)
 8002454:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002458:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800245c:	4619      	mov	r1, r3
 800245e:	4610      	mov	r0, r2
 8002460:	f7ff f905 	bl	800166e <LL_ADC_SetCommonPathInternalCh>
 8002464:	e00c      	b.n	8002480 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002478:	e002      	b.n	8002480 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800247a:	bf00      	nop
 800247c:	e000      	b.n	8002480 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800247e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002488:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800248c:	4618      	mov	r0, r3
 800248e:	3798      	adds	r7, #152	; 0x98
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	c7520000 	.word	0xc7520000
 8002498:	50000100 	.word	0x50000100
 800249c:	50000500 	.word	0x50000500
 80024a0:	50000300 	.word	0x50000300
 80024a4:	50000700 	.word	0x50000700
 80024a8:	cb840000 	.word	0xcb840000

080024ac <LL_ADC_IsEnabled>:
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <LL_ADC_IsEnabled+0x18>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <LL_ADC_IsEnabled+0x1a>
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	d101      	bne.n	80024ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	370c      	adds	r7, #12
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b0a1      	sub	sp, #132	; 0x84
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800250e:	2b01      	cmp	r3, #1
 8002510:	d101      	bne.n	8002516 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002512:	2302      	movs	r3, #2
 8002514:	e0e3      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002526:	d102      	bne.n	800252e <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8002528:	4b6f      	ldr	r3, [pc, #444]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	e009      	b.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a6e      	ldr	r2, [pc, #440]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d102      	bne.n	800253e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8002538:	4b6d      	ldr	r3, [pc, #436]	; (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	e001      	b.n	8002542 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800253e:	2300      	movs	r3, #0
 8002540:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254c:	f043 0220 	orr.w	r2, r3, #32
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0be      	b.n	80026de <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff ffb5 	bl	80024d2 <LL_ADC_REG_IsConversionOngoing>
 8002568:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ffaf 	bl	80024d2 <LL_ADC_REG_IsConversionOngoing>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	f040 80a0 	bne.w	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800257c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800257e:	2b00      	cmp	r3, #0
 8002580:	f040 809c 	bne.w	80026bc <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d004      	beq.n	8002598 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a55      	ldr	r2, [pc, #340]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002598:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800259a:	e000      	b.n	800259e <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800259c:	4b56      	ldr	r3, [pc, #344]	; (80026f8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800259e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d04b      	beq.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80025a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025ba:	035b      	lsls	r3, r3, #13
 80025bc:	430b      	orrs	r3, r1
 80025be:	431a      	orrs	r2, r3
 80025c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025cc:	d004      	beq.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a45      	ldr	r2, [pc, #276]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d10f      	bne.n	80025f8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80025d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80025dc:	f7ff ff66 	bl	80024ac <LL_ADC_IsEnabled>
 80025e0:	4604      	mov	r4, r0
 80025e2:	4841      	ldr	r0, [pc, #260]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80025e4:	f7ff ff62 	bl	80024ac <LL_ADC_IsEnabled>
 80025e8:	4603      	mov	r3, r0
 80025ea:	4323      	orrs	r3, r4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e012      	b.n	800261e <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80025f8:	483c      	ldr	r0, [pc, #240]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80025fa:	f7ff ff57 	bl	80024ac <LL_ADC_IsEnabled>
 80025fe:	4604      	mov	r4, r0
 8002600:	483b      	ldr	r0, [pc, #236]	; (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002602:	f7ff ff53 	bl	80024ac <LL_ADC_IsEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	431c      	orrs	r4, r3
 800260a:	483c      	ldr	r0, [pc, #240]	; (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800260c:	f7ff ff4e 	bl	80024ac <LL_ADC_IsEnabled>
 8002610:	4603      	mov	r3, r0
 8002612:	4323      	orrs	r3, r4
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d056      	beq.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800262a:	f023 030f 	bic.w	r3, r3, #15
 800262e:	683a      	ldr	r2, [r7, #0]
 8002630:	6811      	ldr	r1, [r2, #0]
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	6892      	ldr	r2, [r2, #8]
 8002636:	430a      	orrs	r2, r1
 8002638:	431a      	orrs	r2, r3
 800263a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800263c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800263e:	e047      	b.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800264a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002654:	d004      	beq.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d10f      	bne.n	8002680 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002660:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002664:	f7ff ff22 	bl	80024ac <LL_ADC_IsEnabled>
 8002668:	4604      	mov	r4, r0
 800266a:	481f      	ldr	r0, [pc, #124]	; (80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800266c:	f7ff ff1e 	bl	80024ac <LL_ADC_IsEnabled>
 8002670:	4603      	mov	r3, r0
 8002672:	4323      	orrs	r3, r4
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e012      	b.n	80026a6 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002680:	481a      	ldr	r0, [pc, #104]	; (80026ec <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8002682:	f7ff ff13 	bl	80024ac <LL_ADC_IsEnabled>
 8002686:	4604      	mov	r4, r0
 8002688:	4819      	ldr	r0, [pc, #100]	; (80026f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800268a:	f7ff ff0f 	bl	80024ac <LL_ADC_IsEnabled>
 800268e:	4603      	mov	r3, r0
 8002690:	431c      	orrs	r4, r3
 8002692:	481a      	ldr	r0, [pc, #104]	; (80026fc <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002694:	f7ff ff0a 	bl	80024ac <LL_ADC_IsEnabled>
 8002698:	4603      	mov	r3, r0
 800269a:	4323      	orrs	r3, r4
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d012      	beq.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80026aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026b2:	f023 030f 	bic.w	r3, r3, #15
 80026b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80026b8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026ba:	e009      	b.n	80026d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	f043 0220 	orr.w	r2, r3, #32
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80026ce:	e000      	b.n	80026d2 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026da:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3784      	adds	r7, #132	; 0x84
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	50000100 	.word	0x50000100
 80026ec:	50000400 	.word	0x50000400
 80026f0:	50000500 	.word	0x50000500
 80026f4:	50000300 	.word	0x50000300
 80026f8:	50000700 	.word	0x50000700
 80026fc:	50000600 	.word	0x50000600

08002700 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <LL_EXTI_EnableIT_0_31+0x20>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4904      	ldr	r1, [pc, #16]	; (8002720 <LL_EXTI_EnableIT_0_31+0x20>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4313      	orrs	r3, r2
 8002712:	600b      	str	r3, [r1, #0]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40010400 	.word	0x40010400

08002724 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <LL_EXTI_EnableIT_32_63+0x20>)
 800272e:	6a1a      	ldr	r2, [r3, #32]
 8002730:	4904      	ldr	r1, [pc, #16]	; (8002744 <LL_EXTI_EnableIT_32_63+0x20>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4313      	orrs	r3, r2
 8002736:	620b      	str	r3, [r1, #32]
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40010400 	.word	0x40010400

08002748 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <LL_EXTI_DisableIT_0_31+0x24>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	43db      	mvns	r3, r3
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <LL_EXTI_DisableIT_0_31+0x24>)
 800275a:	4013      	ands	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40010400 	.word	0x40010400

08002770 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <LL_EXTI_DisableIT_32_63+0x24>)
 800277a:	6a1a      	ldr	r2, [r3, #32]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	43db      	mvns	r3, r3
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <LL_EXTI_DisableIT_32_63+0x24>)
 8002782:	4013      	ands	r3, r2
 8002784:	620b      	str	r3, [r1, #32]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010400 	.word	0x40010400

08002798 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80027a0:	4b05      	ldr	r3, [pc, #20]	; (80027b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4904      	ldr	r1, [pc, #16]	; (80027b8 <LL_EXTI_EnableEvent_0_31+0x20>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]

}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr
 80027b8:	40010400 	.word	0x40010400

080027bc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80027c4:	4b05      	ldr	r3, [pc, #20]	; (80027dc <LL_EXTI_EnableEvent_32_63+0x20>)
 80027c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c8:	4904      	ldr	r1, [pc, #16]	; (80027dc <LL_EXTI_EnableEvent_32_63+0x20>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	624b      	str	r3, [r1, #36]	; 0x24
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40010400 	.word	0x40010400

080027e0 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <LL_EXTI_DisableEvent_0_31+0x24>)
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	43db      	mvns	r3, r3
 80027f0:	4904      	ldr	r1, [pc, #16]	; (8002804 <LL_EXTI_DisableEvent_0_31+0x24>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	604b      	str	r3, [r1, #4]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	40010400 	.word	0x40010400

08002808 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <LL_EXTI_DisableEvent_32_63+0x24>)
 8002812:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	43db      	mvns	r3, r3
 8002818:	4904      	ldr	r1, [pc, #16]	; (800282c <LL_EXTI_DisableEvent_32_63+0x24>)
 800281a:	4013      	ands	r3, r2
 800281c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40010400 	.word	0x40010400

08002830 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	4904      	ldr	r1, [pc, #16]	; (8002850 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4313      	orrs	r3, r2
 8002842:	608b      	str	r3, [r1, #8]

}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	40010400 	.word	0x40010400

08002854 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800285c:	4b05      	ldr	r3, [pc, #20]	; (8002874 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800285e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002860:	4904      	ldr	r1, [pc, #16]	; (8002874 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4313      	orrs	r3, r2
 8002866:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002868:	bf00      	nop
 800286a:	370c      	adds	r7, #12
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	40010400 	.word	0x40010400

08002878 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002880:	4b06      	ldr	r3, [pc, #24]	; (800289c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	43db      	mvns	r3, r3
 8002888:	4904      	ldr	r1, [pc, #16]	; (800289c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800288a:	4013      	ands	r3, r2
 800288c:	608b      	str	r3, [r1, #8]

}
 800288e:	bf00      	nop
 8002890:	370c      	adds	r7, #12
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40010400 	.word	0x40010400

080028a0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80028a8:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80028aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	43db      	mvns	r3, r3
 80028b0:	4904      	ldr	r1, [pc, #16]	; (80028c4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40010400 	.word	0x40010400

080028c8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80028d0:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4904      	ldr	r1, [pc, #16]	; (80028e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	40010400 	.word	0x40010400

080028ec <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80028f4:	4b05      	ldr	r3, [pc, #20]	; (800290c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80028f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028f8:	4904      	ldr	r1, [pc, #16]	; (800290c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	40010400 	.word	0x40010400

08002910 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800291a:	68da      	ldr	r2, [r3, #12]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	43db      	mvns	r3, r3
 8002920:	4904      	ldr	r1, [pc, #16]	; (8002934 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002922:	4013      	ands	r3, r2
 8002924:	60cb      	str	r3, [r1, #12]
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	40010400 	.word	0x40010400

08002938 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002940:	4b06      	ldr	r3, [pc, #24]	; (800295c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	43db      	mvns	r3, r3
 8002948:	4904      	ldr	r1, [pc, #16]	; (800295c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800294a:	4013      	ands	r3, r2
 800294c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010400 	.word	0x40010400

08002960 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002968:	4a04      	ldr	r2, [pc, #16]	; (800297c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6153      	str	r3, [r2, #20]
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	40010400 	.word	0x40010400

08002980 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <LL_EXTI_ClearFlag_32_63+0x1c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40010400 	.word	0x40010400

080029a0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	77fb      	strb	r3, [r7, #31]
 80029ba:	e180      	b.n	8002cbe <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029ca:	d102      	bne.n	80029d2 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	77fb      	strb	r3, [r7, #31]
 80029d0:	e175      	b.n	8002cbe <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7f5b      	ldrb	r3, [r3, #29]
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d108      	bne.n	80029ee <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f7fd fd75 	bl	80004d8 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029f8:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	4b98      	ldr	r3, [pc, #608]	; (8002c80 <HAL_COMP_Init+0x2e0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	6979      	ldr	r1, [r7, #20]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d015      	beq.n	8002a66 <HAL_COMP_Init+0xc6>
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d112      	bne.n	8002a66 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002a40:	4b90      	ldr	r3, [pc, #576]	; (8002c84 <HAL_COMP_Init+0x2e4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	099b      	lsrs	r3, r3, #6
 8002a46:	4a90      	ldr	r2, [pc, #576]	; (8002c88 <HAL_COMP_Init+0x2e8>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	099a      	lsrs	r2, r3, #6
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002a58:	e002      	b.n	8002a60 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f9      	bne.n	8002a5a <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a88      	ldr	r2, [pc, #544]	; (8002c8c <HAL_COMP_Init+0x2ec>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d028      	beq.n	8002ac2 <HAL_COMP_Init+0x122>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a86      	ldr	r2, [pc, #536]	; (8002c90 <HAL_COMP_Init+0x2f0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d020      	beq.n	8002abc <HAL_COMP_Init+0x11c>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a85      	ldr	r2, [pc, #532]	; (8002c94 <HAL_COMP_Init+0x2f4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d018      	beq.n	8002ab6 <HAL_COMP_Init+0x116>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a83      	ldr	r2, [pc, #524]	; (8002c98 <HAL_COMP_Init+0x2f8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d010      	beq.n	8002ab0 <HAL_COMP_Init+0x110>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a82      	ldr	r2, [pc, #520]	; (8002c9c <HAL_COMP_Init+0x2fc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d008      	beq.n	8002aaa <HAL_COMP_Init+0x10a>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a80      	ldr	r2, [pc, #512]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_COMP_Init+0x106>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00f      	b.n	8002ac6 <HAL_COMP_Init+0x126>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e00d      	b.n	8002ac6 <HAL_COMP_Init+0x126>
 8002aaa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002aae:	e00a      	b.n	8002ac6 <HAL_COMP_Init+0x126>
 8002ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ab4:	e007      	b.n	8002ac6 <HAL_COMP_Init+0x126>
 8002ab6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002aba:	e004      	b.n	8002ac6 <HAL_COMP_Init+0x126>
 8002abc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ac0:	e001      	b.n	8002ac6 <HAL_COMP_Init+0x126>
 8002ac2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ac6:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80b6 	beq.w	8002c42 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d011      	beq.n	8002b06 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a6e      	ldr	r2, [pc, #440]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d004      	beq.n	8002af6 <HAL_COMP_Init+0x156>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6c      	ldr	r2, [pc, #432]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d103      	bne.n	8002afe <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8002af6:	6938      	ldr	r0, [r7, #16]
 8002af8:	f7ff feac 	bl	8002854 <LL_EXTI_EnableRisingTrig_32_63>
 8002afc:	e014      	b.n	8002b28 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002afe:	6938      	ldr	r0, [r7, #16]
 8002b00:	f7ff fe96 	bl	8002830 <LL_EXTI_EnableRisingTrig_0_31>
 8002b04:	e010      	b.n	8002b28 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a65      	ldr	r2, [pc, #404]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d004      	beq.n	8002b1a <HAL_COMP_Init+0x17a>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a63      	ldr	r2, [pc, #396]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d103      	bne.n	8002b22 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8002b1a:	6938      	ldr	r0, [r7, #16]
 8002b1c:	f7ff fec0 	bl	80028a0 <LL_EXTI_DisableRisingTrig_32_63>
 8002b20:	e002      	b.n	8002b28 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002b22:	6938      	ldr	r0, [r7, #16]
 8002b24:	f7ff fea8 	bl	8002878 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d011      	beq.n	8002b58 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a59      	ldr	r2, [pc, #356]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d004      	beq.n	8002b48 <HAL_COMP_Init+0x1a8>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a58      	ldr	r2, [pc, #352]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d103      	bne.n	8002b50 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8002b48:	6938      	ldr	r0, [r7, #16]
 8002b4a:	f7ff fecf 	bl	80028ec <LL_EXTI_EnableFallingTrig_32_63>
 8002b4e:	e014      	b.n	8002b7a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002b50:	6938      	ldr	r0, [r7, #16]
 8002b52:	f7ff feb9 	bl	80028c8 <LL_EXTI_EnableFallingTrig_0_31>
 8002b56:	e010      	b.n	8002b7a <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a50      	ldr	r2, [pc, #320]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_COMP_Init+0x1cc>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a4f      	ldr	r2, [pc, #316]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d103      	bne.n	8002b74 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8002b6c:	6938      	ldr	r0, [r7, #16]
 8002b6e:	f7ff fee3 	bl	8002938 <LL_EXTI_DisableFallingTrig_32_63>
 8002b72:	e002      	b.n	8002b7a <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002b74:	6938      	ldr	r0, [r7, #16]
 8002b76:	f7ff fecb 	bl	8002910 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a48      	ldr	r2, [pc, #288]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d004      	beq.n	8002b8e <HAL_COMP_Init+0x1ee>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a46      	ldr	r2, [pc, #280]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d103      	bne.n	8002b96 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002b8e:	6938      	ldr	r0, [r7, #16]
 8002b90:	f7ff fef6 	bl	8002980 <LL_EXTI_ClearFlag_32_63>
 8002b94:	e002      	b.n	8002b9c <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8002b96:	6938      	ldr	r0, [r7, #16]
 8002b98:	f7ff fee2 	bl	8002960 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d011      	beq.n	8002bcc <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a3c      	ldr	r2, [pc, #240]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d004      	beq.n	8002bbc <HAL_COMP_Init+0x21c>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a3b      	ldr	r2, [pc, #236]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d103      	bne.n	8002bc4 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8002bbc:	6938      	ldr	r0, [r7, #16]
 8002bbe:	f7ff fdfd 	bl	80027bc <LL_EXTI_EnableEvent_32_63>
 8002bc2:	e014      	b.n	8002bee <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8002bc4:	6938      	ldr	r0, [r7, #16]
 8002bc6:	f7ff fde7 	bl	8002798 <LL_EXTI_EnableEvent_0_31>
 8002bca:	e010      	b.n	8002bee <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a33      	ldr	r2, [pc, #204]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_COMP_Init+0x240>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a32      	ldr	r2, [pc, #200]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d103      	bne.n	8002be8 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8002be0:	6938      	ldr	r0, [r7, #16]
 8002be2:	f7ff fe11 	bl	8002808 <LL_EXTI_DisableEvent_32_63>
 8002be6:	e002      	b.n	8002bee <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8002be8:	6938      	ldr	r0, [r7, #16]
 8002bea:	f7ff fdf9 	bl	80027e0 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d011      	beq.n	8002c1e <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a28      	ldr	r2, [pc, #160]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_COMP_Init+0x26e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a26      	ldr	r2, [pc, #152]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d103      	bne.n	8002c16 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8002c0e:	6938      	ldr	r0, [r7, #16]
 8002c10:	f7ff fd88 	bl	8002724 <LL_EXTI_EnableIT_32_63>
 8002c14:	e04b      	b.n	8002cae <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8002c16:	6938      	ldr	r0, [r7, #16]
 8002c18:	f7ff fd72 	bl	8002700 <LL_EXTI_EnableIT_0_31>
 8002c1c:	e047      	b.n	8002cae <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1f      	ldr	r2, [pc, #124]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d004      	beq.n	8002c32 <HAL_COMP_Init+0x292>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d103      	bne.n	8002c3a <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8002c32:	6938      	ldr	r0, [r7, #16]
 8002c34:	f7ff fd9c 	bl	8002770 <LL_EXTI_DisableIT_32_63>
 8002c38:	e039      	b.n	8002cae <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8002c3a:	6938      	ldr	r0, [r7, #16]
 8002c3c:	f7ff fd84 	bl	8002748 <LL_EXTI_DisableIT_0_31>
 8002c40:	e035      	b.n	8002cae <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d004      	beq.n	8002c56 <HAL_COMP_Init+0x2b6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d103      	bne.n	8002c5e <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8002c56:	6938      	ldr	r0, [r7, #16]
 8002c58:	f7ff fdd6 	bl	8002808 <LL_EXTI_DisableEvent_32_63>
 8002c5c:	e002      	b.n	8002c64 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002c5e:	6938      	ldr	r0, [r7, #16]
 8002c60:	f7ff fdbe 	bl	80027e0 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a0d      	ldr	r2, [pc, #52]	; (8002ca0 <HAL_COMP_Init+0x300>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d004      	beq.n	8002c78 <HAL_COMP_Init+0x2d8>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a0c      	ldr	r2, [pc, #48]	; (8002ca4 <HAL_COMP_Init+0x304>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d117      	bne.n	8002ca8 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8002c78:	6938      	ldr	r0, [r7, #16]
 8002c7a:	f7ff fd79 	bl	8002770 <LL_EXTI_DisableIT_32_63>
 8002c7e:	e016      	b.n	8002cae <HAL_COMP_Init+0x30e>
 8002c80:	ff007e0f 	.word	0xff007e0f
 8002c84:	20000004 	.word	0x20000004
 8002c88:	053e2d63 	.word	0x053e2d63
 8002c8c:	40010200 	.word	0x40010200
 8002c90:	40010204 	.word	0x40010204
 8002c94:	40010208 	.word	0x40010208
 8002c98:	4001020c 	.word	0x4001020c
 8002c9c:	40010210 	.word	0x40010210
 8002ca0:	40010214 	.word	0x40010214
 8002ca4:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002ca8:	6938      	ldr	r0, [r7, #16]
 8002caa:	f7ff fd4d 	bl	8002748 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	7f5b      	ldrb	r3, [r3, #29]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8002cbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <__NVIC_SetPriorityGrouping>:
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f003 0307 	and.w	r3, r3, #7
 8002cd6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cfa:	4a04      	ldr	r2, [pc, #16]	; (8002d0c <__NVIC_SetPriorityGrouping+0x44>)
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	60d3      	str	r3, [r2, #12]
}
 8002d00:	bf00      	nop
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	e000ed00 	.word	0xe000ed00

08002d10 <__NVIC_GetPriorityGrouping>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d14:	4b04      	ldr	r3, [pc, #16]	; (8002d28 <__NVIC_GetPriorityGrouping+0x18>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	f003 0307 	and.w	r3, r3, #7
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <__NVIC_EnableIRQ>:
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db0b      	blt.n	8002d56 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3e:	79fb      	ldrb	r3, [r7, #7]
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	4907      	ldr	r1, [pc, #28]	; (8002d64 <__NVIC_EnableIRQ+0x38>)
 8002d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4a:	095b      	lsrs	r3, r3, #5
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000e100 	.word	0xe000e100

08002d68 <__NVIC_SetPriority>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	6039      	str	r1, [r7, #0]
 8002d72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	db0a      	blt.n	8002d92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	b2da      	uxtb	r2, r3
 8002d80:	490c      	ldr	r1, [pc, #48]	; (8002db4 <__NVIC_SetPriority+0x4c>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	b2d2      	uxtb	r2, r2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d90:	e00a      	b.n	8002da8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4908      	ldr	r1, [pc, #32]	; (8002db8 <__NVIC_SetPriority+0x50>)
 8002d98:	79fb      	ldrb	r3, [r7, #7]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	3b04      	subs	r3, #4
 8002da0:	0112      	lsls	r2, r2, #4
 8002da2:	b2d2      	uxtb	r2, r2
 8002da4:	440b      	add	r3, r1
 8002da6:	761a      	strb	r2, [r3, #24]
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr
 8002db4:	e000e100 	.word	0xe000e100
 8002db8:	e000ed00 	.word	0xe000ed00

08002dbc <NVIC_EncodePriority>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b089      	sub	sp, #36	; 0x24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f1c3 0307 	rsb	r3, r3, #7
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	bf28      	it	cs
 8002dda:	2304      	movcs	r3, #4
 8002ddc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3304      	adds	r3, #4
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d902      	bls.n	8002dec <NVIC_EncodePriority+0x30>
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3b03      	subs	r3, #3
 8002dea:	e000      	b.n	8002dee <NVIC_EncodePriority+0x32>
 8002dec:	2300      	movs	r3, #0
 8002dee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43da      	mvns	r2, r3
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	401a      	ands	r2, r3
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0e:	43d9      	mvns	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e14:	4313      	orrs	r3, r2
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3724      	adds	r7, #36	; 0x24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <SysTick_Config>:
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e34:	d301      	bcc.n	8002e3a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002e36:	2301      	movs	r3, #1
 8002e38:	e00f      	b.n	8002e5a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e3a:	4a0a      	ldr	r2, [pc, #40]	; (8002e64 <SysTick_Config+0x40>)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e42:	210f      	movs	r1, #15
 8002e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e48:	f7ff ff8e 	bl	8002d68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <SysTick_Config+0x40>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e52:	4b04      	ldr	r3, [pc, #16]	; (8002e64 <SysTick_Config+0x40>)
 8002e54:	2207      	movs	r2, #7
 8002e56:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	e000e010 	.word	0xe000e010

08002e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7ff ff29 	bl	8002cc8 <__NVIC_SetPriorityGrouping>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	4603      	mov	r3, r0
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff40 	bl	8002d10 <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff90 	bl	8002dbc <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5f 	bl	8002d68 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff33 	bl	8002d2c <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa4 	bl	8002e24 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d101      	bne.n	8002ef8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e014      	b.n	8002f22 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	791b      	ldrb	r3, [r3, #4]
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d105      	bne.n	8002f0e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd fbaf 	bl	800066c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2202      	movs	r2, #2
 8002f12:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	795b      	ldrb	r3, [r3, #5]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_DAC_Start+0x16>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e043      	b.n	8002fc8 <HAL_DAC_Start+0x9e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6819      	ldr	r1, [r3, #0]
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2201      	movs	r2, #1
 8002f5a:	409a      	lsls	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	430a      	orrs	r2, r1
 8002f62:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7fe fb4d 	bl	8001604 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10f      	bne.n	8002f90 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d11d      	bne.n	8002fba <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e014      	b.n	8002fba <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d107      	bne.n	8002fba <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0202 	orr.w	r2, r2, #2
 8002fb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b087      	sub	sp, #28
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d105      	bne.n	8003000 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e004      	b.n	800300a <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	3314      	adds	r3, #20
 8003008:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	461a      	mov	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08a      	sub	sp, #40	; 0x28
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	795b      	ldrb	r3, [r3, #5]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d101      	bne.n	800303c <HAL_DAC_ConfigChannel+0x1c>
 8003038:	2302      	movs	r3, #2
 800303a:	e194      	b.n	8003366 <HAL_DAC_ConfigChannel+0x346>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2202      	movs	r2, #2
 8003046:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b04      	cmp	r3, #4
 800304e:	d174      	bne.n	800313a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d137      	bne.n	80030c6 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8003056:	f7fe fac9 	bl	80015ec <HAL_GetTick>
 800305a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800305c:	e011      	b.n	8003082 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800305e:	f7fe fac5 	bl	80015ec <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	d90a      	bls.n	8003082 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	f043 0208 	orr.w	r2, r3, #8
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2203      	movs	r2, #3
 800307c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e171      	b.n	8003366 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1e6      	bne.n	800305e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003090:	2001      	movs	r0, #1
 8003092:	f7fe fab7 	bl	8001604 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309e:	641a      	str	r2, [r3, #64]	; 0x40
 80030a0:	e01e      	b.n	80030e0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80030a2:	f7fe faa3 	bl	80015ec <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d90a      	bls.n	80030c6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f043 0208 	orr.w	r2, r3, #8
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2203      	movs	r2, #3
 80030c0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80030c2:	2303      	movs	r3, #3
 80030c4:	e14f      	b.n	8003366 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dbe8      	blt.n	80030a2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80030d0:	2001      	movs	r0, #1
 80030d2:	f7fe fa97 	bl	8001604 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	ea02 0103 	and.w	r1, r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f003 0310 	and.w	r3, r3, #16
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	21ff      	movs	r1, #255	; 0xff
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	ea02 0103 	and.w	r1, r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	409a      	lsls	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d11d      	bne.n	800317e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f003 0310 	and.w	r3, r3, #16
 8003150:	221f      	movs	r2, #31
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	4013      	ands	r3, r2
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	6a1b      	ldr	r3, [r3, #32]
 8003162:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0310 	and.w	r3, r3, #16
 800316a:	69ba      	ldr	r2, [r7, #24]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	4313      	orrs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f003 0310 	and.w	r3, r3, #16
 800318c:	2207      	movs	r2, #7
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003196:	4013      	ands	r3, r2
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	699b      	ldr	r3, [r3, #24]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d002      	beq.n	80031ac <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	623b      	str	r3, [r7, #32]
 80031aa:	e011      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80031b8:	2301      	movs	r3, #1
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	e008      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d102      	bne.n	80031cc <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80031c6:	2301      	movs	r3, #1
 80031c8:	623b      	str	r3, [r7, #32]
 80031ca:	e001      	b.n	80031d0 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80031cc:	2300      	movs	r3, #0
 80031ce:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	695b      	ldr	r3, [r3, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	6a3a      	ldr	r2, [r7, #32]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031f2:	4013      	ands	r3, r2
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	791b      	ldrb	r3, [r3, #4]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d102      	bne.n	8003204 <HAL_DAC_ConfigChannel+0x1e4>
 80031fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003202:	e000      	b.n	8003206 <HAL_DAC_ConfigChannel+0x1e6>
 8003204:	2300      	movs	r3, #0
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	43db      	mvns	r3, r3
 800321c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321e:	4013      	ands	r3, r2
 8003220:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	795b      	ldrb	r3, [r3, #5]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d102      	bne.n	8003230 <HAL_DAC_ConfigChannel+0x210>
 800322a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800322e:	e000      	b.n	8003232 <HAL_DAC_ConfigChannel+0x212>
 8003230:	2300      	movs	r3, #0
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4313      	orrs	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800323e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d114      	bne.n	8003272 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003248:	f001 f996 	bl	8004578 <HAL_RCC_GetHCLKFreq>
 800324c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	4a47      	ldr	r2, [pc, #284]	; (8003370 <HAL_DAC_ConfigChannel+0x350>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d904      	bls.n	8003260 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
 800325e:	e00d      	b.n	800327c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	4a44      	ldr	r2, [pc, #272]	; (8003374 <HAL_DAC_ConfigChannel+0x354>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d909      	bls.n	800327c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
 8003270:	e004      	b.n	800327c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003278:	4313      	orrs	r3, r2
 800327a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	4313      	orrs	r3, r2
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003294:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	6819      	ldr	r1, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	400a      	ands	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0310 	and.w	r3, r3, #16
 80032c2:	f640 72fe 	movw	r2, #4094	; 0xffe
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	43db      	mvns	r3, r3
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	4013      	ands	r3, r2
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f003 0310 	and.w	r3, r3, #16
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e6:	4313      	orrs	r3, r2
 80032e8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	6819      	ldr	r1, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f003 0310 	and.w	r3, r3, #16
 80032fe:	22c0      	movs	r2, #192	; 0xc0
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43da      	mvns	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	400a      	ands	r2, r1
 800330c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	089b      	lsrs	r3, r3, #2
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	4313      	orrs	r3, r2
 800332a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	f640 710f 	movw	r1, #3855	; 0xf0f
 800333c:	fa01 f303 	lsl.w	r3, r1, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	ea02 0103 	and.w	r1, r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f003 0310 	and.w	r3, r3, #16
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	409a      	lsls	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3728      	adds	r7, #40	; 0x28
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	09896800 	.word	0x09896800
 8003374:	04c4b400 	.word	0x04c4b400

08003378 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	795b      	ldrb	r3, [r3, #5]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_DACEx_TriangleWaveGenerate+0x18>
 800338c:	2302      	movs	r3, #2
 800338e:	e024      	b.n	80033da <HAL_DACEx_TriangleWaveGenerate+0x62>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2202      	movs	r2, #2
 800339a:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	ea02 0103 	and.w	r1, r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0310 	and.w	r3, r3, #16
 80033c2:	409a      	lsls	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
	...

080033e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e08d      	b.n	8003516 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	4b47      	ldr	r3, [pc, #284]	; (8003520 <HAL_DMA_Init+0x138>)
 8003402:	429a      	cmp	r2, r3
 8003404:	d80f      	bhi.n	8003426 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	461a      	mov	r2, r3
 800340c:	4b45      	ldr	r3, [pc, #276]	; (8003524 <HAL_DMA_Init+0x13c>)
 800340e:	4413      	add	r3, r2
 8003410:	4a45      	ldr	r2, [pc, #276]	; (8003528 <HAL_DMA_Init+0x140>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	091b      	lsrs	r3, r3, #4
 8003418:	009a      	lsls	r2, r3, #2
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a42      	ldr	r2, [pc, #264]	; (800352c <HAL_DMA_Init+0x144>)
 8003422:	641a      	str	r2, [r3, #64]	; 0x40
 8003424:	e00e      	b.n	8003444 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	4b40      	ldr	r3, [pc, #256]	; (8003530 <HAL_DMA_Init+0x148>)
 800342e:	4413      	add	r3, r2
 8003430:	4a3d      	ldr	r2, [pc, #244]	; (8003528 <HAL_DMA_Init+0x140>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	009a      	lsls	r2, r3, #2
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a3c      	ldr	r2, [pc, #240]	; (8003534 <HAL_DMA_Init+0x14c>)
 8003442:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800345a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800345e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8fe 	bl	8003698 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034a4:	d102      	bne.n	80034ac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80034c0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_DMA_Init+0x104>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	d80c      	bhi.n	80034ec <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f91e 	bl	8003714 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	e008      	b.n	80034fe <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	40020407 	.word	0x40020407
 8003524:	bffdfff8 	.word	0xbffdfff8
 8003528:	cccccccd 	.word	0xcccccccd
 800352c:	40020000 	.word	0x40020000
 8003530:	bffdfbf8 	.word	0xbffdfbf8
 8003534:	40020400 	.word	0x40020400

08003538 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003554:	f003 031f 	and.w	r3, r3, #31
 8003558:	2204      	movs	r2, #4
 800355a:	409a      	lsls	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	4013      	ands	r3, r2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d026      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x7a>
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0304 	and.w	r3, r3, #4
 800356a:	2b00      	cmp	r3, #0
 800356c:	d021      	beq.n	80035b2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0320 	and.w	r3, r3, #32
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0204 	bic.w	r2, r2, #4
 800358a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	f003 021f 	and.w	r2, r3, #31
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	2104      	movs	r1, #4
 800359a:	fa01 f202 	lsl.w	r2, r1, r2
 800359e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d071      	beq.n	800368c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035b0:	e06c      	b.n	800368c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f003 031f 	and.w	r3, r3, #31
 80035ba:	2202      	movs	r2, #2
 80035bc:	409a      	lsls	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d02e      	beq.n	8003624 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d029      	beq.n	8003624 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0320 	and.w	r3, r3, #32
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10b      	bne.n	80035f6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 020a 	bic.w	r2, r2, #10
 80035ec:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fa:	f003 021f 	and.w	r2, r3, #31
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2102      	movs	r1, #2
 8003604:	fa01 f202 	lsl.w	r2, r1, r2
 8003608:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003616:	2b00      	cmp	r3, #0
 8003618:	d038      	beq.n	800368c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003622:	e033      	b.n	800368c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2208      	movs	r2, #8
 800362e:	409a      	lsls	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	d02a      	beq.n	800368e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	f003 0308 	and.w	r3, r3, #8
 800363e:	2b00      	cmp	r3, #0
 8003640:	d025      	beq.n	800368e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 020e 	bic.w	r2, r2, #14
 8003650:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f003 021f 	and.w	r2, r3, #31
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2101      	movs	r1, #1
 8003660:	fa01 f202 	lsl.w	r2, r1, r2
 8003664:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800368c:	bf00      	nop
 800368e:	bf00      	nop
}
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	4b16      	ldr	r3, [pc, #88]	; (8003700 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d802      	bhi.n	80036b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80036ac:	4b15      	ldr	r3, [pc, #84]	; (8003704 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e001      	b.n	80036b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80036b4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	3b08      	subs	r3, #8
 80036c2:	4a12      	ldr	r2, [pc, #72]	; (800370c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80036c4:	fba2 2303 	umull	r2, r3, r2, r3
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	009a      	lsls	r2, r3, #2
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	461a      	mov	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80036e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 031f 	and.w	r3, r3, #31
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80036f2:	bf00      	nop
 80036f4:	371c      	adds	r7, #28
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40020407 	.word	0x40020407
 8003704:	40020800 	.word	0x40020800
 8003708:	40020820 	.word	0x40020820
 800370c:	cccccccd 	.word	0xcccccccd
 8003710:	40020880 	.word	0x40020880

08003714 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003724:	68fa      	ldr	r2, [r7, #12]
 8003726:	4b0b      	ldr	r3, [pc, #44]	; (8003754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	461a      	mov	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a08      	ldr	r2, [pc, #32]	; (8003758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003736:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	3b01      	subs	r3, #1
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2201      	movs	r2, #1
 8003742:	409a      	lsls	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	1000823f 	.word	0x1000823f
 8003758:	40020940 	.word	0x40020940

0800375c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800376a:	e15a      	b.n	8003a22 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	2101      	movs	r1, #1
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	fa01 f303 	lsl.w	r3, r1, r3
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 814c 	beq.w	8003a1c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	2b01      	cmp	r3, #1
 800378a:	d00b      	beq.n	80037a4 <HAL_GPIO_Init+0x48>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b02      	cmp	r3, #2
 8003792:	d007      	beq.n	80037a4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003798:	2b11      	cmp	r3, #17
 800379a:	d003      	beq.n	80037a4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b12      	cmp	r3, #18
 80037a2:	d130      	bne.n	8003806 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037da:	2201      	movs	r2, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0201 	and.w	r2, r3, #1
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	2203      	movs	r2, #3
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	689a      	ldr	r2, [r3, #8]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0xea>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b12      	cmp	r3, #18
 8003844:	d123      	bne.n	800388e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	08da      	lsrs	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	3208      	adds	r2, #8
 800384e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	220f      	movs	r2, #15
 800385e:	fa02 f303 	lsl.w	r3, r2, r3
 8003862:	43db      	mvns	r3, r3
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4013      	ands	r3, r2
 8003868:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	691a      	ldr	r2, [r3, #16]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	fa02 f303 	lsl.w	r3, r2, r3
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	4313      	orrs	r3, r2
 800387e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	08da      	lsrs	r2, r3, #3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3208      	adds	r2, #8
 8003888:	6939      	ldr	r1, [r7, #16]
 800388a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	2203      	movs	r2, #3
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4013      	ands	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0203 	and.w	r2, r3, #3
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 80a6 	beq.w	8003a1c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d0:	4b5b      	ldr	r3, [pc, #364]	; (8003a40 <HAL_GPIO_Init+0x2e4>)
 80038d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038d4:	4a5a      	ldr	r2, [pc, #360]	; (8003a40 <HAL_GPIO_Init+0x2e4>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6613      	str	r3, [r2, #96]	; 0x60
 80038dc:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_GPIO_Init+0x2e4>)
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	60bb      	str	r3, [r7, #8]
 80038e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038e8:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <HAL_GPIO_Init+0x2e8>)
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	220f      	movs	r2, #15
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	43db      	mvns	r3, r3
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4013      	ands	r3, r2
 800390a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003912:	d01f      	beq.n	8003954 <HAL_GPIO_Init+0x1f8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a4c      	ldr	r2, [pc, #304]	; (8003a48 <HAL_GPIO_Init+0x2ec>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d019      	beq.n	8003950 <HAL_GPIO_Init+0x1f4>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	4a4b      	ldr	r2, [pc, #300]	; (8003a4c <HAL_GPIO_Init+0x2f0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d013      	beq.n	800394c <HAL_GPIO_Init+0x1f0>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	4a4a      	ldr	r2, [pc, #296]	; (8003a50 <HAL_GPIO_Init+0x2f4>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d00d      	beq.n	8003948 <HAL_GPIO_Init+0x1ec>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	4a49      	ldr	r2, [pc, #292]	; (8003a54 <HAL_GPIO_Init+0x2f8>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d007      	beq.n	8003944 <HAL_GPIO_Init+0x1e8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <HAL_GPIO_Init+0x2fc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d101      	bne.n	8003940 <HAL_GPIO_Init+0x1e4>
 800393c:	2305      	movs	r3, #5
 800393e:	e00a      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003940:	2306      	movs	r3, #6
 8003942:	e008      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003944:	2304      	movs	r3, #4
 8003946:	e006      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003948:	2303      	movs	r3, #3
 800394a:	e004      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 800394c:	2302      	movs	r3, #2
 800394e:	e002      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_GPIO_Init+0x1fa>
 8003954:	2300      	movs	r3, #0
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	f002 0203 	and.w	r2, r2, #3
 800395c:	0092      	lsls	r2, r2, #2
 800395e:	4093      	lsls	r3, r2
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	4313      	orrs	r3, r2
 8003964:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003966:	4937      	ldr	r1, [pc, #220]	; (8003a44 <HAL_GPIO_Init+0x2e8>)
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	089b      	lsrs	r3, r3, #2
 800396c:	3302      	adds	r3, #2
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003974:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <HAL_GPIO_Init+0x300>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	43db      	mvns	r3, r3
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4013      	ands	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003998:	4a30      	ldr	r2, [pc, #192]	; (8003a5c <HAL_GPIO_Init+0x300>)
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	4013      	ands	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039c2:	4a26      	ldr	r2, [pc, #152]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039c8:	4b24      	ldr	r3, [pc, #144]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ec:	4a1b      	ldr	r2, [pc, #108]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039f2:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <HAL_GPIO_Init+0x300>)
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	4013      	ands	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a16:	4a11      	ldr	r2, [pc, #68]	; (8003a5c <HAL_GPIO_Init+0x300>)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	f47f ae9d 	bne.w	800376c <HAL_GPIO_Init+0x10>
  }
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40021000 	.word	0x40021000
 8003a44:	40010000 	.word	0x40010000
 8003a48:	48000400 	.word	0x48000400
 8003a4c:	48000800 	.word	0x48000800
 8003a50:	48000c00 	.word	0x48000c00
 8003a54:	48001000 	.word	0x48001000
 8003a58:	48001400 	.word	0x48001400
 8003a5c:	40010400 	.word	0x40010400

08003a60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	807b      	strh	r3, [r7, #2]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a70:	787b      	ldrb	r3, [r7, #1]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a76:	887a      	ldrh	r2, [r7, #2]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a7c:	e002      	b.n	8003a84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a7e:	887a      	ldrh	r2, [r7, #2]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a84:	bf00      	nop
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr

08003a90 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	695a      	ldr	r2, [r3, #20]
 8003aa0:	887b      	ldrh	r3, [r7, #2]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aa8:	887a      	ldrh	r2, [r7, #2]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003aae:	e002      	b.n	8003ab6 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ab0:	887a      	ldrh	r2, [r7, #2]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	619a      	str	r2, [r3, #24]
}
 8003ab6:	bf00      	nop
 8003ab8:	370c      	adds	r7, #12
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
	...

08003ac4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d141      	bne.n	8003b56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ad2:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ade:	d131      	bne.n	8003b44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ae0:	4b47      	ldr	r3, [pc, #284]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ae6:	4a46      	ldr	r2, [pc, #280]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003af0:	4b43      	ldr	r3, [pc, #268]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003af8:	4a41      	ldr	r2, [pc, #260]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003afe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b00:	4b40      	ldr	r3, [pc, #256]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2232      	movs	r2, #50	; 0x32
 8003b06:	fb02 f303 	mul.w	r3, r2, r3
 8003b0a:	4a3f      	ldr	r2, [pc, #252]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b10:	0c9b      	lsrs	r3, r3, #18
 8003b12:	3301      	adds	r3, #1
 8003b14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b16:	e002      	b.n	8003b1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b1e:	4b38      	ldr	r3, [pc, #224]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2a:	d102      	bne.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1f2      	bne.n	8003b18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b32:	4b33      	ldr	r3, [pc, #204]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3e:	d158      	bne.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e057      	b.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b44:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b4a:	4a2d      	ldr	r2, [pc, #180]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b54:	e04d      	b.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b5c:	d141      	bne.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d131      	bne.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b6c:	4b24      	ldr	r3, [pc, #144]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b72:	4a23      	ldr	r2, [pc, #140]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b7c:	4b20      	ldr	r3, [pc, #128]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b84:	4a1e      	ldr	r2, [pc, #120]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b8c:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2232      	movs	r2, #50	; 0x32
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	0c9b      	lsrs	r3, r3, #18
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba2:	e002      	b.n	8003baa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bb6:	d102      	bne.n	8003bbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f2      	bne.n	8003ba4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bbe:	4b10      	ldr	r3, [pc, #64]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bca:	d112      	bne.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	e011      	b.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003be0:	e007      	b.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003be2:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bea:	4a05      	ldr	r2, [pc, #20]	; (8003c00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bf0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40007000 	.word	0x40007000
 8003c04:	20000004 	.word	0x20000004
 8003c08:	431bde83 	.word	0x431bde83

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e308      	b.n	8004230 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d075      	beq.n	8003d16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2a:	4ba3      	ldr	r3, [pc, #652]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c34:	4ba0      	ldr	r3, [pc, #640]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b0c      	cmp	r3, #12
 8003c42:	d102      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3e>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d002      	beq.n	8003c50 <HAL_RCC_OscConfig+0x44>
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d10b      	bne.n	8003c68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	4b99      	ldr	r3, [pc, #612]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d05b      	beq.n	8003d14 <HAL_RCC_OscConfig+0x108>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d157      	bne.n	8003d14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e2e3      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c70:	d106      	bne.n	8003c80 <HAL_RCC_OscConfig+0x74>
 8003c72:	4b91      	ldr	r3, [pc, #580]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a90      	ldr	r2, [pc, #576]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	e01d      	b.n	8003cbc <HAL_RCC_OscConfig+0xb0>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c88:	d10c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x98>
 8003c8a:	4b8b      	ldr	r3, [pc, #556]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a8a      	ldr	r2, [pc, #552]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	4b88      	ldr	r3, [pc, #544]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a87      	ldr	r2, [pc, #540]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e00b      	b.n	8003cbc <HAL_RCC_OscConfig+0xb0>
 8003ca4:	4b84      	ldr	r3, [pc, #528]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a83      	ldr	r2, [pc, #524]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003caa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	4b81      	ldr	r3, [pc, #516]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a80      	ldr	r2, [pc, #512]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003cb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d013      	beq.n	8003cec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fd fc92 	bl	80015ec <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fd fc8e 	bl	80015ec <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e2a8      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cde:	4b76      	ldr	r3, [pc, #472]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d0f0      	beq.n	8003ccc <HAL_RCC_OscConfig+0xc0>
 8003cea:	e014      	b.n	8003d16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fd fc7e 	bl	80015ec <HAL_GetTick>
 8003cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf2:	e008      	b.n	8003d06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf4:	f7fd fc7a 	bl	80015ec <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b64      	cmp	r3, #100	; 0x64
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e294      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d06:	4b6c      	ldr	r3, [pc, #432]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f0      	bne.n	8003cf4 <HAL_RCC_OscConfig+0xe8>
 8003d12:	e000      	b.n	8003d16 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d075      	beq.n	8003e0e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4b65      	ldr	r3, [pc, #404]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2c:	4b62      	ldr	r3, [pc, #392]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b0c      	cmp	r3, #12
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_OscConfig+0x136>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d002      	beq.n	8003d48 <HAL_RCC_OscConfig+0x13c>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b04      	cmp	r3, #4
 8003d46:	d11f      	bne.n	8003d88 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d48:	4b5b      	ldr	r3, [pc, #364]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_OscConfig+0x154>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e267      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b55      	ldr	r3, [pc, #340]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	4952      	ldr	r1, [pc, #328]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d74:	4b51      	ldr	r3, [pc, #324]	; (8003ebc <HAL_RCC_OscConfig+0x2b0>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7fd fbeb 	bl	8001554 <HAL_InitTick>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d043      	beq.n	8003e0c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e253      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d023      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d90:	4b49      	ldr	r3, [pc, #292]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a48      	ldr	r2, [pc, #288]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9c:	f7fd fc26 	bl	80015ec <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da4:	f7fd fc22 	bl	80015ec <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e23c      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003db6:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc2:	4b3d      	ldr	r3, [pc, #244]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	061b      	lsls	r3, r3, #24
 8003dd0:	4939      	ldr	r1, [pc, #228]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	604b      	str	r3, [r1, #4]
 8003dd6:	e01a      	b.n	8003e0e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dd8:	4b37      	ldr	r3, [pc, #220]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a36      	ldr	r2, [pc, #216]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de4:	f7fd fc02 	bl	80015ec <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dec:	f7fd fbfe 	bl	80015ec <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e218      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dfe:	4b2e      	ldr	r3, [pc, #184]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1f0      	bne.n	8003dec <HAL_RCC_OscConfig+0x1e0>
 8003e0a:	e000      	b.n	8003e0e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d03c      	beq.n	8003e94 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d01c      	beq.n	8003e5c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e22:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e28:	4a23      	ldr	r2, [pc, #140]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e2a:	f043 0301 	orr.w	r3, r3, #1
 8003e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e32:	f7fd fbdb 	bl	80015ec <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e3a:	f7fd fbd7 	bl	80015ec <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e1f1      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e4c:	4b1a      	ldr	r3, [pc, #104]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0ef      	beq.n	8003e3a <HAL_RCC_OscConfig+0x22e>
 8003e5a:	e01b      	b.n	8003e94 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e5c:	4b16      	ldr	r3, [pc, #88]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6c:	f7fd fbbe 	bl	80015ec <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e74:	f7fd fbba 	bl	80015ec <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e1d4      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e8c:	f003 0302 	and.w	r3, r3, #2
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1ef      	bne.n	8003e74 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0304 	and.w	r3, r3, #4
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	f000 80ab 	beq.w	8003ff8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ea6:	4b04      	ldr	r3, [pc, #16]	; (8003eb8 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x2b4>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e005      	b.n	8003ec2 <HAL_RCC_OscConfig+0x2b6>
 8003eb6:	bf00      	nop
 8003eb8:	40021000 	.word	0x40021000
 8003ebc:	20000008 	.word	0x20000008
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	4baf      	ldr	r3, [pc, #700]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eca:	4aae      	ldr	r2, [pc, #696]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003ecc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ed2:	4bac      	ldr	r3, [pc, #688]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eda:	60fb      	str	r3, [r7, #12]
 8003edc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ee2:	4ba9      	ldr	r3, [pc, #676]	; (8004188 <HAL_RCC_OscConfig+0x57c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d118      	bne.n	8003f20 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eee:	4ba6      	ldr	r3, [pc, #664]	; (8004188 <HAL_RCC_OscConfig+0x57c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4aa5      	ldr	r2, [pc, #660]	; (8004188 <HAL_RCC_OscConfig+0x57c>)
 8003ef4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ef8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efa:	f7fd fb77 	bl	80015ec <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f02:	f7fd fb73 	bl	80015ec <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e18d      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f14:	4b9c      	ldr	r3, [pc, #624]	; (8004188 <HAL_RCC_OscConfig+0x57c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0f0      	beq.n	8003f02 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d108      	bne.n	8003f3a <HAL_RCC_OscConfig+0x32e>
 8003f28:	4b96      	ldr	r3, [pc, #600]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	4a95      	ldr	r2, [pc, #596]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f38:	e024      	b.n	8003f84 <HAL_RCC_OscConfig+0x378>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d110      	bne.n	8003f64 <HAL_RCC_OscConfig+0x358>
 8003f42:	4b90      	ldr	r3, [pc, #576]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	4a8e      	ldr	r2, [pc, #568]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
 8003f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f52:	4b8c      	ldr	r3, [pc, #560]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	4a8a      	ldr	r2, [pc, #552]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f5a:	f043 0301 	orr.w	r3, r3, #1
 8003f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f62:	e00f      	b.n	8003f84 <HAL_RCC_OscConfig+0x378>
 8003f64:	4b87      	ldr	r3, [pc, #540]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	4a86      	ldr	r2, [pc, #536]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f74:	4b83      	ldr	r3, [pc, #524]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f7a:	4a82      	ldr	r2, [pc, #520]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003f7c:	f023 0304 	bic.w	r3, r3, #4
 8003f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d016      	beq.n	8003fba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f8c:	f7fd fb2e 	bl	80015ec <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f92:	e00a      	b.n	8003faa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f94:	f7fd fb2a 	bl	80015ec <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e142      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003faa:	4b76      	ldr	r3, [pc, #472]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ed      	beq.n	8003f94 <HAL_RCC_OscConfig+0x388>
 8003fb8:	e015      	b.n	8003fe6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fba:	f7fd fb17 	bl	80015ec <HAL_GetTick>
 8003fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc0:	e00a      	b.n	8003fd8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fc2:	f7fd fb13 	bl	80015ec <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e12b      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fd8:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1ed      	bne.n	8003fc2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fe6:	7ffb      	ldrb	r3, [r7, #31]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d105      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fec:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	4a64      	ldr	r2, [pc, #400]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8003ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d03c      	beq.n	800407e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d01c      	beq.n	8004046 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800400c:	4b5d      	ldr	r3, [pc, #372]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800400e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004012:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800401c:	f7fd fae6 	bl	80015ec <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004022:	e008      	b.n	8004036 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004024:	f7fd fae2 	bl	80015ec <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	2b02      	cmp	r3, #2
 8004030:	d901      	bls.n	8004036 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e0fc      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004036:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0ef      	beq.n	8004024 <HAL_RCC_OscConfig+0x418>
 8004044:	e01b      	b.n	800407e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004046:	4b4f      	ldr	r3, [pc, #316]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800404c:	4a4d      	ldr	r2, [pc, #308]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004056:	f7fd fac9 	bl	80015ec <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800405c:	e008      	b.n	8004070 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800405e:	f7fd fac5 	bl	80015ec <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	2b02      	cmp	r3, #2
 800406a:	d901      	bls.n	8004070 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e0df      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004070:	4b44      	ldr	r3, [pc, #272]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1ef      	bne.n	800405e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80d3 	beq.w	800422e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004088:	4b3e      	ldr	r3, [pc, #248]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 030c 	and.w	r3, r3, #12
 8004090:	2b0c      	cmp	r3, #12
 8004092:	f000 808d 	beq.w	80041b0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	2b02      	cmp	r3, #2
 800409c:	d15a      	bne.n	8004154 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a38      	ldr	r2, [pc, #224]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fd fa9f 	bl	80015ec <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040b2:	f7fd fa9b 	bl	80015ec <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e0b5      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040c4:	4b2f      	ldr	r3, [pc, #188]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1f0      	bne.n	80040b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040d0:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	4b2d      	ldr	r3, [pc, #180]	; (800418c <HAL_RCC_OscConfig+0x580>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6a11      	ldr	r1, [r2, #32]
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040e0:	3a01      	subs	r2, #1
 80040e2:	0112      	lsls	r2, r2, #4
 80040e4:	4311      	orrs	r1, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80040ea:	0212      	lsls	r2, r2, #8
 80040ec:	4311      	orrs	r1, r2
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040f2:	0852      	lsrs	r2, r2, #1
 80040f4:	3a01      	subs	r2, #1
 80040f6:	0552      	lsls	r2, r2, #21
 80040f8:	4311      	orrs	r1, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040fe:	0852      	lsrs	r2, r2, #1
 8004100:	3a01      	subs	r2, #1
 8004102:	0652      	lsls	r2, r2, #25
 8004104:	4311      	orrs	r1, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800410a:	06d2      	lsls	r2, r2, #27
 800410c:	430a      	orrs	r2, r1
 800410e:	491d      	ldr	r1, [pc, #116]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004110:	4313      	orrs	r3, r2
 8004112:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004114:	4b1b      	ldr	r3, [pc, #108]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800411a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004120:	4b18      	ldr	r3, [pc, #96]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a17      	ldr	r2, [pc, #92]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fd fa5e 	bl	80015ec <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fd fa5a 	bl	80015ec <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e074      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x528>
 8004152:	e06c      	b.n	800422e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004154:	4b0b      	ldr	r3, [pc, #44]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a0a      	ldr	r2, [pc, #40]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800415a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800415e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	4a07      	ldr	r2, [pc, #28]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4a04      	ldr	r2, [pc, #16]	; (8004184 <HAL_RCC_OscConfig+0x578>)
 8004172:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417c:	f7fd fa36 	bl	80015ec <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004182:	e00e      	b.n	80041a2 <HAL_RCC_OscConfig+0x596>
 8004184:	40021000 	.word	0x40021000
 8004188:	40007000 	.word	0x40007000
 800418c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004190:	f7fd fa2c 	bl	80015ec <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e046      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a2:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_OscConfig+0x62c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x584>
 80041ae:	e03e      	b.n	800422e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	69db      	ldr	r3, [r3, #28]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e039      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041bc:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <HAL_RCC_OscConfig+0x62c>)
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f003 0203 	and.w	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d12c      	bne.n	800422a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	3b01      	subs	r3, #1
 80041dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d123      	bne.n	800422a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d11b      	bne.n	800422a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041fe:	429a      	cmp	r2, r3
 8004200:	d113      	bne.n	800422a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420c:	085b      	lsrs	r3, r3, #1
 800420e:	3b01      	subs	r3, #1
 8004210:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004212:	429a      	cmp	r2, r3
 8004214:	d109      	bne.n	800422a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004220:	085b      	lsrs	r3, r3, #1
 8004222:	3b01      	subs	r3, #1
 8004224:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3720      	adds	r7, #32
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000

0800423c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e11e      	b.n	8004492 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004254:	4b91      	ldr	r3, [pc, #580]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 030f 	and.w	r3, r3, #15
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d910      	bls.n	8004284 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004262:	4b8e      	ldr	r3, [pc, #568]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f023 020f 	bic.w	r2, r3, #15
 800426a:	498c      	ldr	r1, [pc, #560]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	4313      	orrs	r3, r2
 8004270:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004272:	4b8a      	ldr	r3, [pc, #552]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	683a      	ldr	r2, [r7, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d001      	beq.n	8004284 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e106      	b.n	8004492 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	2b00      	cmp	r3, #0
 800428e:	d073      	beq.n	8004378 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d129      	bne.n	80042ec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004298:	4b81      	ldr	r3, [pc, #516]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0f4      	b.n	8004492 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80042a8:	f000 f972 	bl	8004590 <RCC_GetSysClockFreqFromPLLSource>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	4a7c      	ldr	r2, [pc, #496]	; (80044a4 <HAL_RCC_ClockConfig+0x268>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d93f      	bls.n	8004336 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042b6:	4b7a      	ldr	r3, [pc, #488]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d033      	beq.n	8004336 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d12f      	bne.n	8004336 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042d6:	4b72      	ldr	r3, [pc, #456]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042de:	4a70      	ldr	r2, [pc, #448]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80042e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042e4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e024      	b.n	8004336 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d107      	bne.n	8004304 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042f4:	4b6a      	ldr	r3, [pc, #424]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0c6      	b.n	8004492 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004304:	4b66      	ldr	r3, [pc, #408]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e0be      	b.n	8004492 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004314:	f000 f8ce 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 8004318:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4a61      	ldr	r2, [pc, #388]	; (80044a4 <HAL_RCC_ClockConfig+0x268>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d909      	bls.n	8004336 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004322:	4b5f      	ldr	r3, [pc, #380]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800432a:	4a5d      	ldr	r2, [pc, #372]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 800432c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004330:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004332:	2380      	movs	r3, #128	; 0x80
 8004334:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004336:	4b5a      	ldr	r3, [pc, #360]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	4957      	ldr	r1, [pc, #348]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004344:	4313      	orrs	r3, r2
 8004346:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004348:	f7fd f950 	bl	80015ec <HAL_GetTick>
 800434c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	e00a      	b.n	8004366 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fd f94c 	bl	80015ec <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e095      	b.n	8004492 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	4b4e      	ldr	r3, [pc, #312]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 020c 	and.w	r2, r3, #12
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	429a      	cmp	r2, r3
 8004376:	d1eb      	bne.n	8004350 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d023      	beq.n	80043cc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0304 	and.w	r3, r3, #4
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004390:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4a42      	ldr	r2, [pc, #264]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800439a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0308 	and.w	r3, r3, #8
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80043a8:	4b3d      	ldr	r3, [pc, #244]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043b0:	4a3b      	ldr	r2, [pc, #236]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80043b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043b8:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	4936      	ldr	r1, [pc, #216]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	608b      	str	r3, [r1, #8]
 80043ca:	e008      	b.n	80043de <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	2b80      	cmp	r3, #128	; 0x80
 80043d0:	d105      	bne.n	80043de <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043d2:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4a32      	ldr	r2, [pc, #200]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 80043d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043dc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043de:	4b2f      	ldr	r3, [pc, #188]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 030f 	and.w	r3, r3, #15
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d21d      	bcs.n	8004428 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ec:	4b2b      	ldr	r3, [pc, #172]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f023 020f 	bic.w	r2, r3, #15
 80043f4:	4929      	ldr	r1, [pc, #164]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043fc:	f7fd f8f6 	bl	80015ec <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004402:	e00a      	b.n	800441a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004404:	f7fd f8f2 	bl	80015ec <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e03b      	b.n	8004492 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800441a:	4b20      	ldr	r3, [pc, #128]	; (800449c <HAL_RCC_ClockConfig+0x260>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	429a      	cmp	r2, r3
 8004426:	d1ed      	bne.n	8004404 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0304 	and.w	r3, r3, #4
 8004430:	2b00      	cmp	r3, #0
 8004432:	d008      	beq.n	8004446 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004434:	4b1a      	ldr	r3, [pc, #104]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	4917      	ldr	r1, [pc, #92]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004442:	4313      	orrs	r3, r2
 8004444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0308 	and.w	r3, r3, #8
 800444e:	2b00      	cmp	r3, #0
 8004450:	d009      	beq.n	8004466 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	490f      	ldr	r1, [pc, #60]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004466:	f000 f825 	bl	80044b4 <HAL_RCC_GetSysClockFreq>
 800446a:	4601      	mov	r1, r0
 800446c:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <HAL_RCC_ClockConfig+0x264>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 030f 	and.w	r3, r3, #15
 8004476:	4a0c      	ldr	r2, [pc, #48]	; (80044a8 <HAL_RCC_ClockConfig+0x26c>)
 8004478:	5cd3      	ldrb	r3, [r2, r3]
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	fa21 f303 	lsr.w	r3, r1, r3
 8004482:	4a0a      	ldr	r2, [pc, #40]	; (80044ac <HAL_RCC_ClockConfig+0x270>)
 8004484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004486:	4b0a      	ldr	r3, [pc, #40]	; (80044b0 <HAL_RCC_ClockConfig+0x274>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd f862 	bl	8001554 <HAL_InitTick>
 8004490:	4603      	mov	r3, r0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3718      	adds	r7, #24
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40022000 	.word	0x40022000
 80044a0:	40021000 	.word	0x40021000
 80044a4:	04c4b400 	.word	0x04c4b400
 80044a8:	08007b98 	.word	0x08007b98
 80044ac:	20000004 	.word	0x20000004
 80044b0:	20000008 	.word	0x20000008

080044b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b087      	sub	sp, #28
 80044b8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044ba:	4b2c      	ldr	r3, [pc, #176]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d102      	bne.n	80044cc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044c6:	4b2a      	ldr	r3, [pc, #168]	; (8004570 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	e047      	b.n	800455c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044cc:	4b27      	ldr	r3, [pc, #156]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f003 030c 	and.w	r3, r3, #12
 80044d4:	2b08      	cmp	r3, #8
 80044d6:	d102      	bne.n	80044de <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044d8:	4b26      	ldr	r3, [pc, #152]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044da:	613b      	str	r3, [r7, #16]
 80044dc:	e03e      	b.n	800455c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044de:	4b23      	ldr	r3, [pc, #140]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
 80044e6:	2b0c      	cmp	r3, #12
 80044e8:	d136      	bne.n	8004558 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f4:	4b1d      	ldr	r3, [pc, #116]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 030f 	and.w	r3, r3, #15
 80044fe:	3301      	adds	r3, #1
 8004500:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2b03      	cmp	r3, #3
 8004506:	d10c      	bne.n	8004522 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004508:	4a1a      	ldr	r2, [pc, #104]	; (8004574 <HAL_RCC_GetSysClockFreq+0xc0>)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004510:	4a16      	ldr	r2, [pc, #88]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004512:	68d2      	ldr	r2, [r2, #12]
 8004514:	0a12      	lsrs	r2, r2, #8
 8004516:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	617b      	str	r3, [r7, #20]
      break;
 8004520:	e00c      	b.n	800453c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004522:	4a13      	ldr	r2, [pc, #76]	; (8004570 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	fbb2 f3f3 	udiv	r3, r2, r3
 800452a:	4a10      	ldr	r2, [pc, #64]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 800452c:	68d2      	ldr	r2, [r2, #12]
 800452e:	0a12      	lsrs	r2, r2, #8
 8004530:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004534:	fb02 f303 	mul.w	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]
      break;
 800453a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_RCC_GetSysClockFreq+0xb8>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0e5b      	lsrs	r3, r3, #25
 8004542:	f003 0303 	and.w	r3, r3, #3
 8004546:	3301      	adds	r3, #1
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	e001      	b.n	800455c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800455c:	693b      	ldr	r3, [r7, #16]
}
 800455e:	4618      	mov	r0, r3
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	00f42400 	.word	0x00f42400
 8004574:	007a1200 	.word	0x007a1200

08004578 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <HAL_RCC_GetHCLKFreq+0x14>)
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	20000004 	.word	0x20000004

08004590 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004590:	b480      	push	{r7}
 8004592:	b087      	sub	sp, #28
 8004594:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	f003 0303 	and.w	r3, r3, #3
 800459e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	3301      	adds	r3, #1
 80045ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d10c      	bne.n	80045ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b4:	4a17      	ldr	r2, [pc, #92]	; (8004614 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	4a14      	ldr	r2, [pc, #80]	; (8004610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045be:	68d2      	ldr	r2, [r2, #12]
 80045c0:	0a12      	lsrs	r2, r2, #8
 80045c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045c6:	fb02 f303 	mul.w	r3, r2, r3
 80045ca:	617b      	str	r3, [r7, #20]
    break;
 80045cc:	e00c      	b.n	80045e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045ce:	4a12      	ldr	r2, [pc, #72]	; (8004618 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045d8:	68d2      	ldr	r2, [r2, #12]
 80045da:	0a12      	lsrs	r2, r2, #8
 80045dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045e0:	fb02 f303 	mul.w	r3, r2, r3
 80045e4:	617b      	str	r3, [r7, #20]
    break;
 80045e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045e8:	4b09      	ldr	r3, [pc, #36]	; (8004610 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	0e5b      	lsrs	r3, r3, #25
 80045ee:	f003 0303 	and.w	r3, r3, #3
 80045f2:	3301      	adds	r3, #1
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004600:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004602:	687b      	ldr	r3, [r7, #4]
}
 8004604:	4618      	mov	r0, r3
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40021000 	.word	0x40021000
 8004614:	007a1200 	.word	0x007a1200
 8004618:	00f42400 	.word	0x00f42400

0800461c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004624:	2300      	movs	r3, #0
 8004626:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004628:	2300      	movs	r3, #0
 800462a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 8098 	beq.w	800476a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800463e:	4b43      	ldr	r3, [pc, #268]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10d      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800464a:	4b40      	ldr	r3, [pc, #256]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	4a3f      	ldr	r2, [pc, #252]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004654:	6593      	str	r3, [r2, #88]	; 0x58
 8004656:	4b3d      	ldr	r3, [pc, #244]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465e:	60bb      	str	r3, [r7, #8]
 8004660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004662:	2301      	movs	r3, #1
 8004664:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004666:	4b3a      	ldr	r3, [pc, #232]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a39      	ldr	r2, [pc, #228]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800466c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004670:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004672:	f7fc ffbb 	bl	80015ec <HAL_GetTick>
 8004676:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004678:	e009      	b.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467a:	f7fc ffb7 	bl	80015ec <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d902      	bls.n	800468e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	74fb      	strb	r3, [r7, #19]
        break;
 800468c:	e005      	b.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800468e:	4b30      	ldr	r3, [pc, #192]	; (8004750 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004696:	2b00      	cmp	r3, #0
 8004698:	d0ef      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d159      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046a0:	4b2a      	ldr	r3, [pc, #168]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d01e      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d019      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046bc:	4b23      	ldr	r3, [pc, #140]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046c8:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	4a1f      	ldr	r2, [pc, #124]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046d8:	4b1c      	ldr	r3, [pc, #112]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046de:	4a1b      	ldr	r2, [pc, #108]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046e8:	4a18      	ldr	r2, [pc, #96]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046fa:	f7fc ff77 	bl	80015ec <HAL_GetTick>
 80046fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004700:	e00b      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004702:	f7fc ff73 	bl	80015ec <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004710:	4293      	cmp	r3, r2
 8004712:	d902      	bls.n	800471a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	74fb      	strb	r3, [r7, #19]
            break;
 8004718:	e006      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800471a:	4b0c      	ldr	r3, [pc, #48]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800471c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d0ec      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004734:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473c:	4903      	ldr	r1, [pc, #12]	; (800474c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473e:	4313      	orrs	r3, r2
 8004740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004744:	e008      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004746:	7cfb      	ldrb	r3, [r7, #19]
 8004748:	74bb      	strb	r3, [r7, #18]
 800474a:	e005      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800474c:	40021000 	.word	0x40021000
 8004750:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004758:	7c7b      	ldrb	r3, [r7, #17]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d105      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800475e:	4baf      	ldr	r3, [pc, #700]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004762:	4aae      	ldr	r2, [pc, #696]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004768:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004776:	4ba9      	ldr	r3, [pc, #676]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477c:	f023 0203 	bic.w	r2, r3, #3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	49a5      	ldr	r1, [pc, #660]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 0302 	and.w	r3, r3, #2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004798:	4ba0      	ldr	r3, [pc, #640]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800479a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800479e:	f023 020c 	bic.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	499d      	ldr	r1, [pc, #628]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0304 	and.w	r3, r3, #4
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047ba:	4b98      	ldr	r3, [pc, #608]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	4994      	ldr	r1, [pc, #592]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0308 	and.w	r3, r3, #8
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047dc:	4b8f      	ldr	r3, [pc, #572]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	498c      	ldr	r1, [pc, #560]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047fe:	4b87      	ldr	r3, [pc, #540]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	4983      	ldr	r1, [pc, #524]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004820:	4b7e      	ldr	r3, [pc, #504]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	497b      	ldr	r1, [pc, #492]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004842:	4b76      	ldr	r3, [pc, #472]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004848:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4972      	ldr	r1, [pc, #456]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004864:	4b6d      	ldr	r3, [pc, #436]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a1b      	ldr	r3, [r3, #32]
 8004872:	496a      	ldr	r1, [pc, #424]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004886:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004894:	4961      	ldr	r1, [pc, #388]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048a8:	4b5c      	ldr	r3, [pc, #368]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ae:	f023 0203 	bic.w	r2, r3, #3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	4959      	ldr	r1, [pc, #356]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ca:	4b54      	ldr	r3, [pc, #336]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	4950      	ldr	r1, [pc, #320]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d015      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048ec:	4b4b      	ldr	r3, [pc, #300]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	4948      	ldr	r1, [pc, #288]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490a:	d105      	bne.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800490c:	4b43      	ldr	r3, [pc, #268]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a42      	ldr	r2, [pc, #264]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004912:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004916:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004920:	2b00      	cmp	r3, #0
 8004922:	d015      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004924:	4b3d      	ldr	r3, [pc, #244]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004932:	493a      	ldr	r1, [pc, #232]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004934:	4313      	orrs	r3, r2
 8004936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800493e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004942:	d105      	bne.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004944:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4a34      	ldr	r2, [pc, #208]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800494a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800494e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d015      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800495c:	4b2f      	ldr	r3, [pc, #188]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800495e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004962:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	492c      	ldr	r1, [pc, #176]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004976:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800497a:	d105      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800497c:	4b27      	ldr	r3, [pc, #156]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004986:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004994:	4b21      	ldr	r3, [pc, #132]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	491e      	ldr	r1, [pc, #120]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049b2:	d105      	bne.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b4:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d015      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049cc:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	4910      	ldr	r1, [pc, #64]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ea:	d105      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049ec:	4b0b      	ldr	r3, [pc, #44]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d018      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a12:	4902      	ldr	r1, [pc, #8]	; (8004a1c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a1a:	e001      	b.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004a1c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a28:	d105      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a2a:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d015      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a42:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a48:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a50:	4917      	ldr	r1, [pc, #92]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a60:	d105      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a6c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d015      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a88:	4909      	ldr	r1, [pc, #36]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a98:	d105      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004aa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa4:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004aa6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e027      	b.n	8004b16 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	7a5b      	ldrb	r3, [r3, #9]
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f7fc f926 	bl	8000d28 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2202      	movs	r2, #2
 8004ae0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f023 0108 	bic.w	r1, r3, #8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685a      	ldr	r2, [r3, #4]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0204 	orr.w	r2, r2, #4
 8004b06:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b084      	sub	sp, #16
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	7a1b      	ldrb	r3, [r3, #8]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d101      	bne.n	8004b38 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004b34:	2302      	movs	r3, #2
 8004b36:	e03d      	b.n	8004bb4 <HAL_RNG_GenerateRandomNumber+0x96>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	7a5b      	ldrb	r3, [r3, #9]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d12c      	bne.n	8004ba2 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b4e:	f7fc fd4d 	bl	80015ec <HAL_GetTick>
 8004b52:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b54:	e011      	b.n	8004b7a <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b56:	f7fc fd49 	bl	80015ec <HAL_GetTick>
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	1ad3      	subs	r3, r2, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	d90a      	bls.n	8004b7a <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e01c      	b.n	8004bb4 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d1e6      	bne.n	8004b56 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	689a      	ldr	r2, [r3, #8]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691a      	ldr	r2, [r3, #16]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	725a      	strb	r2, [r3, #9]
 8004ba0:	e004      	b.n	8004bac <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	721a      	strb	r2, [r3, #8]

  return status;
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	3710      	adds	r7, #16
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e084      	b.n	8004cd8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7fc f8fb 	bl	8000de4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c0e:	d902      	bls.n	8004c16 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	e002      	b.n	8004c1c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c24:	d007      	beq.n	8004c36 <HAL_SPI_Init+0x7a>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c46:	d903      	bls.n	8004c50 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c4e:	e002      	b.n	8004c56 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	ea42 0103 	orr.w	r1, r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f003 0204 	and.w	r2, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	431a      	orrs	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	ea42 0103 	orr.w	r1, r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	69da      	ldr	r2, [r3, #28]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cc6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b088      	sub	sp, #32
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	603b      	str	r3, [r7, #0]
 8004cec:	4613      	mov	r3, r2
 8004cee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_SPI_Transmit+0x22>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e150      	b.n	8004fa4 <HAL_SPI_Transmit+0x2c4>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d0a:	f7fc fc6f 	bl	80015ec <HAL_GetTick>
 8004d0e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d002      	beq.n	8004d26 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d24:	e135      	b.n	8004f92 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d002      	beq.n	8004d32 <HAL_SPI_Transmit+0x52>
 8004d2c:	88fb      	ldrh	r3, [r7, #6]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d36:	e12c      	b.n	8004f92 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	88fa      	ldrh	r2, [r7, #6]
 8004d50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	88fa      	ldrh	r2, [r7, #6]
 8004d56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d82:	d107      	bne.n	8004d94 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d007      	beq.n	8004db2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004dba:	d94b      	bls.n	8004e54 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d002      	beq.n	8004dca <HAL_SPI_Transmit+0xea>
 8004dc4:	8afb      	ldrh	r3, [r7, #22]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d13e      	bne.n	8004e48 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	881a      	ldrh	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	1c9a      	adds	r2, r3, #2
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dee:	e02b      	b.n	8004e48 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d112      	bne.n	8004e24 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	881a      	ldrh	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	1c9a      	adds	r2, r3, #2
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e22:	e011      	b.n	8004e48 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e24:	f7fc fbe2 	bl	80015ec <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d803      	bhi.n	8004e3c <HAL_SPI_Transmit+0x15c>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e3a:	d102      	bne.n	8004e42 <HAL_SPI_Transmit+0x162>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d102      	bne.n	8004e48 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e46:	e0a4      	b.n	8004f92 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1ce      	bne.n	8004df0 <HAL_SPI_Transmit+0x110>
 8004e52:	e07c      	b.n	8004f4e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_SPI_Transmit+0x182>
 8004e5c:	8afb      	ldrh	r3, [r7, #22]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d170      	bne.n	8004f44 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d912      	bls.n	8004e92 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e70:	881a      	ldrh	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	1c9a      	adds	r2, r3, #2
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b02      	subs	r3, #2
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e90:	e058      	b.n	8004f44 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	330c      	adds	r3, #12
 8004e9c:	7812      	ldrb	r2, [r2, #0]
 8004e9e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004eb8:	e044      	b.n	8004f44 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d12b      	bne.n	8004f20 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d912      	bls.n	8004ef8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee2:	1c9a      	adds	r2, r3, #2
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	3b02      	subs	r3, #2
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ef6:	e025      	b.n	8004f44 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	330c      	adds	r3, #12
 8004f02:	7812      	ldrb	r2, [r2, #0]
 8004f04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f1e:	e011      	b.n	8004f44 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f20:	f7fc fb64 	bl	80015ec <HAL_GetTick>
 8004f24:	4602      	mov	r2, r0
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d803      	bhi.n	8004f38 <HAL_SPI_Transmit+0x258>
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f36:	d102      	bne.n	8004f3e <HAL_SPI_Transmit+0x25e>
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f42:	e026      	b.n	8004f92 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1b5      	bne.n	8004eba <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 f901 	bl	800515a <SPI_EndRxTxTransaction>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2220      	movs	r2, #32
 8004f62:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10a      	bne.n	8004f82 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	613b      	str	r3, [r7, #16]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	613b      	str	r3, [r7, #16]
 8004f80:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	77fb      	strb	r3, [r7, #31]
 8004f8e:	e000      	b.n	8004f92 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004f90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004fa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3720      	adds	r7, #32
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	603b      	str	r3, [r7, #0]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fbc:	e04c      	b.n	8005058 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fc4:	d048      	beq.n	8005058 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fc6:	f7fc fb11 	bl	80015ec <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d902      	bls.n	8004fdc <SPI_WaitFlagStateUntilTimeout+0x30>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d13d      	bne.n	8005058 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff4:	d111      	bne.n	800501a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ffe:	d004      	beq.n	800500a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005008:	d107      	bne.n	800501a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005018:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005022:	d10f      	bne.n	8005044 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005032:	601a      	str	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005042:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	e00f      	b.n	8005078 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	429a      	cmp	r2, r3
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	429a      	cmp	r2, r3
 8005074:	d1a3      	bne.n	8004fbe <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3710      	adds	r7, #16
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}

08005080 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	607a      	str	r2, [r7, #4]
 800508c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800508e:	e057      	b.n	8005140 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005096:	d106      	bne.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050ac:	d048      	beq.n	8005140 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80050ae:	f7fc fa9d 	bl	80015ec <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d902      	bls.n	80050c4 <SPI_WaitFifoStateUntilTimeout+0x44>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d13d      	bne.n	8005140 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050dc:	d111      	bne.n	8005102 <SPI_WaitFifoStateUntilTimeout+0x82>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e6:	d004      	beq.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f0:	d107      	bne.n	8005102 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005100:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510a:	d10f      	bne.n	800512c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800512a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e008      	b.n	8005152 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689a      	ldr	r2, [r3, #8]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	d19f      	bne.n	8005090 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b086      	sub	sp, #24
 800515e:	af02      	add	r7, sp, #8
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	2200      	movs	r2, #0
 800516e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff ff84 	bl	8005080 <SPI_WaitFifoStateUntilTimeout>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d007      	beq.n	800518e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005182:	f043 0220 	orr.w	r2, r3, #32
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e027      	b.n	80051de <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2200      	movs	r2, #0
 8005196:	2180      	movs	r1, #128	; 0x80
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7ff ff07 	bl	8004fac <SPI_WaitFlagStateUntilTimeout>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051a8:	f043 0220 	orr.w	r2, r3, #32
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e014      	b.n	80051de <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	9300      	str	r3, [sp, #0]
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff ff5d 	bl	8005080 <SPI_WaitFifoStateUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051d0:	f043 0220 	orr.w	r2, r3, #32
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e000      	b.n	80051de <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b082      	sub	sp, #8
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e049      	b.n	800528c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f7fc f8e7 	bl	80013e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3304      	adds	r3, #4
 8005222:	4619      	mov	r1, r3
 8005224:	4610      	mov	r0, r2
 8005226:	f000 fc23 	bl	8005a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d001      	beq.n	80052ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e019      	b.n	80052e0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689a      	ldr	r2, [r3, #8]
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <HAL_TIM_Base_Start+0x58>)
 80052bc:	4013      	ands	r3, r2
 80052be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2b06      	cmp	r3, #6
 80052c4:	d00b      	beq.n	80052de <HAL_TIM_Base_Start+0x4a>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052cc:	d007      	beq.n	80052de <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f042 0201 	orr.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	00010007 	.word	0x00010007

080052f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d001      	beq.n	8005308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e021      	b.n	800534c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f042 0201 	orr.w	r2, r2, #1
 800531e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <HAL_TIM_Base_Start_IT+0x68>)
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b06      	cmp	r3, #6
 8005330:	d00b      	beq.n	800534a <HAL_TIM_Base_Start_IT+0x5a>
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005338:	d007      	beq.n	800534a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f042 0201 	orr.w	r2, r2, #1
 8005348:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr
 8005358:	00010007 	.word	0x00010007

0800535c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b086      	sub	sp, #24
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d101      	bne.n	8005370 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e097      	b.n	80054a0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d106      	bne.n	800538a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f7fb ffdf 	bl	8001348 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2202      	movs	r2, #2
 800538e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80053a0:	f023 0307 	bic.w	r3, r3, #7
 80053a4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681a      	ldr	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4610      	mov	r0, r2
 80053b2:	f000 fb5d 	bl	8005a70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053de:	f023 0303 	bic.w	r3, r3, #3
 80053e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	4313      	orrs	r3, r2
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053fc:	f023 030c 	bic.w	r3, r3, #12
 8005400:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005408:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800540c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	021b      	lsls	r3, r3, #8
 8005418:	4313      	orrs	r3, r2
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	4313      	orrs	r3, r2
 800541e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	011a      	lsls	r2, r3, #4
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	031b      	lsls	r3, r3, #12
 800542c:	4313      	orrs	r3, r2
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	4313      	orrs	r3, r2
 8005432:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800543a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685a      	ldr	r2, [r3, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	011b      	lsls	r3, r3, #4
 800544e:	4313      	orrs	r3, r2
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d122      	bne.n	8005504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0302 	and.w	r3, r3, #2
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d11b      	bne.n	8005504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f06f 0202 	mvn.w	r2, #2
 80054d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d003      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f000 faa2 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80054f0:	e005      	b.n	80054fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa94 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 faa5 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b04      	cmp	r3, #4
 8005510:	d122      	bne.n	8005558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b04      	cmp	r3, #4
 800551e:	d11b      	bne.n	8005558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f06f 0204 	mvn.w	r2, #4
 8005528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 fa78 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005544:	e005      	b.n	8005552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fa6a 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f000 fa7b 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b08      	cmp	r3, #8
 8005564:	d122      	bne.n	80055ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0308 	and.w	r3, r3, #8
 8005570:	2b08      	cmp	r3, #8
 8005572:	d11b      	bne.n	80055ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f06f 0208 	mvn.w	r2, #8
 800557c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2204      	movs	r2, #4
 8005582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	f003 0303 	and.w	r3, r3, #3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 fa4e 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 8005598:	e005      	b.n	80055a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 fa40 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 fa51 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f003 0310 	and.w	r3, r3, #16
 80055b6:	2b10      	cmp	r3, #16
 80055b8:	d122      	bne.n	8005600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0310 	and.w	r3, r3, #16
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d11b      	bne.n	8005600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f06f 0210 	mvn.w	r2, #16
 80055d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2208      	movs	r2, #8
 80055d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fa24 	bl	8005a34 <HAL_TIM_IC_CaptureCallback>
 80055ec:	e005      	b.n	80055fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa16 	bl	8005a20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f000 fa27 	bl	8005a48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b01      	cmp	r3, #1
 800560c:	d10e      	bne.n	800562c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	2b01      	cmp	r3, #1
 800561a:	d107      	bne.n	800562c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f06f 0201 	mvn.w	r2, #1
 8005624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f9f0 	bl	8005a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005636:	2b80      	cmp	r3, #128	; 0x80
 8005638:	d10e      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d107      	bne.n	8005658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fd5e 	bl	8006114 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005666:	d10e      	bne.n	8005686 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005672:	2b80      	cmp	r3, #128	; 0x80
 8005674:	d107      	bne.n	8005686 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800567e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 fd51 	bl	8006128 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d10e      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b40      	cmp	r3, #64	; 0x40
 80056a0:	d107      	bne.n	80056b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80056aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 f9d5 	bl	8005a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d10e      	bne.n	80056de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0320 	and.w	r3, r3, #32
 80056ca:	2b20      	cmp	r3, #32
 80056cc:	d107      	bne.n	80056de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f06f 0220 	mvn.w	r2, #32
 80056d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fd11 	bl	8006100 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ec:	d10f      	bne.n	800570e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056fc:	d107      	bne.n	800570e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fd17 	bl	800613c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800571c:	d10f      	bne.n	800573e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005728:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800572c:	d107      	bne.n	800573e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fd09 	bl	8006150 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691b      	ldr	r3, [r3, #16]
 8005744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574c:	d10f      	bne.n	800576e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005758:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800575c:	d107      	bne.n	800576e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 fcfb 	bl	8006164 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800577c:	d10f      	bne.n	800579e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005788:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800578c:	d107      	bne.n	800579e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005796:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fced 	bl	8006178 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800579e:	bf00      	nop
 80057a0:	3708      	adds	r7, #8
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
	...

080057a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_TIM_ConfigClockSource+0x18>
 80057bc:	2302      	movs	r3, #2
 80057be:	e0d2      	b.n	8005966 <HAL_TIM_ConfigClockSource+0x1be>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80057de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fc:	f000 80a9 	beq.w	8005952 <HAL_TIM_ConfigClockSource+0x1aa>
 8005800:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005804:	d81a      	bhi.n	800583c <HAL_TIM_ConfigClockSource+0x94>
 8005806:	2b30      	cmp	r3, #48	; 0x30
 8005808:	f000 809a 	beq.w	8005940 <HAL_TIM_ConfigClockSource+0x198>
 800580c:	2b30      	cmp	r3, #48	; 0x30
 800580e:	d809      	bhi.n	8005824 <HAL_TIM_ConfigClockSource+0x7c>
 8005810:	2b10      	cmp	r3, #16
 8005812:	f000 8095 	beq.w	8005940 <HAL_TIM_ConfigClockSource+0x198>
 8005816:	2b20      	cmp	r3, #32
 8005818:	f000 8092 	beq.w	8005940 <HAL_TIM_ConfigClockSource+0x198>
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 808f 	beq.w	8005940 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005822:	e097      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005824:	2b50      	cmp	r3, #80	; 0x50
 8005826:	d05b      	beq.n	80058e0 <HAL_TIM_ConfigClockSource+0x138>
 8005828:	2b50      	cmp	r3, #80	; 0x50
 800582a:	d802      	bhi.n	8005832 <HAL_TIM_ConfigClockSource+0x8a>
 800582c:	2b40      	cmp	r3, #64	; 0x40
 800582e:	d077      	beq.n	8005920 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005830:	e090      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005832:	2b60      	cmp	r3, #96	; 0x60
 8005834:	d064      	beq.n	8005900 <HAL_TIM_ConfigClockSource+0x158>
 8005836:	2b70      	cmp	r3, #112	; 0x70
 8005838:	d028      	beq.n	800588c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800583a:	e08b      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800583c:	4a4c      	ldr	r2, [pc, #304]	; (8005970 <HAL_TIM_ConfigClockSource+0x1c8>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d07e      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x198>
 8005842:	4a4b      	ldr	r2, [pc, #300]	; (8005970 <HAL_TIM_ConfigClockSource+0x1c8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d810      	bhi.n	800586a <HAL_TIM_ConfigClockSource+0xc2>
 8005848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800584c:	d078      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x198>
 800584e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005852:	d803      	bhi.n	800585c <HAL_TIM_ConfigClockSource+0xb4>
 8005854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005858:	d02f      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x112>
      break;
 800585a:	e07b      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800585c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005860:	d06e      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x198>
 8005862:	4a44      	ldr	r2, [pc, #272]	; (8005974 <HAL_TIM_ConfigClockSource+0x1cc>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d06b      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8005868:	e074      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800586a:	4a43      	ldr	r2, [pc, #268]	; (8005978 <HAL_TIM_ConfigClockSource+0x1d0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d067      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x198>
 8005870:	4a41      	ldr	r2, [pc, #260]	; (8005978 <HAL_TIM_ConfigClockSource+0x1d0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d803      	bhi.n	800587e <HAL_TIM_ConfigClockSource+0xd6>
 8005876:	4a41      	ldr	r2, [pc, #260]	; (800597c <HAL_TIM_ConfigClockSource+0x1d4>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d061      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800587c:	e06a      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800587e:	4a40      	ldr	r2, [pc, #256]	; (8005980 <HAL_TIM_ConfigClockSource+0x1d8>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d05d      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x198>
 8005884:	4a3f      	ldr	r2, [pc, #252]	; (8005984 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d05a      	beq.n	8005940 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800588a:	e063      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	6899      	ldr	r1, [r3, #8]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	f000 fac8 	bl	8005e30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	609a      	str	r2, [r3, #8]
      break;
 80058b8:	e04c      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6899      	ldr	r1, [r3, #8]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f000 fab1 	bl	8005e30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058dc:	609a      	str	r2, [r3, #8]
      break;
 80058de:	e039      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6859      	ldr	r1, [r3, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	461a      	mov	r2, r3
 80058ee:	f000 fa23 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2150      	movs	r1, #80	; 0x50
 80058f8:	4618      	mov	r0, r3
 80058fa:	f000 fa7c 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 80058fe:	e029      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	6859      	ldr	r1, [r3, #4]
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	461a      	mov	r2, r3
 800590e:	f000 fa42 	bl	8005d96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2160      	movs	r1, #96	; 0x60
 8005918:	4618      	mov	r0, r3
 800591a:	f000 fa6c 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 800591e:	e019      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	461a      	mov	r2, r3
 800592e:	f000 fa03 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	4618      	mov	r0, r3
 800593a:	f000 fa5c 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 800593e:	e009      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4619      	mov	r1, r3
 800594a:	4610      	mov	r0, r2
 800594c:	f000 fa53 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 8005950:	e000      	b.n	8005954 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8005952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	00100030 	.word	0x00100030
 8005974:	00100020 	.word	0x00100020
 8005978:	00100050 	.word	0x00100050
 800597c:	00100040 	.word	0x00100040
 8005980:	00100060 	.word	0x00100060
 8005984:	00100070 	.word	0x00100070

08005988 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d101      	bne.n	80059a0 <HAL_TIM_SlaveConfigSynchro+0x18>
 800599c:	2302      	movs	r3, #2
 800599e:	e031      	b.n	8005a04 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80059b0:	6839      	ldr	r1, [r7, #0]
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f000 f904 	bl	8005bc0 <TIM_SlaveTimer_SetConfig>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d009      	beq.n	80059d2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e018      	b.n	8005a04 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059e0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059f0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3708      	adds	r7, #8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a50:	bf00      	nop
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a64:	bf00      	nop
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6e:	4770      	bx	lr

08005a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a46      	ldr	r2, [pc, #280]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d017      	beq.n	8005ab8 <TIM_Base_SetConfig+0x48>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a8e:	d013      	beq.n	8005ab8 <TIM_Base_SetConfig+0x48>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a43      	ldr	r2, [pc, #268]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d00f      	beq.n	8005ab8 <TIM_Base_SetConfig+0x48>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a42      	ldr	r2, [pc, #264]	; (8005ba4 <TIM_Base_SetConfig+0x134>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00b      	beq.n	8005ab8 <TIM_Base_SetConfig+0x48>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a41      	ldr	r2, [pc, #260]	; (8005ba8 <TIM_Base_SetConfig+0x138>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d007      	beq.n	8005ab8 <TIM_Base_SetConfig+0x48>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a40      	ldr	r2, [pc, #256]	; (8005bac <TIM_Base_SetConfig+0x13c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d003      	beq.n	8005ab8 <TIM_Base_SetConfig+0x48>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a3f      	ldr	r2, [pc, #252]	; (8005bb0 <TIM_Base_SetConfig+0x140>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d108      	bne.n	8005aca <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005abe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a33      	ldr	r2, [pc, #204]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d023      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad8:	d01f      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a30      	ldr	r2, [pc, #192]	; (8005ba0 <TIM_Base_SetConfig+0x130>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d01b      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2f      	ldr	r2, [pc, #188]	; (8005ba4 <TIM_Base_SetConfig+0x134>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d017      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2e      	ldr	r2, [pc, #184]	; (8005ba8 <TIM_Base_SetConfig+0x138>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d013      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2d      	ldr	r2, [pc, #180]	; (8005bac <TIM_Base_SetConfig+0x13c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d00f      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2d      	ldr	r2, [pc, #180]	; (8005bb4 <TIM_Base_SetConfig+0x144>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d00b      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a2c      	ldr	r2, [pc, #176]	; (8005bb8 <TIM_Base_SetConfig+0x148>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d007      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4a2b      	ldr	r2, [pc, #172]	; (8005bbc <TIM_Base_SetConfig+0x14c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d003      	beq.n	8005b1a <TIM_Base_SetConfig+0xaa>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <TIM_Base_SetConfig+0x140>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d108      	bne.n	8005b2c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	695b      	ldr	r3, [r3, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a12      	ldr	r2, [pc, #72]	; (8005b9c <TIM_Base_SetConfig+0x12c>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <TIM_Base_SetConfig+0x110>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a14      	ldr	r2, [pc, #80]	; (8005bac <TIM_Base_SetConfig+0x13c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d00f      	beq.n	8005b80 <TIM_Base_SetConfig+0x110>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a14      	ldr	r2, [pc, #80]	; (8005bb4 <TIM_Base_SetConfig+0x144>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d00b      	beq.n	8005b80 <TIM_Base_SetConfig+0x110>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a13      	ldr	r2, [pc, #76]	; (8005bb8 <TIM_Base_SetConfig+0x148>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d007      	beq.n	8005b80 <TIM_Base_SetConfig+0x110>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a12      	ldr	r2, [pc, #72]	; (8005bbc <TIM_Base_SetConfig+0x14c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_Base_SetConfig+0x110>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a0d      	ldr	r2, [pc, #52]	; (8005bb0 <TIM_Base_SetConfig+0x140>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d103      	bne.n	8005b88 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	615a      	str	r2, [r3, #20]
}
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	40000400 	.word	0x40000400
 8005ba4:	40000800 	.word	0x40000800
 8005ba8:	40000c00 	.word	0x40000c00
 8005bac:	40013400 	.word	0x40013400
 8005bb0:	40015000 	.word	0x40015000
 8005bb4:	40014000 	.word	0x40014000
 8005bb8:	40014400 	.word	0x40014400
 8005bbc:	40014800 	.word	0x40014800

08005bc0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b086      	sub	sp, #24
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005bd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bdc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bee:	f023 0307 	bic.w	r3, r3, #7
 8005bf2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	2b70      	cmp	r3, #112	; 0x70
 8005c0c:	d034      	beq.n	8005c78 <TIM_SlaveTimer_SetConfig+0xb8>
 8005c0e:	2b70      	cmp	r3, #112	; 0x70
 8005c10:	d811      	bhi.n	8005c36 <TIM_SlaveTimer_SetConfig+0x76>
 8005c12:	2b30      	cmp	r3, #48	; 0x30
 8005c14:	d07d      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
 8005c16:	2b30      	cmp	r3, #48	; 0x30
 8005c18:	d806      	bhi.n	8005c28 <TIM_SlaveTimer_SetConfig+0x68>
 8005c1a:	2b10      	cmp	r3, #16
 8005c1c:	d079      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
 8005c1e:	2b20      	cmp	r3, #32
 8005c20:	d077      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d075      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8005c26:	e075      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005c28:	2b50      	cmp	r3, #80	; 0x50
 8005c2a:	d05e      	beq.n	8005cea <TIM_SlaveTimer_SetConfig+0x12a>
 8005c2c:	2b60      	cmp	r3, #96	; 0x60
 8005c2e:	d066      	beq.n	8005cfe <TIM_SlaveTimer_SetConfig+0x13e>
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d02c      	beq.n	8005c8e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8005c34:	e06e      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005c36:	4a3a      	ldr	r2, [pc, #232]	; (8005d20 <TIM_SlaveTimer_SetConfig+0x160>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d06a      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
 8005c3c:	4a38      	ldr	r2, [pc, #224]	; (8005d20 <TIM_SlaveTimer_SetConfig+0x160>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d809      	bhi.n	8005c56 <TIM_SlaveTimer_SetConfig+0x96>
 8005c42:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c46:	d064      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
 8005c48:	4a36      	ldr	r2, [pc, #216]	; (8005d24 <TIM_SlaveTimer_SetConfig+0x164>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d061      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
 8005c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c52:	d05e      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005c54:	e05e      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005c56:	4a34      	ldr	r2, [pc, #208]	; (8005d28 <TIM_SlaveTimer_SetConfig+0x168>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d05a      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
 8005c5c:	4a32      	ldr	r2, [pc, #200]	; (8005d28 <TIM_SlaveTimer_SetConfig+0x168>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d803      	bhi.n	8005c6a <TIM_SlaveTimer_SetConfig+0xaa>
 8005c62:	4a32      	ldr	r2, [pc, #200]	; (8005d2c <TIM_SlaveTimer_SetConfig+0x16c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d054      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005c68:	e054      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005c6a:	4a31      	ldr	r2, [pc, #196]	; (8005d30 <TIM_SlaveTimer_SetConfig+0x170>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d050      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
 8005c70:	4a30      	ldr	r2, [pc, #192]	; (8005d34 <TIM_SlaveTimer_SetConfig+0x174>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d04d      	beq.n	8005d12 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005c76:	e04d      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68d9      	ldr	r1, [r3, #12]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	689a      	ldr	r2, [r3, #8]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	f000 f8d2 	bl	8005e30 <TIM_ETR_SetConfig>
      break;
 8005c8c:	e042      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b05      	cmp	r3, #5
 8005c94:	d004      	beq.n	8005ca0 <TIM_SlaveTimer_SetConfig+0xe0>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005c9e:	d101      	bne.n	8005ca4 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e038      	b.n	8005d16 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6a1a      	ldr	r2, [r3, #32]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0201 	bic.w	r2, r2, #1
 8005cba:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cca:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	621a      	str	r2, [r3, #32]
      break;
 8005ce8:	e014      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6899      	ldr	r1, [r3, #8]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f000 f81e 	bl	8005d38 <TIM_TI1_ConfigInputStage>
      break;
 8005cfc:	e00a      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6818      	ldr	r0, [r3, #0]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	6899      	ldr	r1, [r3, #8]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	f000 f843 	bl	8005d96 <TIM_TI2_ConfigInputStage>
      break;
 8005d10:	e000      	b.n	8005d14 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8005d12:	bf00      	nop
  }
  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3718      	adds	r7, #24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	00100030 	.word	0x00100030
 8005d24:	00100020 	.word	0x00100020
 8005d28:	00100050 	.word	0x00100050
 8005d2c:	00100040 	.word	0x00100040
 8005d30:	00100060 	.word	0x00100060
 8005d34:	00100070 	.word	0x00100070

08005d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0201 	bic.w	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f023 030a 	bic.w	r3, r3, #10
 8005d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0210 	bic.w	r2, r3, #16
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f043 0307 	orr.w	r3, r3, #7
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68fa      	ldr	r2, [r7, #12]
 8005e22:	609a      	str	r2, [r3, #8]
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	021a      	lsls	r2, r3, #8
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	431a      	orrs	r2, r3
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	609a      	str	r2, [r3, #8]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e074      	b.n	8005f72 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a34      	ldr	r2, [pc, #208]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d009      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a33      	ldr	r2, [pc, #204]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d004      	beq.n	8005ec6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a31      	ldr	r2, [pc, #196]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d108      	bne.n	8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ecc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68fa      	ldr	r2, [r7, #12]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a21      	ldr	r2, [pc, #132]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d022      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f08:	d01d      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1f      	ldr	r2, [pc, #124]	; (8005f8c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d018      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1d      	ldr	r2, [pc, #116]	; (8005f90 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d013      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1c      	ldr	r2, [pc, #112]	; (8005f94 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00e      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d009      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a11      	ldr	r2, [pc, #68]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d10c      	bne.n	8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40012c00 	.word	0x40012c00
 8005f84:	40013400 	.word	0x40013400
 8005f88:	40015000 	.word	0x40015000
 8005f8c:	40000400 	.word	0x40000400
 8005f90:	40000800 	.word	0x40000800
 8005f94:	40000c00 	.word	0x40000c00
 8005f98:	40014000 	.word	0x40014000

08005f9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e096      	b.n	80060e6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	695b      	ldr	r3, [r3, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	041b      	lsls	r3, r3, #16
 800602e:	4313      	orrs	r3, r2
 8006030:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a2f      	ldr	r2, [pc, #188]	; (80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d009      	beq.n	8006050 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a2d      	ldr	r2, [pc, #180]	; (80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d004      	beq.n	8006050 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a2c      	ldr	r2, [pc, #176]	; (80060fc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d106      	bne.n	800605e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	4313      	orrs	r3, r2
 800605c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d009      	beq.n	800607c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a22      	ldr	r2, [pc, #136]	; (80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d004      	beq.n	800607c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a21      	ldr	r2, [pc, #132]	; (80060fc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d12b      	bne.n	80060d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006086:	051b      	lsls	r3, r3, #20
 8006088:	4313      	orrs	r3, r2
 800608a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	4313      	orrs	r3, r2
 8006098:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a11      	ldr	r2, [pc, #68]	; (80060f4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d009      	beq.n	80060c6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a10      	ldr	r2, [pc, #64]	; (80060f8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d004      	beq.n	80060c6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a0e      	ldr	r2, [pc, #56]	; (80060fc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d106      	bne.n	80060d4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	4313      	orrs	r3, r2
 80060d2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	40012c00 	.word	0x40012c00
 80060f8:	40013400 	.word	0x40013400
 80060fc:	40015000 	.word	0x40015000

08006100 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006178:	b480      	push	{r7}
 800617a:	b083      	sub	sp, #12
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800618c:	b590      	push	{r4, r7, lr}
 800618e:	b08b      	sub	sp, #44	; 0x2c
 8006190:	af00      	add	r7, sp, #0
 8006192:	4604      	mov	r4, r0
 8006194:	4608      	mov	r0, r1
 8006196:	4611      	mov	r1, r2
 8006198:	461a      	mov	r2, r3
 800619a:	4623      	mov	r3, r4
 800619c:	80fb      	strh	r3, [r7, #6]
 800619e:	4603      	mov	r3, r0
 80061a0:	80bb      	strh	r3, [r7, #4]
 80061a2:	460b      	mov	r3, r1
 80061a4:	807b      	strh	r3, [r7, #2]
 80061a6:	4613      	mov	r3, r2
 80061a8:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80061aa:	887b      	ldrh	r3, [r7, #2]
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80061ae:	2300      	movs	r3, #0
 80061b0:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80061b2:	887b      	ldrh	r3, [r7, #2]
 80061b4:	005b      	lsls	r3, r3, #1
 80061b6:	f1c3 0301 	rsb	r3, r3, #1
 80061ba:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80061bc:	2300      	movs	r3, #0
 80061be:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80061c0:	2300      	movs	r3, #0
 80061c2:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80061c4:	e061      	b.n	800628a <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80061c6:	88fa      	ldrh	r2, [r7, #6]
 80061c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	613b      	str	r3, [r7, #16]
 80061ce:	e018      	b.n	8006202 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	b298      	uxth	r0, r3
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	88bb      	ldrh	r3, [r7, #4]
 80061da:	4413      	add	r3, r2
 80061dc:	b29b      	uxth	r3, r3
 80061de:	883a      	ldrh	r2, [r7, #0]
 80061e0:	4619      	mov	r1, r3
 80061e2:	f000 fc0b 	bl	80069fc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	b298      	uxth	r0, r3
 80061ea:	6a3b      	ldr	r3, [r7, #32]
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	88ba      	ldrh	r2, [r7, #4]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	883a      	ldrh	r2, [r7, #0]
 80061f6:	4619      	mov	r1, r3
 80061f8:	f000 fc00 	bl	80069fc <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	3301      	adds	r3, #1
 8006200:	613b      	str	r3, [r7, #16]
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006206:	4413      	add	r3, r2
 8006208:	693a      	ldr	r2, [r7, #16]
 800620a:	429a      	cmp	r2, r3
 800620c:	dde0      	ble.n	80061d0 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800620e:	88fa      	ldrh	r2, [r7, #6]
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e018      	b.n	800624a <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	b298      	uxth	r0, r3
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	b29a      	uxth	r2, r3
 8006220:	88bb      	ldrh	r3, [r7, #4]
 8006222:	4413      	add	r3, r2
 8006224:	b29b      	uxth	r3, r3
 8006226:	883a      	ldrh	r2, [r7, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	f000 fbe7 	bl	80069fc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	b298      	uxth	r0, r3
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	b29b      	uxth	r3, r3
 8006236:	88ba      	ldrh	r2, [r7, #4]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	b29b      	uxth	r3, r3
 800623c:	883a      	ldrh	r2, [r7, #0]
 800623e:	4619      	mov	r1, r3
 8006240:	f000 fbdc 	bl	80069fc <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]
 800624a:	88fa      	ldrh	r2, [r7, #6]
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	4413      	add	r3, r2
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	429a      	cmp	r2, r3
 8006254:	dde0      	ble.n	8006218 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	3301      	adds	r3, #1
 800625a:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	4413      	add	r3, r2
 8006262:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	3302      	adds	r3, #2
 8006268:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	005a      	lsls	r2, r3, #1
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	2b00      	cmp	r3, #0
 8006274:	dd09      	ble.n	800628a <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8006276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006278:	3b01      	subs	r3, #1
 800627a:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3302      	adds	r3, #2
 8006288:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800628a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	429a      	cmp	r2, r3
 8006290:	da99      	bge.n	80061c6 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8006292:	bf00      	nop
 8006294:	372c      	adds	r7, #44	; 0x2c
 8006296:	46bd      	mov	sp, r7
 8006298:	bd90      	pop	{r4, r7, pc}
	...

0800629c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800629c:	b590      	push	{r4, r7, lr}
 800629e:	b089      	sub	sp, #36	; 0x24
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	4604      	mov	r4, r0
 80062a4:	4608      	mov	r0, r1
 80062a6:	4611      	mov	r1, r2
 80062a8:	461a      	mov	r2, r3
 80062aa:	4623      	mov	r3, r4
 80062ac:	71fb      	strb	r3, [r7, #7]
 80062ae:	4603      	mov	r3, r0
 80062b0:	71bb      	strb	r3, [r7, #6]
 80062b2:	460b      	mov	r3, r1
 80062b4:	717b      	strb	r3, [r7, #5]
 80062b6:	4613      	mov	r3, r2
 80062b8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80062ba:	79fb      	ldrb	r3, [r7, #7]
 80062bc:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80062be:	7dfb      	ldrb	r3, [r7, #23]
 80062c0:	2b1f      	cmp	r3, #31
 80062c2:	d802      	bhi.n	80062ca <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80062c4:	2300      	movs	r3, #0
 80062c6:	71fb      	strb	r3, [r7, #7]
 80062c8:	e002      	b.n	80062d0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	3b20      	subs	r3, #32
 80062ce:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80062d0:	2300      	movs	r3, #0
 80062d2:	753b      	strb	r3, [r7, #20]
 80062d4:	e012      	b.n	80062fc <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80062d6:	7dfa      	ldrb	r2, [r7, #23]
 80062d8:	7d38      	ldrb	r0, [r7, #20]
 80062da:	7d39      	ldrb	r1, [r7, #20]
 80062dc:	4c3b      	ldr	r4, [pc, #236]	; (80063cc <ILI9341_Draw_Char+0x130>)
 80062de:	4613      	mov	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	4413      	add	r3, r2
 80062e4:	005b      	lsls	r3, r3, #1
 80062e6:	4423      	add	r3, r4
 80062e8:	4403      	add	r3, r0
 80062ea:	781a      	ldrb	r2, [r3, #0]
 80062ec:	f107 0318 	add.w	r3, r7, #24
 80062f0:	440b      	add	r3, r1
 80062f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80062f6:	7d3b      	ldrb	r3, [r7, #20]
 80062f8:	3301      	adds	r3, #1
 80062fa:	753b      	strb	r3, [r7, #20]
 80062fc:	7d3b      	ldrb	r3, [r7, #20]
 80062fe:	2b05      	cmp	r3, #5
 8006300:	d9e9      	bls.n	80062d6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8006302:	79bb      	ldrb	r3, [r7, #6]
 8006304:	b298      	uxth	r0, r3
 8006306:	797b      	ldrb	r3, [r7, #5]
 8006308:	b299      	uxth	r1, r3
 800630a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800630c:	461a      	mov	r2, r3
 800630e:	0052      	lsls	r2, r2, #1
 8006310:	4413      	add	r3, r2
 8006312:	005b      	lsls	r3, r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	b29c      	uxth	r4, r3
 800631c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	4623      	mov	r3, r4
 8006322:	f000 fc33 	bl	8006b8c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006326:	2300      	movs	r3, #0
 8006328:	757b      	strb	r3, [r7, #21]
 800632a:	e048      	b.n	80063be <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800632c:	2300      	movs	r3, #0
 800632e:	75bb      	strb	r3, [r7, #22]
 8006330:	e03f      	b.n	80063b2 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8006332:	7d7b      	ldrb	r3, [r7, #21]
 8006334:	f107 0218 	add.w	r2, r7, #24
 8006338:	4413      	add	r3, r2
 800633a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800633e:	461a      	mov	r2, r3
 8006340:	7dbb      	ldrb	r3, [r7, #22]
 8006342:	fa42 f303 	asr.w	r3, r2, r3
 8006346:	f003 0301 	and.w	r3, r3, #1
 800634a:	2b00      	cmp	r3, #0
 800634c:	d02e      	beq.n	80063ac <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 800634e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006350:	2b01      	cmp	r3, #1
 8006352:	d110      	bne.n	8006376 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8006354:	79bb      	ldrb	r3, [r7, #6]
 8006356:	b29a      	uxth	r2, r3
 8006358:	7d7b      	ldrb	r3, [r7, #21]
 800635a:	b29b      	uxth	r3, r3
 800635c:	4413      	add	r3, r2
 800635e:	b298      	uxth	r0, r3
 8006360:	797b      	ldrb	r3, [r7, #5]
 8006362:	b29a      	uxth	r2, r3
 8006364:	7dbb      	ldrb	r3, [r7, #22]
 8006366:	b29b      	uxth	r3, r3
 8006368:	4413      	add	r3, r2
 800636a:	b29b      	uxth	r3, r3
 800636c:	887a      	ldrh	r2, [r7, #2]
 800636e:	4619      	mov	r1, r3
 8006370:	f000 fb44 	bl	80069fc <ILI9341_Draw_Pixel>
 8006374:	e01a      	b.n	80063ac <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8006376:	79bb      	ldrb	r3, [r7, #6]
 8006378:	b29a      	uxth	r2, r3
 800637a:	7d7b      	ldrb	r3, [r7, #21]
 800637c:	b29b      	uxth	r3, r3
 800637e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006380:	fb11 f303 	smulbb	r3, r1, r3
 8006384:	b29b      	uxth	r3, r3
 8006386:	4413      	add	r3, r2
 8006388:	b298      	uxth	r0, r3
 800638a:	797b      	ldrb	r3, [r7, #5]
 800638c:	b29a      	uxth	r2, r3
 800638e:	7dbb      	ldrb	r3, [r7, #22]
 8006390:	b29b      	uxth	r3, r3
 8006392:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006394:	fb11 f303 	smulbb	r3, r1, r3
 8006398:	b29b      	uxth	r3, r3
 800639a:	4413      	add	r3, r2
 800639c:	b299      	uxth	r1, r3
 800639e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80063a0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80063a2:	887b      	ldrh	r3, [r7, #2]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4623      	mov	r3, r4
 80063a8:	f000 fbf0 	bl	8006b8c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80063ac:	7dbb      	ldrb	r3, [r7, #22]
 80063ae:	3301      	adds	r3, #1
 80063b0:	75bb      	strb	r3, [r7, #22]
 80063b2:	7dbb      	ldrb	r3, [r7, #22]
 80063b4:	2b07      	cmp	r3, #7
 80063b6:	d9bc      	bls.n	8006332 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80063b8:	7d7b      	ldrb	r3, [r7, #21]
 80063ba:	3301      	adds	r3, #1
 80063bc:	757b      	strb	r3, [r7, #21]
 80063be:	7d7b      	ldrb	r3, [r7, #21]
 80063c0:	2b05      	cmp	r3, #5
 80063c2:	d9b3      	bls.n	800632c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80063c4:	bf00      	nop
 80063c6:	371c      	adds	r7, #28
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd90      	pop	{r4, r7, pc}
 80063cc:	08007ba8 	.word	0x08007ba8

080063d0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80063d0:	b590      	push	{r4, r7, lr}
 80063d2:	b085      	sub	sp, #20
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	4608      	mov	r0, r1
 80063da:	4611      	mov	r1, r2
 80063dc:	461a      	mov	r2, r3
 80063de:	4603      	mov	r3, r0
 80063e0:	70fb      	strb	r3, [r7, #3]
 80063e2:	460b      	mov	r3, r1
 80063e4:	70bb      	strb	r3, [r7, #2]
 80063e6:	4613      	mov	r3, r2
 80063e8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80063ea:	e017      	b.n	800641c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	1c5a      	adds	r2, r3, #1
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	7818      	ldrb	r0, [r3, #0]
 80063f4:	883c      	ldrh	r4, [r7, #0]
 80063f6:	78ba      	ldrb	r2, [r7, #2]
 80063f8:	78f9      	ldrb	r1, [r7, #3]
 80063fa:	8bbb      	ldrh	r3, [r7, #28]
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	8b3b      	ldrh	r3, [r7, #24]
 8006400:	9300      	str	r3, [sp, #0]
 8006402:	4623      	mov	r3, r4
 8006404:	f7ff ff4a 	bl	800629c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8006408:	8b3b      	ldrh	r3, [r7, #24]
 800640a:	b2db      	uxtb	r3, r3
 800640c:	461a      	mov	r2, r3
 800640e:	0052      	lsls	r2, r2, #1
 8006410:	4413      	add	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	b2da      	uxtb	r2, r3
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	4413      	add	r3, r2
 800641a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e3      	bne.n	80063ec <ILI9341_Draw_Text+0x1c>
    }
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	bd90      	pop	{r4, r7, pc}

0800642c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{																							//GPIO INIT
 800642c:	b580      	push	{r7, lr}
 800642e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8006430:	2200      	movs	r2, #0
 8006432:	2180      	movs	r1, #128	; 0x80
 8006434:	4802      	ldr	r0, [pc, #8]	; (8006440 <ILI9341_SPI_Init+0x14>)
 8006436:	f7fd fb13 	bl	8003a60 <HAL_GPIO_WritePin>
}
 800643a:	bf00      	nop
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	48000400 	.word	0x48000400

08006444 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	4603      	mov	r3, r0
 800644c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800644e:	1df9      	adds	r1, r7, #7
 8006450:	2301      	movs	r3, #1
 8006452:	2201      	movs	r2, #1
 8006454:	4803      	ldr	r0, [pc, #12]	; (8006464 <ILI9341_SPI_Send+0x20>)
 8006456:	f7fe fc43 	bl	8004ce0 <HAL_SPI_Transmit>
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000238 	.word	0x20000238

08006468 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006472:	2200      	movs	r2, #0
 8006474:	2180      	movs	r1, #128	; 0x80
 8006476:	480a      	ldr	r0, [pc, #40]	; (80064a0 <ILI9341_Write_Command+0x38>)
 8006478:	f7fd faf2 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800647c:	2200      	movs	r2, #0
 800647e:	2140      	movs	r1, #64	; 0x40
 8006480:	4807      	ldr	r0, [pc, #28]	; (80064a0 <ILI9341_Write_Command+0x38>)
 8006482:	f7fd faed 	bl	8003a60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8006486:	79fb      	ldrb	r3, [r7, #7]
 8006488:	4618      	mov	r0, r3
 800648a:	f7ff ffdb 	bl	8006444 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800648e:	2201      	movs	r2, #1
 8006490:	2180      	movs	r1, #128	; 0x80
 8006492:	4803      	ldr	r0, [pc, #12]	; (80064a0 <ILI9341_Write_Command+0x38>)
 8006494:	f7fd fae4 	bl	8003a60 <HAL_GPIO_WritePin>
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	48000400 	.word	0x48000400

080064a4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80064ae:	2201      	movs	r2, #1
 80064b0:	2140      	movs	r1, #64	; 0x40
 80064b2:	480a      	ldr	r0, [pc, #40]	; (80064dc <ILI9341_Write_Data+0x38>)
 80064b4:	f7fd fad4 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80064b8:	2200      	movs	r2, #0
 80064ba:	2180      	movs	r1, #128	; 0x80
 80064bc:	4807      	ldr	r0, [pc, #28]	; (80064dc <ILI9341_Write_Data+0x38>)
 80064be:	f7fd facf 	bl	8003a60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80064c2:	79fb      	ldrb	r3, [r7, #7]
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7ff ffbd 	bl	8006444 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80064ca:	2201      	movs	r2, #1
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	4803      	ldr	r0, [pc, #12]	; (80064dc <ILI9341_Write_Data+0x38>)
 80064d0:	f7fd fac6 	bl	8003a60 <HAL_GPIO_WritePin>
}
 80064d4:	bf00      	nop
 80064d6:	3708      	adds	r7, #8
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}
 80064dc:	48000400 	.word	0x48000400

080064e0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80064e0:	b590      	push	{r4, r7, lr}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	4611      	mov	r1, r2
 80064ec:	461a      	mov	r2, r3
 80064ee:	4623      	mov	r3, r4
 80064f0:	80fb      	strh	r3, [r7, #6]
 80064f2:	4603      	mov	r3, r0
 80064f4:	80bb      	strh	r3, [r7, #4]
 80064f6:	460b      	mov	r3, r1
 80064f8:	807b      	strh	r3, [r7, #2]
 80064fa:	4613      	mov	r3, r2
 80064fc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80064fe:	202a      	movs	r0, #42	; 0x2a
 8006500:	f7ff ffb2 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	0a1b      	lsrs	r3, r3, #8
 8006508:	b29b      	uxth	r3, r3
 800650a:	b2db      	uxtb	r3, r3
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ffc9 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8006512:	88fb      	ldrh	r3, [r7, #6]
 8006514:	b2db      	uxtb	r3, r3
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff ffc4 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800651c:	887b      	ldrh	r3, [r7, #2]
 800651e:	0a1b      	lsrs	r3, r3, #8
 8006520:	b29b      	uxth	r3, r3
 8006522:	b2db      	uxtb	r3, r3
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff ffbd 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800652a:	887b      	ldrh	r3, [r7, #2]
 800652c:	b2db      	uxtb	r3, r3
 800652e:	4618      	mov	r0, r3
 8006530:	f7ff ffb8 	bl	80064a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8006534:	202b      	movs	r0, #43	; 0x2b
 8006536:	f7ff ff97 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800653a:	88bb      	ldrh	r3, [r7, #4]
 800653c:	0a1b      	lsrs	r3, r3, #8
 800653e:	b29b      	uxth	r3, r3
 8006540:	b2db      	uxtb	r3, r3
 8006542:	4618      	mov	r0, r3
 8006544:	f7ff ffae 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8006548:	88bb      	ldrh	r3, [r7, #4]
 800654a:	b2db      	uxtb	r3, r3
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff ffa9 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8006552:	883b      	ldrh	r3, [r7, #0]
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	b29b      	uxth	r3, r3
 8006558:	b2db      	uxtb	r3, r3
 800655a:	4618      	mov	r0, r3
 800655c:	f7ff ffa2 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8006560:	883b      	ldrh	r3, [r7, #0]
 8006562:	b2db      	uxtb	r3, r3
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff ff9d 	bl	80064a4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800656a:	202c      	movs	r0, #44	; 0x2c
 800656c:	f7ff ff7c 	bl	8006468 <ILI9341_Write_Command>
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	bd90      	pop	{r4, r7, pc}

08006578 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800657c:	2200      	movs	r2, #0
 800657e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006582:	480b      	ldr	r0, [pc, #44]	; (80065b0 <ILI9341_Reset+0x38>)
 8006584:	f7fd fa6c 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8006588:	20c8      	movs	r0, #200	; 0xc8
 800658a:	f7fb f83b 	bl	8001604 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800658e:	2200      	movs	r2, #0
 8006590:	2180      	movs	r1, #128	; 0x80
 8006592:	4807      	ldr	r0, [pc, #28]	; (80065b0 <ILI9341_Reset+0x38>)
 8006594:	f7fd fa64 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8006598:	20c8      	movs	r0, #200	; 0xc8
 800659a:	f7fb f833 	bl	8001604 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800659e:	2201      	movs	r2, #1
 80065a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065a4:	4802      	ldr	r0, [pc, #8]	; (80065b0 <ILI9341_Reset+0x38>)
 80065a6:	f7fd fa5b 	bl	8003a60 <HAL_GPIO_WritePin>
}
 80065aa:	bf00      	nop
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	48000400 	.word	0x48000400

080065b4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80065be:	79fb      	ldrb	r3, [r7, #7]
 80065c0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80065c2:	2036      	movs	r0, #54	; 0x36
 80065c4:	f7ff ff50 	bl	8006468 <ILI9341_Write_Command>
//HAL_Delay(1);
	
switch(screen_rotation) 
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b03      	cmp	r3, #3
 80065cc:	d836      	bhi.n	800663c <ILI9341_Set_Rotation+0x88>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <ILI9341_Set_Rotation+0x20>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	080065e5 	.word	0x080065e5
 80065d8:	080065fb 	.word	0x080065fb
 80065dc:	08006611 	.word	0x08006611
 80065e0:	08006627 	.word	0x08006627
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80065e4:	2048      	movs	r0, #72	; 0x48
 80065e6:	f7ff ff5d 	bl	80064a4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80065ea:	4b17      	ldr	r3, [pc, #92]	; (8006648 <ILI9341_Set_Rotation+0x94>)
 80065ec:	22f0      	movs	r2, #240	; 0xf0
 80065ee:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80065f0:	4b16      	ldr	r3, [pc, #88]	; (800664c <ILI9341_Set_Rotation+0x98>)
 80065f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80065f6:	801a      	strh	r2, [r3, #0]
			break;
 80065f8:	e021      	b.n	800663e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80065fa:	2028      	movs	r0, #40	; 0x28
 80065fc:	f7ff ff52 	bl	80064a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8006600:	4b11      	ldr	r3, [pc, #68]	; (8006648 <ILI9341_Set_Rotation+0x94>)
 8006602:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006606:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006608:	4b10      	ldr	r3, [pc, #64]	; (800664c <ILI9341_Set_Rotation+0x98>)
 800660a:	22f0      	movs	r2, #240	; 0xf0
 800660c:	801a      	strh	r2, [r3, #0]
			break;
 800660e:	e016      	b.n	800663e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8006610:	2088      	movs	r0, #136	; 0x88
 8006612:	f7ff ff47 	bl	80064a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <ILI9341_Set_Rotation+0x94>)
 8006618:	22f0      	movs	r2, #240	; 0xf0
 800661a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800661c:	4b0b      	ldr	r3, [pc, #44]	; (800664c <ILI9341_Set_Rotation+0x98>)
 800661e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006622:	801a      	strh	r2, [r3, #0]
			break;
 8006624:	e00b      	b.n	800663e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8006626:	20e8      	movs	r0, #232	; 0xe8
 8006628:	f7ff ff3c 	bl	80064a4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800662c:	4b06      	ldr	r3, [pc, #24]	; (8006648 <ILI9341_Set_Rotation+0x94>)
 800662e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006632:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006634:	4b05      	ldr	r3, [pc, #20]	; (800664c <ILI9341_Set_Rotation+0x98>)
 8006636:	22f0      	movs	r2, #240	; 0xf0
 8006638:	801a      	strh	r2, [r3, #0]
			break;
 800663a:	e000      	b.n	800663e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800663c:	bf00      	nop
	}
}
 800663e:	bf00      	nop
 8006640:	3710      	adds	r7, #16
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20000012 	.word	0x20000012
 800664c:	20000010 	.word	0x20000010

08006650 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8006654:	2201      	movs	r2, #1
 8006656:	f44f 7100 	mov.w	r1, #512	; 0x200
 800665a:	4802      	ldr	r0, [pc, #8]	; (8006664 <ILI9341_Enable+0x14>)
 800665c:	f7fd fa00 	bl	8003a60 <HAL_GPIO_WritePin>
}
 8006660:	bf00      	nop
 8006662:	bd80      	pop	{r7, pc}
 8006664:	48000400 	.word	0x48000400

08006668 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800666c:	f7ff fff0 	bl	8006650 <ILI9341_Enable>
ILI9341_SPI_Init();
 8006670:	f7ff fedc 	bl	800642c <ILI9341_SPI_Init>
ILI9341_Reset();
 8006674:	f7ff ff80 	bl	8006578 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8006678:	2001      	movs	r0, #1
 800667a:	f7ff fef5 	bl	8006468 <ILI9341_Write_Command>
HAL_Delay(1000);
 800667e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006682:	f7fa ffbf 	bl	8001604 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8006686:	20cb      	movs	r0, #203	; 0xcb
 8006688:	f7ff feee 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800668c:	2039      	movs	r0, #57	; 0x39
 800668e:	f7ff ff09 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8006692:	202c      	movs	r0, #44	; 0x2c
 8006694:	f7ff ff06 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006698:	2000      	movs	r0, #0
 800669a:	f7ff ff03 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800669e:	2034      	movs	r0, #52	; 0x34
 80066a0:	f7ff ff00 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 80066a4:	2002      	movs	r0, #2
 80066a6:	f7ff fefd 	bl	80064a4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 80066aa:	20cf      	movs	r0, #207	; 0xcf
 80066ac:	f7ff fedc 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80066b0:	2000      	movs	r0, #0
 80066b2:	f7ff fef7 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80066b6:	20c1      	movs	r0, #193	; 0xc1
 80066b8:	f7ff fef4 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80066bc:	2030      	movs	r0, #48	; 0x30
 80066be:	f7ff fef1 	bl	80064a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80066c2:	20e8      	movs	r0, #232	; 0xe8
 80066c4:	f7ff fed0 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80066c8:	2085      	movs	r0, #133	; 0x85
 80066ca:	f7ff feeb 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80066ce:	2000      	movs	r0, #0
 80066d0:	f7ff fee8 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80066d4:	2078      	movs	r0, #120	; 0x78
 80066d6:	f7ff fee5 	bl	80064a4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80066da:	20ea      	movs	r0, #234	; 0xea
 80066dc:	f7ff fec4 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80066e0:	2000      	movs	r0, #0
 80066e2:	f7ff fedf 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80066e6:	2000      	movs	r0, #0
 80066e8:	f7ff fedc 	bl	80064a4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80066ec:	20ed      	movs	r0, #237	; 0xed
 80066ee:	f7ff febb 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80066f2:	2064      	movs	r0, #100	; 0x64
 80066f4:	f7ff fed6 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80066f8:	2003      	movs	r0, #3
 80066fa:	f7ff fed3 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80066fe:	2012      	movs	r0, #18
 8006700:	f7ff fed0 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8006704:	2081      	movs	r0, #129	; 0x81
 8006706:	f7ff fecd 	bl	80064a4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800670a:	20f7      	movs	r0, #247	; 0xf7
 800670c:	f7ff feac 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8006710:	2020      	movs	r0, #32
 8006712:	f7ff fec7 	bl	80064a4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8006716:	20c0      	movs	r0, #192	; 0xc0
 8006718:	f7ff fea6 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800671c:	2023      	movs	r0, #35	; 0x23
 800671e:	f7ff fec1 	bl	80064a4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8006722:	20c1      	movs	r0, #193	; 0xc1
 8006724:	f7ff fea0 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8006728:	2010      	movs	r0, #16
 800672a:	f7ff febb 	bl	80064a4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800672e:	20c5      	movs	r0, #197	; 0xc5
 8006730:	f7ff fe9a 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8006734:	203e      	movs	r0, #62	; 0x3e
 8006736:	f7ff feb5 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800673a:	2028      	movs	r0, #40	; 0x28
 800673c:	f7ff feb2 	bl	80064a4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8006740:	20c7      	movs	r0, #199	; 0xc7
 8006742:	f7ff fe91 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8006746:	2086      	movs	r0, #134	; 0x86
 8006748:	f7ff feac 	bl	80064a4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800674c:	2036      	movs	r0, #54	; 0x36
 800674e:	f7ff fe8b 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8006752:	2048      	movs	r0, #72	; 0x48
 8006754:	f7ff fea6 	bl	80064a4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8006758:	203a      	movs	r0, #58	; 0x3a
 800675a:	f7ff fe85 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800675e:	2055      	movs	r0, #85	; 0x55
 8006760:	f7ff fea0 	bl	80064a4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8006764:	20b1      	movs	r0, #177	; 0xb1
 8006766:	f7ff fe7f 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800676a:	2000      	movs	r0, #0
 800676c:	f7ff fe9a 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8006770:	2018      	movs	r0, #24
 8006772:	f7ff fe97 	bl	80064a4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8006776:	20b6      	movs	r0, #182	; 0xb6
 8006778:	f7ff fe76 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800677c:	2008      	movs	r0, #8
 800677e:	f7ff fe91 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8006782:	2082      	movs	r0, #130	; 0x82
 8006784:	f7ff fe8e 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8006788:	2027      	movs	r0, #39	; 0x27
 800678a:	f7ff fe8b 	bl	80064a4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800678e:	20f2      	movs	r0, #242	; 0xf2
 8006790:	f7ff fe6a 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006794:	2000      	movs	r0, #0
 8006796:	f7ff fe85 	bl	80064a4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800679a:	2026      	movs	r0, #38	; 0x26
 800679c:	f7ff fe64 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 80067a0:	2001      	movs	r0, #1
 80067a2:	f7ff fe7f 	bl	80064a4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 80067a6:	20e0      	movs	r0, #224	; 0xe0
 80067a8:	f7ff fe5e 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 80067ac:	200f      	movs	r0, #15
 80067ae:	f7ff fe79 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80067b2:	2031      	movs	r0, #49	; 0x31
 80067b4:	f7ff fe76 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80067b8:	202b      	movs	r0, #43	; 0x2b
 80067ba:	f7ff fe73 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80067be:	200c      	movs	r0, #12
 80067c0:	f7ff fe70 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80067c4:	200e      	movs	r0, #14
 80067c6:	f7ff fe6d 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80067ca:	2008      	movs	r0, #8
 80067cc:	f7ff fe6a 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80067d0:	204e      	movs	r0, #78	; 0x4e
 80067d2:	f7ff fe67 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80067d6:	20f1      	movs	r0, #241	; 0xf1
 80067d8:	f7ff fe64 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80067dc:	2037      	movs	r0, #55	; 0x37
 80067de:	f7ff fe61 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80067e2:	2007      	movs	r0, #7
 80067e4:	f7ff fe5e 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80067e8:	2010      	movs	r0, #16
 80067ea:	f7ff fe5b 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80067ee:	2003      	movs	r0, #3
 80067f0:	f7ff fe58 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80067f4:	200e      	movs	r0, #14
 80067f6:	f7ff fe55 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80067fa:	2009      	movs	r0, #9
 80067fc:	f7ff fe52 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006800:	2000      	movs	r0, #0
 8006802:	f7ff fe4f 	bl	80064a4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8006806:	20e1      	movs	r0, #225	; 0xe1
 8006808:	f7ff fe2e 	bl	8006468 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800680c:	2000      	movs	r0, #0
 800680e:	f7ff fe49 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006812:	200e      	movs	r0, #14
 8006814:	f7ff fe46 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8006818:	2014      	movs	r0, #20
 800681a:	f7ff fe43 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800681e:	2003      	movs	r0, #3
 8006820:	f7ff fe40 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8006824:	2011      	movs	r0, #17
 8006826:	f7ff fe3d 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800682a:	2007      	movs	r0, #7
 800682c:	f7ff fe3a 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006830:	2031      	movs	r0, #49	; 0x31
 8006832:	f7ff fe37 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8006836:	20c1      	movs	r0, #193	; 0xc1
 8006838:	f7ff fe34 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800683c:	2048      	movs	r0, #72	; 0x48
 800683e:	f7ff fe31 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8006842:	2008      	movs	r0, #8
 8006844:	f7ff fe2e 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8006848:	200f      	movs	r0, #15
 800684a:	f7ff fe2b 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800684e:	200c      	movs	r0, #12
 8006850:	f7ff fe28 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006854:	2031      	movs	r0, #49	; 0x31
 8006856:	f7ff fe25 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800685a:	2036      	movs	r0, #54	; 0x36
 800685c:	f7ff fe22 	bl	80064a4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8006860:	200f      	movs	r0, #15
 8006862:	f7ff fe1f 	bl	80064a4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8006866:	2011      	movs	r0, #17
 8006868:	f7ff fdfe 	bl	8006468 <ILI9341_Write_Command>
HAL_Delay(120);
 800686c:	2078      	movs	r0, #120	; 0x78
 800686e:	f7fa fec9 	bl	8001604 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8006872:	2029      	movs	r0, #41	; 0x29
 8006874:	f7ff fdf8 	bl	8006468 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8006878:	2000      	movs	r0, #0
 800687a:	f7ff fe9b 	bl	80065b4 <ILI9341_Set_Rotation>
}
 800687e:	bf00      	nop
 8006880:	bd80      	pop	{r7, pc}
	...

08006884 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8006884:	b5b0      	push	{r4, r5, r7, lr}
 8006886:	b08c      	sub	sp, #48	; 0x30
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	6039      	str	r1, [r7, #0]
 800688e:	80fb      	strh	r3, [r7, #6]
 8006890:	466b      	mov	r3, sp
 8006892:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8006894:	2300      	movs	r3, #0
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80068a0:	d202      	bcs.n	80068a8 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
 80068a6:	e002      	b.n	80068ae <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 80068a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80068ae:	2201      	movs	r2, #1
 80068b0:	2140      	movs	r1, #64	; 0x40
 80068b2:	483d      	ldr	r0, [pc, #244]	; (80069a8 <ILI9341_Draw_Colour_Burst+0x124>)
 80068b4:	f7fd f8d4 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80068b8:	2200      	movs	r2, #0
 80068ba:	2180      	movs	r1, #128	; 0x80
 80068bc:	483a      	ldr	r0, [pc, #232]	; (80069a8 <ILI9341_Draw_Colour_Burst+0x124>)
 80068be:	f7fd f8cf 	bl	8003a60 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	0a1b      	lsrs	r3, r3, #8
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80068cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068ce:	4603      	mov	r3, r0
 80068d0:	3b01      	subs	r3, #1
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	4601      	mov	r1, r0
 80068d6:	f04f 0200 	mov.w	r2, #0
 80068da:	f04f 0300 	mov.w	r3, #0
 80068de:	f04f 0400 	mov.w	r4, #0
 80068e2:	00d4      	lsls	r4, r2, #3
 80068e4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80068e8:	00cb      	lsls	r3, r1, #3
 80068ea:	4601      	mov	r1, r0
 80068ec:	f04f 0200 	mov.w	r2, #0
 80068f0:	f04f 0300 	mov.w	r3, #0
 80068f4:	f04f 0400 	mov.w	r4, #0
 80068f8:	00d4      	lsls	r4, r2, #3
 80068fa:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80068fe:	00cb      	lsls	r3, r1, #3
 8006900:	1dc3      	adds	r3, r0, #7
 8006902:	08db      	lsrs	r3, r3, #3
 8006904:	00db      	lsls	r3, r3, #3
 8006906:	ebad 0d03 	sub.w	sp, sp, r3
 800690a:	466b      	mov	r3, sp
 800690c:	3300      	adds	r3, #0
 800690e:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8006910:	2300      	movs	r3, #0
 8006912:	62bb      	str	r3, [r7, #40]	; 0x28
 8006914:	e00e      	b.n	8006934 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	4413      	add	r3, r2
 800691c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006920:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8006922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006924:	3301      	adds	r3, #1
 8006926:	88fa      	ldrh	r2, [r7, #6]
 8006928:	b2d1      	uxtb	r1, r2
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	3302      	adds	r3, #2
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
 8006934:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	429a      	cmp	r2, r3
 800693a:	d3ec      	bcc.n	8006916 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006946:	fbb2 f3f3 	udiv	r3, r2, r3
 800694a:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006950:	fbb3 f2f2 	udiv	r2, r3, r2
 8006954:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006956:	fb01 f202 	mul.w	r2, r1, r2
 800695a:	1a9b      	subs	r3, r3, r2
 800695c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d010      	beq.n	8006986 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006964:	2300      	movs	r3, #0
 8006966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006968:	e009      	b.n	800697e <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800696a:	69b9      	ldr	r1, [r7, #24]
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	b29a      	uxth	r2, r3
 8006970:	230a      	movs	r3, #10
 8006972:	480e      	ldr	r0, [pc, #56]	; (80069ac <ILI9341_Draw_Colour_Burst+0x128>)
 8006974:	f7fe f9b4 	bl	8004ce0 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697a:	3301      	adds	r3, #1
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	429a      	cmp	r2, r3
 8006984:	d3f1      	bcc.n	800696a <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8006986:	69b9      	ldr	r1, [r7, #24]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	b29a      	uxth	r2, r3
 800698c:	230a      	movs	r3, #10
 800698e:	4807      	ldr	r0, [pc, #28]	; (80069ac <ILI9341_Draw_Colour_Burst+0x128>)
 8006990:	f7fe f9a6 	bl	8004ce0 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006994:	2201      	movs	r2, #1
 8006996:	2180      	movs	r1, #128	; 0x80
 8006998:	4803      	ldr	r0, [pc, #12]	; (80069a8 <ILI9341_Draw_Colour_Burst+0x124>)
 800699a:	f7fd f861 	bl	8003a60 <HAL_GPIO_WritePin>
 800699e:	46ad      	mov	sp, r5
}
 80069a0:	bf00      	nop
 80069a2:	3730      	adds	r7, #48	; 0x30
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bdb0      	pop	{r4, r5, r7, pc}
 80069a8:	48000400 	.word	0x48000400
 80069ac:	20000238 	.word	0x20000238

080069b0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80069ba:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <ILI9341_Fill_Screen+0x44>)
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	b29a      	uxth	r2, r3
 80069c0:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <ILI9341_Fill_Screen+0x48>)
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2100      	movs	r1, #0
 80069c8:	2000      	movs	r0, #0
 80069ca:	f7ff fd89 	bl	80064e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80069ce:	4b09      	ldr	r3, [pc, #36]	; (80069f4 <ILI9341_Fill_Screen+0x44>)
 80069d0:	881b      	ldrh	r3, [r3, #0]
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b08      	ldr	r3, [pc, #32]	; (80069f8 <ILI9341_Fill_Screen+0x48>)
 80069d8:	881b      	ldrh	r3, [r3, #0]
 80069da:	b29b      	uxth	r3, r3
 80069dc:	fb03 f302 	mul.w	r3, r3, r2
 80069e0:	461a      	mov	r2, r3
 80069e2:	88fb      	ldrh	r3, [r7, #6]
 80069e4:	4611      	mov	r1, r2
 80069e6:	4618      	mov	r0, r3
 80069e8:	f7ff ff4c 	bl	8006884 <ILI9341_Draw_Colour_Burst>
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	20000012 	.word	0x20000012
 80069f8:	20000010 	.word	0x20000010

080069fc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	80fb      	strh	r3, [r7, #6]
 8006a06:	460b      	mov	r3, r1
 8006a08:	80bb      	strh	r3, [r7, #4]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8006a0e:	4b5b      	ldr	r3, [pc, #364]	; (8006b7c <ILI9341_Draw_Pixel+0x180>)
 8006a10:	881b      	ldrh	r3, [r3, #0]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	88fa      	ldrh	r2, [r7, #6]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	f080 80ac 	bcs.w	8006b74 <ILI9341_Draw_Pixel+0x178>
 8006a1c:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <ILI9341_Draw_Pixel+0x184>)
 8006a1e:	881b      	ldrh	r3, [r3, #0]
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	88ba      	ldrh	r2, [r7, #4]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	f080 80a5 	bcs.w	8006b74 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	2140      	movs	r1, #64	; 0x40
 8006a2e:	4855      	ldr	r0, [pc, #340]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006a30:	f7fd f816 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006a34:	2200      	movs	r2, #0
 8006a36:	2180      	movs	r1, #128	; 0x80
 8006a38:	4852      	ldr	r0, [pc, #328]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006a3a:	f7fd f811 	bl	8003a60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8006a3e:	202a      	movs	r0, #42	; 0x2a
 8006a40:	f7ff fd00 	bl	8006444 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8006a44:	2201      	movs	r2, #1
 8006a46:	2140      	movs	r1, #64	; 0x40
 8006a48:	484e      	ldr	r0, [pc, #312]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006a4a:	f7fd f809 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8006a4e:	2201      	movs	r2, #1
 8006a50:	2180      	movs	r1, #128	; 0x80
 8006a52:	484c      	ldr	r0, [pc, #304]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006a54:	f7fd f804 	bl	8003a60 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2180      	movs	r1, #128	; 0x80
 8006a5c:	4849      	ldr	r0, [pc, #292]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006a5e:	f7fc ffff 	bl	8003a60 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	753b      	strb	r3, [r7, #20]
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	757b      	strb	r3, [r7, #21]
 8006a72:	88fb      	ldrh	r3, [r7, #6]
 8006a74:	3301      	adds	r3, #1
 8006a76:	121b      	asrs	r3, r3, #8
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	75bb      	strb	r3, [r7, #22]
 8006a7c:	88fb      	ldrh	r3, [r7, #6]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	3301      	adds	r3, #1
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8006a86:	f107 0114 	add.w	r1, r7, #20
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	2204      	movs	r2, #4
 8006a8e:	483e      	ldr	r0, [pc, #248]	; (8006b88 <ILI9341_Draw_Pixel+0x18c>)
 8006a90:	f7fe f926 	bl	8004ce0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006a94:	2201      	movs	r2, #1
 8006a96:	2180      	movs	r1, #128	; 0x80
 8006a98:	483a      	ldr	r0, [pc, #232]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006a9a:	f7fc ffe1 	bl	8003a60 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2140      	movs	r1, #64	; 0x40
 8006aa2:	4838      	ldr	r0, [pc, #224]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006aa4:	f7fc ffdc 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	4835      	ldr	r0, [pc, #212]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006aae:	f7fc ffd7 	bl	8003a60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8006ab2:	202b      	movs	r0, #43	; 0x2b
 8006ab4:	f7ff fcc6 	bl	8006444 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006ab8:	2201      	movs	r2, #1
 8006aba:	2140      	movs	r1, #64	; 0x40
 8006abc:	4831      	ldr	r0, [pc, #196]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006abe:	f7fc ffcf 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	2180      	movs	r1, #128	; 0x80
 8006ac6:	482f      	ldr	r0, [pc, #188]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006ac8:	f7fc ffca 	bl	8003a60 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006acc:	2200      	movs	r2, #0
 8006ace:	2180      	movs	r1, #128	; 0x80
 8006ad0:	482c      	ldr	r0, [pc, #176]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006ad2:	f7fc ffc5 	bl	8003a60 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8006ad6:	88bb      	ldrh	r3, [r7, #4]
 8006ad8:	0a1b      	lsrs	r3, r3, #8
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	743b      	strb	r3, [r7, #16]
 8006ae0:	88bb      	ldrh	r3, [r7, #4]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	747b      	strb	r3, [r7, #17]
 8006ae6:	88bb      	ldrh	r3, [r7, #4]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	121b      	asrs	r3, r3, #8
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	74bb      	strb	r3, [r7, #18]
 8006af0:	88bb      	ldrh	r3, [r7, #4]
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	3301      	adds	r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8006afa:	f107 0110 	add.w	r1, r7, #16
 8006afe:	2301      	movs	r3, #1
 8006b00:	2204      	movs	r2, #4
 8006b02:	4821      	ldr	r0, [pc, #132]	; (8006b88 <ILI9341_Draw_Pixel+0x18c>)
 8006b04:	f7fe f8ec 	bl	8004ce0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006b08:	2201      	movs	r2, #1
 8006b0a:	2180      	movs	r1, #128	; 0x80
 8006b0c:	481d      	ldr	r0, [pc, #116]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006b0e:	f7fc ffa7 	bl	8003a60 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006b12:	2200      	movs	r2, #0
 8006b14:	2140      	movs	r1, #64	; 0x40
 8006b16:	481b      	ldr	r0, [pc, #108]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006b18:	f7fc ffa2 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	2180      	movs	r1, #128	; 0x80
 8006b20:	4818      	ldr	r0, [pc, #96]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006b22:	f7fc ff9d 	bl	8003a60 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8006b26:	202c      	movs	r0, #44	; 0x2c
 8006b28:	f7ff fc8c 	bl	8006444 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	2140      	movs	r1, #64	; 0x40
 8006b30:	4814      	ldr	r0, [pc, #80]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006b32:	f7fc ff95 	bl	8003a60 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006b36:	2201      	movs	r2, #1
 8006b38:	2180      	movs	r1, #128	; 0x80
 8006b3a:	4812      	ldr	r0, [pc, #72]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006b3c:	f7fc ff90 	bl	8003a60 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006b40:	2200      	movs	r2, #0
 8006b42:	2180      	movs	r1, #128	; 0x80
 8006b44:	480f      	ldr	r0, [pc, #60]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006b46:	f7fc ff8b 	bl	8003a60 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8006b4a:	887b      	ldrh	r3, [r7, #2]
 8006b4c:	0a1b      	lsrs	r3, r3, #8
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	733b      	strb	r3, [r7, #12]
 8006b54:	887b      	ldrh	r3, [r7, #2]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8006b5a:	f107 010c 	add.w	r1, r7, #12
 8006b5e:	2301      	movs	r3, #1
 8006b60:	2202      	movs	r2, #2
 8006b62:	4809      	ldr	r0, [pc, #36]	; (8006b88 <ILI9341_Draw_Pixel+0x18c>)
 8006b64:	f7fe f8bc 	bl	8004ce0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006b68:	2201      	movs	r2, #1
 8006b6a:	2180      	movs	r1, #128	; 0x80
 8006b6c:	4805      	ldr	r0, [pc, #20]	; (8006b84 <ILI9341_Draw_Pixel+0x188>)
 8006b6e:	f7fc ff77 	bl	8003a60 <HAL_GPIO_WritePin>
 8006b72:	e000      	b.n	8006b76 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8006b74:	bf00      	nop
	
}
 8006b76:	3718      	adds	r7, #24
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	20000012 	.word	0x20000012
 8006b80:	20000010 	.word	0x20000010
 8006b84:	48000400 	.word	0x48000400
 8006b88:	20000238 	.word	0x20000238

08006b8c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8006b8c:	b590      	push	{r4, r7, lr}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4604      	mov	r4, r0
 8006b94:	4608      	mov	r0, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4623      	mov	r3, r4
 8006b9c:	80fb      	strh	r3, [r7, #6]
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	80bb      	strh	r3, [r7, #4]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	807b      	strh	r3, [r7, #2]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006baa:	4b25      	ldr	r3, [pc, #148]	; (8006c40 <ILI9341_Draw_Rectangle+0xb4>)
 8006bac:	881b      	ldrh	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	88fa      	ldrh	r2, [r7, #6]
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d23f      	bcs.n	8006c36 <ILI9341_Draw_Rectangle+0xaa>
 8006bb6:	4b23      	ldr	r3, [pc, #140]	; (8006c44 <ILI9341_Draw_Rectangle+0xb8>)
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	88ba      	ldrh	r2, [r7, #4]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d239      	bcs.n	8006c36 <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 8006bc2:	88fa      	ldrh	r2, [r7, #6]
 8006bc4:	887b      	ldrh	r3, [r7, #2]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	4a1d      	ldr	r2, [pc, #116]	; (8006c40 <ILI9341_Draw_Rectangle+0xb4>)
 8006bcc:	8812      	ldrh	r2, [r2, #0]
 8006bce:	b292      	uxth	r2, r2
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	db05      	blt.n	8006be0 <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 8006bd4:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <ILI9341_Draw_Rectangle+0xb4>)
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	88fb      	ldrh	r3, [r7, #6]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8006be0:	88ba      	ldrh	r2, [r7, #4]
 8006be2:	883b      	ldrh	r3, [r7, #0]
 8006be4:	4413      	add	r3, r2
 8006be6:	3b01      	subs	r3, #1
 8006be8:	4a16      	ldr	r2, [pc, #88]	; (8006c44 <ILI9341_Draw_Rectangle+0xb8>)
 8006bea:	8812      	ldrh	r2, [r2, #0]
 8006bec:	b292      	uxth	r2, r2
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	db05      	blt.n	8006bfe <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 8006bf2:	4b14      	ldr	r3, [pc, #80]	; (8006c44 <ILI9341_Draw_Rectangle+0xb8>)
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	88bb      	ldrh	r3, [r7, #4]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8006bfe:	88fa      	ldrh	r2, [r7, #6]
 8006c00:	887b      	ldrh	r3, [r7, #2]
 8006c02:	4413      	add	r3, r2
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b29c      	uxth	r4, r3
 8006c0a:	88ba      	ldrh	r2, [r7, #4]
 8006c0c:	883b      	ldrh	r3, [r7, #0]
 8006c0e:	4413      	add	r3, r2
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	88b9      	ldrh	r1, [r7, #4]
 8006c18:	88f8      	ldrh	r0, [r7, #6]
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	f7ff fc60 	bl	80064e0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8006c20:	883b      	ldrh	r3, [r7, #0]
 8006c22:	887a      	ldrh	r2, [r7, #2]
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	8b3b      	ldrh	r3, [r7, #24]
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fe28 	bl	8006884 <ILI9341_Draw_Colour_Burst>
 8006c34:	e000      	b.n	8006c38 <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006c36:	bf00      	nop
}
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd90      	pop	{r4, r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	20000012 	.word	0x20000012
 8006c44:	20000010 	.word	0x20000010

08006c48 <__errno>:
 8006c48:	4b01      	ldr	r3, [pc, #4]	; (8006c50 <__errno+0x8>)
 8006c4a:	6818      	ldr	r0, [r3, #0]
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000014 	.word	0x20000014

08006c54 <__libc_init_array>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	4e0d      	ldr	r6, [pc, #52]	; (8006c8c <__libc_init_array+0x38>)
 8006c58:	4c0d      	ldr	r4, [pc, #52]	; (8006c90 <__libc_init_array+0x3c>)
 8006c5a:	1ba4      	subs	r4, r4, r6
 8006c5c:	10a4      	asrs	r4, r4, #2
 8006c5e:	2500      	movs	r5, #0
 8006c60:	42a5      	cmp	r5, r4
 8006c62:	d109      	bne.n	8006c78 <__libc_init_array+0x24>
 8006c64:	4e0b      	ldr	r6, [pc, #44]	; (8006c94 <__libc_init_array+0x40>)
 8006c66:	4c0c      	ldr	r4, [pc, #48]	; (8006c98 <__libc_init_array+0x44>)
 8006c68:	f000 ff68 	bl	8007b3c <_init>
 8006c6c:	1ba4      	subs	r4, r4, r6
 8006c6e:	10a4      	asrs	r4, r4, #2
 8006c70:	2500      	movs	r5, #0
 8006c72:	42a5      	cmp	r5, r4
 8006c74:	d105      	bne.n	8006c82 <__libc_init_array+0x2e>
 8006c76:	bd70      	pop	{r4, r5, r6, pc}
 8006c78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c7c:	4798      	blx	r3
 8006c7e:	3501      	adds	r5, #1
 8006c80:	e7ee      	b.n	8006c60 <__libc_init_array+0xc>
 8006c82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c86:	4798      	blx	r3
 8006c88:	3501      	adds	r5, #1
 8006c8a:	e7f2      	b.n	8006c72 <__libc_init_array+0x1e>
 8006c8c:	08007e80 	.word	0x08007e80
 8006c90:	08007e80 	.word	0x08007e80
 8006c94:	08007e80 	.word	0x08007e80
 8006c98:	08007e84 	.word	0x08007e84

08006c9c <memset>:
 8006c9c:	4402      	add	r2, r0
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d100      	bne.n	8006ca6 <memset+0xa>
 8006ca4:	4770      	bx	lr
 8006ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8006caa:	e7f9      	b.n	8006ca0 <memset+0x4>

08006cac <iprintf>:
 8006cac:	b40f      	push	{r0, r1, r2, r3}
 8006cae:	4b0a      	ldr	r3, [pc, #40]	; (8006cd8 <iprintf+0x2c>)
 8006cb0:	b513      	push	{r0, r1, r4, lr}
 8006cb2:	681c      	ldr	r4, [r3, #0]
 8006cb4:	b124      	cbz	r4, 8006cc0 <iprintf+0x14>
 8006cb6:	69a3      	ldr	r3, [r4, #24]
 8006cb8:	b913      	cbnz	r3, 8006cc0 <iprintf+0x14>
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f000 fa22 	bl	8007104 <__sinit>
 8006cc0:	ab05      	add	r3, sp, #20
 8006cc2:	9a04      	ldr	r2, [sp, #16]
 8006cc4:	68a1      	ldr	r1, [r4, #8]
 8006cc6:	9301      	str	r3, [sp, #4]
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f000 fbdb 	bl	8007484 <_vfiprintf_r>
 8006cce:	b002      	add	sp, #8
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	b004      	add	sp, #16
 8006cd6:	4770      	bx	lr
 8006cd8:	20000014 	.word	0x20000014

08006cdc <_puts_r>:
 8006cdc:	b570      	push	{r4, r5, r6, lr}
 8006cde:	460e      	mov	r6, r1
 8006ce0:	4605      	mov	r5, r0
 8006ce2:	b118      	cbz	r0, 8006cec <_puts_r+0x10>
 8006ce4:	6983      	ldr	r3, [r0, #24]
 8006ce6:	b90b      	cbnz	r3, 8006cec <_puts_r+0x10>
 8006ce8:	f000 fa0c 	bl	8007104 <__sinit>
 8006cec:	69ab      	ldr	r3, [r5, #24]
 8006cee:	68ac      	ldr	r4, [r5, #8]
 8006cf0:	b913      	cbnz	r3, 8006cf8 <_puts_r+0x1c>
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 fa06 	bl	8007104 <__sinit>
 8006cf8:	4b23      	ldr	r3, [pc, #140]	; (8006d88 <_puts_r+0xac>)
 8006cfa:	429c      	cmp	r4, r3
 8006cfc:	d117      	bne.n	8006d2e <_puts_r+0x52>
 8006cfe:	686c      	ldr	r4, [r5, #4]
 8006d00:	89a3      	ldrh	r3, [r4, #12]
 8006d02:	071b      	lsls	r3, r3, #28
 8006d04:	d51d      	bpl.n	8006d42 <_puts_r+0x66>
 8006d06:	6923      	ldr	r3, [r4, #16]
 8006d08:	b1db      	cbz	r3, 8006d42 <_puts_r+0x66>
 8006d0a:	3e01      	subs	r6, #1
 8006d0c:	68a3      	ldr	r3, [r4, #8]
 8006d0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d12:	3b01      	subs	r3, #1
 8006d14:	60a3      	str	r3, [r4, #8]
 8006d16:	b9e9      	cbnz	r1, 8006d54 <_puts_r+0x78>
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da2e      	bge.n	8006d7a <_puts_r+0x9e>
 8006d1c:	4622      	mov	r2, r4
 8006d1e:	210a      	movs	r1, #10
 8006d20:	4628      	mov	r0, r5
 8006d22:	f000 f83f 	bl	8006da4 <__swbuf_r>
 8006d26:	3001      	adds	r0, #1
 8006d28:	d011      	beq.n	8006d4e <_puts_r+0x72>
 8006d2a:	200a      	movs	r0, #10
 8006d2c:	e011      	b.n	8006d52 <_puts_r+0x76>
 8006d2e:	4b17      	ldr	r3, [pc, #92]	; (8006d8c <_puts_r+0xb0>)
 8006d30:	429c      	cmp	r4, r3
 8006d32:	d101      	bne.n	8006d38 <_puts_r+0x5c>
 8006d34:	68ac      	ldr	r4, [r5, #8]
 8006d36:	e7e3      	b.n	8006d00 <_puts_r+0x24>
 8006d38:	4b15      	ldr	r3, [pc, #84]	; (8006d90 <_puts_r+0xb4>)
 8006d3a:	429c      	cmp	r4, r3
 8006d3c:	bf08      	it	eq
 8006d3e:	68ec      	ldreq	r4, [r5, #12]
 8006d40:	e7de      	b.n	8006d00 <_puts_r+0x24>
 8006d42:	4621      	mov	r1, r4
 8006d44:	4628      	mov	r0, r5
 8006d46:	f000 f87f 	bl	8006e48 <__swsetup_r>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d0dd      	beq.n	8006d0a <_puts_r+0x2e>
 8006d4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d52:	bd70      	pop	{r4, r5, r6, pc}
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	da04      	bge.n	8006d62 <_puts_r+0x86>
 8006d58:	69a2      	ldr	r2, [r4, #24]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	dc06      	bgt.n	8006d6c <_puts_r+0x90>
 8006d5e:	290a      	cmp	r1, #10
 8006d60:	d004      	beq.n	8006d6c <_puts_r+0x90>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	6022      	str	r2, [r4, #0]
 8006d68:	7019      	strb	r1, [r3, #0]
 8006d6a:	e7cf      	b.n	8006d0c <_puts_r+0x30>
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 f818 	bl	8006da4 <__swbuf_r>
 8006d74:	3001      	adds	r0, #1
 8006d76:	d1c9      	bne.n	8006d0c <_puts_r+0x30>
 8006d78:	e7e9      	b.n	8006d4e <_puts_r+0x72>
 8006d7a:	6823      	ldr	r3, [r4, #0]
 8006d7c:	200a      	movs	r0, #10
 8006d7e:	1c5a      	adds	r2, r3, #1
 8006d80:	6022      	str	r2, [r4, #0]
 8006d82:	7018      	strb	r0, [r3, #0]
 8006d84:	e7e5      	b.n	8006d52 <_puts_r+0x76>
 8006d86:	bf00      	nop
 8006d88:	08007e0c 	.word	0x08007e0c
 8006d8c:	08007e2c 	.word	0x08007e2c
 8006d90:	08007dec 	.word	0x08007dec

08006d94 <puts>:
 8006d94:	4b02      	ldr	r3, [pc, #8]	; (8006da0 <puts+0xc>)
 8006d96:	4601      	mov	r1, r0
 8006d98:	6818      	ldr	r0, [r3, #0]
 8006d9a:	f7ff bf9f 	b.w	8006cdc <_puts_r>
 8006d9e:	bf00      	nop
 8006da0:	20000014 	.word	0x20000014

08006da4 <__swbuf_r>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	460e      	mov	r6, r1
 8006da8:	4614      	mov	r4, r2
 8006daa:	4605      	mov	r5, r0
 8006dac:	b118      	cbz	r0, 8006db6 <__swbuf_r+0x12>
 8006dae:	6983      	ldr	r3, [r0, #24]
 8006db0:	b90b      	cbnz	r3, 8006db6 <__swbuf_r+0x12>
 8006db2:	f000 f9a7 	bl	8007104 <__sinit>
 8006db6:	4b21      	ldr	r3, [pc, #132]	; (8006e3c <__swbuf_r+0x98>)
 8006db8:	429c      	cmp	r4, r3
 8006dba:	d12a      	bne.n	8006e12 <__swbuf_r+0x6e>
 8006dbc:	686c      	ldr	r4, [r5, #4]
 8006dbe:	69a3      	ldr	r3, [r4, #24]
 8006dc0:	60a3      	str	r3, [r4, #8]
 8006dc2:	89a3      	ldrh	r3, [r4, #12]
 8006dc4:	071a      	lsls	r2, r3, #28
 8006dc6:	d52e      	bpl.n	8006e26 <__swbuf_r+0x82>
 8006dc8:	6923      	ldr	r3, [r4, #16]
 8006dca:	b363      	cbz	r3, 8006e26 <__swbuf_r+0x82>
 8006dcc:	6923      	ldr	r3, [r4, #16]
 8006dce:	6820      	ldr	r0, [r4, #0]
 8006dd0:	1ac0      	subs	r0, r0, r3
 8006dd2:	6963      	ldr	r3, [r4, #20]
 8006dd4:	b2f6      	uxtb	r6, r6
 8006dd6:	4283      	cmp	r3, r0
 8006dd8:	4637      	mov	r7, r6
 8006dda:	dc04      	bgt.n	8006de6 <__swbuf_r+0x42>
 8006ddc:	4621      	mov	r1, r4
 8006dde:	4628      	mov	r0, r5
 8006de0:	f000 f926 	bl	8007030 <_fflush_r>
 8006de4:	bb28      	cbnz	r0, 8006e32 <__swbuf_r+0x8e>
 8006de6:	68a3      	ldr	r3, [r4, #8]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	6823      	ldr	r3, [r4, #0]
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	6022      	str	r2, [r4, #0]
 8006df2:	701e      	strb	r6, [r3, #0]
 8006df4:	6963      	ldr	r3, [r4, #20]
 8006df6:	3001      	adds	r0, #1
 8006df8:	4283      	cmp	r3, r0
 8006dfa:	d004      	beq.n	8006e06 <__swbuf_r+0x62>
 8006dfc:	89a3      	ldrh	r3, [r4, #12]
 8006dfe:	07db      	lsls	r3, r3, #31
 8006e00:	d519      	bpl.n	8006e36 <__swbuf_r+0x92>
 8006e02:	2e0a      	cmp	r6, #10
 8006e04:	d117      	bne.n	8006e36 <__swbuf_r+0x92>
 8006e06:	4621      	mov	r1, r4
 8006e08:	4628      	mov	r0, r5
 8006e0a:	f000 f911 	bl	8007030 <_fflush_r>
 8006e0e:	b190      	cbz	r0, 8006e36 <__swbuf_r+0x92>
 8006e10:	e00f      	b.n	8006e32 <__swbuf_r+0x8e>
 8006e12:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <__swbuf_r+0x9c>)
 8006e14:	429c      	cmp	r4, r3
 8006e16:	d101      	bne.n	8006e1c <__swbuf_r+0x78>
 8006e18:	68ac      	ldr	r4, [r5, #8]
 8006e1a:	e7d0      	b.n	8006dbe <__swbuf_r+0x1a>
 8006e1c:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <__swbuf_r+0xa0>)
 8006e1e:	429c      	cmp	r4, r3
 8006e20:	bf08      	it	eq
 8006e22:	68ec      	ldreq	r4, [r5, #12]
 8006e24:	e7cb      	b.n	8006dbe <__swbuf_r+0x1a>
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f80d 	bl	8006e48 <__swsetup_r>
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d0cc      	beq.n	8006dcc <__swbuf_r+0x28>
 8006e32:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006e36:	4638      	mov	r0, r7
 8006e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	08007e0c 	.word	0x08007e0c
 8006e40:	08007e2c 	.word	0x08007e2c
 8006e44:	08007dec 	.word	0x08007dec

08006e48 <__swsetup_r>:
 8006e48:	4b32      	ldr	r3, [pc, #200]	; (8006f14 <__swsetup_r+0xcc>)
 8006e4a:	b570      	push	{r4, r5, r6, lr}
 8006e4c:	681d      	ldr	r5, [r3, #0]
 8006e4e:	4606      	mov	r6, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	b125      	cbz	r5, 8006e5e <__swsetup_r+0x16>
 8006e54:	69ab      	ldr	r3, [r5, #24]
 8006e56:	b913      	cbnz	r3, 8006e5e <__swsetup_r+0x16>
 8006e58:	4628      	mov	r0, r5
 8006e5a:	f000 f953 	bl	8007104 <__sinit>
 8006e5e:	4b2e      	ldr	r3, [pc, #184]	; (8006f18 <__swsetup_r+0xd0>)
 8006e60:	429c      	cmp	r4, r3
 8006e62:	d10f      	bne.n	8006e84 <__swsetup_r+0x3c>
 8006e64:	686c      	ldr	r4, [r5, #4]
 8006e66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	0715      	lsls	r5, r2, #28
 8006e6e:	d42c      	bmi.n	8006eca <__swsetup_r+0x82>
 8006e70:	06d0      	lsls	r0, r2, #27
 8006e72:	d411      	bmi.n	8006e98 <__swsetup_r+0x50>
 8006e74:	2209      	movs	r2, #9
 8006e76:	6032      	str	r2, [r6, #0]
 8006e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e82:	e03e      	b.n	8006f02 <__swsetup_r+0xba>
 8006e84:	4b25      	ldr	r3, [pc, #148]	; (8006f1c <__swsetup_r+0xd4>)
 8006e86:	429c      	cmp	r4, r3
 8006e88:	d101      	bne.n	8006e8e <__swsetup_r+0x46>
 8006e8a:	68ac      	ldr	r4, [r5, #8]
 8006e8c:	e7eb      	b.n	8006e66 <__swsetup_r+0x1e>
 8006e8e:	4b24      	ldr	r3, [pc, #144]	; (8006f20 <__swsetup_r+0xd8>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	bf08      	it	eq
 8006e94:	68ec      	ldreq	r4, [r5, #12]
 8006e96:	e7e6      	b.n	8006e66 <__swsetup_r+0x1e>
 8006e98:	0751      	lsls	r1, r2, #29
 8006e9a:	d512      	bpl.n	8006ec2 <__swsetup_r+0x7a>
 8006e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e9e:	b141      	cbz	r1, 8006eb2 <__swsetup_r+0x6a>
 8006ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ea4:	4299      	cmp	r1, r3
 8006ea6:	d002      	beq.n	8006eae <__swsetup_r+0x66>
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f000 fa19 	bl	80072e0 <_free_r>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006eb8:	81a3      	strh	r3, [r4, #12]
 8006eba:	2300      	movs	r3, #0
 8006ebc:	6063      	str	r3, [r4, #4]
 8006ebe:	6923      	ldr	r3, [r4, #16]
 8006ec0:	6023      	str	r3, [r4, #0]
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	f043 0308 	orr.w	r3, r3, #8
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	6923      	ldr	r3, [r4, #16]
 8006ecc:	b94b      	cbnz	r3, 8006ee2 <__swsetup_r+0x9a>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ed8:	d003      	beq.n	8006ee2 <__swsetup_r+0x9a>
 8006eda:	4621      	mov	r1, r4
 8006edc:	4630      	mov	r0, r6
 8006ede:	f000 f9bf 	bl	8007260 <__smakebuf_r>
 8006ee2:	89a2      	ldrh	r2, [r4, #12]
 8006ee4:	f012 0301 	ands.w	r3, r2, #1
 8006ee8:	d00c      	beq.n	8006f04 <__swsetup_r+0xbc>
 8006eea:	2300      	movs	r3, #0
 8006eec:	60a3      	str	r3, [r4, #8]
 8006eee:	6963      	ldr	r3, [r4, #20]
 8006ef0:	425b      	negs	r3, r3
 8006ef2:	61a3      	str	r3, [r4, #24]
 8006ef4:	6923      	ldr	r3, [r4, #16]
 8006ef6:	b953      	cbnz	r3, 8006f0e <__swsetup_r+0xc6>
 8006ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006f00:	d1ba      	bne.n	8006e78 <__swsetup_r+0x30>
 8006f02:	bd70      	pop	{r4, r5, r6, pc}
 8006f04:	0792      	lsls	r2, r2, #30
 8006f06:	bf58      	it	pl
 8006f08:	6963      	ldrpl	r3, [r4, #20]
 8006f0a:	60a3      	str	r3, [r4, #8]
 8006f0c:	e7f2      	b.n	8006ef4 <__swsetup_r+0xac>
 8006f0e:	2000      	movs	r0, #0
 8006f10:	e7f7      	b.n	8006f02 <__swsetup_r+0xba>
 8006f12:	bf00      	nop
 8006f14:	20000014 	.word	0x20000014
 8006f18:	08007e0c 	.word	0x08007e0c
 8006f1c:	08007e2c 	.word	0x08007e2c
 8006f20:	08007dec 	.word	0x08007dec

08006f24 <__sflush_r>:
 8006f24:	898a      	ldrh	r2, [r1, #12]
 8006f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2a:	4605      	mov	r5, r0
 8006f2c:	0710      	lsls	r0, r2, #28
 8006f2e:	460c      	mov	r4, r1
 8006f30:	d458      	bmi.n	8006fe4 <__sflush_r+0xc0>
 8006f32:	684b      	ldr	r3, [r1, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	dc05      	bgt.n	8006f44 <__sflush_r+0x20>
 8006f38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dc02      	bgt.n	8006f44 <__sflush_r+0x20>
 8006f3e:	2000      	movs	r0, #0
 8006f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f46:	2e00      	cmp	r6, #0
 8006f48:	d0f9      	beq.n	8006f3e <__sflush_r+0x1a>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f50:	682f      	ldr	r7, [r5, #0]
 8006f52:	6a21      	ldr	r1, [r4, #32]
 8006f54:	602b      	str	r3, [r5, #0]
 8006f56:	d032      	beq.n	8006fbe <__sflush_r+0x9a>
 8006f58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f5a:	89a3      	ldrh	r3, [r4, #12]
 8006f5c:	075a      	lsls	r2, r3, #29
 8006f5e:	d505      	bpl.n	8006f6c <__sflush_r+0x48>
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	1ac0      	subs	r0, r0, r3
 8006f64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f66:	b10b      	cbz	r3, 8006f6c <__sflush_r+0x48>
 8006f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f6a:	1ac0      	subs	r0, r0, r3
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4602      	mov	r2, r0
 8006f70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f72:	6a21      	ldr	r1, [r4, #32]
 8006f74:	4628      	mov	r0, r5
 8006f76:	47b0      	blx	r6
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	89a3      	ldrh	r3, [r4, #12]
 8006f7c:	d106      	bne.n	8006f8c <__sflush_r+0x68>
 8006f7e:	6829      	ldr	r1, [r5, #0]
 8006f80:	291d      	cmp	r1, #29
 8006f82:	d848      	bhi.n	8007016 <__sflush_r+0xf2>
 8006f84:	4a29      	ldr	r2, [pc, #164]	; (800702c <__sflush_r+0x108>)
 8006f86:	40ca      	lsrs	r2, r1
 8006f88:	07d6      	lsls	r6, r2, #31
 8006f8a:	d544      	bpl.n	8007016 <__sflush_r+0xf2>
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	6062      	str	r2, [r4, #4]
 8006f90:	04d9      	lsls	r1, r3, #19
 8006f92:	6922      	ldr	r2, [r4, #16]
 8006f94:	6022      	str	r2, [r4, #0]
 8006f96:	d504      	bpl.n	8006fa2 <__sflush_r+0x7e>
 8006f98:	1c42      	adds	r2, r0, #1
 8006f9a:	d101      	bne.n	8006fa0 <__sflush_r+0x7c>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b903      	cbnz	r3, 8006fa2 <__sflush_r+0x7e>
 8006fa0:	6560      	str	r0, [r4, #84]	; 0x54
 8006fa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fa4:	602f      	str	r7, [r5, #0]
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d0c9      	beq.n	8006f3e <__sflush_r+0x1a>
 8006faa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	d002      	beq.n	8006fb8 <__sflush_r+0x94>
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 f994 	bl	80072e0 <_free_r>
 8006fb8:	2000      	movs	r0, #0
 8006fba:	6360      	str	r0, [r4, #52]	; 0x34
 8006fbc:	e7c0      	b.n	8006f40 <__sflush_r+0x1c>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b0      	blx	r6
 8006fc4:	1c41      	adds	r1, r0, #1
 8006fc6:	d1c8      	bne.n	8006f5a <__sflush_r+0x36>
 8006fc8:	682b      	ldr	r3, [r5, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0c5      	beq.n	8006f5a <__sflush_r+0x36>
 8006fce:	2b1d      	cmp	r3, #29
 8006fd0:	d001      	beq.n	8006fd6 <__sflush_r+0xb2>
 8006fd2:	2b16      	cmp	r3, #22
 8006fd4:	d101      	bne.n	8006fda <__sflush_r+0xb6>
 8006fd6:	602f      	str	r7, [r5, #0]
 8006fd8:	e7b1      	b.n	8006f3e <__sflush_r+0x1a>
 8006fda:	89a3      	ldrh	r3, [r4, #12]
 8006fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe0:	81a3      	strh	r3, [r4, #12]
 8006fe2:	e7ad      	b.n	8006f40 <__sflush_r+0x1c>
 8006fe4:	690f      	ldr	r7, [r1, #16]
 8006fe6:	2f00      	cmp	r7, #0
 8006fe8:	d0a9      	beq.n	8006f3e <__sflush_r+0x1a>
 8006fea:	0793      	lsls	r3, r2, #30
 8006fec:	680e      	ldr	r6, [r1, #0]
 8006fee:	bf08      	it	eq
 8006ff0:	694b      	ldreq	r3, [r1, #20]
 8006ff2:	600f      	str	r7, [r1, #0]
 8006ff4:	bf18      	it	ne
 8006ff6:	2300      	movne	r3, #0
 8006ff8:	eba6 0807 	sub.w	r8, r6, r7
 8006ffc:	608b      	str	r3, [r1, #8]
 8006ffe:	f1b8 0f00 	cmp.w	r8, #0
 8007002:	dd9c      	ble.n	8006f3e <__sflush_r+0x1a>
 8007004:	4643      	mov	r3, r8
 8007006:	463a      	mov	r2, r7
 8007008:	6a21      	ldr	r1, [r4, #32]
 800700a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800700c:	4628      	mov	r0, r5
 800700e:	47b0      	blx	r6
 8007010:	2800      	cmp	r0, #0
 8007012:	dc06      	bgt.n	8007022 <__sflush_r+0xfe>
 8007014:	89a3      	ldrh	r3, [r4, #12]
 8007016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800701a:	81a3      	strh	r3, [r4, #12]
 800701c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007020:	e78e      	b.n	8006f40 <__sflush_r+0x1c>
 8007022:	4407      	add	r7, r0
 8007024:	eba8 0800 	sub.w	r8, r8, r0
 8007028:	e7e9      	b.n	8006ffe <__sflush_r+0xda>
 800702a:	bf00      	nop
 800702c:	20400001 	.word	0x20400001

08007030 <_fflush_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	690b      	ldr	r3, [r1, #16]
 8007034:	4605      	mov	r5, r0
 8007036:	460c      	mov	r4, r1
 8007038:	b1db      	cbz	r3, 8007072 <_fflush_r+0x42>
 800703a:	b118      	cbz	r0, 8007044 <_fflush_r+0x14>
 800703c:	6983      	ldr	r3, [r0, #24]
 800703e:	b90b      	cbnz	r3, 8007044 <_fflush_r+0x14>
 8007040:	f000 f860 	bl	8007104 <__sinit>
 8007044:	4b0c      	ldr	r3, [pc, #48]	; (8007078 <_fflush_r+0x48>)
 8007046:	429c      	cmp	r4, r3
 8007048:	d109      	bne.n	800705e <_fflush_r+0x2e>
 800704a:	686c      	ldr	r4, [r5, #4]
 800704c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007050:	b17b      	cbz	r3, 8007072 <_fflush_r+0x42>
 8007052:	4621      	mov	r1, r4
 8007054:	4628      	mov	r0, r5
 8007056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800705a:	f7ff bf63 	b.w	8006f24 <__sflush_r>
 800705e:	4b07      	ldr	r3, [pc, #28]	; (800707c <_fflush_r+0x4c>)
 8007060:	429c      	cmp	r4, r3
 8007062:	d101      	bne.n	8007068 <_fflush_r+0x38>
 8007064:	68ac      	ldr	r4, [r5, #8]
 8007066:	e7f1      	b.n	800704c <_fflush_r+0x1c>
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <_fflush_r+0x50>)
 800706a:	429c      	cmp	r4, r3
 800706c:	bf08      	it	eq
 800706e:	68ec      	ldreq	r4, [r5, #12]
 8007070:	e7ec      	b.n	800704c <_fflush_r+0x1c>
 8007072:	2000      	movs	r0, #0
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	08007e0c 	.word	0x08007e0c
 800707c:	08007e2c 	.word	0x08007e2c
 8007080:	08007dec 	.word	0x08007dec

08007084 <std>:
 8007084:	2300      	movs	r3, #0
 8007086:	b510      	push	{r4, lr}
 8007088:	4604      	mov	r4, r0
 800708a:	e9c0 3300 	strd	r3, r3, [r0]
 800708e:	6083      	str	r3, [r0, #8]
 8007090:	8181      	strh	r1, [r0, #12]
 8007092:	6643      	str	r3, [r0, #100]	; 0x64
 8007094:	81c2      	strh	r2, [r0, #14]
 8007096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800709a:	6183      	str	r3, [r0, #24]
 800709c:	4619      	mov	r1, r3
 800709e:	2208      	movs	r2, #8
 80070a0:	305c      	adds	r0, #92	; 0x5c
 80070a2:	f7ff fdfb 	bl	8006c9c <memset>
 80070a6:	4b05      	ldr	r3, [pc, #20]	; (80070bc <std+0x38>)
 80070a8:	6263      	str	r3, [r4, #36]	; 0x24
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <std+0x3c>)
 80070ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80070ae:	4b05      	ldr	r3, [pc, #20]	; (80070c4 <std+0x40>)
 80070b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070b2:	4b05      	ldr	r3, [pc, #20]	; (80070c8 <std+0x44>)
 80070b4:	6224      	str	r4, [r4, #32]
 80070b6:	6323      	str	r3, [r4, #48]	; 0x30
 80070b8:	bd10      	pop	{r4, pc}
 80070ba:	bf00      	nop
 80070bc:	080079e1 	.word	0x080079e1
 80070c0:	08007a03 	.word	0x08007a03
 80070c4:	08007a3b 	.word	0x08007a3b
 80070c8:	08007a5f 	.word	0x08007a5f

080070cc <_cleanup_r>:
 80070cc:	4901      	ldr	r1, [pc, #4]	; (80070d4 <_cleanup_r+0x8>)
 80070ce:	f000 b885 	b.w	80071dc <_fwalk_reent>
 80070d2:	bf00      	nop
 80070d4:	08007031 	.word	0x08007031

080070d8 <__sfmoreglue>:
 80070d8:	b570      	push	{r4, r5, r6, lr}
 80070da:	1e4a      	subs	r2, r1, #1
 80070dc:	2568      	movs	r5, #104	; 0x68
 80070de:	4355      	muls	r5, r2
 80070e0:	460e      	mov	r6, r1
 80070e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070e6:	f000 f949 	bl	800737c <_malloc_r>
 80070ea:	4604      	mov	r4, r0
 80070ec:	b140      	cbz	r0, 8007100 <__sfmoreglue+0x28>
 80070ee:	2100      	movs	r1, #0
 80070f0:	e9c0 1600 	strd	r1, r6, [r0]
 80070f4:	300c      	adds	r0, #12
 80070f6:	60a0      	str	r0, [r4, #8]
 80070f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070fc:	f7ff fdce 	bl	8006c9c <memset>
 8007100:	4620      	mov	r0, r4
 8007102:	bd70      	pop	{r4, r5, r6, pc}

08007104 <__sinit>:
 8007104:	6983      	ldr	r3, [r0, #24]
 8007106:	b510      	push	{r4, lr}
 8007108:	4604      	mov	r4, r0
 800710a:	bb33      	cbnz	r3, 800715a <__sinit+0x56>
 800710c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007110:	6503      	str	r3, [r0, #80]	; 0x50
 8007112:	4b12      	ldr	r3, [pc, #72]	; (800715c <__sinit+0x58>)
 8007114:	4a12      	ldr	r2, [pc, #72]	; (8007160 <__sinit+0x5c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6282      	str	r2, [r0, #40]	; 0x28
 800711a:	4298      	cmp	r0, r3
 800711c:	bf04      	itt	eq
 800711e:	2301      	moveq	r3, #1
 8007120:	6183      	streq	r3, [r0, #24]
 8007122:	f000 f81f 	bl	8007164 <__sfp>
 8007126:	6060      	str	r0, [r4, #4]
 8007128:	4620      	mov	r0, r4
 800712a:	f000 f81b 	bl	8007164 <__sfp>
 800712e:	60a0      	str	r0, [r4, #8]
 8007130:	4620      	mov	r0, r4
 8007132:	f000 f817 	bl	8007164 <__sfp>
 8007136:	2200      	movs	r2, #0
 8007138:	60e0      	str	r0, [r4, #12]
 800713a:	2104      	movs	r1, #4
 800713c:	6860      	ldr	r0, [r4, #4]
 800713e:	f7ff ffa1 	bl	8007084 <std>
 8007142:	2201      	movs	r2, #1
 8007144:	2109      	movs	r1, #9
 8007146:	68a0      	ldr	r0, [r4, #8]
 8007148:	f7ff ff9c 	bl	8007084 <std>
 800714c:	2202      	movs	r2, #2
 800714e:	2112      	movs	r1, #18
 8007150:	68e0      	ldr	r0, [r4, #12]
 8007152:	f7ff ff97 	bl	8007084 <std>
 8007156:	2301      	movs	r3, #1
 8007158:	61a3      	str	r3, [r4, #24]
 800715a:	bd10      	pop	{r4, pc}
 800715c:	08007de8 	.word	0x08007de8
 8007160:	080070cd 	.word	0x080070cd

08007164 <__sfp>:
 8007164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007166:	4b1b      	ldr	r3, [pc, #108]	; (80071d4 <__sfp+0x70>)
 8007168:	681e      	ldr	r6, [r3, #0]
 800716a:	69b3      	ldr	r3, [r6, #24]
 800716c:	4607      	mov	r7, r0
 800716e:	b913      	cbnz	r3, 8007176 <__sfp+0x12>
 8007170:	4630      	mov	r0, r6
 8007172:	f7ff ffc7 	bl	8007104 <__sinit>
 8007176:	3648      	adds	r6, #72	; 0x48
 8007178:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800717c:	3b01      	subs	r3, #1
 800717e:	d503      	bpl.n	8007188 <__sfp+0x24>
 8007180:	6833      	ldr	r3, [r6, #0]
 8007182:	b133      	cbz	r3, 8007192 <__sfp+0x2e>
 8007184:	6836      	ldr	r6, [r6, #0]
 8007186:	e7f7      	b.n	8007178 <__sfp+0x14>
 8007188:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800718c:	b16d      	cbz	r5, 80071aa <__sfp+0x46>
 800718e:	3468      	adds	r4, #104	; 0x68
 8007190:	e7f4      	b.n	800717c <__sfp+0x18>
 8007192:	2104      	movs	r1, #4
 8007194:	4638      	mov	r0, r7
 8007196:	f7ff ff9f 	bl	80070d8 <__sfmoreglue>
 800719a:	6030      	str	r0, [r6, #0]
 800719c:	2800      	cmp	r0, #0
 800719e:	d1f1      	bne.n	8007184 <__sfp+0x20>
 80071a0:	230c      	movs	r3, #12
 80071a2:	603b      	str	r3, [r7, #0]
 80071a4:	4604      	mov	r4, r0
 80071a6:	4620      	mov	r0, r4
 80071a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071aa:	4b0b      	ldr	r3, [pc, #44]	; (80071d8 <__sfp+0x74>)
 80071ac:	6665      	str	r5, [r4, #100]	; 0x64
 80071ae:	e9c4 5500 	strd	r5, r5, [r4]
 80071b2:	60a5      	str	r5, [r4, #8]
 80071b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80071b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80071bc:	2208      	movs	r2, #8
 80071be:	4629      	mov	r1, r5
 80071c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071c4:	f7ff fd6a 	bl	8006c9c <memset>
 80071c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071d0:	e7e9      	b.n	80071a6 <__sfp+0x42>
 80071d2:	bf00      	nop
 80071d4:	08007de8 	.word	0x08007de8
 80071d8:	ffff0001 	.word	0xffff0001

080071dc <_fwalk_reent>:
 80071dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071e0:	4680      	mov	r8, r0
 80071e2:	4689      	mov	r9, r1
 80071e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071e8:	2600      	movs	r6, #0
 80071ea:	b914      	cbnz	r4, 80071f2 <_fwalk_reent+0x16>
 80071ec:	4630      	mov	r0, r6
 80071ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80071f6:	3f01      	subs	r7, #1
 80071f8:	d501      	bpl.n	80071fe <_fwalk_reent+0x22>
 80071fa:	6824      	ldr	r4, [r4, #0]
 80071fc:	e7f5      	b.n	80071ea <_fwalk_reent+0xe>
 80071fe:	89ab      	ldrh	r3, [r5, #12]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d907      	bls.n	8007214 <_fwalk_reent+0x38>
 8007204:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007208:	3301      	adds	r3, #1
 800720a:	d003      	beq.n	8007214 <_fwalk_reent+0x38>
 800720c:	4629      	mov	r1, r5
 800720e:	4640      	mov	r0, r8
 8007210:	47c8      	blx	r9
 8007212:	4306      	orrs	r6, r0
 8007214:	3568      	adds	r5, #104	; 0x68
 8007216:	e7ee      	b.n	80071f6 <_fwalk_reent+0x1a>

08007218 <__swhatbuf_r>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	460e      	mov	r6, r1
 800721c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007220:	2900      	cmp	r1, #0
 8007222:	b096      	sub	sp, #88	; 0x58
 8007224:	4614      	mov	r4, r2
 8007226:	461d      	mov	r5, r3
 8007228:	da07      	bge.n	800723a <__swhatbuf_r+0x22>
 800722a:	2300      	movs	r3, #0
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	89b3      	ldrh	r3, [r6, #12]
 8007230:	061a      	lsls	r2, r3, #24
 8007232:	d410      	bmi.n	8007256 <__swhatbuf_r+0x3e>
 8007234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007238:	e00e      	b.n	8007258 <__swhatbuf_r+0x40>
 800723a:	466a      	mov	r2, sp
 800723c:	f000 fc36 	bl	8007aac <_fstat_r>
 8007240:	2800      	cmp	r0, #0
 8007242:	dbf2      	blt.n	800722a <__swhatbuf_r+0x12>
 8007244:	9a01      	ldr	r2, [sp, #4]
 8007246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800724a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800724e:	425a      	negs	r2, r3
 8007250:	415a      	adcs	r2, r3
 8007252:	602a      	str	r2, [r5, #0]
 8007254:	e7ee      	b.n	8007234 <__swhatbuf_r+0x1c>
 8007256:	2340      	movs	r3, #64	; 0x40
 8007258:	2000      	movs	r0, #0
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	b016      	add	sp, #88	; 0x58
 800725e:	bd70      	pop	{r4, r5, r6, pc}

08007260 <__smakebuf_r>:
 8007260:	898b      	ldrh	r3, [r1, #12]
 8007262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007264:	079d      	lsls	r5, r3, #30
 8007266:	4606      	mov	r6, r0
 8007268:	460c      	mov	r4, r1
 800726a:	d507      	bpl.n	800727c <__smakebuf_r+0x1c>
 800726c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007270:	6023      	str	r3, [r4, #0]
 8007272:	6123      	str	r3, [r4, #16]
 8007274:	2301      	movs	r3, #1
 8007276:	6163      	str	r3, [r4, #20]
 8007278:	b002      	add	sp, #8
 800727a:	bd70      	pop	{r4, r5, r6, pc}
 800727c:	ab01      	add	r3, sp, #4
 800727e:	466a      	mov	r2, sp
 8007280:	f7ff ffca 	bl	8007218 <__swhatbuf_r>
 8007284:	9900      	ldr	r1, [sp, #0]
 8007286:	4605      	mov	r5, r0
 8007288:	4630      	mov	r0, r6
 800728a:	f000 f877 	bl	800737c <_malloc_r>
 800728e:	b948      	cbnz	r0, 80072a4 <__smakebuf_r+0x44>
 8007290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007294:	059a      	lsls	r2, r3, #22
 8007296:	d4ef      	bmi.n	8007278 <__smakebuf_r+0x18>
 8007298:	f023 0303 	bic.w	r3, r3, #3
 800729c:	f043 0302 	orr.w	r3, r3, #2
 80072a0:	81a3      	strh	r3, [r4, #12]
 80072a2:	e7e3      	b.n	800726c <__smakebuf_r+0xc>
 80072a4:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <__smakebuf_r+0x7c>)
 80072a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	6020      	str	r0, [r4, #0]
 80072ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b0:	81a3      	strh	r3, [r4, #12]
 80072b2:	9b00      	ldr	r3, [sp, #0]
 80072b4:	6163      	str	r3, [r4, #20]
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	6120      	str	r0, [r4, #16]
 80072ba:	b15b      	cbz	r3, 80072d4 <__smakebuf_r+0x74>
 80072bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072c0:	4630      	mov	r0, r6
 80072c2:	f000 fc05 	bl	8007ad0 <_isatty_r>
 80072c6:	b128      	cbz	r0, 80072d4 <__smakebuf_r+0x74>
 80072c8:	89a3      	ldrh	r3, [r4, #12]
 80072ca:	f023 0303 	bic.w	r3, r3, #3
 80072ce:	f043 0301 	orr.w	r3, r3, #1
 80072d2:	81a3      	strh	r3, [r4, #12]
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	431d      	orrs	r5, r3
 80072d8:	81a5      	strh	r5, [r4, #12]
 80072da:	e7cd      	b.n	8007278 <__smakebuf_r+0x18>
 80072dc:	080070cd 	.word	0x080070cd

080072e0 <_free_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4605      	mov	r5, r0
 80072e4:	2900      	cmp	r1, #0
 80072e6:	d045      	beq.n	8007374 <_free_r+0x94>
 80072e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ec:	1f0c      	subs	r4, r1, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	bfb8      	it	lt
 80072f2:	18e4      	addlt	r4, r4, r3
 80072f4:	f000 fc0e 	bl	8007b14 <__malloc_lock>
 80072f8:	4a1f      	ldr	r2, [pc, #124]	; (8007378 <_free_r+0x98>)
 80072fa:	6813      	ldr	r3, [r2, #0]
 80072fc:	4610      	mov	r0, r2
 80072fe:	b933      	cbnz	r3, 800730e <_free_r+0x2e>
 8007300:	6063      	str	r3, [r4, #4]
 8007302:	6014      	str	r4, [r2, #0]
 8007304:	4628      	mov	r0, r5
 8007306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800730a:	f000 bc04 	b.w	8007b16 <__malloc_unlock>
 800730e:	42a3      	cmp	r3, r4
 8007310:	d90c      	bls.n	800732c <_free_r+0x4c>
 8007312:	6821      	ldr	r1, [r4, #0]
 8007314:	1862      	adds	r2, r4, r1
 8007316:	4293      	cmp	r3, r2
 8007318:	bf04      	itt	eq
 800731a:	681a      	ldreq	r2, [r3, #0]
 800731c:	685b      	ldreq	r3, [r3, #4]
 800731e:	6063      	str	r3, [r4, #4]
 8007320:	bf04      	itt	eq
 8007322:	1852      	addeq	r2, r2, r1
 8007324:	6022      	streq	r2, [r4, #0]
 8007326:	6004      	str	r4, [r0, #0]
 8007328:	e7ec      	b.n	8007304 <_free_r+0x24>
 800732a:	4613      	mov	r3, r2
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	b10a      	cbz	r2, 8007334 <_free_r+0x54>
 8007330:	42a2      	cmp	r2, r4
 8007332:	d9fa      	bls.n	800732a <_free_r+0x4a>
 8007334:	6819      	ldr	r1, [r3, #0]
 8007336:	1858      	adds	r0, r3, r1
 8007338:	42a0      	cmp	r0, r4
 800733a:	d10b      	bne.n	8007354 <_free_r+0x74>
 800733c:	6820      	ldr	r0, [r4, #0]
 800733e:	4401      	add	r1, r0
 8007340:	1858      	adds	r0, r3, r1
 8007342:	4282      	cmp	r2, r0
 8007344:	6019      	str	r1, [r3, #0]
 8007346:	d1dd      	bne.n	8007304 <_free_r+0x24>
 8007348:	6810      	ldr	r0, [r2, #0]
 800734a:	6852      	ldr	r2, [r2, #4]
 800734c:	605a      	str	r2, [r3, #4]
 800734e:	4401      	add	r1, r0
 8007350:	6019      	str	r1, [r3, #0]
 8007352:	e7d7      	b.n	8007304 <_free_r+0x24>
 8007354:	d902      	bls.n	800735c <_free_r+0x7c>
 8007356:	230c      	movs	r3, #12
 8007358:	602b      	str	r3, [r5, #0]
 800735a:	e7d3      	b.n	8007304 <_free_r+0x24>
 800735c:	6820      	ldr	r0, [r4, #0]
 800735e:	1821      	adds	r1, r4, r0
 8007360:	428a      	cmp	r2, r1
 8007362:	bf04      	itt	eq
 8007364:	6811      	ldreq	r1, [r2, #0]
 8007366:	6852      	ldreq	r2, [r2, #4]
 8007368:	6062      	str	r2, [r4, #4]
 800736a:	bf04      	itt	eq
 800736c:	1809      	addeq	r1, r1, r0
 800736e:	6021      	streq	r1, [r4, #0]
 8007370:	605c      	str	r4, [r3, #4]
 8007372:	e7c7      	b.n	8007304 <_free_r+0x24>
 8007374:	bd38      	pop	{r3, r4, r5, pc}
 8007376:	bf00      	nop
 8007378:	200000a0 	.word	0x200000a0

0800737c <_malloc_r>:
 800737c:	b570      	push	{r4, r5, r6, lr}
 800737e:	1ccd      	adds	r5, r1, #3
 8007380:	f025 0503 	bic.w	r5, r5, #3
 8007384:	3508      	adds	r5, #8
 8007386:	2d0c      	cmp	r5, #12
 8007388:	bf38      	it	cc
 800738a:	250c      	movcc	r5, #12
 800738c:	2d00      	cmp	r5, #0
 800738e:	4606      	mov	r6, r0
 8007390:	db01      	blt.n	8007396 <_malloc_r+0x1a>
 8007392:	42a9      	cmp	r1, r5
 8007394:	d903      	bls.n	800739e <_malloc_r+0x22>
 8007396:	230c      	movs	r3, #12
 8007398:	6033      	str	r3, [r6, #0]
 800739a:	2000      	movs	r0, #0
 800739c:	bd70      	pop	{r4, r5, r6, pc}
 800739e:	f000 fbb9 	bl	8007b14 <__malloc_lock>
 80073a2:	4a21      	ldr	r2, [pc, #132]	; (8007428 <_malloc_r+0xac>)
 80073a4:	6814      	ldr	r4, [r2, #0]
 80073a6:	4621      	mov	r1, r4
 80073a8:	b991      	cbnz	r1, 80073d0 <_malloc_r+0x54>
 80073aa:	4c20      	ldr	r4, [pc, #128]	; (800742c <_malloc_r+0xb0>)
 80073ac:	6823      	ldr	r3, [r4, #0]
 80073ae:	b91b      	cbnz	r3, 80073b8 <_malloc_r+0x3c>
 80073b0:	4630      	mov	r0, r6
 80073b2:	f000 fb05 	bl	80079c0 <_sbrk_r>
 80073b6:	6020      	str	r0, [r4, #0]
 80073b8:	4629      	mov	r1, r5
 80073ba:	4630      	mov	r0, r6
 80073bc:	f000 fb00 	bl	80079c0 <_sbrk_r>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d124      	bne.n	800740e <_malloc_r+0x92>
 80073c4:	230c      	movs	r3, #12
 80073c6:	6033      	str	r3, [r6, #0]
 80073c8:	4630      	mov	r0, r6
 80073ca:	f000 fba4 	bl	8007b16 <__malloc_unlock>
 80073ce:	e7e4      	b.n	800739a <_malloc_r+0x1e>
 80073d0:	680b      	ldr	r3, [r1, #0]
 80073d2:	1b5b      	subs	r3, r3, r5
 80073d4:	d418      	bmi.n	8007408 <_malloc_r+0x8c>
 80073d6:	2b0b      	cmp	r3, #11
 80073d8:	d90f      	bls.n	80073fa <_malloc_r+0x7e>
 80073da:	600b      	str	r3, [r1, #0]
 80073dc:	50cd      	str	r5, [r1, r3]
 80073de:	18cc      	adds	r4, r1, r3
 80073e0:	4630      	mov	r0, r6
 80073e2:	f000 fb98 	bl	8007b16 <__malloc_unlock>
 80073e6:	f104 000b 	add.w	r0, r4, #11
 80073ea:	1d23      	adds	r3, r4, #4
 80073ec:	f020 0007 	bic.w	r0, r0, #7
 80073f0:	1ac3      	subs	r3, r0, r3
 80073f2:	d0d3      	beq.n	800739c <_malloc_r+0x20>
 80073f4:	425a      	negs	r2, r3
 80073f6:	50e2      	str	r2, [r4, r3]
 80073f8:	e7d0      	b.n	800739c <_malloc_r+0x20>
 80073fa:	428c      	cmp	r4, r1
 80073fc:	684b      	ldr	r3, [r1, #4]
 80073fe:	bf16      	itet	ne
 8007400:	6063      	strne	r3, [r4, #4]
 8007402:	6013      	streq	r3, [r2, #0]
 8007404:	460c      	movne	r4, r1
 8007406:	e7eb      	b.n	80073e0 <_malloc_r+0x64>
 8007408:	460c      	mov	r4, r1
 800740a:	6849      	ldr	r1, [r1, #4]
 800740c:	e7cc      	b.n	80073a8 <_malloc_r+0x2c>
 800740e:	1cc4      	adds	r4, r0, #3
 8007410:	f024 0403 	bic.w	r4, r4, #3
 8007414:	42a0      	cmp	r0, r4
 8007416:	d005      	beq.n	8007424 <_malloc_r+0xa8>
 8007418:	1a21      	subs	r1, r4, r0
 800741a:	4630      	mov	r0, r6
 800741c:	f000 fad0 	bl	80079c0 <_sbrk_r>
 8007420:	3001      	adds	r0, #1
 8007422:	d0cf      	beq.n	80073c4 <_malloc_r+0x48>
 8007424:	6025      	str	r5, [r4, #0]
 8007426:	e7db      	b.n	80073e0 <_malloc_r+0x64>
 8007428:	200000a0 	.word	0x200000a0
 800742c:	200000a4 	.word	0x200000a4

08007430 <__sfputc_r>:
 8007430:	6893      	ldr	r3, [r2, #8]
 8007432:	3b01      	subs	r3, #1
 8007434:	2b00      	cmp	r3, #0
 8007436:	b410      	push	{r4}
 8007438:	6093      	str	r3, [r2, #8]
 800743a:	da08      	bge.n	800744e <__sfputc_r+0x1e>
 800743c:	6994      	ldr	r4, [r2, #24]
 800743e:	42a3      	cmp	r3, r4
 8007440:	db01      	blt.n	8007446 <__sfputc_r+0x16>
 8007442:	290a      	cmp	r1, #10
 8007444:	d103      	bne.n	800744e <__sfputc_r+0x1e>
 8007446:	f85d 4b04 	ldr.w	r4, [sp], #4
 800744a:	f7ff bcab 	b.w	8006da4 <__swbuf_r>
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	1c58      	adds	r0, r3, #1
 8007452:	6010      	str	r0, [r2, #0]
 8007454:	7019      	strb	r1, [r3, #0]
 8007456:	4608      	mov	r0, r1
 8007458:	f85d 4b04 	ldr.w	r4, [sp], #4
 800745c:	4770      	bx	lr

0800745e <__sfputs_r>:
 800745e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007460:	4606      	mov	r6, r0
 8007462:	460f      	mov	r7, r1
 8007464:	4614      	mov	r4, r2
 8007466:	18d5      	adds	r5, r2, r3
 8007468:	42ac      	cmp	r4, r5
 800746a:	d101      	bne.n	8007470 <__sfputs_r+0x12>
 800746c:	2000      	movs	r0, #0
 800746e:	e007      	b.n	8007480 <__sfputs_r+0x22>
 8007470:	463a      	mov	r2, r7
 8007472:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007476:	4630      	mov	r0, r6
 8007478:	f7ff ffda 	bl	8007430 <__sfputc_r>
 800747c:	1c43      	adds	r3, r0, #1
 800747e:	d1f3      	bne.n	8007468 <__sfputs_r+0xa>
 8007480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007484 <_vfiprintf_r>:
 8007484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007488:	460c      	mov	r4, r1
 800748a:	b09d      	sub	sp, #116	; 0x74
 800748c:	4617      	mov	r7, r2
 800748e:	461d      	mov	r5, r3
 8007490:	4606      	mov	r6, r0
 8007492:	b118      	cbz	r0, 800749c <_vfiprintf_r+0x18>
 8007494:	6983      	ldr	r3, [r0, #24]
 8007496:	b90b      	cbnz	r3, 800749c <_vfiprintf_r+0x18>
 8007498:	f7ff fe34 	bl	8007104 <__sinit>
 800749c:	4b7c      	ldr	r3, [pc, #496]	; (8007690 <_vfiprintf_r+0x20c>)
 800749e:	429c      	cmp	r4, r3
 80074a0:	d158      	bne.n	8007554 <_vfiprintf_r+0xd0>
 80074a2:	6874      	ldr	r4, [r6, #4]
 80074a4:	89a3      	ldrh	r3, [r4, #12]
 80074a6:	0718      	lsls	r0, r3, #28
 80074a8:	d55e      	bpl.n	8007568 <_vfiprintf_r+0xe4>
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d05b      	beq.n	8007568 <_vfiprintf_r+0xe4>
 80074b0:	2300      	movs	r3, #0
 80074b2:	9309      	str	r3, [sp, #36]	; 0x24
 80074b4:	2320      	movs	r3, #32
 80074b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074ba:	2330      	movs	r3, #48	; 0x30
 80074bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074c0:	9503      	str	r5, [sp, #12]
 80074c2:	f04f 0b01 	mov.w	fp, #1
 80074c6:	46b8      	mov	r8, r7
 80074c8:	4645      	mov	r5, r8
 80074ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80074ce:	b10b      	cbz	r3, 80074d4 <_vfiprintf_r+0x50>
 80074d0:	2b25      	cmp	r3, #37	; 0x25
 80074d2:	d154      	bne.n	800757e <_vfiprintf_r+0xfa>
 80074d4:	ebb8 0a07 	subs.w	sl, r8, r7
 80074d8:	d00b      	beq.n	80074f2 <_vfiprintf_r+0x6e>
 80074da:	4653      	mov	r3, sl
 80074dc:	463a      	mov	r2, r7
 80074de:	4621      	mov	r1, r4
 80074e0:	4630      	mov	r0, r6
 80074e2:	f7ff ffbc 	bl	800745e <__sfputs_r>
 80074e6:	3001      	adds	r0, #1
 80074e8:	f000 80c2 	beq.w	8007670 <_vfiprintf_r+0x1ec>
 80074ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ee:	4453      	add	r3, sl
 80074f0:	9309      	str	r3, [sp, #36]	; 0x24
 80074f2:	f898 3000 	ldrb.w	r3, [r8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f000 80ba 	beq.w	8007670 <_vfiprintf_r+0x1ec>
 80074fc:	2300      	movs	r3, #0
 80074fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007502:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007506:	9304      	str	r3, [sp, #16]
 8007508:	9307      	str	r3, [sp, #28]
 800750a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800750e:	931a      	str	r3, [sp, #104]	; 0x68
 8007510:	46a8      	mov	r8, r5
 8007512:	2205      	movs	r2, #5
 8007514:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007518:	485e      	ldr	r0, [pc, #376]	; (8007694 <_vfiprintf_r+0x210>)
 800751a:	f7f8 fe81 	bl	8000220 <memchr>
 800751e:	9b04      	ldr	r3, [sp, #16]
 8007520:	bb78      	cbnz	r0, 8007582 <_vfiprintf_r+0xfe>
 8007522:	06d9      	lsls	r1, r3, #27
 8007524:	bf44      	itt	mi
 8007526:	2220      	movmi	r2, #32
 8007528:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800752c:	071a      	lsls	r2, r3, #28
 800752e:	bf44      	itt	mi
 8007530:	222b      	movmi	r2, #43	; 0x2b
 8007532:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007536:	782a      	ldrb	r2, [r5, #0]
 8007538:	2a2a      	cmp	r2, #42	; 0x2a
 800753a:	d02a      	beq.n	8007592 <_vfiprintf_r+0x10e>
 800753c:	9a07      	ldr	r2, [sp, #28]
 800753e:	46a8      	mov	r8, r5
 8007540:	2000      	movs	r0, #0
 8007542:	250a      	movs	r5, #10
 8007544:	4641      	mov	r1, r8
 8007546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800754a:	3b30      	subs	r3, #48	; 0x30
 800754c:	2b09      	cmp	r3, #9
 800754e:	d969      	bls.n	8007624 <_vfiprintf_r+0x1a0>
 8007550:	b360      	cbz	r0, 80075ac <_vfiprintf_r+0x128>
 8007552:	e024      	b.n	800759e <_vfiprintf_r+0x11a>
 8007554:	4b50      	ldr	r3, [pc, #320]	; (8007698 <_vfiprintf_r+0x214>)
 8007556:	429c      	cmp	r4, r3
 8007558:	d101      	bne.n	800755e <_vfiprintf_r+0xda>
 800755a:	68b4      	ldr	r4, [r6, #8]
 800755c:	e7a2      	b.n	80074a4 <_vfiprintf_r+0x20>
 800755e:	4b4f      	ldr	r3, [pc, #316]	; (800769c <_vfiprintf_r+0x218>)
 8007560:	429c      	cmp	r4, r3
 8007562:	bf08      	it	eq
 8007564:	68f4      	ldreq	r4, [r6, #12]
 8007566:	e79d      	b.n	80074a4 <_vfiprintf_r+0x20>
 8007568:	4621      	mov	r1, r4
 800756a:	4630      	mov	r0, r6
 800756c:	f7ff fc6c 	bl	8006e48 <__swsetup_r>
 8007570:	2800      	cmp	r0, #0
 8007572:	d09d      	beq.n	80074b0 <_vfiprintf_r+0x2c>
 8007574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007578:	b01d      	add	sp, #116	; 0x74
 800757a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800757e:	46a8      	mov	r8, r5
 8007580:	e7a2      	b.n	80074c8 <_vfiprintf_r+0x44>
 8007582:	4a44      	ldr	r2, [pc, #272]	; (8007694 <_vfiprintf_r+0x210>)
 8007584:	1a80      	subs	r0, r0, r2
 8007586:	fa0b f000 	lsl.w	r0, fp, r0
 800758a:	4318      	orrs	r0, r3
 800758c:	9004      	str	r0, [sp, #16]
 800758e:	4645      	mov	r5, r8
 8007590:	e7be      	b.n	8007510 <_vfiprintf_r+0x8c>
 8007592:	9a03      	ldr	r2, [sp, #12]
 8007594:	1d11      	adds	r1, r2, #4
 8007596:	6812      	ldr	r2, [r2, #0]
 8007598:	9103      	str	r1, [sp, #12]
 800759a:	2a00      	cmp	r2, #0
 800759c:	db01      	blt.n	80075a2 <_vfiprintf_r+0x11e>
 800759e:	9207      	str	r2, [sp, #28]
 80075a0:	e004      	b.n	80075ac <_vfiprintf_r+0x128>
 80075a2:	4252      	negs	r2, r2
 80075a4:	f043 0302 	orr.w	r3, r3, #2
 80075a8:	9207      	str	r2, [sp, #28]
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	f898 3000 	ldrb.w	r3, [r8]
 80075b0:	2b2e      	cmp	r3, #46	; 0x2e
 80075b2:	d10e      	bne.n	80075d2 <_vfiprintf_r+0x14e>
 80075b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80075b8:	2b2a      	cmp	r3, #42	; 0x2a
 80075ba:	d138      	bne.n	800762e <_vfiprintf_r+0x1aa>
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	1d1a      	adds	r2, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	9203      	str	r2, [sp, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bfb8      	it	lt
 80075c8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075cc:	f108 0802 	add.w	r8, r8, #2
 80075d0:	9305      	str	r3, [sp, #20]
 80075d2:	4d33      	ldr	r5, [pc, #204]	; (80076a0 <_vfiprintf_r+0x21c>)
 80075d4:	f898 1000 	ldrb.w	r1, [r8]
 80075d8:	2203      	movs	r2, #3
 80075da:	4628      	mov	r0, r5
 80075dc:	f7f8 fe20 	bl	8000220 <memchr>
 80075e0:	b140      	cbz	r0, 80075f4 <_vfiprintf_r+0x170>
 80075e2:	2340      	movs	r3, #64	; 0x40
 80075e4:	1b40      	subs	r0, r0, r5
 80075e6:	fa03 f000 	lsl.w	r0, r3, r0
 80075ea:	9b04      	ldr	r3, [sp, #16]
 80075ec:	4303      	orrs	r3, r0
 80075ee:	f108 0801 	add.w	r8, r8, #1
 80075f2:	9304      	str	r3, [sp, #16]
 80075f4:	f898 1000 	ldrb.w	r1, [r8]
 80075f8:	482a      	ldr	r0, [pc, #168]	; (80076a4 <_vfiprintf_r+0x220>)
 80075fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075fe:	2206      	movs	r2, #6
 8007600:	f108 0701 	add.w	r7, r8, #1
 8007604:	f7f8 fe0c 	bl	8000220 <memchr>
 8007608:	2800      	cmp	r0, #0
 800760a:	d037      	beq.n	800767c <_vfiprintf_r+0x1f8>
 800760c:	4b26      	ldr	r3, [pc, #152]	; (80076a8 <_vfiprintf_r+0x224>)
 800760e:	bb1b      	cbnz	r3, 8007658 <_vfiprintf_r+0x1d4>
 8007610:	9b03      	ldr	r3, [sp, #12]
 8007612:	3307      	adds	r3, #7
 8007614:	f023 0307 	bic.w	r3, r3, #7
 8007618:	3308      	adds	r3, #8
 800761a:	9303      	str	r3, [sp, #12]
 800761c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800761e:	444b      	add	r3, r9
 8007620:	9309      	str	r3, [sp, #36]	; 0x24
 8007622:	e750      	b.n	80074c6 <_vfiprintf_r+0x42>
 8007624:	fb05 3202 	mla	r2, r5, r2, r3
 8007628:	2001      	movs	r0, #1
 800762a:	4688      	mov	r8, r1
 800762c:	e78a      	b.n	8007544 <_vfiprintf_r+0xc0>
 800762e:	2300      	movs	r3, #0
 8007630:	f108 0801 	add.w	r8, r8, #1
 8007634:	9305      	str	r3, [sp, #20]
 8007636:	4619      	mov	r1, r3
 8007638:	250a      	movs	r5, #10
 800763a:	4640      	mov	r0, r8
 800763c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007640:	3a30      	subs	r2, #48	; 0x30
 8007642:	2a09      	cmp	r2, #9
 8007644:	d903      	bls.n	800764e <_vfiprintf_r+0x1ca>
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0c3      	beq.n	80075d2 <_vfiprintf_r+0x14e>
 800764a:	9105      	str	r1, [sp, #20]
 800764c:	e7c1      	b.n	80075d2 <_vfiprintf_r+0x14e>
 800764e:	fb05 2101 	mla	r1, r5, r1, r2
 8007652:	2301      	movs	r3, #1
 8007654:	4680      	mov	r8, r0
 8007656:	e7f0      	b.n	800763a <_vfiprintf_r+0x1b6>
 8007658:	ab03      	add	r3, sp, #12
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4622      	mov	r2, r4
 800765e:	4b13      	ldr	r3, [pc, #76]	; (80076ac <_vfiprintf_r+0x228>)
 8007660:	a904      	add	r1, sp, #16
 8007662:	4630      	mov	r0, r6
 8007664:	f3af 8000 	nop.w
 8007668:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800766c:	4681      	mov	r9, r0
 800766e:	d1d5      	bne.n	800761c <_vfiprintf_r+0x198>
 8007670:	89a3      	ldrh	r3, [r4, #12]
 8007672:	065b      	lsls	r3, r3, #25
 8007674:	f53f af7e 	bmi.w	8007574 <_vfiprintf_r+0xf0>
 8007678:	9809      	ldr	r0, [sp, #36]	; 0x24
 800767a:	e77d      	b.n	8007578 <_vfiprintf_r+0xf4>
 800767c:	ab03      	add	r3, sp, #12
 800767e:	9300      	str	r3, [sp, #0]
 8007680:	4622      	mov	r2, r4
 8007682:	4b0a      	ldr	r3, [pc, #40]	; (80076ac <_vfiprintf_r+0x228>)
 8007684:	a904      	add	r1, sp, #16
 8007686:	4630      	mov	r0, r6
 8007688:	f000 f888 	bl	800779c <_printf_i>
 800768c:	e7ec      	b.n	8007668 <_vfiprintf_r+0x1e4>
 800768e:	bf00      	nop
 8007690:	08007e0c 	.word	0x08007e0c
 8007694:	08007e4c 	.word	0x08007e4c
 8007698:	08007e2c 	.word	0x08007e2c
 800769c:	08007dec 	.word	0x08007dec
 80076a0:	08007e52 	.word	0x08007e52
 80076a4:	08007e56 	.word	0x08007e56
 80076a8:	00000000 	.word	0x00000000
 80076ac:	0800745f 	.word	0x0800745f

080076b0 <_printf_common>:
 80076b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076b4:	4691      	mov	r9, r2
 80076b6:	461f      	mov	r7, r3
 80076b8:	688a      	ldr	r2, [r1, #8]
 80076ba:	690b      	ldr	r3, [r1, #16]
 80076bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076c0:	4293      	cmp	r3, r2
 80076c2:	bfb8      	it	lt
 80076c4:	4613      	movlt	r3, r2
 80076c6:	f8c9 3000 	str.w	r3, [r9]
 80076ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076ce:	4606      	mov	r6, r0
 80076d0:	460c      	mov	r4, r1
 80076d2:	b112      	cbz	r2, 80076da <_printf_common+0x2a>
 80076d4:	3301      	adds	r3, #1
 80076d6:	f8c9 3000 	str.w	r3, [r9]
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	0699      	lsls	r1, r3, #26
 80076de:	bf42      	ittt	mi
 80076e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80076e4:	3302      	addmi	r3, #2
 80076e6:	f8c9 3000 	strmi.w	r3, [r9]
 80076ea:	6825      	ldr	r5, [r4, #0]
 80076ec:	f015 0506 	ands.w	r5, r5, #6
 80076f0:	d107      	bne.n	8007702 <_printf_common+0x52>
 80076f2:	f104 0a19 	add.w	sl, r4, #25
 80076f6:	68e3      	ldr	r3, [r4, #12]
 80076f8:	f8d9 2000 	ldr.w	r2, [r9]
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	42ab      	cmp	r3, r5
 8007700:	dc28      	bgt.n	8007754 <_printf_common+0xa4>
 8007702:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007706:	6822      	ldr	r2, [r4, #0]
 8007708:	3300      	adds	r3, #0
 800770a:	bf18      	it	ne
 800770c:	2301      	movne	r3, #1
 800770e:	0692      	lsls	r2, r2, #26
 8007710:	d42d      	bmi.n	800776e <_printf_common+0xbe>
 8007712:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007716:	4639      	mov	r1, r7
 8007718:	4630      	mov	r0, r6
 800771a:	47c0      	blx	r8
 800771c:	3001      	adds	r0, #1
 800771e:	d020      	beq.n	8007762 <_printf_common+0xb2>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	68e5      	ldr	r5, [r4, #12]
 8007724:	f8d9 2000 	ldr.w	r2, [r9]
 8007728:	f003 0306 	and.w	r3, r3, #6
 800772c:	2b04      	cmp	r3, #4
 800772e:	bf08      	it	eq
 8007730:	1aad      	subeq	r5, r5, r2
 8007732:	68a3      	ldr	r3, [r4, #8]
 8007734:	6922      	ldr	r2, [r4, #16]
 8007736:	bf0c      	ite	eq
 8007738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800773c:	2500      	movne	r5, #0
 800773e:	4293      	cmp	r3, r2
 8007740:	bfc4      	itt	gt
 8007742:	1a9b      	subgt	r3, r3, r2
 8007744:	18ed      	addgt	r5, r5, r3
 8007746:	f04f 0900 	mov.w	r9, #0
 800774a:	341a      	adds	r4, #26
 800774c:	454d      	cmp	r5, r9
 800774e:	d11a      	bne.n	8007786 <_printf_common+0xd6>
 8007750:	2000      	movs	r0, #0
 8007752:	e008      	b.n	8007766 <_printf_common+0xb6>
 8007754:	2301      	movs	r3, #1
 8007756:	4652      	mov	r2, sl
 8007758:	4639      	mov	r1, r7
 800775a:	4630      	mov	r0, r6
 800775c:	47c0      	blx	r8
 800775e:	3001      	adds	r0, #1
 8007760:	d103      	bne.n	800776a <_printf_common+0xba>
 8007762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800776a:	3501      	adds	r5, #1
 800776c:	e7c3      	b.n	80076f6 <_printf_common+0x46>
 800776e:	18e1      	adds	r1, r4, r3
 8007770:	1c5a      	adds	r2, r3, #1
 8007772:	2030      	movs	r0, #48	; 0x30
 8007774:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007778:	4422      	add	r2, r4
 800777a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800777e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007782:	3302      	adds	r3, #2
 8007784:	e7c5      	b.n	8007712 <_printf_common+0x62>
 8007786:	2301      	movs	r3, #1
 8007788:	4622      	mov	r2, r4
 800778a:	4639      	mov	r1, r7
 800778c:	4630      	mov	r0, r6
 800778e:	47c0      	blx	r8
 8007790:	3001      	adds	r0, #1
 8007792:	d0e6      	beq.n	8007762 <_printf_common+0xb2>
 8007794:	f109 0901 	add.w	r9, r9, #1
 8007798:	e7d8      	b.n	800774c <_printf_common+0x9c>
	...

0800779c <_printf_i>:
 800779c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80077a4:	460c      	mov	r4, r1
 80077a6:	7e09      	ldrb	r1, [r1, #24]
 80077a8:	b085      	sub	sp, #20
 80077aa:	296e      	cmp	r1, #110	; 0x6e
 80077ac:	4617      	mov	r7, r2
 80077ae:	4606      	mov	r6, r0
 80077b0:	4698      	mov	r8, r3
 80077b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80077b4:	f000 80b3 	beq.w	800791e <_printf_i+0x182>
 80077b8:	d822      	bhi.n	8007800 <_printf_i+0x64>
 80077ba:	2963      	cmp	r1, #99	; 0x63
 80077bc:	d036      	beq.n	800782c <_printf_i+0x90>
 80077be:	d80a      	bhi.n	80077d6 <_printf_i+0x3a>
 80077c0:	2900      	cmp	r1, #0
 80077c2:	f000 80b9 	beq.w	8007938 <_printf_i+0x19c>
 80077c6:	2958      	cmp	r1, #88	; 0x58
 80077c8:	f000 8083 	beq.w	80078d2 <_printf_i+0x136>
 80077cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80077d4:	e032      	b.n	800783c <_printf_i+0xa0>
 80077d6:	2964      	cmp	r1, #100	; 0x64
 80077d8:	d001      	beq.n	80077de <_printf_i+0x42>
 80077da:	2969      	cmp	r1, #105	; 0x69
 80077dc:	d1f6      	bne.n	80077cc <_printf_i+0x30>
 80077de:	6820      	ldr	r0, [r4, #0]
 80077e0:	6813      	ldr	r3, [r2, #0]
 80077e2:	0605      	lsls	r5, r0, #24
 80077e4:	f103 0104 	add.w	r1, r3, #4
 80077e8:	d52a      	bpl.n	8007840 <_printf_i+0xa4>
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6011      	str	r1, [r2, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	da03      	bge.n	80077fa <_printf_i+0x5e>
 80077f2:	222d      	movs	r2, #45	; 0x2d
 80077f4:	425b      	negs	r3, r3
 80077f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80077fa:	486f      	ldr	r0, [pc, #444]	; (80079b8 <_printf_i+0x21c>)
 80077fc:	220a      	movs	r2, #10
 80077fe:	e039      	b.n	8007874 <_printf_i+0xd8>
 8007800:	2973      	cmp	r1, #115	; 0x73
 8007802:	f000 809d 	beq.w	8007940 <_printf_i+0x1a4>
 8007806:	d808      	bhi.n	800781a <_printf_i+0x7e>
 8007808:	296f      	cmp	r1, #111	; 0x6f
 800780a:	d020      	beq.n	800784e <_printf_i+0xb2>
 800780c:	2970      	cmp	r1, #112	; 0x70
 800780e:	d1dd      	bne.n	80077cc <_printf_i+0x30>
 8007810:	6823      	ldr	r3, [r4, #0]
 8007812:	f043 0320 	orr.w	r3, r3, #32
 8007816:	6023      	str	r3, [r4, #0]
 8007818:	e003      	b.n	8007822 <_printf_i+0x86>
 800781a:	2975      	cmp	r1, #117	; 0x75
 800781c:	d017      	beq.n	800784e <_printf_i+0xb2>
 800781e:	2978      	cmp	r1, #120	; 0x78
 8007820:	d1d4      	bne.n	80077cc <_printf_i+0x30>
 8007822:	2378      	movs	r3, #120	; 0x78
 8007824:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007828:	4864      	ldr	r0, [pc, #400]	; (80079bc <_printf_i+0x220>)
 800782a:	e055      	b.n	80078d8 <_printf_i+0x13c>
 800782c:	6813      	ldr	r3, [r2, #0]
 800782e:	1d19      	adds	r1, r3, #4
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	6011      	str	r1, [r2, #0]
 8007834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800783c:	2301      	movs	r3, #1
 800783e:	e08c      	b.n	800795a <_printf_i+0x1be>
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6011      	str	r1, [r2, #0]
 8007844:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007848:	bf18      	it	ne
 800784a:	b21b      	sxthne	r3, r3
 800784c:	e7cf      	b.n	80077ee <_printf_i+0x52>
 800784e:	6813      	ldr	r3, [r2, #0]
 8007850:	6825      	ldr	r5, [r4, #0]
 8007852:	1d18      	adds	r0, r3, #4
 8007854:	6010      	str	r0, [r2, #0]
 8007856:	0628      	lsls	r0, r5, #24
 8007858:	d501      	bpl.n	800785e <_printf_i+0xc2>
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	e002      	b.n	8007864 <_printf_i+0xc8>
 800785e:	0668      	lsls	r0, r5, #25
 8007860:	d5fb      	bpl.n	800785a <_printf_i+0xbe>
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	4854      	ldr	r0, [pc, #336]	; (80079b8 <_printf_i+0x21c>)
 8007866:	296f      	cmp	r1, #111	; 0x6f
 8007868:	bf14      	ite	ne
 800786a:	220a      	movne	r2, #10
 800786c:	2208      	moveq	r2, #8
 800786e:	2100      	movs	r1, #0
 8007870:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007874:	6865      	ldr	r5, [r4, #4]
 8007876:	60a5      	str	r5, [r4, #8]
 8007878:	2d00      	cmp	r5, #0
 800787a:	f2c0 8095 	blt.w	80079a8 <_printf_i+0x20c>
 800787e:	6821      	ldr	r1, [r4, #0]
 8007880:	f021 0104 	bic.w	r1, r1, #4
 8007884:	6021      	str	r1, [r4, #0]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d13d      	bne.n	8007906 <_printf_i+0x16a>
 800788a:	2d00      	cmp	r5, #0
 800788c:	f040 808e 	bne.w	80079ac <_printf_i+0x210>
 8007890:	4665      	mov	r5, ip
 8007892:	2a08      	cmp	r2, #8
 8007894:	d10b      	bne.n	80078ae <_printf_i+0x112>
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	07db      	lsls	r3, r3, #31
 800789a:	d508      	bpl.n	80078ae <_printf_i+0x112>
 800789c:	6923      	ldr	r3, [r4, #16]
 800789e:	6862      	ldr	r2, [r4, #4]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	bfde      	ittt	le
 80078a4:	2330      	movle	r3, #48	; 0x30
 80078a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80078ae:	ebac 0305 	sub.w	r3, ip, r5
 80078b2:	6123      	str	r3, [r4, #16]
 80078b4:	f8cd 8000 	str.w	r8, [sp]
 80078b8:	463b      	mov	r3, r7
 80078ba:	aa03      	add	r2, sp, #12
 80078bc:	4621      	mov	r1, r4
 80078be:	4630      	mov	r0, r6
 80078c0:	f7ff fef6 	bl	80076b0 <_printf_common>
 80078c4:	3001      	adds	r0, #1
 80078c6:	d14d      	bne.n	8007964 <_printf_i+0x1c8>
 80078c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078cc:	b005      	add	sp, #20
 80078ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078d2:	4839      	ldr	r0, [pc, #228]	; (80079b8 <_printf_i+0x21c>)
 80078d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80078d8:	6813      	ldr	r3, [r2, #0]
 80078da:	6821      	ldr	r1, [r4, #0]
 80078dc:	1d1d      	adds	r5, r3, #4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6015      	str	r5, [r2, #0]
 80078e2:	060a      	lsls	r2, r1, #24
 80078e4:	d50b      	bpl.n	80078fe <_printf_i+0x162>
 80078e6:	07ca      	lsls	r2, r1, #31
 80078e8:	bf44      	itt	mi
 80078ea:	f041 0120 	orrmi.w	r1, r1, #32
 80078ee:	6021      	strmi	r1, [r4, #0]
 80078f0:	b91b      	cbnz	r3, 80078fa <_printf_i+0x15e>
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	f022 0220 	bic.w	r2, r2, #32
 80078f8:	6022      	str	r2, [r4, #0]
 80078fa:	2210      	movs	r2, #16
 80078fc:	e7b7      	b.n	800786e <_printf_i+0xd2>
 80078fe:	064d      	lsls	r5, r1, #25
 8007900:	bf48      	it	mi
 8007902:	b29b      	uxthmi	r3, r3
 8007904:	e7ef      	b.n	80078e6 <_printf_i+0x14a>
 8007906:	4665      	mov	r5, ip
 8007908:	fbb3 f1f2 	udiv	r1, r3, r2
 800790c:	fb02 3311 	mls	r3, r2, r1, r3
 8007910:	5cc3      	ldrb	r3, [r0, r3]
 8007912:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007916:	460b      	mov	r3, r1
 8007918:	2900      	cmp	r1, #0
 800791a:	d1f5      	bne.n	8007908 <_printf_i+0x16c>
 800791c:	e7b9      	b.n	8007892 <_printf_i+0xf6>
 800791e:	6813      	ldr	r3, [r2, #0]
 8007920:	6825      	ldr	r5, [r4, #0]
 8007922:	6961      	ldr	r1, [r4, #20]
 8007924:	1d18      	adds	r0, r3, #4
 8007926:	6010      	str	r0, [r2, #0]
 8007928:	0628      	lsls	r0, r5, #24
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	d501      	bpl.n	8007932 <_printf_i+0x196>
 800792e:	6019      	str	r1, [r3, #0]
 8007930:	e002      	b.n	8007938 <_printf_i+0x19c>
 8007932:	066a      	lsls	r2, r5, #25
 8007934:	d5fb      	bpl.n	800792e <_printf_i+0x192>
 8007936:	8019      	strh	r1, [r3, #0]
 8007938:	2300      	movs	r3, #0
 800793a:	6123      	str	r3, [r4, #16]
 800793c:	4665      	mov	r5, ip
 800793e:	e7b9      	b.n	80078b4 <_printf_i+0x118>
 8007940:	6813      	ldr	r3, [r2, #0]
 8007942:	1d19      	adds	r1, r3, #4
 8007944:	6011      	str	r1, [r2, #0]
 8007946:	681d      	ldr	r5, [r3, #0]
 8007948:	6862      	ldr	r2, [r4, #4]
 800794a:	2100      	movs	r1, #0
 800794c:	4628      	mov	r0, r5
 800794e:	f7f8 fc67 	bl	8000220 <memchr>
 8007952:	b108      	cbz	r0, 8007958 <_printf_i+0x1bc>
 8007954:	1b40      	subs	r0, r0, r5
 8007956:	6060      	str	r0, [r4, #4]
 8007958:	6863      	ldr	r3, [r4, #4]
 800795a:	6123      	str	r3, [r4, #16]
 800795c:	2300      	movs	r3, #0
 800795e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007962:	e7a7      	b.n	80078b4 <_printf_i+0x118>
 8007964:	6923      	ldr	r3, [r4, #16]
 8007966:	462a      	mov	r2, r5
 8007968:	4639      	mov	r1, r7
 800796a:	4630      	mov	r0, r6
 800796c:	47c0      	blx	r8
 800796e:	3001      	adds	r0, #1
 8007970:	d0aa      	beq.n	80078c8 <_printf_i+0x12c>
 8007972:	6823      	ldr	r3, [r4, #0]
 8007974:	079b      	lsls	r3, r3, #30
 8007976:	d413      	bmi.n	80079a0 <_printf_i+0x204>
 8007978:	68e0      	ldr	r0, [r4, #12]
 800797a:	9b03      	ldr	r3, [sp, #12]
 800797c:	4298      	cmp	r0, r3
 800797e:	bfb8      	it	lt
 8007980:	4618      	movlt	r0, r3
 8007982:	e7a3      	b.n	80078cc <_printf_i+0x130>
 8007984:	2301      	movs	r3, #1
 8007986:	464a      	mov	r2, r9
 8007988:	4639      	mov	r1, r7
 800798a:	4630      	mov	r0, r6
 800798c:	47c0      	blx	r8
 800798e:	3001      	adds	r0, #1
 8007990:	d09a      	beq.n	80078c8 <_printf_i+0x12c>
 8007992:	3501      	adds	r5, #1
 8007994:	68e3      	ldr	r3, [r4, #12]
 8007996:	9a03      	ldr	r2, [sp, #12]
 8007998:	1a9b      	subs	r3, r3, r2
 800799a:	42ab      	cmp	r3, r5
 800799c:	dcf2      	bgt.n	8007984 <_printf_i+0x1e8>
 800799e:	e7eb      	b.n	8007978 <_printf_i+0x1dc>
 80079a0:	2500      	movs	r5, #0
 80079a2:	f104 0919 	add.w	r9, r4, #25
 80079a6:	e7f5      	b.n	8007994 <_printf_i+0x1f8>
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d1ac      	bne.n	8007906 <_printf_i+0x16a>
 80079ac:	7803      	ldrb	r3, [r0, #0]
 80079ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079b6:	e76c      	b.n	8007892 <_printf_i+0xf6>
 80079b8:	08007e5d 	.word	0x08007e5d
 80079bc:	08007e6e 	.word	0x08007e6e

080079c0 <_sbrk_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4c06      	ldr	r4, [pc, #24]	; (80079dc <_sbrk_r+0x1c>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4605      	mov	r5, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	6023      	str	r3, [r4, #0]
 80079cc:	f7f9 fb44 	bl	8001058 <_sbrk>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_sbrk_r+0x1a>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	b103      	cbz	r3, 80079da <_sbrk_r+0x1a>
 80079d8:	602b      	str	r3, [r5, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	200003d0 	.word	0x200003d0

080079e0 <__sread>:
 80079e0:	b510      	push	{r4, lr}
 80079e2:	460c      	mov	r4, r1
 80079e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e8:	f000 f896 	bl	8007b18 <_read_r>
 80079ec:	2800      	cmp	r0, #0
 80079ee:	bfab      	itete	ge
 80079f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079f2:	89a3      	ldrhlt	r3, [r4, #12]
 80079f4:	181b      	addge	r3, r3, r0
 80079f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079fa:	bfac      	ite	ge
 80079fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80079fe:	81a3      	strhlt	r3, [r4, #12]
 8007a00:	bd10      	pop	{r4, pc}

08007a02 <__swrite>:
 8007a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a06:	461f      	mov	r7, r3
 8007a08:	898b      	ldrh	r3, [r1, #12]
 8007a0a:	05db      	lsls	r3, r3, #23
 8007a0c:	4605      	mov	r5, r0
 8007a0e:	460c      	mov	r4, r1
 8007a10:	4616      	mov	r6, r2
 8007a12:	d505      	bpl.n	8007a20 <__swrite+0x1e>
 8007a14:	2302      	movs	r3, #2
 8007a16:	2200      	movs	r2, #0
 8007a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1c:	f000 f868 	bl	8007af0 <_lseek_r>
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a2a:	81a3      	strh	r3, [r4, #12]
 8007a2c:	4632      	mov	r2, r6
 8007a2e:	463b      	mov	r3, r7
 8007a30:	4628      	mov	r0, r5
 8007a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a36:	f000 b817 	b.w	8007a68 <_write_r>

08007a3a <__sseek>:
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	460c      	mov	r4, r1
 8007a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a42:	f000 f855 	bl	8007af0 <_lseek_r>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	bf15      	itete	ne
 8007a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a56:	81a3      	strheq	r3, [r4, #12]
 8007a58:	bf18      	it	ne
 8007a5a:	81a3      	strhne	r3, [r4, #12]
 8007a5c:	bd10      	pop	{r4, pc}

08007a5e <__sclose>:
 8007a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a62:	f000 b813 	b.w	8007a8c <_close_r>
	...

08007a68 <_write_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4c07      	ldr	r4, [pc, #28]	; (8007a88 <_write_r+0x20>)
 8007a6c:	4605      	mov	r5, r0
 8007a6e:	4608      	mov	r0, r1
 8007a70:	4611      	mov	r1, r2
 8007a72:	2200      	movs	r2, #0
 8007a74:	6022      	str	r2, [r4, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f7f8 ffcb 	bl	8000a12 <_write>
 8007a7c:	1c43      	adds	r3, r0, #1
 8007a7e:	d102      	bne.n	8007a86 <_write_r+0x1e>
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	b103      	cbz	r3, 8007a86 <_write_r+0x1e>
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	200003d0 	.word	0x200003d0

08007a8c <_close_r>:
 8007a8c:	b538      	push	{r3, r4, r5, lr}
 8007a8e:	4c06      	ldr	r4, [pc, #24]	; (8007aa8 <_close_r+0x1c>)
 8007a90:	2300      	movs	r3, #0
 8007a92:	4605      	mov	r5, r0
 8007a94:	4608      	mov	r0, r1
 8007a96:	6023      	str	r3, [r4, #0]
 8007a98:	f7f9 faa9 	bl	8000fee <_close>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_close_r+0x1a>
 8007aa0:	6823      	ldr	r3, [r4, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_close_r+0x1a>
 8007aa4:	602b      	str	r3, [r5, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	200003d0 	.word	0x200003d0

08007aac <_fstat_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4c07      	ldr	r4, [pc, #28]	; (8007acc <_fstat_r+0x20>)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	4611      	mov	r1, r2
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	f7f9 faa4 	bl	8001006 <_fstat>
 8007abe:	1c43      	adds	r3, r0, #1
 8007ac0:	d102      	bne.n	8007ac8 <_fstat_r+0x1c>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	b103      	cbz	r3, 8007ac8 <_fstat_r+0x1c>
 8007ac6:	602b      	str	r3, [r5, #0]
 8007ac8:	bd38      	pop	{r3, r4, r5, pc}
 8007aca:	bf00      	nop
 8007acc:	200003d0 	.word	0x200003d0

08007ad0 <_isatty_r>:
 8007ad0:	b538      	push	{r3, r4, r5, lr}
 8007ad2:	4c06      	ldr	r4, [pc, #24]	; (8007aec <_isatty_r+0x1c>)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	4608      	mov	r0, r1
 8007ada:	6023      	str	r3, [r4, #0]
 8007adc:	f7f9 faa3 	bl	8001026 <_isatty>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_isatty_r+0x1a>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_isatty_r+0x1a>
 8007ae8:	602b      	str	r3, [r5, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	200003d0 	.word	0x200003d0

08007af0 <_lseek_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4c07      	ldr	r4, [pc, #28]	; (8007b10 <_lseek_r+0x20>)
 8007af4:	4605      	mov	r5, r0
 8007af6:	4608      	mov	r0, r1
 8007af8:	4611      	mov	r1, r2
 8007afa:	2200      	movs	r2, #0
 8007afc:	6022      	str	r2, [r4, #0]
 8007afe:	461a      	mov	r2, r3
 8007b00:	f7f9 fa9c 	bl	800103c <_lseek>
 8007b04:	1c43      	adds	r3, r0, #1
 8007b06:	d102      	bne.n	8007b0e <_lseek_r+0x1e>
 8007b08:	6823      	ldr	r3, [r4, #0]
 8007b0a:	b103      	cbz	r3, 8007b0e <_lseek_r+0x1e>
 8007b0c:	602b      	str	r3, [r5, #0]
 8007b0e:	bd38      	pop	{r3, r4, r5, pc}
 8007b10:	200003d0 	.word	0x200003d0

08007b14 <__malloc_lock>:
 8007b14:	4770      	bx	lr

08007b16 <__malloc_unlock>:
 8007b16:	4770      	bx	lr

08007b18 <_read_r>:
 8007b18:	b538      	push	{r3, r4, r5, lr}
 8007b1a:	4c07      	ldr	r4, [pc, #28]	; (8007b38 <_read_r+0x20>)
 8007b1c:	4605      	mov	r5, r0
 8007b1e:	4608      	mov	r0, r1
 8007b20:	4611      	mov	r1, r2
 8007b22:	2200      	movs	r2, #0
 8007b24:	6022      	str	r2, [r4, #0]
 8007b26:	461a      	mov	r2, r3
 8007b28:	f7f9 fa44 	bl	8000fb4 <_read>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d102      	bne.n	8007b36 <_read_r+0x1e>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	b103      	cbz	r3, 8007b36 <_read_r+0x1e>
 8007b34:	602b      	str	r3, [r5, #0]
 8007b36:	bd38      	pop	{r3, r4, r5, pc}
 8007b38:	200003d0 	.word	0x200003d0

08007b3c <_init>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr

08007b48 <_fini>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr
